function $I(n, t) {
    for (var e = 0; e < t.length; e++) {
        const s = t[e];
        if (typeof s != 'string' && !Array.isArray(s)) {
            for (const r in s)
                if (r !== 'default' && !(r in n)) {
                    const o = Object.getOwnPropertyDescriptor(s, r);
                    o &&
                        Object.defineProperty(
                            n,
                            r,
                            o.get ? o : { enumerable: !0, get: () => s[r] }
                        );
                }
        }
    }
    return Object.freeze(
        Object.defineProperty(n, Symbol.toStringTag, { value: 'Module' })
    );
}
(function () {
    const t = document.createElement('link').relList;
    if (t && t.supports && t.supports('modulepreload')) return;
    for (const r of document.querySelectorAll('link[rel="modulepreload"]'))
        s(r);
    new MutationObserver((r) => {
        for (const o of r)
            if (o.type === 'childList')
                for (const i of o.addedNodes)
                    i.tagName === 'LINK' && i.rel === 'modulepreload' && s(i);
    }).observe(document, { childList: !0, subtree: !0 });
    function e(r) {
        const o = {};
        return (
            r.integrity && (o.integrity = r.integrity),
            r.referrerPolicy && (o.referrerPolicy = r.referrerPolicy),
            r.crossOrigin === 'use-credentials'
                ? (o.credentials = 'include')
                : r.crossOrigin === 'anonymous'
                ? (o.credentials = 'omit')
                : (o.credentials = 'same-origin'),
            o
        );
    }
    function s(r) {
        if (r.ep) return;
        r.ep = !0;
        const o = e(r);
        fetch(r.href, o);
    }
})();
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const NI = 1e-7,
    TI = 1e-4;
class _b {
    constructor(t, e) {
        (this.backend = t),
            (this.dataMover = e),
            (this.data = new WeakMap()),
            (this.dataIdsCount = 0);
    }
    get(t) {
        return (
            this.data.has(t) || this.dataMover.moveData(this.backend, t),
            this.data.get(t)
        );
    }
    set(t, e) {
        this.dataIdsCount++, this.data.set(t, e);
    }
    has(t) {
        return this.data.has(t);
    }
    delete(t) {
        return this.dataIdsCount--, this.data.delete(t);
    }
    numDataIds() {
        return this.dataIdsCount;
    }
}
class ap {
    refCount(t) {
        return fn('refCount');
    }
    incRef(t) {
        return fn('incRef');
    }
    timerAvailable() {
        return !0;
    }
    time(t) {
        return fn('time');
    }
    read(t) {
        return fn('read');
    }
    readSync(t) {
        return fn('readSync');
    }
    readToGPU(t, e) {
        return fn('readToGPU');
    }
    numDataIds() {
        return fn('numDataIds');
    }
    disposeData(t, e) {
        return fn('disposeData');
    }
    write(t, e, s) {
        return fn('write');
    }
    move(t, e, s, r, o) {
        return fn('move');
    }
    createTensorFromGPUData(t, e, s) {
        return fn('createTensorFromGPUData');
    }
    memory() {
        return fn('memory');
    }
    floatPrecision() {
        return fn('floatPrecision');
    }
    epsilon() {
        return this.floatPrecision() === 32 ? NI : TI;
    }
    dispose() {
        return fn('dispose');
    }
}
function fn(n) {
    throw new Error(
        `'${n}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`
    );
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function EI(n) {
    let t = n.length,
        e = 0;
    for (; t > 0; ) (e = (Math.random() * t) | 0), t--, sr(n, t, e);
}
function _I(n, t) {
    if (n.length !== t.length)
        throw new Error(
            `Array sizes must match to be shuffled together First array length was ${n.length}Second array length was ${t.length}`
        );
    let e = n.length,
        s = 0;
    for (; e > 0; )
        (s = (Math.random() * e) | 0), e--, sr(n, e, s), sr(t, e, s);
}
function eo(n, t, e) {
    return Math.max(n, Math.min(t, e));
}
function lp(n) {
    return n % 2 === 0 ? n : n + 1;
}
function sr(n, t, e) {
    const s = n[t];
    (n[t] = n[e]), (n[e] = s);
}
function AI(n) {
    let t = 0;
    for (let e = 0; e < n.length; e++) t += n[e];
    return t;
}
function _(n, t) {
    if (!n) throw new Error(typeof t == 'string' ? t : t());
}
function $n(n, t, e = '') {
    _(Ut(n, t), () => e + ` Shapes ${n} and ${t} must match`);
}
function ui(n) {
    _(
        n != null,
        () => 'The input to the tensor constructor must be a non-null value.'
    );
}
function rt(n) {
    if (n.length === 0) return 1;
    let t = n[0];
    for (let e = 1; e < n.length; e++) t *= n[e];
    return t;
}
function RI(n, t) {
    if (n === t) return !0;
    if (n == null || t == null || n.length !== t.length) return !1;
    for (let e = 0; e < n.length; e++)
        if (n[e] !== null && t[e] !== null && n[e] !== t[e]) return !1;
    return !0;
}
function Ut(n, t) {
    if (n === t) return !0;
    if (n == null || t == null || n.length !== t.length) return !1;
    for (let e = 0; e < n.length; e++) if (n[e] !== t[e]) return !1;
    return !0;
}
function Ko(n) {
    return n % 1 === 0;
}
function nd(n) {
    const t = Math.ceil(Math.sqrt(n));
    return [t, Math.ceil(n / t)];
}
function Mo(n, t) {
    return t <= n.length ? n : n + ' '.repeat(t - n.length);
}
function Fg(n, t = (r) => 0, e, s) {
    return new Promise((r, o) => {
        let i = 0;
        const a = () => {
            if (n()) {
                r();
                return;
            }
            i++;
            const l = t(i);
            if (e != null && i >= e) {
                o();
                return;
            }
            s != null ? s(a, l) : setTimeout(a, l);
        };
        a();
    });
}
function Ab(n, t) {
    let e = 1,
        s = -1;
    for (let o = 0; o < n.length; ++o)
        if (n[o] >= 0) e *= n[o];
        else if (n[o] === -1) {
            if (s !== -1)
                throw Error(
                    `Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${o}`
                );
            s = o;
        } else if (n[o] < 0)
            throw Error(`Shapes can not be < 0. Found ${n[o]} at dim ${o}`);
    if (s === -1) {
        if (t > 0 && t !== e)
            throw Error(`Size(${t}) must match the product of shape ${n}`);
        return n;
    }
    if (e === 0)
        throw Error(
            `Cannot infer the missing size in [${n}] when there are 0 elements`
        );
    if (t % e !== 0)
        throw Error(
            `The implicit shape can't be a fractional number. Got ${t} / ${e}`
        );
    const r = n.slice();
    return (r[s] = t / e), r;
}
function Bt(n, t) {
    const e = t.length;
    return (
        (n = n == null ? t.map((s, r) => r) : [].concat(n)),
        _(
            n.every((s) => s >= -e && s < e),
            () =>
                `All values in axis param must be in range [-${e}, ${e}) but got axis ${n}`
        ),
        _(
            n.every((s) => Ko(s)),
            () => `All values in axis param must be integers but got axis ${n}`
        ),
        n.map((s) => (s < 0 ? e + s : s))
    );
}
function Sr(n, t) {
    const e = [],
        s = [],
        r = t != null && Array.isArray(t) && t.length === 0,
        o = t == null || r ? null : Bt(t, n).sort();
    let i = 0;
    for (let a = 0; a < n.length; ++a) {
        if (o != null) {
            if (o[i] === a && n[a] !== 1)
                throw new Error(
                    `Can't squeeze axis ${a} since its dim '${n[a]}' is not 1`
                );
            (o[i] == null || o[i] > a) &&
                n[a] === 1 &&
                (e.push(n[a]), s.push(a)),
                o[i] <= a && i++;
        }
        n[a] !== 1 && (e.push(n[a]), s.push(a));
    }
    return { newShape: e, keptDims: s };
}
function Ve(n, t) {
    return be(n, t);
}
function be(n, t) {
    let e = null;
    if (n == null || n === 'float32') e = new Float32Array(t);
    else if (n === 'int32') e = new Int32Array(t);
    else if (n === 'bool') e = new Uint8Array(t);
    else if (n === 'string') e = new Array(t);
    else throw new Error(`Unknown data type ${n}`);
    return e;
}
function DI(n, t) {
    for (let e = 0; e < n.length; e++) {
        const s = n[e];
        if (isNaN(s) || !isFinite(s))
            throw Error(`A tensor of type ${t} being uploaded contains ${s}.`);
    }
}
function OI(n) {
    return (
        n === 'bool' ||
        n === 'complex64' ||
        n === 'float32' ||
        n === 'int32' ||
        n === 'string'
    );
}
function Rb(n, t) {
    return !(
        t === 'complex64' ||
        (t === 'float32' && n !== 'complex64') ||
        (t === 'int32' && n !== 'float32' && n !== 'complex64') ||
        (t === 'bool' && n === 'bool')
    );
}
function Jl(n) {
    if (n === 'float32' || n === 'int32') return 4;
    if (n === 'complex64') return 8;
    if (n === 'bool') return 1;
    throw new Error(`Unknown dtype ${n}`);
}
function FI(n) {
    if (n == null) return 0;
    let t = 0;
    return n.forEach((e) => (t += e.length)), t;
}
function sa(n) {
    return typeof n == 'string' || n instanceof String;
}
function LI(n) {
    return typeof n == 'boolean';
}
function sd(n) {
    return typeof n == 'number';
}
function hi(n) {
    return Array.isArray(n)
        ? hi(n[0])
        : n instanceof Float32Array
        ? 'float32'
        : n instanceof Int32Array ||
          n instanceof Uint8Array ||
          n instanceof Uint8ClampedArray
        ? 'int32'
        : sd(n)
        ? 'float32'
        : sa(n)
        ? 'string'
        : LI(n)
        ? 'bool'
        : 'float32';
}
function rd(n) {
    return !!(n && n.constructor && n.call && n.apply);
}
function od(n, t) {
    for (let e = t; e < n; ++e) if (n % e === 0) return e;
    return n;
}
function _t(n) {
    const t = n.length;
    if (t < 2) return [];
    const e = new Array(t - 1);
    e[t - 2] = n[t - 1];
    for (let s = t - 3; s >= 0; --s) e[s] = e[s + 1] * n[s + 1];
    return e;
}
function Db(n, t, e, s = !1) {
    const r = new Array();
    if (t.length === 1) {
        const o = t[0] * (s ? 2 : 1);
        for (let i = 0; i < o; i++) r[i] = e[n + i];
    } else {
        const o = t[0],
            i = t.slice(1),
            a = i.reduce((l, c) => l * c) * (s ? 2 : 1);
        for (let l = 0; l < o; l++) r[l] = Db(n + l * a, i, e, s);
    }
    return r;
}
function Xn(n, t, e = !1) {
    if (n.length === 0) return t[0];
    const s = n.reduce((r, o) => r * o) * (e ? 2 : 1);
    if (s === 0) return [];
    if (s !== t.length)
        throw new Error(
            `[${n}] does not match the input size ${t.length}${
                e ? ' for a complex tensor' : ''
            }.`
        );
    return Db(0, n, t, e);
}
function PI(n, t) {
    if (Array.isArray(n)) return n;
    if (t === 'float32')
        return n instanceof Float32Array ? n : new Float32Array(n);
    if (t === 'int32') return n instanceof Int32Array ? n : new Int32Array(n);
    if (t === 'bool' || t === 'string')
        return Uint8Array.from(new Int32Array(n));
    throw new Error(`Unknown dtype ${t}`);
}
function cp(n, t) {
    const e = Ke(n, t);
    for (let s = 0; s < e.length; s++) e[s] = 1;
    return e;
}
function Ke(n, t) {
    if (t == null || t === 'float32' || t === 'complex64')
        return new Float32Array(n);
    if (t === 'int32') return new Int32Array(n);
    if (t === 'bool') return new Uint8Array(n);
    throw new Error(`Unknown data type ${t}`);
}
function Ob(n, t) {
    const e = n.reduce((s, r) => s * r, 1);
    if (t == null || t === 'float32') return Xn(n, new Float32Array(e));
    if (t === 'int32') return Xn(n, new Int32Array(e));
    if (t === 'bool') return Xn(n, new Uint8Array(e));
    throw new Error(`Unknown data type ${t}`);
}
function Fn(n) {
    n.forEach((t) => {
        _(
            Number.isInteger(t) && t >= 0,
            () =>
                `Tensor must have a shape comprised of positive integers but got shape [${n}].`
        );
    });
}
function ks(n, t, e) {
    if (t === 0) return 0;
    if (t === 1) return n[0];
    let s = n[n.length - 1];
    for (let r = 0; r < n.length - 1; ++r) s += e[r] * n[r];
    return s;
}
function di(n, t, e) {
    if (t === 0) return [];
    if (t === 1) return [n];
    const s = new Array(t);
    for (let r = 0; r < s.length - 1; ++r)
        (s[r] = Math.floor(n / e[r])), (n -= s[r] * e[r]);
    return (s[s.length - 1] = n), s;
}
function no(n) {
    return n && n.then && typeof n.then == 'function';
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Lg = 'tfjsflags';
class zI {
    constructor(t) {
        (this.global = t),
            (this.flags = {}),
            (this.flagRegistry = {}),
            (this.urlFlags = {}),
            (this.getQueryParams = BI),
            this.populateURLFlags();
    }
    setPlatform(t, e) {
        this.platform != null &&
            (tt().getBool('IS_TEST') ||
                tt().getBool('PROD') ||
                console.warn(
                    `Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`
                )),
            (this.platformName = t),
            (this.platform = e);
    }
    registerFlag(t, e, s) {
        if (
            ((this.flagRegistry[t] = { evaluationFn: e, setHook: s }),
            this.urlFlags[t] != null)
        ) {
            const r = this.urlFlags[t];
            tt().getBool('IS_TEST') ||
                tt().getBool('PROD') ||
                console.warn(`Setting feature override from URL ${t}: ${r}.`),
                this.set(t, r);
        }
    }
    async getAsync(t) {
        return t in this.flags
            ? this.flags[t]
            : ((this.flags[t] = await this.evaluateFlag(t)), this.flags[t]);
    }
    get(t) {
        if (t in this.flags) return this.flags[t];
        const e = this.evaluateFlag(t);
        if (no(e))
            throw new Error(
                `Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`
            );
        return (this.flags[t] = e), this.flags[t];
    }
    getNumber(t) {
        return this.get(t);
    }
    getBool(t) {
        return this.get(t);
    }
    getString(t) {
        return this.get(t);
    }
    getFlags() {
        return this.flags;
    }
    get features() {
        return this.flags;
    }
    set(t, e) {
        if (this.flagRegistry[t] == null)
            throw new Error(
                `Cannot set flag ${t} as it has not been registered.`
            );
        (this.flags[t] = e),
            this.flagRegistry[t].setHook != null &&
                this.flagRegistry[t].setHook(e);
    }
    evaluateFlag(t) {
        if (this.flagRegistry[t] == null)
            throw new Error(
                `Cannot evaluate flag '${t}': no evaluation function found.`
            );
        return this.flagRegistry[t].evaluationFn();
    }
    setFlags(t) {
        this.flags = Object.assign({}, t);
    }
    reset() {
        (this.flags = {}), (this.urlFlags = {}), this.populateURLFlags();
    }
    populateURLFlags() {
        if (
            typeof this.global > 'u' ||
            typeof this.global.location > 'u' ||
            typeof this.global.location.search > 'u'
        )
            return;
        const t = this.getQueryParams(this.global.location.search);
        Lg in t &&
            t[Lg].split(',').forEach((s) => {
                const [r, o] = s.split(':');
                this.urlFlags[r] = VI(r, o);
            });
    }
}
function BI(n) {
    const t = {};
    return (
        n.replace(
            /[?&]([^=?&]+)(?:=([^&]*))?/g,
            (e, ...s) => (MI(t, s[0], s[1]), s.join('='))
        ),
        t
    );
}
function MI(n, t, e) {
    n[decodeURIComponent(t)] = decodeURIComponent(e || '');
}
function VI(n, t) {
    const e = t.toLowerCase();
    return e === 'true' || e === 'false'
        ? e === 'true'
        : `${+e}` === e
        ? +e
        : t;
}
function tt() {
    return Fb;
}
let Fb = null;
function WI(n) {
    Fb = n;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ let Oh;
function Lb() {
    if (Oh == null) {
        let n;
        if (typeof window < 'u') n = window;
        else if (typeof global < 'u') n = global;
        else if (typeof process < 'u') n = process;
        else if (typeof self < 'u') n = self;
        else throw new Error('Could not find a global object');
        Oh = n;
    }
    return Oh;
}
function UI() {
    const n = Lb();
    return n._tfGlobals == null && (n._tfGlobals = new Map()), n._tfGlobals;
}
function up(n, t) {
    const e = UI();
    if (e.has(n)) return e.get(n);
    {
        const s = t();
        return e.set(n, s), e.get(n);
    }
}
const Oc = 'Abs',
    ra = 'Acos',
    oa = 'Acosh',
    pi = 'Add',
    Fc = 'AddN',
    hp = 'All',
    dp = 'Any',
    Lc = 'ArgMax',
    Pc = 'ArgMin',
    ia = 'Asin',
    aa = 'Asinh',
    la = 'Atan',
    ca = 'Atanh',
    ua = 'Atan2',
    zc = 'AvgPool',
    pp = 'AvgPoolGrad',
    Bc = 'AvgPool3D',
    fp = 'AvgPool3DGrad',
    Mc = 'BatchMatMul',
    Vc = 'BatchToSpaceND',
    mp = 'Bincount',
    Wc = 'BitwiseAnd',
    GI = 'BroadcastTo',
    gp = 'BroadcastArgs',
    ha = 'Cast',
    da = 'Ceil',
    pa = 'ClipByValue',
    yp = 'Complex',
    Uc = 'ComplexAbs',
    Gc = 'Concat',
    Hc = 'Conv2D',
    bp = 'Conv2DBackpropFilter',
    jc = 'Conv2DBackpropInput',
    qc = 'Conv3D',
    xp = 'Conv3DBackpropFilterV2',
    wp = 'Conv3DBackpropInputV2',
    fa = 'Cos',
    ma = 'Cosh',
    vp = 'Cumprod',
    Kc = 'Cumsum',
    kp = 'CropAndResize',
    Sp = 'DenseBincount',
    Ip = 'DepthToSpace',
    Xc = 'DepthwiseConv2dNative',
    Cp = 'DepthwiseConv2dNativeBackpropFilter',
    $p = 'DepthwiseConv2dNativeBackpropInput',
    Np = 'Diag',
    Yc = 'Dilation2D',
    id = 'Dilation2DBackpropInput',
    ad = 'Dilation2DBackpropFilter',
    HI = 'Draw',
    ga = 'RealDiv',
    Tp = 'Einsum',
    ya = 'Elu',
    Ep = 'EluGrad',
    ba = 'Erf',
    Zc = 'Equal',
    xa = 'Exp',
    Jc = 'ExpandDims',
    wa = 'Expm1',
    _p = 'FFT',
    Ap = 'Fill',
    Rp = 'FlipLeftRight',
    va = 'Floor',
    ka = 'FloorDiv',
    Qc = 'FusedBatchNorm',
    tu = 'GatherV2',
    Dp = 'GatherNd',
    eu = 'Greater',
    Sa = 'GreaterEqual',
    Ia = 'Identity',
    Op = 'IFFT',
    Fp = 'Imag',
    Ca = 'IsFinite',
    $a = 'IsInf',
    Na = 'IsNan',
    nu = 'LeakyRelu',
    su = 'Less',
    ru = 'LessEqual',
    Lp = 'LinSpace',
    Ta = 'Log',
    Ea = 'Log1p',
    ou = 'LogicalAnd',
    iu = 'LogicalNot',
    au = 'LogicalOr',
    jI = 'LogSoftmax',
    lu = 'LRN',
    Pp = 'LRNGrad',
    cu = 'Max',
    _a = 'Maximum',
    uu = 'MaxPool',
    zp = 'MaxPoolGrad',
    hu = 'MaxPool3D',
    Bp = 'MaxPool3DGrad',
    Mp = 'MaxPoolWithArgmax',
    du = 'Mean',
    pu = 'Min',
    Aa = 'Minimum',
    fu = 'MirrorPad',
    Ra = 'Mod',
    Vp = 'Multinomial',
    Da = 'Multiply',
    mu = 'Neg',
    gu = 'NotEqual',
    Wp = 'NonMaxSuppressionV3',
    Up = 'NonMaxSuppressionV4',
    Gp = 'NonMaxSuppressionV5',
    yu = 'OnesLike',
    bu = 'OneHot',
    xu = 'Pack',
    wu = 'PadV2',
    Oa = 'Pow',
    vu = 'Prelu',
    ku = 'Prod',
    Hp = 'RaggedGather',
    jp = 'RaggedRange',
    qp = 'RaggedTensorToTensor',
    Kp = 'Range',
    Xp = 'Real',
    Fa = 'Reciprocal',
    La = 'Relu',
    Su = 'Reshape',
    Iu = 'ResizeNearestNeighbor',
    Yp = 'ResizeNearestNeighborGrad',
    Cu = 'ResizeBilinear',
    Zp = 'ResizeBilinearGrad',
    Pa = 'Relu6',
    $u = 'Reverse',
    za = 'Round',
    Ba = 'Rsqrt',
    Jp = 'ScatterNd',
    Qp = 'TensorScatterUpdate',
    tf = 'SearchSorted',
    Nu = 'Select',
    Ma = 'Selu',
    Tu = 'Slice',
    Va = 'Sin',
    Wa = 'Sinh',
    Ua = 'Sign',
    Ga = 'Sigmoid',
    Ha = 'Softplus',
    ja = 'Sqrt',
    Eu = 'Sum',
    _u = 'SpaceToBatchND',
    Au = 'SplitV',
    Ru = 'Softmax',
    ef = 'SparseFillEmptyRows',
    nf = 'SparseReshape',
    sf = 'SparseSegmentMean',
    rf = 'SparseSegmentSum',
    of = 'SparseToDense',
    qa = 'SquaredDifference',
    af = 'Square',
    Du = 'StaticRegexReplace',
    lf = 'StridedSlice',
    cf = 'StringNGrams',
    uf = 'StringSplit',
    hf = 'StringToHashBucketFast',
    Ka = 'Sub',
    Xa = 'Tan',
    Ya = 'Tanh',
    Za = 'Tile',
    df = 'TopK',
    pf = 'Transform',
    Vo = 'Transpose',
    ff = 'Unique',
    Ou = 'Unpack',
    Fu = 'UnsortedSegmentSum',
    Lu = 'ZerosLike',
    Ja = 'Step',
    ld = 'FromPixels',
    mf = 'RotateWithOffset',
    Ql = '_FusedMatMul',
    tc = 'FusedConv2D',
    ec = 'FusedDepthwiseConv2D';
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function En(...n) {
    tt().getBool('IS_TEST') || tt().getBool('PROD') || console.warn(...n);
}
function qI(...n) {
    tt().getBool('IS_TEST') || tt().getBool('PROD') || console.log(...n);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const nc = up('kernelRegistry', () => new Map()),
    cd = up('gradRegistry', () => new Map());
function ud(n, t) {
    const e = zb(n, t);
    return nc.get(e);
}
function Pg(n) {
    return cd.get(n);
}
function zg(n) {
    const t = nc.entries(),
        e = [];
    for (;;) {
        const { done: s, value: r } = t.next();
        if (s) break;
        const [o, i] = r,
            [a] = o.split('_');
        a === n && e.push(i);
    }
    return e;
}
function Pb(n) {
    const { kernelName: t, backendName: e } = n,
        s = zb(t, e);
    nc.has(s) &&
        En(`The kernel '${t}' for backend '${e}' is already registered`),
        nc.set(s, n);
}
function KI(n) {
    const { kernelName: t } = n;
    cd.has(t) &&
        tt().getBool('DEBUG') &&
        En(`Overriding the gradient for '${t}'`),
        cd.set(t, n);
}
function zb(n, t) {
    return `${t}_${n}`;
}
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Bb(n) {
    return (
        n instanceof Float32Array ||
        n instanceof Int32Array ||
        n instanceof Uint8Array ||
        n instanceof Uint8ClampedArray
    );
}
var tn =
    typeof globalThis < 'u'
        ? globalThis
        : typeof window < 'u'
        ? window
        : typeof global < 'u'
        ? global
        : typeof self < 'u'
        ? self
        : {};
function gf(n) {
    return n &&
        n.__esModule &&
        Object.prototype.hasOwnProperty.call(n, 'default')
        ? n.default
        : n;
}
function XI(n) {
    if (n.__esModule) return n;
    var t = n.default;
    if (typeof t == 'function') {
        var e = function s() {
            return this instanceof s
                ? Reflect.construct(t, arguments, this.constructor)
                : t.apply(this, arguments);
        };
        e.prototype = t.prototype;
    } else e = {};
    return (
        Object.defineProperty(e, '__esModule', { value: !0 }),
        Object.keys(n).forEach(function (s) {
            var r = Object.getOwnPropertyDescriptor(n, s);
            Object.defineProperty(
                e,
                s,
                r.get
                    ? r
                    : {
                          enumerable: !0,
                          get: function () {
                              return n[s];
                          },
                      }
            );
        }),
        e
    );
}
var Mb = ie,
    Un = null;
try {
    Un = new WebAssembly.Instance(
        new WebAssembly.Module(
            new Uint8Array([
                0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4,
                127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1,
                127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100,
                105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5,
                114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5,
                8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6,
                4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32,
                134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4,
                66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0,
                173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66,
                32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167,
                11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32,
                2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135,
                167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1,
                173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132,
                129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1,
                126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32,
                3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0,
                32, 4, 167, 11,
            ])
        ),
        {}
    ).exports;
} catch {}
function ie(n, t, e) {
    (this.low = n | 0), (this.high = t | 0), (this.unsigned = !!e);
}
ie.prototype.__isLong__;
Object.defineProperty(ie.prototype, '__isLong__', { value: !0 });
function Nn(n) {
    return (n && n.__isLong__) === !0;
}
ie.isLong = Nn;
var Bg = {},
    Mg = {};
function mo(n, t) {
    var e, s, r;
    return t
        ? ((n >>>= 0),
          (r = 0 <= n && n < 256) && ((s = Mg[n]), s)
              ? s
              : ((e = ae(n, (n | 0) < 0 ? -1 : 0, !0)), r && (Mg[n] = e), e))
        : ((n |= 0),
          (r = -128 <= n && n < 128) && ((s = Bg[n]), s)
              ? s
              : ((e = ae(n, n < 0 ? -1 : 0, !1)), r && (Bg[n] = e), e));
}
ie.fromInt = mo;
function Gn(n, t) {
    if (isNaN(n)) return t ? jr : Hn;
    if (t) {
        if (n < 0) return jr;
        if (n >= Vb) return Gb;
    } else {
        if (n <= -Wg) return bn;
        if (n + 1 >= Wg) return Ub;
    }
    return n < 0 ? Gn(-n, t).neg() : ae(n % Xo | 0, (n / Xo) | 0, t);
}
ie.fromNumber = Gn;
function ae(n, t, e) {
    return new ie(n, t, e);
}
ie.fromBits = ae;
var sc = Math.pow;
function yf(n, t, e) {
    if (n.length === 0) throw Error('empty string');
    if (
        n === 'NaN' ||
        n === 'Infinity' ||
        n === '+Infinity' ||
        n === '-Infinity'
    )
        return Hn;
    if (
        (typeof t == 'number' ? ((e = t), (t = !1)) : (t = !!t),
        (e = e || 10),
        e < 2 || 36 < e)
    )
        throw RangeError('radix');
    var s;
    if ((s = n.indexOf('-')) > 0) throw Error('interior hyphen');
    if (s === 0) return yf(n.substring(1), t, e).neg();
    for (var r = Gn(sc(e, 8)), o = Hn, i = 0; i < n.length; i += 8) {
        var a = Math.min(8, n.length - i),
            l = parseInt(n.substring(i, i + a), e);
        if (a < 8) {
            var c = Gn(sc(e, a));
            o = o.mul(c).add(Gn(l));
        } else (o = o.mul(r)), (o = o.add(Gn(l)));
    }
    return (o.unsigned = t), o;
}
ie.fromString = yf;
function fs(n, t) {
    return typeof n == 'number'
        ? Gn(n, t)
        : typeof n == 'string'
        ? yf(n, t)
        : ae(n.low, n.high, typeof t == 'boolean' ? t : n.unsigned);
}
ie.fromValue = fs;
var Vg = 65536,
    YI = 1 << 24,
    Xo = Vg * Vg,
    Vb = Xo * Xo,
    Wg = Vb / 2,
    Ug = mo(YI),
    Hn = mo(0);
ie.ZERO = Hn;
var jr = mo(0, !0);
ie.UZERO = jr;
var zo = mo(1);
ie.ONE = zo;
var Wb = mo(1, !0);
ie.UONE = Wb;
var hd = mo(-1);
ie.NEG_ONE = hd;
var Ub = ae(-1, 2147483647, !1);
ie.MAX_VALUE = Ub;
var Gb = ae(-1, -1, !0);
ie.MAX_UNSIGNED_VALUE = Gb;
var bn = ae(0, -2147483648, !1);
ie.MIN_VALUE = bn;
var yt = ie.prototype;
yt.toInt = function () {
    return this.unsigned ? this.low >>> 0 : this.low;
};
yt.toNumber = function () {
    return this.unsigned
        ? (this.high >>> 0) * Xo + (this.low >>> 0)
        : this.high * Xo + (this.low >>> 0);
};
yt.toString = function (t) {
    if (((t = t || 10), t < 2 || 36 < t)) throw RangeError('radix');
    if (this.isZero()) return '0';
    if (this.isNegative())
        if (this.eq(bn)) {
            var e = Gn(t),
                s = this.div(e),
                r = s.mul(e).sub(this);
            return s.toString(t) + r.toInt().toString(t);
        } else return '-' + this.neg().toString(t);
    for (var o = Gn(sc(t, 6), this.unsigned), i = this, a = ''; ; ) {
        var l = i.div(o),
            c = i.sub(l.mul(o)).toInt() >>> 0,
            u = c.toString(t);
        if (((i = l), i.isZero())) return u + a;
        for (; u.length < 6; ) u = '0' + u;
        a = '' + u + a;
    }
};
yt.getHighBits = function () {
    return this.high;
};
yt.getHighBitsUnsigned = function () {
    return this.high >>> 0;
};
yt.getLowBits = function () {
    return this.low;
};
yt.getLowBitsUnsigned = function () {
    return this.low >>> 0;
};
yt.getNumBitsAbs = function () {
    if (this.isNegative()) return this.eq(bn) ? 64 : this.neg().getNumBitsAbs();
    for (
        var t = this.high != 0 ? this.high : this.low, e = 31;
        e > 0 && !(t & (1 << e));
        e--
    );
    return this.high != 0 ? e + 33 : e + 1;
};
yt.isZero = function () {
    return this.high === 0 && this.low === 0;
};
yt.eqz = yt.isZero;
yt.isNegative = function () {
    return !this.unsigned && this.high < 0;
};
yt.isPositive = function () {
    return this.unsigned || this.high >= 0;
};
yt.isOdd = function () {
    return (this.low & 1) === 1;
};
yt.isEven = function () {
    return (this.low & 1) === 0;
};
yt.equals = function (t) {
    return (
        Nn(t) || (t = fs(t)),
        this.unsigned !== t.unsigned &&
        this.high >>> 31 === 1 &&
        t.high >>> 31 === 1
            ? !1
            : this.high === t.high && this.low === t.low
    );
};
yt.eq = yt.equals;
yt.notEquals = function (t) {
    return !this.eq(t);
};
yt.neq = yt.notEquals;
yt.ne = yt.notEquals;
yt.lessThan = function (t) {
    return this.comp(t) < 0;
};
yt.lt = yt.lessThan;
yt.lessThanOrEqual = function (t) {
    return this.comp(t) <= 0;
};
yt.lte = yt.lessThanOrEqual;
yt.le = yt.lessThanOrEqual;
yt.greaterThan = function (t) {
    return this.comp(t) > 0;
};
yt.gt = yt.greaterThan;
yt.greaterThanOrEqual = function (t) {
    return this.comp(t) >= 0;
};
yt.gte = yt.greaterThanOrEqual;
yt.ge = yt.greaterThanOrEqual;
yt.compare = function (t) {
    if ((Nn(t) || (t = fs(t)), this.eq(t))) return 0;
    var e = this.isNegative(),
        s = t.isNegative();
    return e && !s
        ? -1
        : !e && s
        ? 1
        : this.unsigned
        ? t.high >>> 0 > this.high >>> 0 ||
          (t.high === this.high && t.low >>> 0 > this.low >>> 0)
            ? -1
            : 1
        : this.sub(t).isNegative()
        ? -1
        : 1;
};
yt.comp = yt.compare;
yt.negate = function () {
    return !this.unsigned && this.eq(bn) ? bn : this.not().add(zo);
};
yt.neg = yt.negate;
yt.add = function (t) {
    Nn(t) || (t = fs(t));
    var e = this.high >>> 16,
        s = this.high & 65535,
        r = this.low >>> 16,
        o = this.low & 65535,
        i = t.high >>> 16,
        a = t.high & 65535,
        l = t.low >>> 16,
        c = t.low & 65535,
        u = 0,
        h = 0,
        d = 0,
        p = 0;
    return (
        (p += o + c),
        (d += p >>> 16),
        (p &= 65535),
        (d += r + l),
        (h += d >>> 16),
        (d &= 65535),
        (h += s + a),
        (u += h >>> 16),
        (h &= 65535),
        (u += e + i),
        (u &= 65535),
        ae((d << 16) | p, (u << 16) | h, this.unsigned)
    );
};
yt.subtract = function (t) {
    return Nn(t) || (t = fs(t)), this.add(t.neg());
};
yt.sub = yt.subtract;
yt.multiply = function (t) {
    if (this.isZero()) return Hn;
    if ((Nn(t) || (t = fs(t)), Un)) {
        var e = Un.mul(this.low, this.high, t.low, t.high);
        return ae(e, Un.get_high(), this.unsigned);
    }
    if (t.isZero()) return Hn;
    if (this.eq(bn)) return t.isOdd() ? bn : Hn;
    if (t.eq(bn)) return this.isOdd() ? bn : Hn;
    if (this.isNegative())
        return t.isNegative()
            ? this.neg().mul(t.neg())
            : this.neg().mul(t).neg();
    if (t.isNegative()) return this.mul(t.neg()).neg();
    if (this.lt(Ug) && t.lt(Ug))
        return Gn(this.toNumber() * t.toNumber(), this.unsigned);
    var s = this.high >>> 16,
        r = this.high & 65535,
        o = this.low >>> 16,
        i = this.low & 65535,
        a = t.high >>> 16,
        l = t.high & 65535,
        c = t.low >>> 16,
        u = t.low & 65535,
        h = 0,
        d = 0,
        p = 0,
        f = 0;
    return (
        (f += i * u),
        (p += f >>> 16),
        (f &= 65535),
        (p += o * u),
        (d += p >>> 16),
        (p &= 65535),
        (p += i * c),
        (d += p >>> 16),
        (p &= 65535),
        (d += r * u),
        (h += d >>> 16),
        (d &= 65535),
        (d += o * c),
        (h += d >>> 16),
        (d &= 65535),
        (d += i * l),
        (h += d >>> 16),
        (d &= 65535),
        (h += s * u + r * c + o * l + i * a),
        (h &= 65535),
        ae((p << 16) | f, (h << 16) | d, this.unsigned)
    );
};
yt.mul = yt.multiply;
yt.divide = function (t) {
    if ((Nn(t) || (t = fs(t)), t.isZero())) throw Error('division by zero');
    if (Un) {
        if (
            !this.unsigned &&
            this.high === -2147483648 &&
            t.low === -1 &&
            t.high === -1
        )
            return this;
        var e = (this.unsigned ? Un.div_u : Un.div_s)(
            this.low,
            this.high,
            t.low,
            t.high
        );
        return ae(e, Un.get_high(), this.unsigned);
    }
    if (this.isZero()) return this.unsigned ? jr : Hn;
    var s, r, o;
    if (this.unsigned) {
        if ((t.unsigned || (t = t.toUnsigned()), t.gt(this))) return jr;
        if (t.gt(this.shru(1))) return Wb;
        o = jr;
    } else {
        if (this.eq(bn)) {
            if (t.eq(zo) || t.eq(hd)) return bn;
            if (t.eq(bn)) return zo;
            var i = this.shr(1);
            return (
                (s = i.div(t).shl(1)),
                s.eq(Hn)
                    ? t.isNegative()
                        ? zo
                        : hd
                    : ((r = this.sub(t.mul(s))), (o = s.add(r.div(t))), o)
            );
        } else if (t.eq(bn)) return this.unsigned ? jr : Hn;
        if (this.isNegative())
            return t.isNegative()
                ? this.neg().div(t.neg())
                : this.neg().div(t).neg();
        if (t.isNegative()) return this.div(t.neg()).neg();
        o = Hn;
    }
    for (r = this; r.gte(t); ) {
        s = Math.max(1, Math.floor(r.toNumber() / t.toNumber()));
        for (
            var a = Math.ceil(Math.log(s) / Math.LN2),
                l = a <= 48 ? 1 : sc(2, a - 48),
                c = Gn(s),
                u = c.mul(t);
            u.isNegative() || u.gt(r);

        )
            (s -= l), (c = Gn(s, this.unsigned)), (u = c.mul(t));
        c.isZero() && (c = zo), (o = o.add(c)), (r = r.sub(u));
    }
    return o;
};
yt.div = yt.divide;
yt.modulo = function (t) {
    if ((Nn(t) || (t = fs(t)), Un)) {
        var e = (this.unsigned ? Un.rem_u : Un.rem_s)(
            this.low,
            this.high,
            t.low,
            t.high
        );
        return ae(e, Un.get_high(), this.unsigned);
    }
    return this.sub(this.div(t).mul(t));
};
yt.mod = yt.modulo;
yt.rem = yt.modulo;
yt.not = function () {
    return ae(~this.low, ~this.high, this.unsigned);
};
yt.and = function (t) {
    return (
        Nn(t) || (t = fs(t)),
        ae(this.low & t.low, this.high & t.high, this.unsigned)
    );
};
yt.or = function (t) {
    return (
        Nn(t) || (t = fs(t)),
        ae(this.low | t.low, this.high | t.high, this.unsigned)
    );
};
yt.xor = function (t) {
    return (
        Nn(t) || (t = fs(t)),
        ae(this.low ^ t.low, this.high ^ t.high, this.unsigned)
    );
};
yt.shiftLeft = function (t) {
    return (
        Nn(t) && (t = t.toInt()),
        (t &= 63) === 0
            ? this
            : t < 32
            ? ae(
                  this.low << t,
                  (this.high << t) | (this.low >>> (32 - t)),
                  this.unsigned
              )
            : ae(0, this.low << (t - 32), this.unsigned)
    );
};
yt.shl = yt.shiftLeft;
yt.shiftRight = function (t) {
    return (
        Nn(t) && (t = t.toInt()),
        (t &= 63) === 0
            ? this
            : t < 32
            ? ae(
                  (this.low >>> t) | (this.high << (32 - t)),
                  this.high >> t,
                  this.unsigned
              )
            : ae(this.high >> (t - 32), this.high >= 0 ? 0 : -1, this.unsigned)
    );
};
yt.shr = yt.shiftRight;
yt.shiftRightUnsigned = function (t) {
    if ((Nn(t) && (t = t.toInt()), (t &= 63), t === 0)) return this;
    var e = this.high;
    if (t < 32) {
        var s = this.low;
        return ae((s >>> t) | (e << (32 - t)), e >>> t, this.unsigned);
    } else
        return t === 32
            ? ae(e, 0, this.unsigned)
            : ae(e >>> (t - 32), 0, this.unsigned);
};
yt.shru = yt.shiftRightUnsigned;
yt.shr_u = yt.shiftRightUnsigned;
yt.toSigned = function () {
    return this.unsigned ? ae(this.low, this.high, !1) : this;
};
yt.toUnsigned = function () {
    return this.unsigned ? this : ae(this.low, this.high, !0);
};
yt.toBytes = function (t) {
    return t ? this.toBytesLE() : this.toBytesBE();
};
yt.toBytesLE = function () {
    var t = this.high,
        e = this.low;
    return [
        e & 255,
        (e >>> 8) & 255,
        (e >>> 16) & 255,
        e >>> 24,
        t & 255,
        (t >>> 8) & 255,
        (t >>> 16) & 255,
        t >>> 24,
    ];
};
yt.toBytesBE = function () {
    var t = this.high,
        e = this.low;
    return [
        t >>> 24,
        (t >>> 16) & 255,
        (t >>> 8) & 255,
        t & 255,
        e >>> 24,
        (e >>> 16) & 255,
        (e >>> 8) & 255,
        e & 255,
    ];
};
ie.fromBytes = function (t, e, s) {
    return s ? ie.fromBytesLE(t, e) : ie.fromBytesBE(t, e);
};
ie.fromBytesLE = function (t, e) {
    return new ie(
        t[0] | (t[1] << 8) | (t[2] << 16) | (t[3] << 24),
        t[4] | (t[5] << 8) | (t[6] << 16) | (t[7] << 24),
        e
    );
};
ie.fromBytesBE = function (t, e) {
    return new ie(
        (t[4] << 24) | (t[5] << 16) | (t[6] << 8) | t[7],
        (t[0] << 24) | (t[1] << 16) | (t[2] << 8) | t[3],
        e
    );
};
const Hb = gf(Mb),
    ZI = $I({ __proto__: null, default: Hb }, [Mb]);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Wr = Hb || ZI;
function Pu(n) {
    return Wr.fromString(n, !0, 16);
}
const jb = Pu('c3a5c85c97cb3127'),
    Mr = Pu('b492b66fbe98f273'),
    Je = Pu('9ae16a3b2f90404f');
function dd(n) {
    return n.xor(n.shru(47));
}
function qb(n, t, e) {
    const s = n.slice(t, t + e);
    return Wr.fromBytes(Array.from(s), !0, !0);
}
function ne(n, t) {
    return qb(n, t, 8);
}
function Gg(n, t) {
    return qb(n, t, 4);
}
function De(n, t) {
    return t === 0 ? n : n.shru(t).or(n.shl(64 - t));
}
function ar(n, t, e = Pu('9ddfea08eb382d69')) {
    let s = n.xor(t).mul(e);
    s = s.xor(s.shru(47));
    let r = t.xor(s).mul(e);
    return (r = r.xor(r.shru(47))), (r = r.mul(e)), r;
}
function JI(n, t, e, s, r, o) {
    (r = r.add(n)), (o = De(o.add(r).add(s), 21));
    const i = r;
    return (
        (r = r.add(t)),
        (r = r.add(e)),
        (o = o.add(De(r, 44))),
        [r.add(s), o.add(i)]
    );
}
function Cl(n, t, e, s) {
    return JI(ne(n, t), ne(n, t + 8), ne(n, t + 16), ne(n, t + 24), e, s);
}
function QI(n, t = n.length) {
    if (t >= 8) {
        const e = Je.add(t * 2),
            s = ne(n, 0).add(Je),
            r = ne(n, t - 8),
            o = De(r, 37).mul(e).add(s),
            i = De(s, 25).add(r).mul(e);
        return ar(o, i, e);
    }
    if (t >= 4) {
        const e = Je.add(t * 2),
            s = Gg(n, 0);
        return ar(s.shl(3).add(t), Gg(n, t - 4), e);
    }
    if (t > 0) {
        const e = n[0],
            s = n[t >> 1],
            r = n[t - 1],
            o = e + (s << 8),
            i = t + (r << 2);
        return dd(Je.mul(o).xor(jb.mul(i))).mul(Je);
    }
    return Je;
}
function tC(n, t = n.length) {
    const e = Je.add(t * 2),
        s = ne(n, 0).mul(Mr),
        r = ne(n, 8),
        o = ne(n, t - 8).mul(e),
        i = ne(n, t - 16).mul(Je);
    return ar(
        De(s.add(r), 43).add(De(o, 30)).add(i),
        s.add(De(r.add(Je), 18)).add(o),
        e
    );
}
function eC(n, t = n.length) {
    const e = Je.add(t * 2),
        s = ne(n, 0).mul(Je),
        r = ne(n, 8),
        o = ne(n, t - 8).mul(e),
        i = ne(n, t - 16).mul(Je),
        a = De(s.add(r), 43).add(De(o, 30)).add(i),
        l = ar(a, s.add(De(r.add(Je), 18)).add(o), e),
        c = ne(n, 16).mul(e),
        u = ne(n, 24),
        h = a.add(ne(n, t - 32)).mul(e),
        d = l.add(ne(n, t - 24)).mul(e);
    return ar(
        De(c.add(u), 43).add(De(h, 30)).add(d),
        c.add(De(u.add(s), 18)).add(h),
        e
    );
}
function nC(n, t = n.length) {
    const e = Wr.fromNumber(81, !0);
    if (t <= 32) return t <= 16 ? QI(n, t) : tC(n, t);
    if (t <= 64) return eC(n, t);
    let s = e,
        r = e.mul(Mr).add(113),
        o = dd(r.mul(Je).add(113)).mul(Je),
        i = [Wr.UZERO, Wr.UZERO],
        a = [Wr.UZERO, Wr.UZERO];
    s = s.mul(Je).add(ne(n, 0));
    let l = 0;
    const c = ((t - 1) >> 6) * 64,
        u = c + ((t - 1) & 63) - 63;
    do
        (s = De(
            s
                .add(r)
                .add(i[0])
                .add(ne(n, l + 8)),
            37
        ).mul(Mr)),
            (r = De(r.add(i[1]).add(ne(n, l + 48)), 42).mul(Mr)),
            (s = s.xor(a[1])),
            (r = r.add(i[0]).add(ne(n, l + 40))),
            (o = De(o.add(a[0]), 33).mul(Mr)),
            (i = Cl(n, l, i[1].mul(Mr), s.add(a[0]))),
            (a = Cl(n, l + 32, o.add(a[1]), r.add(ne(n, l + 16)))),
            ([o, s] = [s, o]),
            (l += 64);
    while (l !== c);
    const h = Mr.add(o.and(255).shl(1));
    return (
        (l = u),
        (a[0] = a[0].add((t - 1) & 63)),
        (i[0] = i[0].add(a[0])),
        (a[0] = a[0].add(i[0])),
        (s = De(
            s
                .add(r)
                .add(i[0])
                .add(ne(n, l + 8)),
            37
        ).mul(h)),
        (r = De(r.add(i[1]).add(ne(n, l + 48)), 42).mul(h)),
        (s = s.xor(a[1].mul(9))),
        (r = r.add(i[0].mul(9).add(ne(n, l + 40)))),
        (o = De(o.add(a[0]), 33).mul(h)),
        (i = Cl(n, l, i[1].mul(h), s.add(a[0]))),
        (a = Cl(n, l + 32, o.add(a[1]), r.add(ne(n, l + 16)))),
        ([o, s] = [s, o]),
        ar(
            ar(i[0], a[0], h).add(dd(r).mul(jb)).add(o),
            ar(i[1], a[1], h).add(s),
            h
        )
    );
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Ir(n, t) {
    return t === 'string' ? lr(n) : go([n], t);
}
function sC(n, t) {
    return (
        (n instanceof Float32Array && t === 'float32') ||
        (n instanceof Int32Array && t === 'int32') ||
        (n instanceof Uint8Array && t === 'bool')
    );
}
function go(n, t) {
    if (t === 'string')
        throw new Error('Cannot convert a string[] to a TypedArray');
    if (
        (Array.isArray(n) && (n = so(n)),
        tt().getBool('DEBUG') && DI(n, t),
        sC(n, t))
    )
        return n;
    if (t == null || t === 'float32' || t === 'complex64')
        return new Float32Array(n);
    if (t === 'int32') return new Int32Array(n);
    if (t === 'bool') {
        const e = new Uint8Array(n.length);
        for (let s = 0; s < e.length; ++s) Math.round(n[s]) !== 0 && (e[s] = 1);
        return e;
    } else throw new Error(`Unknown data type ${t}`);
}
function on() {
    return tt().platform.now();
}
function lr(n, t = 'utf-8') {
    return (t = t || 'utf-8'), tt().platform.encode(n, t);
}
function dr(n, t = 'utf-8') {
    return (t = t || 'utf-8'), tt().platform.decode(n, t);
}
function Zn(n) {
    return tt().platform.isTypedArray != null
        ? tt().platform.isTypedArray(n)
        : Bb(n);
}
function so(n, t = [], e = !1) {
    if (
        (t == null && (t = []),
        typeof n == 'boolean' ||
            typeof n == 'number' ||
            typeof n == 'string' ||
            no(n) ||
            n == null ||
            (Zn(n) && e))
    )
        t.push(n);
    else if (Array.isArray(n) || Zn(n))
        for (let s = 0; s < n.length; ++s) so(n[s], t, e);
    else {
        let s = -1;
        for (const r of Object.keys(n))
            /^([1-9]+[0-9]*|0)$/.test(r) && (s = Math.max(s, Number(r)));
        for (let r = 0; r <= s; r++) so(n[r], t, e);
    }
    return t;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class rC {
    constructor(t, e) {
        (this.backendTimer = t),
            (this.logger = e),
            e == null && (this.logger = new iC());
    }
    profileKernel(t, e, s) {
        let r;
        const o = () => {
            r = s();
        };
        let i;
        const a = on();
        if (this.backendTimer.timerAvailable()) i = this.backendTimer.time(o);
        else {
            o();
            for (const c of r) c.dataSync();
            i = Promise.resolve({ kernelMs: on() - a });
        }
        if (tt().getBool('CHECK_COMPUTATION_FOR_ERRORS'))
            for (let c = 0; c < r.length; c++) {
                const u = r[c];
                u.data().then((h) => {
                    oC(h, u.dtype, t);
                });
            }
        return {
            kernelName: t,
            outputs: r,
            inputs: e,
            timeMs: i.then((c) => c.kernelMs),
            extraInfo: i.then((c) =>
                c.getExtraProfileInfo != null ? c.getExtraProfileInfo() : ''
            ),
        };
    }
    logKernelProfile(t) {
        const {
            kernelName: e,
            outputs: s,
            timeMs: r,
            inputs: o,
            extraInfo: i,
        } = t;
        s.forEach((a) => {
            Promise.all([a.data(), r, i]).then((l) => {
                this.logger.logKernelProfile(e, a, l[0], l[1], o, l[2]);
            });
        });
    }
}
function oC(n, t, e) {
    if (t !== 'float32') return !1;
    for (let s = 0; s < n.length; s++) {
        const r = n[s];
        if (isNaN(r) || !isFinite(r))
            return console.warn(`Found ${r} in the result of '${e}'`), !0;
    }
    return !1;
}
class iC {
    logKernelProfile(t, e, s, r, o, i) {
        const a = typeof r == 'number' ? Mo(`${r}ms`, 9) : r.error,
            l = Mo(t, 25),
            c = e.rank,
            u = e.size,
            h = Mo(e.shape.toString(), 14);
        let d = '';
        for (const p in o) {
            const f = o[p];
            if (f != null) {
                const m = f.shape || e.shape,
                    g = m.length;
                d += `${p}: ${g}D ${g > 0 ? m : ''} `;
            }
        }
        console.log(
            `%c${l}	%c${a}	%c${c}D ${h}	%c${u}	%c${d}	%c${i}`,
            'font-weight:bold',
            'color:red',
            'color:blue',
            'color: orange',
            'color: green',
            'color: steelblue'
        );
    }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function aC(n, t, e) {
    const s = {},
        r = {};
    for (let l = 0; l < t.length; l++) s[t[l].id] = !0;
    for (let l = 0; l < n.length; l++) {
        const c = n[l],
            u = c.inputs;
        for (const h in u) {
            const d = u[h];
            let p = !1;
            for (let f = 0; f < t.length; f++)
                if (s[d.id]) {
                    c.outputs.forEach((m) => (s[m.id] = !0)),
                        (p = !0),
                        (r[c.id] = !0);
                    break;
                }
            if (p) break;
        }
    }
    const o = {};
    o[e.id] = !0;
    const i = {};
    for (let l = n.length - 1; l >= 0; l--) {
        const c = n[l],
            u = c.inputs;
        for (let h = 0; h < c.outputs.length; h++)
            if (o[c.outputs[h].id]) {
                for (const d in u) (o[u[d].id] = !0), (i[c.id] = !0);
                break;
            }
    }
    const a = [];
    for (let l = 0; l < n.length; l++) {
        const c = n[l];
        if (r[c.id] && i[c.id]) {
            const u = {};
            for (const d in c.inputs) {
                const p = c.inputs[d];
                s[p.id] && (u[d] = p);
            }
            const h = Object.assign({}, c);
            (h.inputs = u), (h.outputs = c.outputs), a.push(h);
        }
    }
    return a;
}
function lC(n, t, e, s) {
    for (let r = t.length - 1; r >= 0; r--) {
        const o = t[r],
            i = [];
        if (
            (o.outputs.forEach((l) => {
                const c = n[l.id];
                c != null ? i.push(c) : i.push(null);
            }),
            o.gradient == null)
        )
            throw new Error(
                `Cannot compute gradient: gradient function not found for ${o.kernelName}.`
            );
        const a = o.gradient(i);
        for (const l in o.inputs) {
            if (!(l in a))
                throw new Error(
                    `Cannot backprop through input ${l}. Available gradients found: ${Object.keys(
                        a
                    )}.`
                );
            const c = e(() => a[l]());
            if (c.dtype !== 'float32')
                throw new Error(
                    `Error in gradient for op ${o.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${c.dtype}'`
                );
            const u = o.inputs[l];
            if (!Ut(c.shape, u.shape))
                throw new Error(
                    `Error in gradient for op ${o.kernelName}. The gradient of input '${l}' has shape '${c.shape}', which does not match the shape of the input '${u.shape}'`
                );
            if (n[u.id] == null) n[u.id] = c;
            else {
                const h = n[u.id];
                (n[u.id] = s(h, c)), h.dispose();
            }
        }
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Hg = 20,
    _i = 3,
    Fh = 7;
function cC(n, t, e, s) {
    const r = _t(t),
        o = uC(n, t, e, r),
        i = t.length,
        a = Ul(n, t, e, r, o),
        l = ['Tensor'];
    return (
        s &&
            (l.push(`  dtype: ${e}`),
            l.push(`  rank: ${i}`),
            l.push(`  shape: [${t}]`),
            l.push('  values:')),
        l.push(
            a.map((c) => '    ' + c).join(`
`)
        ),
        l.join(`
`)
    );
}
function uC(n, t, e, s) {
    const r = rt(t),
        o = s[s.length - 1],
        i = new Array(o).fill(0),
        a = t.length,
        l = e === 'complex64' ? Fi(n) : n;
    if (a > 1)
        for (let c = 0; c < r / o; c++) {
            const u = c * o;
            for (let h = 0; h < o; h++)
                i[h] = Math.max(i[h], Oi(l[u + h], 0, e).length);
        }
    return i;
}
function Oi(n, t, e) {
    let s;
    return (
        Array.isArray(n)
            ? (s = `${parseFloat(n[0].toFixed(Fh))} + ${parseFloat(
                  n[1].toFixed(Fh)
              )}j`)
            : sa(n)
            ? (s = `'${n}'`)
            : e === 'bool'
            ? (s = Kb(n))
            : (s = parseFloat(n.toFixed(Fh)).toString()),
        Mo(s, t)
    );
}
function Kb(n) {
    return n === 0 ? 'false' : 'true';
}
function Ul(n, t, e, s, r, o = !0) {
    const i = e === 'complex64' ? 2 : 1,
        a = t[0],
        l = t.length;
    if (l === 0) {
        if (e === 'complex64') {
            const m = Fi(n);
            return [Oi(m[0], 0, e)];
        }
        return e === 'bool' ? [Kb(n[0])] : [n[0].toString()];
    }
    if (l === 1) {
        if (a > Hg) {
            const g = _i * i;
            let y = Array.from(n.slice(0, g)),
                b = Array.from(n.slice((a - _i) * i, a * i));
            return (
                e === 'complex64' && ((y = Fi(y)), (b = Fi(b))),
                [
                    '[' +
                        y.map((w, x) => Oi(w, r[x], e)).join(', ') +
                        ', ..., ' +
                        b.map((w, x) => Oi(w, r[a - _i + x], e)).join(', ') +
                        ']',
                ]
            );
        }
        return [
            '[' +
                (e === 'complex64' ? Fi(n) : Array.from(n))
                    .map((g, y) => Oi(g, r[y], e))
                    .join(', ') +
                ']',
        ];
    }
    const c = t.slice(1),
        u = s.slice(1),
        h = s[0] * i,
        d = [];
    if (a > Hg) {
        for (let m = 0; m < _i; m++) {
            const g = m * h,
                y = g + h;
            d.push(...Ul(n.slice(g, y), c, e, u, r, !1));
        }
        d.push('...');
        for (let m = a - _i; m < a; m++) {
            const g = m * h,
                y = g + h;
            d.push(...Ul(n.slice(g, y), c, e, u, r, m === a - 1));
        }
    } else
        for (let m = 0; m < a; m++) {
            const g = m * h,
                y = g + h;
            d.push(...Ul(n.slice(g, y), c, e, u, r, m === a - 1));
        }
    const p = l === 2 ? ',' : '';
    d[0] = '[' + (a > 0 ? d[0] + p : '');
    for (let m = 1; m < d.length - 1; m++) d[m] = ' ' + d[m] + p;
    let f = `,
`;
    for (let m = 2; m < l; m++)
        f += `
`;
    return (d[d.length - 1] = ' ' + d[d.length - 1] + ']' + (o ? '' : f)), d;
}
function Fi(n) {
    const t = [];
    for (let e = 0; e < n.length; e += 2) t.push([n[e], n[e + 1]]);
    return t;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class Te {
    constructor(t, e, s) {
        if (
            ((this.dtype = e),
            (this.shape = t.slice()),
            (this.size = rt(t)),
            s != null)
        ) {
            const r = s.length;
            _(
                r === this.size,
                () =>
                    `Length of values '${r}' does not match the size inferred by the shape '${this.size}'.`
            );
        }
        if (e === 'complex64')
            throw new Error(
                'complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).'
            );
        (this.values = s || be(e, this.size)), (this.strides = _t(t));
    }
    set(t, ...e) {
        e.length === 0 && (e = [0]),
            _(
                e.length === this.rank,
                () =>
                    `The number of provided coordinates (${e.length}) must match the rank (${this.rank})`
            );
        const s = this.locToIndex(e);
        this.values[s] = t;
    }
    get(...t) {
        t.length === 0 && (t = [0]);
        let e = 0;
        for (const r of t) {
            if (r < 0 || r >= this.shape[e]) {
                const o = `Requested out of range element at ${t}.   Buffer shape=${this.shape}`;
                throw new Error(o);
            }
            e++;
        }
        let s = t[t.length - 1];
        for (let r = 0; r < t.length - 1; ++r) s += this.strides[r] * t[r];
        return this.values[s];
    }
    locToIndex(t) {
        if (this.rank === 0) return 0;
        if (this.rank === 1) return t[0];
        let e = t[t.length - 1];
        for (let s = 0; s < t.length - 1; ++s) e += this.strides[s] * t[s];
        return e;
    }
    indexToLoc(t) {
        if (this.rank === 0) return [];
        if (this.rank === 1) return [t];
        const e = new Array(this.shape.length);
        for (let s = 0; s < e.length - 1; ++s)
            (e[s] = Math.floor(t / this.strides[s])),
                (t -= e[s] * this.strides[s]);
        return (e[e.length - 1] = t), e;
    }
    get rank() {
        return this.shape.length;
    }
    toTensor() {
        return os().makeTensor(this.values, this.shape, this.dtype);
    }
}
let os = null,
    Fo = null;
function hC(n) {
    os = n;
}
function dC(n) {
    Fo = n;
}
class ce {
    constructor(t, e, s, r) {
        (this.kept = !1),
            (this.isDisposedInternal = !1),
            (this.shape = t.slice()),
            (this.dtype = e || 'float32'),
            (this.size = rt(t)),
            (this.strides = _t(t)),
            (this.dataId = s),
            (this.id = r),
            (this.rankType = this.rank < 5 ? this.rank.toString() : 'higher');
    }
    get rank() {
        return this.shape.length;
    }
    async buffer() {
        const t = await this.data();
        return Fo.buffer(this.shape, this.dtype, t);
    }
    bufferSync() {
        return Fo.buffer(this.shape, this.dtype, this.dataSync());
    }
    async array() {
        const t = await this.data();
        return Xn(this.shape, t, this.dtype === 'complex64');
    }
    arraySync() {
        return Xn(this.shape, this.dataSync(), this.dtype === 'complex64');
    }
    async data() {
        this.throwIfDisposed();
        const t = os().read(this.dataId);
        if (this.dtype === 'string') {
            const e = await t;
            try {
                return e.map((s) => dr(s));
            } catch {
                throw new Error(
                    'Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().'
                );
            }
        }
        return t;
    }
    dataToGPU(t) {
        return this.throwIfDisposed(), os().readToGPU(this.dataId, t);
    }
    dataSync() {
        this.throwIfDisposed();
        const t = os().readSync(this.dataId);
        if (this.dtype === 'string')
            try {
                return t.map((e) => dr(e));
            } catch {
                throw new Error(
                    'Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().'
                );
            }
        return t;
    }
    async bytes() {
        this.throwIfDisposed();
        const t = await os().read(this.dataId);
        return this.dtype === 'string' ? t : new Uint8Array(t.buffer);
    }
    dispose() {
        this.isDisposed ||
            (this.kerasMask && this.kerasMask.dispose(),
            os().disposeTensor(this),
            (this.isDisposedInternal = !0));
    }
    get isDisposed() {
        return this.isDisposedInternal;
    }
    throwIfDisposed() {
        if (this.isDisposed) throw new Error('Tensor is disposed.');
    }
    print(t = !1) {
        return Fo.print(this, t);
    }
    clone() {
        return this.throwIfDisposed(), Fo.clone(this);
    }
    toString(t = !1) {
        const e = this.dataSync();
        return cC(e, this.shape, this.dtype, t);
    }
    cast(t) {
        return this.throwIfDisposed(), Fo.cast(this, t);
    }
    variable(t = !0, e, s) {
        return this.throwIfDisposed(), os().makeVariable(this, t, e, s);
    }
}
Object.defineProperty(ce, Symbol.hasInstance, {
    value: (n) =>
        !!n &&
        n.data != null &&
        n.dataSync != null &&
        n.throwIfDisposed != null,
});
function it() {
    return up('Tensor', () => ce);
}
it();
class rc extends ce {
    constructor(t, e, s, r) {
        super(t.shape, t.dtype, t.dataId, r),
            (this.trainable = e),
            (this.name = s);
    }
    assign(t) {
        if (t.dtype !== this.dtype)
            throw new Error(
                `dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`
            );
        if (!Ut(t.shape, this.shape))
            throw new Error(
                `shape of the new value (${t.shape}) and previous value (${this.shape}) must match`
            );
        os().disposeTensor(this),
            (this.dataId = t.dataId),
            os().incRef(this, null);
    }
    dispose() {
        os().disposeVariable(this), (this.isDisposedInternal = !0);
    }
}
Object.defineProperty(rc, Symbol.hasInstance, {
    value: (n) =>
        n instanceof ce && n.assign != null && n.assign instanceof Function,
});
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var jg;
(function (n) {
    (n.R0 = 'R0'),
        (n.R1 = 'R1'),
        (n.R2 = 'R2'),
        (n.R3 = 'R3'),
        (n.R4 = 'R4'),
        (n.R5 = 'R5'),
        (n.R6 = 'R6');
})(jg || (jg = {}));
var pd;
(function (n) {
    (n.float32 = 'float32'),
        (n.int32 = 'int32'),
        (n.bool = 'int32'),
        (n.complex64 = 'complex64');
})(pd || (pd = {}));
var fd;
(function (n) {
    (n.float32 = 'float32'),
        (n.int32 = 'int32'),
        (n.bool = 'bool'),
        (n.complex64 = 'complex64');
})(fd || (fd = {}));
var md;
(function (n) {
    (n.float32 = 'float32'),
        (n.int32 = 'float32'),
        (n.bool = 'float32'),
        (n.complex64 = 'complex64');
})(md || (md = {}));
var gd;
(function (n) {
    (n.float32 = 'complex64'),
        (n.int32 = 'complex64'),
        (n.bool = 'complex64'),
        (n.complex64 = 'complex64');
})(gd || (gd = {}));
const pC = { float32: md, int32: pd, bool: fd, complex64: gd };
function vn(n, t) {
    if (n === 'string' || t === 'string') {
        if (n === 'string' && t === 'string') return 'string';
        throw new Error(`Can not upcast ${n} with ${t}`);
    }
    return pC[n][t];
}
function bf(n) {
    return vn(n, 'int32');
}
function Xb(n) {
    return (
        n != null &&
        typeof n == 'object' &&
        'texture' in n &&
        n.texture instanceof WebGLTexture
    );
}
function Yb(n) {
    return (
        typeof GPUBuffer < 'u' &&
        n != null &&
        typeof n == 'object' &&
        'buffer' in n &&
        n.buffer instanceof GPUBuffer
    );
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function ye(n, t) {
    if (n.dtype === t.dtype) return [n, t];
    const e = vn(n.dtype, t.dtype);
    return [n.cast(e), t.cast(e)];
}
function fC(n, t) {
    _(
        n.dtype === t.dtype,
        () =>
            `The dtypes of the first(${n.dtype}) and second(${t.dtype}) input must match`
    );
}
function Zb(n) {
    const t = [];
    return Jb(n, t, new Set()), t;
}
function Jb(n, t, e) {
    if (n == null) return;
    if (n instanceof ce) {
        t.push(n);
        return;
    }
    if (!mC(n)) return;
    const s = n;
    for (const r in s) {
        const o = s[r];
        e.has(o) || (e.add(o), Jb(o, t, e));
    }
}
function mC(n) {
    return Array.isArray(n) || typeof n == 'object';
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Lh(n) {
    return n.kernelName != null;
}
class qg {
    constructor() {
        (this.registeredVariables = {}),
            (this.nextTapeNodeId = 0),
            (this.numBytes = 0),
            (this.numTensors = 0),
            (this.numStringTensors = 0),
            (this.numDataBuffers = 0),
            (this.gradientDepth = 0),
            (this.kernelDepth = 0),
            (this.scopeStack = []),
            (this.numDataMovesStack = []),
            (this.nextScopeId = 0),
            (this.tensorInfo = new WeakMap()),
            (this.profiling = !1),
            (this.activeProfile = {
                newBytes: 0,
                newTensors: 0,
                peakBytes: 0,
                kernels: [],
                result: null,
                get kernelNames() {
                    return Array.from(new Set(this.kernels.map((t) => t.name)));
                },
            });
    }
    dispose() {
        for (const t in this.registeredVariables)
            this.registeredVariables[t].dispose();
    }
}
class Yo {
    constructor(t) {
        (this.ENV = t),
            (this.registry = {}),
            (this.registryFactory = {}),
            (this.pendingBackendInitId = 0),
            (this.state = new qg());
    }
    async ready() {
        if (this.pendingBackendInit != null)
            return this.pendingBackendInit.then(() => {});
        if (this.backendInstance != null) return;
        const t = this.getSortedBackends();
        for (let e = 0; e < t.length; e++) {
            const s = t[e];
            if (await this.initializeBackend(s).success) {
                await this.setBackend(s);
                return;
            }
        }
        throw new Error(
            'Could not initialize any backends, all backend initializations failed.'
        );
    }
    get backend() {
        if (this.pendingBackendInit != null)
            throw new Error(
                `Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`
            );
        if (this.backendInstance == null) {
            const { name: t, asyncInit: e } =
                this.initializeBackendsAndReturnBest();
            if (e)
                throw new Error(
                    `The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`
                );
            this.setBackend(t);
        }
        return this.backendInstance;
    }
    backendNames() {
        return Object.keys(this.registryFactory);
    }
    findBackend(t) {
        if (!(t in this.registry))
            if (t in this.registryFactory) {
                const { asyncInit: e } = this.initializeBackend(t);
                if (e) return null;
            } else return null;
        return this.registry[t];
    }
    findBackendFactory(t) {
        return t in this.registryFactory
            ? this.registryFactory[t].factory
            : null;
    }
    registerBackend(t, e, s = 1) {
        return t in this.registryFactory
            ? (En(
                  `${t} backend was already registered. Reusing existing backend factory.`
              ),
              !1)
            : ((this.registryFactory[t] = { factory: e, priority: s }), !0);
    }
    async setBackend(t) {
        if (this.registryFactory[t] == null)
            throw new Error(`Backend name '${t}' not found in registry`);
        if (((this.backendName = t), this.registry[t] == null)) {
            this.backendInstance = null;
            const { success: e, asyncInit: s } = this.initializeBackend(t);
            if (!(s ? await e : e)) return !1;
        }
        return (
            (this.backendInstance = this.registry[t]),
            this.setupRegisteredKernels(),
            (this.profiler = new rC(this.backendInstance)),
            !0
        );
    }
    setupRegisteredKernels() {
        zg(this.backendName).forEach((e) => {
            e.setupFunc != null && e.setupFunc(this.backendInstance);
        });
    }
    disposeRegisteredKernels(t) {
        zg(t).forEach((s) => {
            s.disposeFunc != null && s.disposeFunc(this.registry[t]);
        });
    }
    initializeBackend(t) {
        const e = this.registryFactory[t];
        if (e == null)
            throw new Error(
                `Cannot initialize backend ${t}, no registration found.`
            );
        try {
            const s = e.factory();
            if (s && !(s instanceof ap) && typeof s.then == 'function') {
                const r = ++this.pendingBackendInitId,
                    o = s
                        .then((i) =>
                            r < this.pendingBackendInitId
                                ? !1
                                : ((this.registry[t] = i),
                                  (this.pendingBackendInit = null),
                                  !0)
                        )
                        .catch(
                            (i) => (
                                r < this.pendingBackendInitId ||
                                    ((this.pendingBackendInit = null),
                                    En(`Initialization of backend ${t} failed`),
                                    En(i.stack || i.message)),
                                !1
                            )
                        );
                return (
                    (this.pendingBackendInit = o), { success: o, asyncInit: !0 }
                );
            } else
                return (this.registry[t] = s), { success: !0, asyncInit: !1 };
        } catch (s) {
            return (
                En(`Initialization of backend ${t} failed`),
                En(s.stack || s.message),
                { success: !1, asyncInit: !1 }
            );
        }
    }
    removeBackend(t) {
        if (!(t in this.registryFactory))
            throw new Error(`${t} backend not found in registry`);
        this.backendName === t &&
            this.pendingBackendInit != null &&
            this.pendingBackendInitId++,
            t in this.registry &&
                (this.disposeRegisteredKernels(t),
                this.registry[t].dispose(),
                delete this.registry[t]),
            delete this.registryFactory[t],
            this.backendName === t &&
                ((this.pendingBackendInit = null),
                (this.backendName = null),
                (this.backendInstance = null));
    }
    getSortedBackends() {
        if (Object.keys(this.registryFactory).length === 0)
            throw new Error('No backend found in registry.');
        return Object.keys(this.registryFactory).sort(
            (t, e) =>
                this.registryFactory[e].priority -
                this.registryFactory[t].priority
        );
    }
    initializeBackendsAndReturnBest() {
        const t = this.getSortedBackends();
        for (let e = 0; e < t.length; e++) {
            const s = t[e],
                { success: r, asyncInit: o } = this.initializeBackend(s);
            if (o || r) return { name: s, asyncInit: o };
        }
        throw new Error(
            'Could not initialize any backends, all backend initializations failed.'
        );
    }
    moveData(t, e) {
        const s = this.state.tensorInfo.get(e),
            r = s.backend,
            o = this.readSync(e),
            i = r.refCount(e);
        r.disposeData(e, !0),
            (s.backend = t),
            t.move(e, o, s.shape, s.dtype, i),
            this.shouldCheckForMemLeaks() &&
                this.state.numDataMovesStack[
                    this.state.numDataMovesStack.length - 1
                ]++;
    }
    tidy(t, e) {
        let s = null;
        if (e == null) {
            if (typeof t != 'function')
                throw new Error('Please provide a function to tidy()');
            e = t;
        } else {
            if (typeof t != 'string' && !(t instanceof String))
                throw new Error(
                    'When calling with two arguments, the first argument to tidy() must be a string'
                );
            if (typeof e != 'function')
                throw new Error(
                    'When calling with two arguments, the 2nd argument to tidy() must be a function'
                );
            s = t;
        }
        let r;
        return this.scopedRun(
            () => this.startScope(s),
            () => this.endScope(r),
            () => (
                (r = e()),
                r instanceof Promise &&
                    console.error('Cannot return a Promise inside of tidy.'),
                r
            )
        );
    }
    scopedRun(t, e, s) {
        t();
        try {
            const r = s();
            return e(), r;
        } catch (r) {
            throw (e(), r);
        }
    }
    nextTensorId() {
        return Yo.nextTensorId++;
    }
    nextVariableId() {
        return Yo.nextVariableId++;
    }
    clone(t) {
        const e = V.runKernel(Ia, { x: t }),
            s = { x: t },
            r = (i) => ({
                x: () => {
                    const a = 'float32',
                        l = { x: i },
                        c = { dtype: a };
                    return V.runKernel(ha, l, c);
                },
            }),
            o = [];
        return (
            this.addTapeNode(this.state.activeScope.name, s, [e], r, o, {}), e
        );
    }
    runKernel(t, e, s) {
        if (
            (this.backendName == null && this.backend,
            !(ud(t, this.backendName) != null))
        )
            throw new Error(
                `Kernel '${t}' not registered for backend '${this.backendName}'`
            );
        return this.runKernelFunc({ kernelName: t, inputs: e, attrs: s });
    }
    shouldCheckForMemLeaks() {
        return this.ENV.getBool('IS_TEST');
    }
    checkKernelForMemLeak(t, e, s) {
        const r = this.backend.numDataIds();
        let o = 0;
        s.forEach((l) => {
            o += l.dtype === 'complex64' ? 3 : 1;
        });
        const i =
                this.state.numDataMovesStack[
                    this.state.numDataMovesStack.length - 1
                ],
            a = r - e - o - i;
        if (a > 0)
            throw new Error(
                `Backend '${this.backendName}' has an internal memory leak (${a} data ids) after running '${t}'`
            );
    }
    runKernelFunc(t) {
        let e,
            s = [];
        const r = this.isTapeOn(),
            o = this.state.numBytes,
            i = this.state.numTensors;
        this.shouldCheckForMemLeaks() && this.state.numDataMovesStack.push(0);
        let a;
        this.backendName == null && this.backend;
        let l;
        const c = Lh(t)
            ? t.kernelName
            : this.state.activeScope != null
            ? this.state.activeScope.name
            : '';
        if (Lh(t)) {
            const { kernelName: f, inputs: m, attrs: g } = t;
            this.backendName == null && this.backend;
            const y = ud(f, this.backendName);
            _(
                y != null,
                () =>
                    `Cannot find registered kernel '${f}' for backend '${this.backendName}'`
            ),
                (a = () => {
                    const b = this.backend.numDataIds();
                    l = y.kernelFunc({
                        inputs: m,
                        attrs: g,
                        backend: this.backend,
                    });
                    const w = Array.isArray(l) ? l : [l];
                    this.shouldCheckForMemLeaks() &&
                        this.checkKernelForMemLeak(f, b, w);
                    const x = w.map((v) =>
                        v.rank != null ? v : this.makeTensorFromTensorInfo(v)
                    );
                    if (r) {
                        const v = this.getTensorsForGradient(f, m, x);
                        s = this.saveTensorsForBackwardMode(v);
                    }
                    return x;
                });
        } else {
            const { forwardFunc: f } = t,
                m = (g) => {
                    r && (s = g.map((y) => this.keep(this.clone(y))));
                };
            a = () => {
                const g = this.backend.numDataIds();
                l = this.tidy(() => f(this.backend, m));
                const y = Array.isArray(l) ? l : [l];
                return (
                    this.shouldCheckForMemLeaks() &&
                        this.checkKernelForMemLeak(c, g, y),
                    y
                );
            };
        }
        const { inputs: u, attrs: h } = t,
            d = Lh(t) ? null : t.backwardsFunc;
        let p;
        return (
            this.scopedRun(
                () => this.state.kernelDepth++,
                () => this.state.kernelDepth--,
                () => {
                    !this.ENV.getBool('DEBUG') && !this.state.profiling
                        ? (e = a())
                        : ((p = this.profiler.profileKernel(c, u, () => a())),
                          this.ENV.getBool('DEBUG') &&
                              this.profiler.logKernelProfile(p),
                          (e = p.outputs));
                }
            ),
            r && this.addTapeNode(c, u, e, d, s, h),
            this.state.profiling &&
                this.state.activeProfile.kernels.push({
                    name: c,
                    bytesAdded: this.state.numBytes - o,
                    totalBytesSnapshot: this.state.numBytes,
                    tensorsAdded: this.state.numTensors - i,
                    totalTensorsSnapshot: this.state.numTensors,
                    inputShapes: Object.keys(u).map((f) =>
                        u[f] != null ? u[f].shape : null
                    ),
                    outputShapes: e.map((f) => f.shape),
                    kernelTimeMs: p.timeMs,
                    extraInfo: p.extraInfo,
                }),
            Array.isArray(l) ? e : e[0]
        );
    }
    saveTensorsForBackwardMode(t) {
        return t.map((s) => this.keep(this.clone(s)));
    }
    getTensorsForGradient(t, e, s) {
        const r = Pg(t);
        if (r != null) {
            const o = r.inputsToSave || [],
                i = r.outputsToSave || [];
            let a;
            r.saveAllInputs
                ? (_(
                      Array.isArray(e),
                      () =>
                          'saveAllInputs is true, expected inputs to be an array.'
                  ),
                  (a = Object.keys(e).map((c) => e[c])))
                : (a = o.map((c) => e[c]));
            const l = s.filter((c, u) => i[u]);
            return a.concat(l);
        }
        return [];
    }
    makeTensor(t, e, s, r) {
        if (t == null)
            throw new Error('Values passed to engine.makeTensor() are null');
        (s = s || 'float32'), (r = r || this.backend);
        let o = t;
        s === 'string' && sa(t[0]) && (o = t.map((l) => lr(l)));
        const i = r.write(o, e, s),
            a = new ce(e, s, i, this.nextTensorId());
        if ((this.trackTensor(a, r), s === 'string')) {
            const l = this.state.tensorInfo.get(i),
                c = FI(o);
            (this.state.numBytes += c - l.bytes), (l.bytes = c);
        }
        return a;
    }
    makeTensorFromDataId(t, e, s, r) {
        s = s || 'float32';
        const o = { dataId: t, shape: e, dtype: s };
        return this.makeTensorFromTensorInfo(o, r);
    }
    makeTensorFromTensorInfo(t, e) {
        const { dataId: s, shape: r, dtype: o } = t,
            i = new ce(r, o, s, this.nextTensorId());
        return this.trackTensor(i, e), i;
    }
    makeVariable(t, e = !0, s, r) {
        (s = s || this.nextVariableId().toString()),
            r != null && r !== t.dtype && (t = t.cast(r));
        const o = new rc(t, e, s, this.nextTensorId());
        if (this.state.registeredVariables[o.name] != null)
            throw new Error(
                `Variable with name ${o.name} was already registered`
            );
        return (
            (this.state.registeredVariables[o.name] = o),
            this.incRef(o, this.backend),
            o
        );
    }
    trackTensor(t, e) {
        this.state.numTensors++,
            t.dtype === 'string' && this.state.numStringTensors++;
        let s = 0;
        t.dtype !== 'complex64' &&
            t.dtype !== 'string' &&
            (s = t.size * Jl(t.dtype)),
            (this.state.numBytes += s),
            this.state.tensorInfo.has(t.dataId) ||
                (this.state.numDataBuffers++,
                this.state.tensorInfo.set(t.dataId, {
                    backend: e || this.backend,
                    dtype: t.dtype,
                    shape: t.shape,
                    bytes: s,
                })),
            t instanceof rc || this.track(t);
    }
    incRef(t, e) {
        this.trackTensor(t, e), this.backend.incRef(t.dataId);
    }
    removeDataId(t, e) {
        this.state.tensorInfo.has(t) &&
            this.state.tensorInfo.get(t).backend === e &&
            (this.state.tensorInfo.delete(t), this.state.numDataBuffers--);
    }
    disposeTensor(t) {
        if (!this.state.tensorInfo.has(t.dataId)) return;
        const e = this.state.tensorInfo.get(t.dataId);
        if (
            (this.state.numTensors--,
            t.dtype === 'string' &&
                (this.state.numStringTensors--,
                (this.state.numBytes -= e.bytes)),
            t.dtype !== 'complex64' && t.dtype !== 'string')
        ) {
            const s = t.size * Jl(t.dtype);
            this.state.numBytes -= s;
        }
        e.backend.disposeData(t.dataId) &&
            this.removeDataId(t.dataId, e.backend);
    }
    disposeVariables() {
        for (const t in this.state.registeredVariables) {
            const e = this.state.registeredVariables[t];
            this.disposeVariable(e);
        }
    }
    disposeVariable(t) {
        this.disposeTensor(t),
            this.state.registeredVariables[t.name] != null &&
                delete this.state.registeredVariables[t.name];
    }
    memory() {
        const t = this.backend.memory();
        return (
            (t.numTensors = this.state.numTensors),
            (t.numDataBuffers = this.state.numDataBuffers),
            (t.numBytes = this.state.numBytes),
            this.state.numStringTensors > 0 &&
                ((t.unreliable = !0),
                t.reasons == null && (t.reasons = []),
                t.reasons.push(
                    'Memory usage by string tensors is approximate (2 bytes per character)'
                )),
            t
        );
    }
    async profile(t) {
        this.state.profiling = !0;
        const e = this.state.numBytes,
            s = this.state.numTensors;
        (this.state.activeProfile.kernels = []),
            (this.state.activeProfile.result = await t()),
            (this.state.profiling = !1),
            (this.state.activeProfile.peakBytes = Math.max(
                ...this.state.activeProfile.kernels.map(
                    (r) => r.totalBytesSnapshot
                )
            )),
            (this.state.activeProfile.newBytes = this.state.numBytes - e),
            (this.state.activeProfile.newTensors = this.state.numTensors - s);
        for (const r of this.state.activeProfile.kernels)
            (r.kernelTimeMs = await r.kernelTimeMs),
                (r.extraInfo = await r.extraInfo);
        return this.state.activeProfile;
    }
    isTapeOn() {
        return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;
    }
    addTapeNode(t, e, s, r, o, i) {
        const a = {
                id: this.state.nextTapeNodeId++,
                kernelName: t,
                inputs: e,
                outputs: s,
                saved: o,
            },
            l = Pg(t);
        l != null && (r = l.gradFunc),
            r != null &&
                (a.gradient = (c) => (
                    (c = c.map((u, h) => {
                        if (u == null) {
                            const d = s[h],
                                p = Ke(d.size, d.dtype);
                            return this.makeTensor(p, d.shape, d.dtype);
                        }
                        return u;
                    })),
                    r(c.length > 1 ? c : c[0], o, i)
                )),
            this.state.activeTape.push(a);
    }
    keep(t) {
        return (t.kept = !0), t;
    }
    startTape() {
        this.state.gradientDepth === 0 && (this.state.activeTape = []),
            this.state.gradientDepth++;
    }
    endTape() {
        this.state.gradientDepth--;
    }
    startScope(t) {
        const e = {
            track: [],
            name: 'unnamed scope',
            id: this.state.nextScopeId++,
        };
        t && (e.name = t),
            this.state.scopeStack.push(e),
            (this.state.activeScope = e);
    }
    endScope(t) {
        const e = Zb(t),
            s = new Set(e.map((o) => o.id));
        for (let o = 0; o < this.state.activeScope.track.length; o++) {
            const i = this.state.activeScope.track[o];
            !i.kept && !s.has(i.id) && i.dispose();
        }
        const r = this.state.scopeStack.pop();
        (this.state.activeScope =
            this.state.scopeStack.length === 0
                ? null
                : this.state.scopeStack[this.state.scopeStack.length - 1]),
            e.forEach((o) => {
                !o.kept && o.scopeId === r.id && this.track(o);
            });
    }
    gradients(t, e, s, r = !1) {
        if (
            (_(e.length > 0, () => 'gradients() received an empty list of xs.'),
            s != null && s.dtype !== 'float32')
        )
            throw new Error(
                `dy must have 'float32' dtype, but has '${s.dtype}'`
            );
        const o = this.scopedRun(
            () => this.startTape(),
            () => this.endTape(),
            () => this.tidy('forward', t)
        );
        _(
            o instanceof ce,
            () => 'The result y returned by f() must be a tensor.'
        );
        const i = aC(this.state.activeTape, e, o);
        if (!r && i.length === 0 && e.length > 0)
            throw new Error(
                'Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.'
            );
        return this.tidy('backward', () => {
            const a = {};
            (a[o.id] = s ?? gC(o.shape)), lC(a, i, (c) => this.tidy(c), yC);
            const l = e.map((c) => a[c.id]);
            return (
                this.state.gradientDepth === 0 &&
                    (this.state.activeTape.forEach((c) => {
                        for (const u of c.saved) u.dispose();
                    }),
                    (this.state.activeTape = null)),
                { value: o, grads: l }
            );
        });
    }
    customGrad(t) {
        return (
            _(rd(t), () => 'The f passed in customGrad(f) must be a function.'),
            (...e) => {
                _(
                    e.every((a) => a instanceof ce),
                    () =>
                        'The args passed in customGrad(f)(x1, x2,...) must all be tensors'
                );
                let s;
                const r = {};
                e.forEach((a, l) => {
                    r[l] = a;
                });
                const o = (a, l) => (
                        (s = t(...e, l)),
                        _(
                            s.value instanceof ce,
                            () =>
                                'The function f passed in customGrad(f) must return an object where `obj.value` is a tensor'
                        ),
                        _(
                            rd(s.gradFunc),
                            () =>
                                'The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.'
                        ),
                        s.value
                    ),
                    i = (a, l) => {
                        const c = s.gradFunc(a, l),
                            u = Array.isArray(c) ? c : [c];
                        _(
                            u.length === e.length,
                            () =>
                                'The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).'
                        ),
                            _(
                                u.every((d) => d instanceof ce),
                                () =>
                                    'The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.'
                            );
                        const h = {};
                        return (
                            u.forEach((d, p) => {
                                h[p] = () => d;
                            }),
                            h
                        );
                    };
                return this.runKernelFunc({
                    forwardFunc: o,
                    backwardsFunc: i,
                    inputs: r,
                });
            }
        );
    }
    readSync(t) {
        return this.state.tensorInfo.get(t).backend.readSync(t);
    }
    read(t) {
        return this.state.tensorInfo.get(t).backend.read(t);
    }
    readToGPU(t, e) {
        return this.state.tensorInfo.get(t).backend.readToGPU(t, e);
    }
    async time(t) {
        const e = on(),
            s = await this.backend.time(t);
        return (s.wallMs = on() - e), s;
    }
    track(t) {
        return (
            this.state.activeScope != null &&
                ((t.scopeId = this.state.activeScope.id),
                this.state.activeScope.track.push(t)),
            t
        );
    }
    get registeredVariables() {
        return this.state.registeredVariables;
    }
    reset() {
        this.pendingBackendInitId++,
            this.state.dispose(),
            this.ENV.reset(),
            (this.state = new qg());
        for (const t in this.registry)
            this.disposeRegisteredKernels(t),
                this.registry[t].dispose(),
                delete this.registry[t];
        (this.backendName = null),
            (this.backendInstance = null),
            (this.pendingBackendInit = null);
    }
}
Yo.nextTensorId = 0;
Yo.nextVariableId = 0;
function gC(n) {
    const t = cp(rt(n), 'float32');
    return V.makeTensor(t, n, 'float32');
}
function Qb() {
    const n = Lb();
    if (n._tfengine == null) {
        const t = new zI(n);
        n._tfengine = new Yo(t);
    }
    return WI(n._tfengine.ENV), hC(() => n._tfengine), n._tfengine;
}
const V = Qb();
function yC(n, t) {
    const e = { a: n, b: t };
    return V.runKernel(pi, e);
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function bC() {
    return typeof navigator < 'u' && navigator != null;
}
function t0(n) {
    if (n || bC()) {
        if ((n || (n = navigator), n.product === 'ReactNative')) return !0;
        const t =
            n.userAgent ||
            n.vendor ||
            (typeof window < 'u' ? window.opera : '');
        if (!t) {
            const e = n;
            return e.userAgentData && e.userAgentData.mobile;
        }
        return (
            /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(
                t
            ) ||
            /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(
                t.substr(0, 4)
            )
        );
    }
    return !1;
}
function e0() {
    return (
        (typeof window < 'u' && window.document != null) ||
        typeof WorkerGlobalScope < 'u'
    );
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const cn = tt();
cn.registerFlag(
    'DEBUG',
    () => !1,
    (n) => {
        n &&
            console.warn(
                'Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.'
            );
    }
);
cn.registerFlag('IS_BROWSER', () => e0());
cn.registerFlag(
    'IS_NODE',
    () =>
        typeof process < 'u' &&
        typeof process.versions < 'u' &&
        typeof process.versions.node < 'u'
);
cn.registerFlag(
    'IS_CHROME',
    () =>
        typeof navigator < 'u' &&
        navigator != null &&
        navigator.userAgent != null &&
        /Chrome/.test(navigator.userAgent) &&
        /Google Inc/.test(navigator.vendor)
);
cn.registerFlag(
    'IS_SAFARI',
    () =>
        typeof navigator < 'u' &&
        navigator != null &&
        navigator.userAgent != null &&
        /Safari/.test(navigator.userAgent) &&
        /Apple/.test(navigator.vendor)
);
cn.registerFlag('PROD', () => !1);
cn.registerFlag('TENSORLIKE_CHECK_SHAPE_CONSISTENCY', () =>
    cn.getBool('DEBUG')
);
cn.registerFlag('DEPRECATION_WARNINGS_ENABLED', () => !0);
cn.registerFlag('IS_TEST', () => !1);
cn.registerFlag('CHECK_COMPUTATION_FOR_ERRORS', () => cn.getBool('DEBUG'));
cn.registerFlag('WRAP_TO_IMAGEBITMAP', () => !1);
cn.registerFlag('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU', () => !1);
cn.registerFlag('USE_SETTIMEOUTCUSTOM', () => !1);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Cr(n, t) {
    let e = n;
    if (Zn(n)) return t === 'string' ? [] : [n.length];
    if (Xb(n)) {
        const r = n.channels || 'RGBA';
        return [n.height, n.width * r.length];
    } else if (Yb(n)) return [n.buffer.size / (t == null ? 4 : Jl(t))];
    if (!Array.isArray(n)) return [];
    const s = [];
    for (; Array.isArray(e) || (Zn(e) && t !== 'string'); )
        s.push(e.length), (e = e[0]);
    return (
        Array.isArray(n) &&
            tt().getBool('TENSORLIKE_CHECK_SHAPE_CONSISTENCY') &&
            n0(n, s, []),
        s
    );
}
function n0(n, t, e) {
    if (((e = e || []), !Array.isArray(n) && !Zn(n))) {
        _(
            t.length === 0,
            () =>
                `Element arr[${e.join(
                    ']['
                )}] is a primitive, but should be an array/TypedArray of ${
                    t[0]
                } elements`
        );
        return;
    }
    _(
        t.length > 0,
        () =>
            `Element arr[${e.join(
                ']['
            )}] should be a primitive, but is an array of ${n.length} elements`
    ),
        _(
            n.length === t[0],
            () =>
                `Element arr[${e.join('][')}] should have ${
                    t[0]
                } elements, but has ${n.length} elements`
        );
    const s = t.slice(1);
    for (let r = 0; r < n.length; ++r) n0(n[r], s, e.concat(r));
}
function Kg(n, t, e, s) {
    if (n !== 'string_or_numeric') {
        if (n == null) throw new Error('Expected dtype cannot be null.');
        if ((n !== 'numeric' && n !== t) || (n === 'numeric' && t === 'string'))
            throw new Error(
                `Argument '${e}' passed to '${s}' must be ${n} tensor, but got ${t} tensor`
            );
    }
}
function A(n, t, e, s = 'numeric') {
    if (n instanceof ce) return Kg(s, n.dtype, t, e), n;
    let r = hi(n);
    if (
        (r !== 'string' &&
            ['bool', 'int32', 'float32'].indexOf(s) >= 0 &&
            (r = s),
        Kg(s, r, t, e),
        n == null ||
            (!Zn(n) &&
                !Array.isArray(n) &&
                typeof n != 'number' &&
                typeof n != 'boolean' &&
                typeof n != 'string'))
    ) {
        const l = n == null ? 'null' : n.constructor.name;
        throw new Error(
            `Argument '${t}' passed to '${e}' must be a Tensor or TensorLike, but got '${l}'`
        );
    }
    const o = Cr(n, r);
    !Zn(n) && !Array.isArray(n) && (n = [n]);
    const a = r !== 'string' ? go(n, r) : so(n, [], !0);
    return V.makeTensor(a, o, r);
}
function oc(n, t, e, s = 'numeric') {
    if (!Array.isArray(n))
        throw new Error(
            `Argument ${t} passed to ${e} must be a \`Tensor[]\` or \`TensorLike[]\``
        );
    return n.map((o, i) => A(o, `${t}[${i}]`, e, s));
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const s0 = '__op';
function B(n) {
    const t = Object.keys(n);
    if (t.length !== 1)
        throw new Error(
            `Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`
        );
    let e = t[0];
    const s = n[e];
    e.endsWith('_') && (e = e.substring(0, e.length - 1)), (e = e + s0);
    const r = (...o) => {
        V.startScope(e);
        try {
            const i = s(...o);
            return (
                no(i) &&
                    console.error('Cannot return a Promise inside of tidy.'),
                V.endScope(i),
                i
            );
        } catch (i) {
            throw (V.endScope(null), i);
        }
    };
    return Object.defineProperty(r, 'name', { value: e, configurable: !0 }), r;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function xC(n, t) {
    const e = A(n, 'real', 'complex'),
        s = A(t, 'imag', 'complex');
    $n(
        e.shape,
        s.shape,
        `real and imag shapes, ${e.shape} and ${s.shape}, must match in call to tf.complex().`
    );
    const r = { real: e, imag: s };
    return V.runKernel(yp, r);
}
const pr = B({ complex_: xC });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function $r(n, t, e, s) {
    if (s == null) s = hi(n);
    else if (s === 'complex64')
        throw new Error(
            'Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).'
        );
    if (Yb(n) || Xb(n)) {
        if (s !== 'float32' && s !== 'int32')
            throw new Error(
                `Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${s}.`
            );
        return V.backend.createTensorFromGPUData(n, t || e, s);
    }
    if (
        !Zn(n) &&
        !Array.isArray(n) &&
        typeof n != 'number' &&
        typeof n != 'boolean' &&
        typeof n != 'string'
    )
        throw new Error(
            'values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray'
        );
    if (t != null) {
        Fn(t);
        const r = rt(t),
            o = rt(e);
        _(
            r === o,
            () =>
                `Based on the provided shape, [${t}], the tensor should have ${r} values but has ${o}`
        );
        for (let i = 0; i < e.length; ++i) {
            const a = e[i],
                l = i === e.length - 1 ? a !== rt(t.slice(i)) : !0;
            _(
                e[i] === t[i] || !l,
                () =>
                    `Error creating a new Tensor. Inferred shape (${e}) does not match the provided shape (${t}). `
            );
        }
    }
    return (
        !Zn(n) && !Array.isArray(n) && (n = [n]),
        (t = t || e),
        (n = s !== 'string' ? go(n, s) : so(n, [], !0)),
        V.makeTensor(n, t, s)
    );
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function ls(n, t, e) {
    const s = Cr(n, e);
    return $r(n, t, s, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const yd = {
    float32: 4,
    float16: 2,
    int32: 4,
    uint16: 2,
    uint8: 1,
    bool: 1,
    complex64: 8,
};
class ms {
    static join(t) {
        return new ms(t).slice();
    }
    constructor(t) {
        if (
            ((this.shards = []),
            (this.previousShardIndex = 0),
            t == null ||
                (t instanceof Array || (t = [t]),
                (t = t.map((s) => (Zn(s) ? s.buffer : s))),
                t.length === 0))
        )
            return;
        this.bufferUniformSize = t[0].byteLength;
        let e = 0;
        for (let s = 0; s < t.length; s++) {
            const r = t[s];
            s !== t.length - 1 &&
                r.byteLength !== this.bufferUniformSize &&
                (this.bufferUniformSize = void 0);
            const o = e + r.byteLength;
            this.shards.push({ buffer: r, start: e, end: o }), (e = o);
        }
        this.shards.length === 0 && (this.byteLength = 0),
            (this.byteLength = this.shards[this.shards.length - 1].end);
    }
    slice(t = 0, e = this.byteLength) {
        if (this.shards.length === 0) return new ArrayBuffer(0);
        if (
            ((t = isNaN(Number(t)) ? 0 : t),
            (e = isNaN(Number(e)) ? 0 : e),
            (t = Math.max(0, t)),
            (e = Math.min(this.byteLength, e)),
            e <= t)
        )
            return new ArrayBuffer(0);
        const s = this.findShardForByte(t);
        if (s === -1)
            throw new Error(`Could not find start shard for byte ${t}`);
        const r = e - t,
            o = new ArrayBuffer(r),
            i = new Uint8Array(o);
        let a = 0;
        for (let l = s; l < this.shards.length; l++) {
            const c = this.shards[l],
                h = t + a - c.start,
                d = a,
                f = Math.min(e, c.end) - c.start,
                m = new Uint8Array(c.buffer, h, f - h);
            if ((i.set(m, d), (a += m.length), e < c.end)) break;
        }
        return o;
    }
    findShardForByte(t) {
        if (this.shards.length === 0 || t < 0 || t >= this.byteLength)
            return -1;
        if (this.bufferUniformSize != null)
            return (
                (this.previousShardIndex = Math.floor(
                    t / this.bufferUniformSize
                )),
                this.previousShardIndex
            );
        function e(r) {
            return t < r.start ? -1 : t >= r.end ? 1 : 0;
        }
        if (e(this.shards[this.previousShardIndex]) === 0)
            return this.previousShardIndex;
        const s = wC(this.shards, e);
        return s === -1
            ? -1
            : ((this.previousShardIndex = s), this.previousShardIndex);
    }
}
function wC(n, t) {
    let e = 0,
        s = n.length;
    for (; e <= s; ) {
        const r = Math.floor((s - e) / 2) + e,
            o = t(n[r]);
        if (o === 0) return r;
        o < 0 ? (s = r) : (e = r + 1);
    }
    return -1;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const ic = 4;
async function bd(n, t) {
    const e = [],
        s = [],
        r = Array.isArray(n) ? n.map((i) => i.name) : Object.keys(n);
    for (let i = 0; i < r.length; ++i) {
        const a = r[i],
            l = Array.isArray(n) ? n[i].tensor : n[a];
        if (
            l.dtype !== 'float32' &&
            l.dtype !== 'int32' &&
            l.dtype !== 'bool' &&
            l.dtype !== 'string' &&
            l.dtype !== 'complex64'
        )
            throw new Error(`Unsupported dtype in weight '${a}': ${l.dtype}`);
        const c = { name: a, shape: l.shape, dtype: l.dtype };
        if (l.dtype === 'string') {
            const u = new Promise(async (h) => {
                const d = await l.bytes(),
                    p = d.reduce((g, y) => g + y.length, 0) + ic * d.length,
                    f = new Uint8Array(p);
                let m = 0;
                for (let g = 0; g < d.length; g++) {
                    const y = d[g],
                        b = new Uint8Array(new Uint32Array([y.length]).buffer);
                    f.set(b, m), (m += ic), f.set(y, m), (m += y.length);
                }
                h(f);
            });
            s.push(u);
        } else s.push(l.data());
        t != null && (c.group = t), e.push(c);
    }
    const o = await Promise.all(s);
    return { data: vC(o), specs: e };
}
function xf(n, t) {
    const e = new ms(n),
        s = {};
    let r,
        o = 0;
    for (const i of t) {
        const a = i.name,
            l = i.dtype,
            c = i.shape,
            u = rt(c);
        let h;
        if ('quantization' in i) {
            const d = i.quantization;
            if (d.dtype === 'uint8' || d.dtype === 'uint16') {
                if (!('min' in d && 'scale' in d))
                    throw new Error(
                        `Weight ${i.name} with quantization ${d.dtype} doesn't have corresponding metadata min and scale.`
                    );
            } else if (d.dtype === 'float16') {
                if (l !== 'float32')
                    throw new Error(
                        `Weight ${i.name} is quantized with ${d.dtype} which only supports weights of type float32 not ${l}.`
                    );
            } else
                throw new Error(
                    `Weight ${i.name} has unknown quantization dtype ${d.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`
                );
            const p = yd[d.dtype],
                f = e.slice(o, o + u * p),
                m =
                    d.dtype === 'uint8'
                        ? new Uint8Array(f)
                        : new Uint16Array(f);
            if (l === 'float32')
                if (d.dtype === 'uint8' || d.dtype === 'uint16') {
                    h = new Float32Array(m.length);
                    for (let g = 0; g < m.length; g++) {
                        const y = m[g];
                        h[g] = y * d.scale + d.min;
                    }
                } else if (d.dtype === 'float16')
                    r === void 0 && (r = NC()), (h = r(m));
                else
                    throw new Error(
                        `Unsupported quantization type ${d.dtype} for weight type float32.`
                    );
            else if (l === 'int32') {
                if (d.dtype !== 'uint8' && d.dtype !== 'uint16')
                    throw new Error(
                        `Unsupported quantization type ${d.dtype} for weight type int32.`
                    );
                h = new Int32Array(m.length);
                for (let g = 0; g < m.length; g++) {
                    const y = m[g];
                    h[g] = Math.round(y * d.scale + d.min);
                }
            } else throw new Error(`Unsupported dtype in weight '${a}': ${l}`);
            o += u * p;
        } else if (l === 'string') {
            const d = rt(i.shape);
            h = [];
            for (let p = 0; p < d; p++) {
                const f = new Uint32Array(e.slice(o, o + ic))[0];
                o += ic;
                const m = new Uint8Array(e.slice(o, o + f));
                h.push(m), (o += f);
            }
        } else {
            const d = yd[l],
                p = e.slice(o, o + u * d);
            if (l === 'float32') h = new Float32Array(p);
            else if (l === 'int32') h = new Int32Array(p);
            else if (l === 'bool') h = new Uint8Array(p);
            else if (l === 'complex64') {
                h = new Float32Array(p);
                const f = new Float32Array(h.length / 2),
                    m = new Float32Array(h.length / 2);
                for (let b = 0; b < f.length; b++)
                    (f[b] = h[b * 2]), (m[b] = h[b * 2 + 1]);
                const g = ls(f, c, 'float32'),
                    y = ls(m, c, 'float32');
                (s[a] = pr(g, y)), g.dispose(), y.dispose();
            } else throw new Error(`Unsupported dtype in weight '${a}': ${l}`);
            o += u * d;
        }
        l !== 'complex64' && (s[a] = ls(h, c, l));
    }
    return s;
}
function vC(n) {
    if (n === null)
        throw new Error(`Invalid input value: ${JSON.stringify(n)}`);
    let t = 0;
    const e = [];
    n.forEach((o) => {
        if (
            ((t += o.byteLength),
            e.push(
                o.byteLength === o.buffer.byteLength ? o : new o.constructor(o)
            ),
            !(
                o instanceof Float32Array ||
                o instanceof Int32Array ||
                o instanceof Uint8Array
            ))
        )
            throw new Error(
                `Unsupported TypedArray subtype: ${o.constructor.name}`
            );
    });
    const s = new Uint8Array(t);
    let r = 0;
    return (
        e.forEach((o) => {
            s.set(new Uint8Array(o.buffer), r), (r += o.byteLength);
        }),
        s.buffer
    );
}
const wf =
    typeof Buffer < 'u' &&
    (typeof Blob > 'u' || typeof atob > 'u' || typeof btoa > 'u');
function Xg(n) {
    return wf ? Buffer.byteLength(n, 'utf8') : new Blob([n]).size;
}
function kC(n) {
    if (wf) return Buffer.from(n).toString('base64');
    const t = new Uint8Array(n);
    let e = '';
    for (let s = 0, r = t.length; s < r; s++) e += String.fromCharCode(t[s]);
    return btoa(e);
}
function SC(n) {
    if (wf) {
        const s = Buffer.from(n, 'base64');
        return s.buffer.slice(s.byteOffset, s.byteOffset + s.byteLength);
    }
    const t = atob(n),
        e = new Uint8Array(t.length);
    for (let s = 0; s < t.length; ++s) e.set([t.charCodeAt(s)], s);
    return e.buffer;
}
function r0(n) {
    return ms.join(n);
}
function Yg(n) {
    const t = '/';
    for (n = n.trim(); n.endsWith(t); ) n = n.slice(0, n.length - 1);
    const e = n.split(t);
    return e[e.length - 1];
}
function o0(n, t) {
    const e = {
        modelTopology: n.modelTopology,
        format: n.format,
        generatedBy: n.generatedBy,
        convertedBy: n.convertedBy,
        weightsManifest: t,
    };
    return (
        n.signature != null && (e.signature = n.signature),
        n.userDefinedMetadata != null &&
            (e.userDefinedMetadata = n.userDefinedMetadata),
        n.modelInitializer != null && (e.modelInitializer = n.modelInitializer),
        n.initializerSignature != null &&
            (e.initializerSignature = n.initializerSignature),
        n.trainingConfig != null && (e.trainingConfig = n.trainingConfig),
        e
    );
}
function i0(n, t, e) {
    const s = {
        modelTopology: n.modelTopology,
        format: n.format,
        generatedBy: n.generatedBy,
        convertedBy: n.convertedBy,
    };
    if (
        (n.trainingConfig != null && (s.trainingConfig = n.trainingConfig),
        n.weightsManifest != null)
    ) {
        if (!t)
            throw new Error(
                'modelJSON has weightsManifest but weightSpecs is null'
            );
        if (!e)
            throw new Error(
                'modelJSON has weightsManifest but weightData is null'
            );
        (s.weightSpecs = t), (s.weightData = e);
    }
    return (
        n.signature != null && (s.signature = n.signature),
        n.userDefinedMetadata != null &&
            (s.userDefinedMetadata = n.userDefinedMetadata),
        n.modelInitializer != null && (s.modelInitializer = n.modelInitializer),
        n.initializerSignature != null &&
            (s.initializerSignature = n.initializerSignature),
        s
    );
}
async function vf(n, t) {
    let e, s;
    return (
        n.weightsManifest != null && ([e, s] = await t(n.weightsManifest)),
        i0(n, e, s)
    );
}
function Qa(n) {
    if (n.modelTopology instanceof ArrayBuffer)
        throw new Error('Expected JSON model topology, received ArrayBuffer.');
    return {
        dateSaved: new Date(),
        modelTopologyType: 'JSON',
        modelTopologyBytes:
            n.modelTopology == null ? 0 : Xg(JSON.stringify(n.modelTopology)),
        weightSpecsBytes:
            n.weightSpecs == null ? 0 : Xg(JSON.stringify(n.weightSpecs)),
        weightDataBytes:
            n.weightData == null ? 0 : new ms(n.weightData).byteLength,
    };
}
function a0(n) {
    const t = [];
    for (const e of n) t.push(...e.weights);
    return t;
}
function IC() {
    const n = (e) => {
            let s = e << 13,
                r = 0;
            for (; !(s & 8388608); ) (r -= 8388608), (s <<= 1);
            return (s &= -8388609), (r += 947912704), s | r;
        },
        t = new Uint32Array(2048);
    t[0] = 0;
    for (let e = 1; e < 1024; e++) t[e] = n(e);
    for (let e = 1024; e < 2048; e++) t[e] = 939524096 + ((e - 1024) << 13);
    return t;
}
function CC() {
    const n = new Uint32Array(64);
    (n[0] = 0),
        (n[31] = 1199570944),
        (n[32] = 2147483648),
        (n[63] = 3347054592);
    for (let t = 1; t < 31; t++) n[t] = t << 23;
    for (let t = 33; t < 63; t++) n[t] = 2147483648 + ((t - 32) << 23);
    return n;
}
function $C() {
    const n = new Uint32Array(64);
    for (let t = 0; t < 64; t++) n[t] = 1024;
    return (n[0] = n[32] = 0), n;
}
function NC() {
    const n = IC(),
        t = CC(),
        e = $C();
    return (s) => {
        const r = new ArrayBuffer(4 * s.length),
            o = new Uint32Array(r);
        for (let i = 0; i < s.length; i++) {
            const a = s[i],
                l = n[e[a >> 10] + (a & 1023)] + t[a >> 10];
            o[i] = l;
        }
        return new Float32Array(r);
    };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class de {
    constructor() {
        (this.saveRouters = []), (this.loadRouters = []);
    }
    static getInstance() {
        return de.instance == null && (de.instance = new de()), de.instance;
    }
    static registerSaveRouter(t) {
        de.getInstance().saveRouters.push(t);
    }
    static registerLoadRouter(t) {
        de.getInstance().loadRouters.push(t);
    }
    static getSaveHandlers(t) {
        return de.getHandlers(t, 'save');
    }
    static getLoadHandlers(t, e) {
        return de.getHandlers(t, 'load', e);
    }
    static getHandlers(t, e, s) {
        const r = [];
        return (
            (e === 'load'
                ? de.getInstance().loadRouters
                : de.getInstance().saveRouters
            ).forEach((i) => {
                const a = i(t, s);
                a !== null && r.push(a);
            }),
            r
        );
    }
}
const TC = (n) => de.registerSaveRouter(n),
    EC = (n) => de.registerLoadRouter(n),
    l0 = (n) => de.getSaveHandlers(n),
    c0 = (n, t) => de.getLoadHandlers(n, t);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const xd = 'tensorflowjs',
    wd = 1,
    qr = 'models_store',
    rr = 'model_info_store';
function u0() {
    if (!tt().getBool('IS_BROWSER'))
        throw new Error(
            'Failed to obtain IndexedDB factory because the current environmentis not a web browser.'
        );
    const n = typeof window > 'u' ? self : window,
        t =
            n.indexedDB ||
            n.mozIndexedDB ||
            n.webkitIndexedDB ||
            n.msIndexedDB ||
            n.shimIndexedDB;
    if (t == null)
        throw new Error(
            'The current browser does not appear to support IndexedDB.'
        );
    return t;
}
function vd(n) {
    const t = n.result;
    t.createObjectStore(qr, { keyPath: 'modelPath' }),
        t.createObjectStore(rr, { keyPath: 'modelPath' });
}
class ro {
    constructor(t) {
        if (((this.indexedDB = u0()), t == null || !t))
            throw new Error(
                'For IndexedDB, modelPath must not be null, undefined or empty.'
            );
        this.modelPath = t;
    }
    async save(t) {
        if (t.modelTopology instanceof ArrayBuffer)
            throw new Error(
                'BrowserLocalStorage.save() does not support saving model topology in binary formats yet.'
            );
        return this.databaseAction(this.modelPath, t);
    }
    async load() {
        return this.databaseAction(this.modelPath);
    }
    databaseAction(t, e) {
        return new Promise((s, r) => {
            const o = this.indexedDB.open(xd, wd);
            (o.onupgradeneeded = () => vd(o)),
                (o.onsuccess = () => {
                    const i = o.result;
                    if (e == null) {
                        const a = i.transaction(qr, 'readonly'),
                            c = a.objectStore(qr).get(this.modelPath);
                        (c.onsuccess = () => {
                            if (c.result == null)
                                return (
                                    i.close(),
                                    r(
                                        new Error(
                                            `Cannot find model with path '${this.modelPath}' in IndexedDB.`
                                        )
                                    )
                                );
                            s(c.result.modelArtifacts);
                        }),
                            (c.onerror = (u) => (i.close(), r(c.error))),
                            (a.oncomplete = () => i.close());
                    } else {
                        e.weightData = ms.join(e.weightData);
                        const a = Qa(e),
                            l = i.transaction(rr, 'readwrite');
                        let c = l.objectStore(rr),
                            u;
                        try {
                            u = c.put({
                                modelPath: this.modelPath,
                                modelArtifactsInfo: a,
                            });
                        } catch (d) {
                            return r(d);
                        }
                        let h;
                        (u.onsuccess = () => {
                            h = i.transaction(qr, 'readwrite');
                            const d = h.objectStore(qr);
                            let p;
                            try {
                                p = d.put({
                                    modelPath: this.modelPath,
                                    modelArtifacts: e,
                                    modelArtifactsInfo: a,
                                });
                            } catch (f) {
                                return r(f);
                            }
                            (p.onsuccess = () => s({ modelArtifactsInfo: a })),
                                (p.onerror = (f) => {
                                    c = l.objectStore(rr);
                                    const m = c.delete(this.modelPath);
                                    (m.onsuccess = () => (
                                        i.close(), r(p.error)
                                    )),
                                        (m.onerror = (g) => (
                                            i.close(), r(p.error)
                                        ));
                                });
                        }),
                            (u.onerror = (d) => (i.close(), r(u.error))),
                            (l.oncomplete = () => {
                                h == null
                                    ? i.close()
                                    : (h.oncomplete = () => i.close());
                            });
                    }
                }),
                (o.onerror = (i) => r(o.error));
        });
    }
}
ro.URL_SCHEME = 'indexeddb://';
const h0 = (n) =>
    tt().getBool('IS_BROWSER') &&
    !Array.isArray(n) &&
    n.startsWith(ro.URL_SCHEME)
        ? _C(n.slice(ro.URL_SCHEME.length))
        : null;
de.registerSaveRouter(h0);
de.registerLoadRouter(h0);
function _C(n) {
    return new ro(n);
}
function AC(n) {
    return n.startsWith(ro.URL_SCHEME) ? n.slice(ro.URL_SCHEME.length) : n;
}
class RC {
    constructor() {
        this.indexedDB = u0();
    }
    async listModels() {
        return new Promise((t, e) => {
            const s = this.indexedDB.open(xd, wd);
            (s.onupgradeneeded = () => vd(s)),
                (s.onsuccess = () => {
                    const r = s.result,
                        o = r.transaction(rr, 'readonly'),
                        a = o.objectStore(rr).getAll();
                    (a.onsuccess = () => {
                        const l = {};
                        for (const c of a.result)
                            l[c.modelPath] = c.modelArtifactsInfo;
                        t(l);
                    }),
                        (a.onerror = (l) => (r.close(), e(a.error))),
                        (o.oncomplete = () => r.close());
                }),
                (s.onerror = (r) => e(s.error));
        });
    }
    async removeModel(t) {
        return (
            (t = AC(t)),
            new Promise((e, s) => {
                const r = this.indexedDB.open(xd, wd);
                (r.onupgradeneeded = () => vd(r)),
                    (r.onsuccess = () => {
                        const o = r.result,
                            i = o.transaction(rr, 'readwrite'),
                            a = i.objectStore(rr),
                            l = a.get(t);
                        let c;
                        (l.onsuccess = () => {
                            if (l.result == null)
                                return (
                                    o.close(),
                                    s(
                                        new Error(
                                            `Cannot find model with path '${t}' in IndexedDB.`
                                        )
                                    )
                                );
                            {
                                const u = a.delete(t),
                                    h = () => {
                                        c = o.transaction(qr, 'readwrite');
                                        const p = c.objectStore(qr).delete(t);
                                        (p.onsuccess = () =>
                                            e(l.result.modelArtifactsInfo)),
                                            (p.onerror = (f) => s(l.error));
                                    };
                                (u.onsuccess = h),
                                    (u.onerror = (d) => (
                                        h(), o.close(), s(l.error)
                                    ));
                            }
                        }),
                            (l.onerror = (u) => (o.close(), s(l.error))),
                            (i.oncomplete = () => {
                                c == null
                                    ? o.close()
                                    : (c.oncomplete = () => o.close());
                            });
                    }),
                    (r.onerror = (o) => s(r.error));
            })
        );
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Us = '/',
    Lo = 'tensorflowjs_models',
    d0 = 'info',
    DC = 'model_topology',
    OC = 'weight_specs',
    FC = 'weight_data',
    LC = 'model_metadata';
function p0(n) {
    return {
        info: [Lo, n, d0].join(Us),
        topology: [Lo, n, DC].join(Us),
        weightSpecs: [Lo, n, OC].join(Us),
        weightData: [Lo, n, FC].join(Us),
        modelMetadata: [Lo, n, LC].join(Us),
    };
}
function f0(n) {
    for (const t of Object.values(n)) window.localStorage.removeItem(t);
}
function PC(n) {
    const t = n.split(Us);
    if (t.length < 3) throw new Error(`Invalid key format: ${n}`);
    return t.slice(1, t.length - 1).join(Us);
}
function zC(n) {
    return n.startsWith(oo.URL_SCHEME) ? n.slice(oo.URL_SCHEME.length) : n;
}
class oo {
    constructor(t) {
        if (
            !tt().getBool('IS_BROWSER') ||
            typeof window > 'u' ||
            typeof window.localStorage > 'u'
        )
            throw new Error(
                'The current environment does not support local storage.'
            );
        if (((this.LS = window.localStorage), t == null || !t))
            throw new Error(
                'For local storage, modelPath must not be null, undefined or empty.'
            );
        (this.modelPath = t), (this.keys = p0(this.modelPath));
    }
    async save(t) {
        if (t.modelTopology instanceof ArrayBuffer)
            throw new Error(
                'BrowserLocalStorage.save() does not support saving model topology in binary formats yet.'
            );
        {
            const e = JSON.stringify(t.modelTopology),
                s = JSON.stringify(t.weightSpecs),
                r = Qa(t),
                o = ms.join(t.weightData);
            try {
                this.LS.setItem(this.keys.info, JSON.stringify(r)),
                    this.LS.setItem(this.keys.topology, e),
                    this.LS.setItem(this.keys.weightSpecs, s),
                    this.LS.setItem(this.keys.weightData, kC(o));
                const i = {
                    format: t.format,
                    generatedBy: t.generatedBy,
                    convertedBy: t.convertedBy,
                    signature: t.signature != null ? t.signature : void 0,
                    userDefinedMetadata:
                        t.userDefinedMetadata != null
                            ? t.userDefinedMetadata
                            : void 0,
                    modelInitializer:
                        t.modelInitializer != null
                            ? t.modelInitializer
                            : void 0,
                    initializerSignature:
                        t.initializerSignature != null
                            ? t.initializerSignature
                            : void 0,
                    trainingConfig:
                        t.trainingConfig != null ? t.trainingConfig : void 0,
                };
                return (
                    this.LS.setItem(this.keys.modelMetadata, JSON.stringify(i)),
                    { modelArtifactsInfo: r }
                );
            } catch {
                throw (
                    (f0(this.keys),
                    new Error(
                        `Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`
                    ))
                );
            }
        }
    }
    async load() {
        const t = JSON.parse(this.LS.getItem(this.keys.info));
        if (t == null)
            throw new Error(
                `In local storage, there is no model with name '${this.modelPath}'`
            );
        if (t.modelTopologyType !== 'JSON')
            throw new Error(
                'BrowserLocalStorage does not support loading non-JSON model topology yet.'
            );
        const e = {},
            s = JSON.parse(this.LS.getItem(this.keys.topology));
        if (s == null)
            throw new Error(
                `In local storage, the topology of model '${this.modelPath}' is missing.`
            );
        e.modelTopology = s;
        const r = JSON.parse(this.LS.getItem(this.keys.weightSpecs));
        if (r == null)
            throw new Error(
                `In local storage, the weight specs of model '${this.modelPath}' are missing.`
            );
        e.weightSpecs = r;
        const o = this.LS.getItem(this.keys.modelMetadata);
        if (o != null) {
            const a = JSON.parse(o);
            (e.format = a.format),
                (e.generatedBy = a.generatedBy),
                (e.convertedBy = a.convertedBy),
                a.signature != null && (e.signature = a.signature),
                a.userDefinedMetadata != null &&
                    (e.userDefinedMetadata = a.userDefinedMetadata),
                a.modelInitializer != null &&
                    (e.modelInitializer = a.modelInitializer),
                a.initializerSignature != null &&
                    (e.initializerSignature = a.initializerSignature),
                a.trainingConfig != null &&
                    (e.trainingConfig = a.trainingConfig);
        }
        const i = this.LS.getItem(this.keys.weightData);
        if (i == null)
            throw new Error(
                `In local storage, the binary weight values of model '${this.modelPath}' are missing.`
            );
        return (e.weightData = SC(i)), e;
    }
}
oo.URL_SCHEME = 'localstorage://';
const m0 = (n) =>
    tt().getBool('IS_BROWSER') &&
    !Array.isArray(n) &&
    n.startsWith(oo.URL_SCHEME)
        ? BC(n.slice(oo.URL_SCHEME.length))
        : null;
de.registerSaveRouter(m0);
de.registerLoadRouter(m0);
function BC(n) {
    return new oo(n);
}
class MC {
    constructor() {
        _(
            tt().getBool('IS_BROWSER'),
            () => 'Current environment is not a web browser'
        ),
            _(
                typeof window > 'u' || typeof window.localStorage < 'u',
                () => 'Current browser does not appear to support localStorage'
            ),
            (this.LS = window.localStorage);
    }
    async listModels() {
        const t = {},
            e = Lo + Us,
            s = Us + d0;
        for (let r = 0; r < this.LS.length; ++r) {
            const o = this.LS.key(r);
            if (o.startsWith(e) && o.endsWith(s)) {
                const i = PC(o);
                t[i] = JSON.parse(this.LS.getItem(o));
            }
        }
        return t;
    }
    async removeModel(t) {
        t = zC(t);
        const e = p0(t);
        if (this.LS.getItem(e.info) == null)
            throw new Error(`Cannot find model at path '${t}'`);
        const s = JSON.parse(this.LS.getItem(e.info));
        return f0(e), s;
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Wo = '://';
class Ze {
    constructor() {
        this.managers = {};
    }
    static getInstance() {
        return Ze.instance == null && (Ze.instance = new Ze()), Ze.instance;
    }
    static registerManager(t, e) {
        _(t != null, () => 'scheme must not be undefined or null.'),
            t.endsWith(Wo) && (t = t.slice(0, t.indexOf(Wo))),
            _(t.length > 0, () => 'scheme must not be an empty string.');
        const s = Ze.getInstance();
        _(
            s.managers[t] == null,
            () =>
                `A model store manager is already registered for scheme '${t}'.`
        ),
            (s.managers[t] = e);
    }
    static getManager(t) {
        const e = Ze.getInstance().managers[t];
        if (e == null)
            throw new Error(`Cannot find model manager for scheme '${t}'`);
        return e;
    }
    static getSchemes() {
        return Object.keys(Ze.getInstance().managers);
    }
}
function Gl(n) {
    if (n.indexOf(Wo) === -1)
        throw new Error(
            `The url string provided does not contain a scheme. Supported schemes are: ${Ze.getSchemes().join(
                ','
            )}`
        );
    return { scheme: n.split(Wo)[0], path: n.split(Wo)[1] };
}
async function g0(n, t, e = !1) {
    _(n !== t, () => `Old path and new path are the same: '${n}'`);
    const s = de.getLoadHandlers(n);
    _(
        s.length > 0,
        () =>
            `Copying failed because no load handler is found for source URL ${n}.`
    ),
        _(
            s.length < 2,
            () =>
                `Copying failed because more than one (${s.length}) load handlers for source URL ${n}.`
        );
    const r = s[0],
        o = de.getSaveHandlers(t);
    _(
        o.length > 0,
        () =>
            `Copying failed because no save handler is found for destination URL ${t}.`
    ),
        _(
            o.length < 2,
            () =>
                `Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`
        );
    const i = o[0],
        a = Gl(n).scheme,
        l = Gl(n).path,
        c = a === Gl(n).scheme,
        u = await r.load();
    e && c && (await Ze.getManager(a).removeModel(l));
    const h = await i.save(u);
    return (
        e && !c && (await Ze.getManager(a).removeModel(l)), h.modelArtifactsInfo
    );
}
async function VC() {
    const n = Ze.getSchemes(),
        t = {};
    for (const e of n) {
        const s = await Ze.getManager(e).listModels();
        for (const r in s) {
            const o = e + Wo + r;
            t[o] = s[r];
        }
    }
    return t;
}
async function WC(n) {
    const t = Gl(n);
    return Ze.getManager(t.scheme).removeModel(t.path);
}
async function UC(n, t) {
    return g0(n, t, !1);
}
async function GC(n, t) {
    return g0(n, t, !0);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class HC {
    constructor() {
        (this.messageName = 'setTimeoutCustom'),
            (this.functionRefs = []),
            (this.handledMessageCount = 0),
            (this.hasEventListener = !1);
    }
    fetch(t, e) {
        return fetch(t, e);
    }
    now() {
        return performance.now();
    }
    encode(t, e) {
        if (e !== 'utf-8' && e !== 'utf8')
            throw new Error(
                `Browser's encoder only supports utf-8, but got ${e}`
            );
        return (
            this.textEncoder == null && (this.textEncoder = new TextEncoder()),
            this.textEncoder.encode(t)
        );
    }
    decode(t, e) {
        return new TextDecoder(e).decode(t);
    }
    setTimeoutCustom(t, e) {
        if (typeof window > 'u' || !tt().getBool('USE_SETTIMEOUTCUSTOM')) {
            setTimeout(t, e);
            return;
        }
        this.functionRefs.push(t),
            setTimeout(() => {
                window.postMessage(
                    {
                        name: this.messageName,
                        index: this.functionRefs.length - 1,
                    },
                    '*'
                );
            }, e),
            this.hasEventListener ||
                ((this.hasEventListener = !0),
                window.addEventListener(
                    'message',
                    (s) => {
                        if (
                            s.source === window &&
                            s.data.name === this.messageName
                        ) {
                            s.stopPropagation();
                            const r = this.functionRefs[s.data.index];
                            r(),
                                this.handledMessageCount++,
                                this.handledMessageCount ===
                                    this.functionRefs.length &&
                                    ((this.functionRefs = []),
                                    (this.handledMessageCount = 0));
                        }
                    },
                    !0
                ));
    }
    isTypedArray(t) {
        return Bb(t);
    }
}
if (tt().get('IS_BROWSER')) {
    tt().setPlatform('browser', new HC());
    try {
        Ze.registerManager(oo.URL_SCHEME, new MC());
    } catch {}
    try {
        Ze.registerManager(ro.URL_SCHEME, new RC());
    } catch {}
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const jC = { importFetch: () => require('node-fetch') };
let Ph;
class qC {
    constructor() {
        (this.util = require('util')),
            (this.textEncoder = new this.util.TextEncoder());
    }
    fetch(t, e) {
        return tt().global.fetch != null
            ? tt().global.fetch(t, e)
            : (Ph == null && (Ph = jC.importFetch()), Ph(t, e));
    }
    now() {
        const t = process.hrtime();
        return t[0] * 1e3 + t[1] / 1e6;
    }
    encode(t, e) {
        if (e !== 'utf-8' && e !== 'utf8')
            throw new Error(
                `Node built-in encoder only supports utf-8, but got ${e}`
            );
        return this.textEncoder.encode(t);
    }
    decode(t, e) {
        return t.length === 0 ? '' : new this.util.TextDecoder(e).decode(t);
    }
    isTypedArray(t) {
        return (
            this.util.types.isFloat32Array(t) ||
            this.util.types.isInt32Array(t) ||
            this.util.types.isUint8Array(t) ||
            this.util.types.isUint8ClampedArray(t)
        );
    }
}
tt().get('IS_NODE') &&
    !tt().get('IS_BROWSER') &&
    tt().setPlatform('node', new qC());
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Pt(n, t = 'float32', e) {
    return (t = t || 'float32'), Fn(n), new Te(n, t, e);
}
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function KC(n, t) {
    const e = A(n, 'x', 'cast');
    if (!OI(t)) throw new Error(`Failed to cast to unknown dtype ${t}`);
    if (
        (t === 'string' && e.dtype !== 'string') ||
        (t !== 'string' && e.dtype === 'string')
    )
        throw new Error('Only strings can be casted to strings');
    const s = { x: e },
        r = { dtype: t };
    return V.runKernel(ha, s, r);
}
const bt = B({ cast_: KC });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function XC(n) {
    const e = { x: A(n, 'x', 'clone', 'string_or_numeric') };
    return V.runKernel(Ia, e);
}
const Hs = B({ clone_: XC });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function y0(n, t = !1) {
    console.log(n.toString(t));
}
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ Qb();
const YC = { buffer: Pt, cast: bt, clone: Hs, print: y0 };
dC(YC);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function ys() {
    return V;
}
function kd() {
    return V.memory();
}
function Y(n, t) {
    return V.tidy(n, t);
}
function Lt(n) {
    Zb(n).forEach((e) => e.dispose());
}
function Oe(n) {
    return V.keep(n);
}
function b0(n, t, e = 1) {
    return V.registerBackend(n, t, e);
}
function ZC() {
    return V.backend;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function JC(n, t) {
    let e = A(n, 'a', 'add'),
        s = A(t, 'b', 'add');
    [e, s] = ye(e, s);
    const r = { a: e, b: s };
    return V.runKernel(pi, r);
}
const ct = B({ add_: JC });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function QC(n, t) {
    let e = A(n, 'a', 'floorDiv'),
        s = A(t, 'b', 'floorDiv');
    [e, s] = ye(e, s);
    const r = { a: e, b: s };
    return V.runKernel(ka, r);
}
const kf = B({ floorDiv_: QC });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function t$(n, t) {
    let e = A(n, 'a', 'div'),
        s = A(t, 'b', 'div');
    if ((([e, s] = ye(e, s)), e.dtype === 'int32' && s.dtype === 'int32'))
        return kf(e, s);
    const r = { a: e, b: s },
        o = {};
    return V.runKernel(ga, r, o);
}
const Et = B({ div_: t$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function e$(n, t) {
    let e = A(n, 'a', 'mul'),
        s = A(t, 'b', 'mul');
    [e, s] = ye(e, s);
    const r = { a: e, b: s };
    return V.runKernel(Da, r);
}
const U = B({ mul_: e$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function n$(n) {
    const t = A(n, 'x', 'abs');
    if (t.dtype === 'complex64') {
        const e = { x: t };
        return V.runKernel(Uc, e);
    } else {
        const e = { x: t };
        return V.runKernel(Oc, e);
    }
}
const Ce = B({ abs_: n$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function s$(n) {
    const e = { x: A(n, 'x', 'acos') };
    return V.runKernel(ra, e);
}
const x0 = B({ acos_: s$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function r$(n) {
    const e = { x: A(n, 'x', 'acosh') };
    return V.runKernel(oa, e);
}
const w0 = B({ acosh_: r$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function o$(n) {
    _(
        Array.isArray(n),
        () => 'The argument passed to tf.addN() must be a list of tensors'
    ),
        _(
            n.length >= 1,
            () =>
                `Must pass at least one tensor to tf.addN(), but got ${n.length}`
        );
    const t = n.map((r, o) => A(r, `tensors${o}`, 'addN')),
        e = t[0];
    t.forEach((r) => {
        if (r.dtype !== e.dtype)
            throw new Error(
                'All tensors passed to tf.addN() must have the same dtype'
            );
    }),
        t.forEach((r) => {
            if (!Ut(r.shape, e.shape))
                throw new Error(
                    'All tensors passed to tf.addN() must have the same shape'
                );
        });
    const s = t;
    return V.runKernel(Fc, s);
}
const i$ = B({ addN_: o$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function a$(n, t = null, e = !1) {
    const r = { x: A(n, 'x', 'all', 'bool') },
        o = { axis: t, keepDims: e };
    return V.runKernel(hp, r, o);
}
const Sf = B({ all_: a$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function l$(n, t = null, e = !1) {
    const r = { x: A(n, 'x', 'any', 'bool') },
        o = { axis: t, keepDims: e };
    return V.runKernel(dp, r, o);
}
const ac = B({ any_: l$ });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function c$(n, t = 0) {
    const s = { x: A(n, 'x', 'argMax') },
        r = { axis: t };
    return V.runKernel(Lc, s, r);
}
const Zo = B({ argMax_: c$ });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function u$(n, t = 0) {
    const s = { x: A(n, 'x', 'argMin') },
        r = { axis: t };
    return V.runKernel(Pc, s, r);
}
const v0 = B({ argMin_: u$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function h$(n) {
    const e = { x: A(n, 'x', 'asin') };
    return V.runKernel(ia, e);
}
const k0 = B({ asin_: h$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function d$(n) {
    const e = { x: A(n, 'x', 'asinh') };
    return V.runKernel(aa, e);
}
const S0 = B({ asinh_: d$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function p$(n) {
    const e = { x: A(n, 'x', 'atan') };
    return V.runKernel(la, e);
}
const I0 = B({ atan_: p$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function f$(n, t) {
    let e = A(n, 'a', 'atan2'),
        s = A(t, 'b', 'atan2');
    [e, s] = ye(e, s);
    const r = { a: e, b: s };
    return V.runKernel(ua, r);
}
const C0 = B({ atan2_: f$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function m$(n) {
    const e = { x: A(n, 'x', 'atanh') };
    return V.runKernel(ca, e);
}
const $0 = B({ atanh_: m$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function tl(n, t, e, s, r = 'NHWC', o) {
    const i = n[3],
        a = [...t, i],
        l = Zs(r);
    return Le(n, a, e, o, s, null, null, l);
}
function ts(n, t, e, s, r, o, i = 'channelsLast') {
    const [a, l] = Wi(t);
    let c;
    if (i === 'channelsLast') c = [a, l, n[3], n[3]];
    else if (i === 'channelsFirst') c = [a, l, n[1], n[1]];
    else throw new Error(`Unknown dataFormat ${i}`);
    return Le(n, c, e, s, r, o, !1, i);
}
function Ys(n, t, e, s, r, o, i = 'NDHWC') {
    const [a, l, c] = Sd(t);
    let u, h;
    if (i === 'NDHWC') (h = 'channelsLast'), (u = [a, l, c, n[4], n[4]]);
    else if (i === 'NCDHW') (h = 'channelsFirst'), (u = [a, l, c, n[1], n[1]]);
    else throw new Error(`Unknown dataFormat ${i}`);
    return Nr(n, u, e, s, r, !1, h, o);
}
function Le(n, t, e, s, r, o, i = !1, a = 'channelsLast') {
    let [l, c, u, h] = [-1, -1, -1, -1];
    if (a === 'channelsLast') [l, c, u, h] = n;
    else if (a === 'channelsFirst') [l, h, c, u] = n;
    else throw new Error(`Unknown dataFormat ${a}`);
    const [d, p, , f] = t,
        [m, g] = Wi(e),
        [y, b] = Wi(s),
        w = Uo(d, y),
        x = Uo(p, b),
        {
            padInfo: v,
            outHeight: C,
            outWidth: $,
        } = b$(r, c, u, m, g, w, x, o, a),
        T = i ? f * h : f;
    let N;
    return (
        a === 'channelsFirst'
            ? (N = [l, T, C, $])
            : a === 'channelsLast' && (N = [l, C, $, T]),
        {
            batchSize: l,
            dataFormat: a,
            inHeight: c,
            inWidth: u,
            inChannels: h,
            outHeight: C,
            outWidth: $,
            outChannels: T,
            padInfo: v,
            strideHeight: m,
            strideWidth: g,
            filterHeight: d,
            filterWidth: p,
            effectiveFilterHeight: w,
            effectiveFilterWidth: x,
            dilationHeight: y,
            dilationWidth: b,
            inShape: n,
            outShape: N,
            filterShape: t,
        }
    );
}
function Nr(n, t, e, s, r, o = !1, i = 'channelsLast', a) {
    let [l, c, u, h, d] = [-1, -1, -1, -1, -1];
    if (i === 'channelsLast') [l, c, u, h, d] = n;
    else if (i === 'channelsFirst') [l, d, c, u, h] = n;
    else throw new Error(`Unknown dataFormat ${i}`);
    const [p, f, m, , g] = t,
        [y, b, w] = Sd(e),
        [x, v, C] = Sd(s),
        $ = Uo(p, x),
        T = Uo(f, v),
        N = Uo(m, C),
        {
            padInfo: R,
            outDepth: P,
            outHeight: E,
            outWidth: O,
        } = x$(r, c, u, h, y, b, w, $, T, N, a),
        S = o ? g * d : g;
    let L;
    return (
        i === 'channelsFirst'
            ? (L = [l, S, P, E, O])
            : i === 'channelsLast' && (L = [l, P, E, O, S]),
        {
            batchSize: l,
            dataFormat: i,
            inDepth: c,
            inHeight: u,
            inWidth: h,
            inChannels: d,
            outDepth: P,
            outHeight: E,
            outWidth: O,
            outChannels: S,
            padInfo: R,
            strideDepth: y,
            strideHeight: b,
            strideWidth: w,
            filterDepth: p,
            filterHeight: f,
            filterWidth: m,
            effectiveFilterDepth: $,
            effectiveFilterHeight: T,
            effectiveFilterWidth: N,
            dilationDepth: x,
            dilationHeight: v,
            dilationWidth: C,
            inShape: n,
            outShape: L,
            filterShape: t,
        }
    );
}
function g$(n, t, e, s, r) {
    s == null && (s = If(n, t, e));
    const o = n[0],
        i = n[1],
        a = Ui((o - t + 2 * s) / e + 1, r),
        l = Ui((i - t + 2 * s) / e + 1, r);
    return [a, l];
}
function y$(n, t, e, s, r, o) {
    r == null && (r = If(n, t[0], s[0]));
    const i = [0, 0, 0, e];
    for (let a = 0; a < 3; a++)
        n[a] + 2 * r >= t[a] &&
            (i[a] = Ui((n[a] - t[a] + 2 * r) / s[a] + 1, o));
    return i;
}
function If(n, t, e, s = 1) {
    const r = Uo(t, s);
    return Math.floor((n[0] * (e - 1) - e + r) / 2);
}
function Wi(n) {
    return typeof n == 'number'
        ? [n, n, n]
        : n.length === 2
        ? [n[0], n[1], 1]
        : n;
}
function Sd(n) {
    return typeof n == 'number' ? [n, n, n] : n;
}
function Uo(n, t) {
    return t <= 1 ? n : n + (n - 1) * (t - 1);
}
function b$(n, t, e, s, r, o, i, a, l) {
    let c, u, h;
    if (typeof n == 'number') {
        c = {
            top: n,
            bottom: n,
            left: n,
            right: n,
            type: n === 0 ? 'VALID' : 'NUMBER',
        };
        const p = g$([t, e], o, s, n, a);
        (u = p[0]), (h = p[1]);
    } else if (n === 'same') {
        (u = Math.ceil(t / s)), (h = Math.ceil(e / r));
        const d = Math.max(0, (u - 1) * s + o - t),
            p = Math.max(0, (h - 1) * r + i - e),
            f = Math.floor(d / 2),
            m = d - f,
            g = Math.floor(p / 2),
            y = p - g;
        c = { top: f, bottom: m, left: g, right: y, type: 'SAME' };
    } else if (n === 'valid')
        (c = { top: 0, bottom: 0, left: 0, right: 0, type: 'VALID' }),
            (u = Math.ceil((t - o + 1) / s)),
            (h = Math.ceil((e - i + 1) / r));
    else if (typeof n == 'object') {
        const d = l === 'channelsLast' ? n[1][0] : n[2][0],
            p = l === 'channelsLast' ? n[1][1] : n[2][1],
            f = l === 'channelsLast' ? n[2][0] : n[3][0],
            m = l === 'channelsLast' ? n[2][1] : n[3][1];
        (c = {
            top: d,
            bottom: p,
            left: f,
            right: m,
            type:
                d === 0 && p === 0 && f === 0 && m === 0 ? 'VALID' : 'EXPLICIT',
        }),
            (u = Ui((t - o + d + p) / s + 1, a)),
            (h = Ui((e - i + f + m) / r + 1, a));
    } else throw Error(`Unknown padding parameter: ${n}`);
    return { padInfo: c, outHeight: u, outWidth: h };
}
function x$(n, t, e, s, r, o, i, a, l, c, u) {
    let h, d, p, f;
    if ((n === 'valid' && (n = 0), typeof n == 'number')) {
        h = {
            top: n,
            bottom: n,
            left: n,
            right: n,
            front: n,
            back: n,
            type: n === 0 ? 'VALID' : 'NUMBER',
        };
        const g = y$([t, e, s, 1], [a, l, c], 1, [r, o, i], n, u);
        (d = g[0]), (p = g[1]), (f = g[2]);
    } else if (n === 'same') {
        (d = Math.ceil(t / r)), (p = Math.ceil(e / o)), (f = Math.ceil(s / i));
        const m = (d - 1) * r + a - t,
            g = (p - 1) * o + l - e,
            y = (f - 1) * i + c - s,
            b = Math.floor(m / 2),
            w = m - b,
            x = Math.floor(g / 2),
            v = g - x,
            C = Math.floor(y / 2),
            $ = y - C;
        h = {
            top: x,
            bottom: v,
            left: C,
            right: $,
            front: b,
            back: w,
            type: 'SAME',
        };
    } else throw Error(`Unknown padding parameter: ${n}`);
    return { padInfo: h, outDepth: d, outHeight: p, outWidth: f };
}
function Ui(n, t) {
    if (!t) return Math.trunc(n);
    switch (t) {
        case 'round':
            return Math.round(n);
        case 'ceil':
            return Math.ceil(n);
        case 'floor':
            return Math.floor(n);
        default:
            throw new Error(`Unknown roundingMode ${t}`);
    }
}
function fr(n) {
    const [t, e, s] = Wi(n);
    return t === 1 && e === 1 && s === 1;
}
function We(n, t) {
    return fr(n) || fr(t);
}
function io(n) {
    return Wi(n).every((t) => t > 0);
}
function Zs(n) {
    if (n === 'NHWC') return 'channelsLast';
    if (n === 'NCHW') return 'channelsFirst';
    throw new Error(`Unknown dataFormat ${n}`);
}
function sn(n, t, e) {
    if (e != null) {
        if (typeof t == 'string')
            throw Error(
                `Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`
            );
        if (typeof t == 'number')
            _(
                Ko(t),
                () =>
                    `Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`
            );
        else if (typeof t == 'object')
            t.forEach((s) => {
                s.forEach((r) => {
                    _(
                        Ko(r),
                        () =>
                            `Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${r}.`
                    );
                });
            });
        else throw Error(`Error in ${n}: Unknown padding parameter: ${t}`);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function w$(n, t) {
    const s = { x: A(n, 'x', 'reshape', 'string_or_numeric') },
        r = { shape: t };
    return V.runKernel(Su, s, r);
}
const j = B({ reshape_: w$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function v$(n, t, e, s, r) {
    const o = A(n, 'x', 'avgPool', 'float32'),
        i = 1;
    _(
        We(e, i),
        () =>
            `Error in avgPool: Either strides or dilations must be 1. Got strides ${e} and dilations '${i}'`
    );
    let a = o,
        l = !1;
    o.rank === 3 &&
        ((l = !0), (a = j(o, [1, o.shape[0], o.shape[1], o.shape[2]]))),
        _(
            a.rank === 4,
            () => `Error in avgPool: x must be rank 4 but got rank ${a.rank}.`
        ),
        sn('avgPool', s, r);
    const c = { x: a },
        u = { filterSize: t, strides: e, pad: s, dimRoundingMode: r };
    let h = V.runKernel(zc, c, u);
    return (
        (h = bt(h, o.dtype)), l ? j(h, [h.shape[1], h.shape[2], h.shape[3]]) : h
    );
}
const zu = B({ avgPool_: v$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function k$(n, t, e, s, r, o = 'NDHWC') {
    const i = A(n, 'x', 'avgPool3d', 'float32');
    let a = i,
        l = !1;
    i.rank === 4 &&
        ((l = !0),
        (a = j(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]]))),
        _(
            a.rank === 5,
            () => `Error in avgPool3d: x must be rank 5 but got rank ${a.rank}.`
        ),
        _(
            o === 'NDHWC',
            () =>
                `Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${o}`
        ),
        _(
            (typeof e == 'number' && e > 0) ||
                (Array.isArray(e) && e[0] > 0 && e[1] > 0 && e[2] > 0),
            () => `Error in avgPool3d: Stride must be > 0, but got '${e}'`
        ),
        sn('avgPool3d', s, r);
    const c = { x: a },
        u = {
            filterSize: t,
            strides: e,
            pad: s,
            dimRoundingMode: r,
            dataFormat: o,
        };
    let h = V.runKernel(Bc, c, u);
    return (
        (h = bt(h, a.dtype)),
        l ? j(h, [h.shape[1], h.shape[2], h.shape[3], h.shape[4]]) : h
    );
}
const N0 = B({ avgPool3d_: k$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function S$(n, t = 0) {
    _(n.length >= 1, () => 'Pass at least one tensor to concat');
    const e = oc(n, 'tensors', 'concat', 'string_or_numeric');
    if (
        (e[0].dtype === 'complex64' &&
            e.forEach((o) => {
                if (o.dtype !== 'complex64')
                    throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${o.dtype}. `);
            }),
        e.length === 1)
    )
        return Hs(e[0]);
    const s = e,
        r = { axis: t };
    return V.runKernel(Gc, s, r);
}
const Ie = B({ concat_: S$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function I$(n, t, e = !1, s = !1) {
    let r = A(n, 'a', 'matMul'),
        o = A(t, 'b', 'matMul');
    [r, o] = ye(r, o);
    const i = { a: r, b: o },
        a = { transposeA: e, transposeB: s };
    return V.runKernel(Mc, i, a);
}
const Wt = B({ matMul_: I$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function C$(n) {
    const e = { x: A(n, 'x', 'sigmoid', 'float32') };
    return V.runKernel(Ga, e);
}
const Ss = B({ sigmoid_: C$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function $$(n, t, e) {
    const s = A(n, 'x', 'slice', 'string_or_numeric');
    if (s.rank === 0) throw new Error('Slicing scalar is not possible');
    const r = { x: s },
        o = { begin: t, size: e };
    return V.runKernel(Tu, r, o);
}
const Gt = B({ slice_: $$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function N$(n) {
    const e = { x: A(n, 'x', 'tanh', 'float32') };
    return V.runKernel(Ya, e);
}
const Jo = B({ tanh_: N$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function T$(n, t, e, s, r, o) {
    const i = A(n, 'forgetBias', 'basicLSTMCell'),
        a = A(t, 'lstmKernel', 'basicLSTMCell'),
        l = A(e, 'lstmBias', 'basicLSTMCell'),
        c = A(s, 'data', 'basicLSTMCell'),
        u = A(r, 'c', 'basicLSTMCell'),
        h = A(o, 'h', 'basicLSTMCell'),
        d = Ie([c, h], 1),
        p = Wt(d, a),
        f = ct(p, l),
        m = f.shape[0],
        g = f.shape[1] / 4,
        y = [m, g],
        b = Gt(f, [0, 0], y),
        w = Gt(f, [0, g], y),
        x = Gt(f, [0, g * 2], y),
        v = Gt(f, [0, g * 3], y),
        C = ct(U(Ss(b), Jo(w)), U(u, Ss(ct(i, x)))),
        $ = U(Jo(C), Ss(v));
    return [C, $];
}
const E$ = B({ basicLSTMCell_: T$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function _$(n, t, e) {
    const s = A(n, 'x', 'batchToSpaceND'),
        r = t.reduce((a, l) => a * l);
    _(
        s.rank >= 1 + t.length,
        () =>
            `input rank is ${s.rank} but should be > than blockShape.length ${t.length}`
    ),
        _(
            e.length === t.length,
            () =>
                `crops.length is ${e.length} but should be equal to blockShape.length  ${t.length}`
        ),
        _(
            s.shape[0] % r === 0,
            () =>
                `input tensor batch is ${
                    s.shape[0]
                } but is not divisible by the product of the elements of blockShape ${t.join(
                    ' * '
                )} === ${r}`
        );
    const o = { x: s },
        i = { blockShape: t, crops: e };
    return V.runKernel(Vc, o, i);
}
const Bu = B({ batchToSpaceND_: _$ });
function A$(n) {
    let t;
    return (
        n.rank === 0 || n.rank === 1
            ? (t = j(n, [1, 1, 1, n.size]))
            : n.rank === 2
            ? (t = j(n, [1, 1, n.shape[0], n.shape[1]]))
            : n.rank === 3
            ? (t = j(n, [1, n.shape[0], n.shape[1], n.shape[2]]))
            : (t = n),
        t
    );
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function R$(n, t, e, s, r, o) {
    o == null && (o = 0.001);
    const i = A(n, 'x', 'batchNorm'),
        a = A(t, 'mean', 'batchNorm'),
        l = A(e, 'variance', 'batchNorm');
    let c;
    r != null && (c = A(r, 'scale', 'batchNorm'));
    let u;
    s != null && (u = A(s, 'offset', 'batchNorm')),
        _(
            a.rank === l.rank,
            () =>
                'Batch normalization gradient requires mean and variance to have equal ranks.'
        ),
        _(
            u == null || a.rank === u.rank,
            () =>
                'Batch normalization gradient requires mean and offset to have equal ranks.'
        ),
        _(
            c == null || a.rank === c.rank,
            () =>
                'Batch normalization gradient requires mean and scale to have equal ranks.'
        );
    const d = { x: A$(i), scale: c, offset: u, mean: a, variance: l },
        p = { varianceEpsilon: o },
        f = V.runKernel(Qc, d, p);
    return j(f, i.shape);
}
const el = B({ batchNorm_: R$ });
function D$(n, t, e, s, r, o) {
    const i = A(n, 'x', 'batchNorm'),
        a = A(t, 'mean', 'batchNorm'),
        l = A(e, 'variance', 'batchNorm');
    let c;
    r != null && (c = A(r, 'scale', 'batchNorm'));
    let u;
    return (
        s != null && (u = A(s, 'offset', 'batchNorm')),
        _(
            i.rank === 2,
            () =>
                `Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`
        ),
        _(
            a.rank === 2 || a.rank === 1,
            () =>
                `Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${a.rank}.`
        ),
        _(
            l.rank === 2 || l.rank === 1,
            () =>
                `Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`
        ),
        c != null &&
            _(
                c.rank === 2 || c.rank === 1,
                () =>
                    `Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${c.rank}.`
            ),
        u != null &&
            _(
                u.rank === 2 || u.rank === 1,
                () =>
                    `Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${u.rank}.`
            ),
        el(i, a, l, u, c, o)
    );
}
const T0 = B({ batchNorm2d_: D$ });
function O$(n, t, e, s, r, o) {
    const i = A(n, 'x', 'batchNorm'),
        a = A(t, 'mean', 'batchNorm'),
        l = A(e, 'variance', 'batchNorm');
    let c;
    r != null && (c = A(r, 'scale', 'batchNorm'));
    let u;
    return (
        s != null && (u = A(s, 'offset', 'batchNorm')),
        _(
            i.rank === 3,
            () =>
                `Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`
        ),
        _(
            a.rank === 3 || a.rank === 1,
            () =>
                `Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${a.rank}.`
        ),
        _(
            l.rank === 3 || l.rank === 1,
            () =>
                `Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`
        ),
        c != null &&
            _(
                c.rank === 3 || c.rank === 1,
                () =>
                    `Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${c.rank}.`
            ),
        u != null &&
            _(
                u.rank === 3 || u.rank === 1,
                () =>
                    `Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${u.rank}.`
            ),
        el(i, a, l, u, c, o)
    );
}
const E0 = B({ batchNorm3d_: O$ });
function F$(n, t, e, s, r, o) {
    const i = A(n, 'x', 'batchNorm'),
        a = A(t, 'mean', 'batchNorm'),
        l = A(e, 'variance', 'batchNorm');
    let c;
    r != null && (c = A(r, 'scale', 'batchNorm'));
    let u;
    return (
        s != null && (u = A(s, 'offset', 'batchNorm')),
        _(
            i.rank === 4,
            () =>
                `Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`
        ),
        _(
            a.rank === 4 || a.rank === 1,
            () =>
                `Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${a.rank}.`
        ),
        _(
            l.rank === 4 || l.rank === 1,
            () =>
                `Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`
        ),
        c != null &&
            _(
                c.rank === 4 || c.rank === 1,
                () =>
                    `Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${c.rank}.`
            ),
        u != null &&
            _(
                u.rank === 4 || u.rank === 1,
                () =>
                    `Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${u.rank}.`
            ),
        el(i, a, l, u, c, o)
    );
}
const _0 = B({ batchNorm4d_: F$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function L$(n, t, e) {
    const s = A(n, 'x', 'bincount'),
        r = A(t, 'weights', 'bincount');
    _(
        s.dtype === 'int32',
        () => `Error in bincount: input dtype must be int32, but got ${s.dtype}`
    ),
        _(e >= 0, () => `size must be non-negative, but got ${e}.`),
        _(
            r.size === s.size || r.size === 0,
            () =>
                `Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`
        );
    const o = { x: s, weights: r },
        i = { size: e };
    return V.runKernel(mp, o, i);
}
const A0 = B({ bincount_: L$ });
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function P$(n, t) {
    const e = A(n, 'x', 'bitwiseAnd'),
        s = A(t, 'y', 'bitwiseAnd');
    if (!Ut(e.shape, s.shape))
        throw new Error(
            `BitwiseAnd: Tensors must have the same shape. x: ${e.shape}, y: ${s.shape}`
        );
    if (e.dtype !== 'int32' || s.dtype !== 'int32')
        throw new Error(
            `BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${e.dtype} and type of y: ${s.dtype}`
        );
    const r = { a: e, b: s };
    return V.runKernel(Wc, r);
}
const z$ = B({ bitwiseAnd_: P$ });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function B$(n, t) {
    const e = A(n, 's0', 'broadcastArgs', 'int32'),
        s = A(t, 's1', 'broadcastArgs', 'int32');
    if (e.rank !== 1)
        throw new Error(
            `broadcastArgs(): first input must be a vector (rank=1). Has rank ${e.rank}`
        );
    if (s.rank !== 1)
        throw new Error(
            `broadcastArgs(): second input must be a vector (rank=1). Has rank ${s.rank}`
        );
    const r = { s0: e, s1: s };
    return V.runKernel(gp, r);
}
const M$ = B({ broadcastArgs_: B$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function V$(n, t) {
    let e = A(n, 'broadcastTo', 'x');
    const s = e.shape;
    if ((Fn(t), t.length < e.rank))
        throw new Error(
            `broadcastTo(): shape.length=${t.length} < input.rank=${e.rank}.`
        );
    if (t.length > e.rank) {
        const c = e.shape.slice();
        for (; c.length < t.length; ) c.unshift(1);
        e = j(e, c);
    }
    const r = e.shape,
        o = Array.from(t);
    for (let c = t.length - 1; c >= 0; c--)
        if (r[c] === t[c]) o[c] = 1;
        else if (e.shape[c] !== 1)
            throw new Error(
                `broadcastTo(): [${s}] cannot be broadcast to [${t}].`
            );
    if (o.map((c, u) => (c > 1 ? u : -1)).filter((c) => c >= 0).length === 0)
        return Hs(e);
    const a = { x: e },
        l = { reps: o };
    return V.runKernel(Za, a, l);
}
const Go = B({ broadcastTo_: V$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function W$(n) {
    const e = { x: A(n, 'x', 'ceil', 'float32') };
    return V.runKernel(da, e);
}
const R0 = B({ ceil_: W$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function fi(n, t, e) {
    Fn(n), (e = e || hi(t));
    const s = { shape: n, value: t, dtype: e };
    return V.runKernel(Ap, {}, s);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function U$(n, t, e) {
    const s = A(n, 'x', 'clipByValue');
    if (
        (_(
            t <= e,
            () =>
                `Error in clip: min (${t}) must be less than or equal to max (${e}).`
        ),
        t === e)
    )
        return fi(s.shape, t, s.dtype);
    const r = { x: s },
        o = { clipValueMin: t, clipValueMax: e };
    return V.runKernel(pa, r, o);
}
const kn = B({ clipByValue_: U$ });
function G$(n) {
    return Ie(n, 0);
}
const D0 = B({ concat1d_: G$ });
function H$(n, t) {
    return Ie(n, t);
}
const O0 = B({ concat2d_: H$ });
function j$(n, t) {
    return Ie(n, t);
}
const F0 = B({ concat3d_: j$ });
function q$(n, t) {
    return Ie(n, t);
}
const L0 = B({ concat4d_: q$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function K$(n, t, e, s, r = 'NHWC', o = [1, 1], i) {
    const a = A(n, 'x', 'conv2d', 'float32'),
        l = A(t, 'filter', 'conv2d', 'float32');
    let c = a,
        u = !1;
    a.rank === 3 &&
        ((u = !0), (c = j(a, [1, a.shape[0], a.shape[1], a.shape[2]]))),
        _(
            c.rank === 4,
            () =>
                `Error in conv2d: input must be rank 4, but got rank ${c.rank}.`
        ),
        _(
            l.rank === 4,
            () =>
                `Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`
        ),
        sn('conv2d', s, i);
    const h = r === 'NHWC' ? c.shape[3] : c.shape[1];
    _(
        h === l.shape[2],
        () =>
            `Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`
    ),
        _(
            We(e, o),
            () =>
                `Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`
        ),
        _(
            io(o),
            () => 'Error in conv2D: Dilated rates should be larger than 0.'
        ),
        _(io(e), () => 'Error in conv2D: Strides should be larger than 0.');
    const d = { x: c, filter: l },
        p = {
            strides: e,
            pad: s,
            dataFormat: r,
            dilations: o,
            dimRoundingMode: i,
        },
        f = V.runKernel(Hc, d, p);
    return u ? j(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
const mr = B({ conv2d_: K$ });
function X$(n, t, e, s, r = 'NWC', o = 1, i) {
    const a = A(n, 'x', 'conv1d'),
        l = A(t, 'filter', 'conv1d');
    let c = a,
        u = !1;
    a.rank === 2 && ((u = !0), (c = j(a, [1, a.shape[0], a.shape[1]]))),
        _(
            c.rank === 3,
            () =>
                `Error in conv1d: input must be rank 3, but got rank ${c.rank}.`
        ),
        _(
            l.rank === 3,
            () =>
                `Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`
        ),
        sn('conv1d', s, i),
        _(
            c.shape[2] === l.shape[1],
            () =>
                `Error in conv1d: depth of input (${c.shape[2]}) must match input depth for filter ${l.shape[1]}.`
        ),
        _(
            We(e, o),
            () =>
                `Error in conv1D: Either stride or dilation must be 1. Got stride ${e} and dilation '${o}'`
        ),
        _(
            io(o),
            () => 'Error in conv1D: Dilated rates should be larger than 0.'
        ),
        _(io(e), () => 'Error in conv1D: Stride should be larger than 0.'),
        _(
            r === 'NWC',
            () =>
                `Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`
        );
    const h = j(l, [1, l.shape[0], l.shape[1], l.shape[2]]),
        d = j(c, [c.shape[0], 1, c.shape[1], c.shape[2]]),
        g = mr(d, h, [1, e], s, 'NHWC', [1, o], i);
    return u
        ? j(g, [g.shape[2], g.shape[3]])
        : j(g, [g.shape[0], g.shape[2], g.shape[3]]);
}
const Cf = B({ conv1d_: X$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Y$(n, t, e, s, r, o = 'NHWC', i) {
    _(
        n.length === t.rank,
        () =>
            `Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`
    );
    let a = n,
        l = t,
        c = !1;
    t.rank === 3 &&
        ((c = !0),
        (l = j(t, [1, t.shape[0], t.shape[1], t.shape[2]])),
        (a = [1, n[0], n[1], n[2]])),
        _(
            a.length === 4,
            () =>
                `Error in conv2dDerInput: inShape must be length 4, but got length ${a.length}.`
        ),
        _(
            l.rank === 4,
            () =>
                `Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`
        ),
        _(
            e.rank === 4,
            () =>
                `Error in conv2dDerInput: filter must be rank 4, but got rank ${e.rank}`
        );
    const u = o === 'NHWC' ? a[3] : a[1],
        h = o === 'NHWC' ? l.shape[3] : l.shape[1];
    _(
        u === e.shape[2],
        () =>
            `Error in conv2dDerInput: depth of input (${u}) must match input depth for filter ${e.shape[2]}.`
    ),
        _(
            h === e.shape[3],
            () =>
                `Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${e.shape[3]}.`
        ),
        sn('conv2dDerInput', r, i);
    const d = { dy: l, filter: e },
        p = {
            strides: s,
            pad: r,
            dataFormat: o,
            dimRoundingMode: i,
            inputShape: a,
        },
        f = V.runKernel(jc, d, p);
    return c ? j(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
const $f = B({ conv2DBackpropInput_: Y$ });
function Z$(n, t, e, s, r, o) {
    const i = A(n, 'x', 'conv2dTranspose'),
        a = A(t, 'filter', 'conv2dTranspose');
    return $f(e, i, a, s, r, 'NHWC', o);
}
const Nf = B({ conv2dTranspose_: Z$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function J$(n, t, e, s, r = 'NDHWC', o = [1, 1, 1]) {
    const i = A(n, 'x', 'conv3d'),
        a = A(t, 'filter', 'conv3d');
    let l = i,
        c = !1;
    i.rank === 4 &&
        ((c = !0),
        (l = j(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]]))),
        _(
            l.rank === 5,
            () =>
                `Error in conv3d: input must be rank 5, but got rank ${l.rank}.`
        ),
        _(
            a.rank === 5,
            () =>
                `Error in conv3d: filter must be rank 5, but got rank ${a.rank}.`
        ),
        _(
            l.shape[4] === a.shape[3],
            () =>
                `Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${a.shape[3]}.`
        ),
        _(
            We(e, o),
            () =>
                `Error in conv3D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`
        ),
        _(
            r === 'NDHWC',
            () =>
                `Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`
        ),
        _(
            io(o),
            () => 'Error in conv3D: Dilated rates should be larger than 0.'
        ),
        _(io(e), () => 'Error in conv3D: Strides should be larger than 0.');
    const u = { x: l, filter: a },
        h = { strides: e, pad: s, dataFormat: r, dilations: o },
        d = V.runKernel(qc, u, h);
    return c ? j(d, [d.shape[1], d.shape[2], d.shape[3], d.shape[4]]) : d;
}
const P0 = B({ conv3d_: J$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Q$(n, t, e, s, r) {
    _(
        n.length === t.rank,
        () =>
            `Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`
    );
    let o = n,
        i = t,
        a = !1;
    t.rank === 4 &&
        ((a = !0),
        (i = j(t, [1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]])),
        (o = [1, n[0], n[1], n[2], n[3]]));
    const l = o[4],
        c = i.shape[4];
    _(
        o.length === 5,
        () =>
            `Error in conv3dDerInput: inShape must be length 5, but got length ${o.length}.`
    ),
        _(
            i.rank === 5,
            () =>
                `Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`
        ),
        _(
            e.rank === 5,
            () =>
                `Error in conv3dDerInput: filter must be rank 5, but got rank ${e.rank}`
        ),
        _(
            l === e.shape[3],
            () =>
                `Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${e.shape[3]}.`
        ),
        _(
            c === e.shape[4],
            () =>
                `Error in conv3dDerInput: depth of output (${c}) must match output depth for filter ${e.shape[4]}.`
        );
    const u = { dy: i, filter: e },
        h = { pad: r, strides: s, inputShape: o },
        d = V.runKernel(wp, u, h);
    return a ? j(d, [d.shape[1], d.shape[2], d.shape[3], d.shape[4]]) : d;
}
const z0 = B({ conv3DBackpropInput_: Q$ });
function t2(n, t, e, s, r) {
    const o = A(n, 'x', 'conv3dTranspose'),
        i = A(t, 'filter', 'conv3dTranspose');
    return z0(e, o, i, s, r);
}
const B0 = B({ conv3dTranspose_: t2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function e2(n) {
    const e = { x: A(n, 'x', 'cos', 'float32') };
    return V.runKernel(fa, e);
}
const Mu = B({ cos_: e2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function n2(n) {
    const e = { x: A(n, 'x', 'cosh', 'float32') };
    return V.runKernel(ma, e);
}
const Tf = B({ cosh_: n2 });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function s2(n, t = 0, e = !1, s = !1) {
    const o = { x: A(n, 'x', 'cumprod') },
        i = { axis: t, exclusive: e, reverse: s };
    return V.runKernel(vp, o, i);
}
const lc = B({ cumprod_: s2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function r2(n, t = 0, e = !1, s = !1) {
    const o = { x: A(n, 'x', 'cumsum') },
        i = { axis: t, exclusive: e, reverse: s };
    return V.runKernel(Kc, o, i);
}
const Ef = B({ cumsum_: r2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function o2(n, t, e, s = !1) {
    const r = A(n, 'x', 'denseBincount'),
        o = A(t, 'weights', 'denseBincount');
    _(
        r.dtype === 'int32',
        () =>
            `Error in denseBincount: input dtype must be int32, but got ${r.dtype}`
    ),
        _(
            r.rank <= 2,
            () =>
                `Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`
        ),
        _(e >= 0, () => `size must be non-negative, but got ${e}.`),
        _(
            o.size === r.size || o.size === 0,
            () =>
                `Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${o.shape}.`
        );
    const i = { x: r, weights: o },
        a = { size: e, binaryOutput: s };
    return V.runKernel(Sp, i, a);
}
const Id = B({ denseBincount_: o2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function i2(n, t, e = 'NHWC') {
    const s = A(n, 'x', 'depthToSpace', 'float32'),
        r = e === 'NHWC' ? s.shape[1] : s.shape[2],
        o = e === 'NHWC' ? s.shape[2] : s.shape[3],
        i = e === 'NHWC' ? s.shape[3] : s.shape[1];
    _(t > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${t}`),
        _(
            r * t >= 0,
            () => `Negative dimension size caused by overflow when multiplying
    ${r} and ${t}  for depthToSpace with input shape
    ${s.shape}`
        ),
        _(
            o * t >= 0,
            () => `Negative dimension size caused by overflow when multiplying
    ${o} and ${t} for depthToSpace with input shape
        ${s.shape}`
        ),
        _(
            i % (t * t) === 0,
            () =>
                `Dimension size must be evenly divisible by ${
                    t * t
                } but is ${i} for depthToSpace with input shape ${s.shape}`
        );
    const a = { x: s },
        l = { blockSize: t, dataFormat: e };
    return V.runKernel(Ip, a, l);
}
const M0 = B({ depthToSpace_: i2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function a2(n, t, e, s, r = 'NHWC', o = [1, 1], i) {
    const a = A(n, 'x', 'depthwiseConv2d', 'float32'),
        l = A(t, 'filter', 'depthwiseConv2d', 'float32');
    let c = a,
        u = !1;
    a.rank === 3 &&
        ((u = !0), (c = j(a, [1, a.shape[0], a.shape[1], a.shape[2]]))),
        _(
            c.rank === 4,
            () =>
                `Error in depthwiseConv2d: input must be rank 4, but got rank ${c.rank}.`
        ),
        _(
            l.rank === 4,
            () =>
                `Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`
        );
    const h = r === 'NHWC' ? c.shape[3] : c.shape[1];
    _(
        h === l.shape[2],
        () =>
            `Error in depthwiseConv2d: number of input channels (${h}) must match the inChannels dimension in filter ${l.shape[2]}.`
    ),
        sn('depthwiseConv2d', s, i);
    const d = { x: c, filter: l },
        p = {
            strides: e,
            pad: s,
            dataFormat: r,
            dilations: o,
            dimRoundingMode: i,
        },
        f = V.runKernel(Xc, d, p);
    return u ? j(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
const nl = B({ depthwiseConv2d_: a2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function l2(n) {
    const e = { x: A(n, 'x', 'diag') };
    return V.runKernel(Np, e);
}
const c2 = B({ diag_: l2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function u2(n, t, e, s, r = [1, 1], o = 'NHWC') {
    const i = A(n, 'x', 'dilation2d'),
        a = A(t, 'filter', 'dilation2d');
    _(
        i.rank === 3 || i.rank === 4,
        () =>
            `Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`
    ),
        _(
            a.rank === 3,
            () =>
                `Error in dilation2d: filter must be rank 3, but got rank ${a.rank}.`
        ),
        _(
            o === 'NHWC',
            () =>
                `Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${o}`
        );
    let l = i,
        c = !1;
    i.rank === 3 &&
        ((l = j(i, [1, i.shape[0], i.shape[1], i.shape[2]])), (c = !0)),
        _(
            l.shape[3] === a.shape[2],
            () =>
                `Error in dilation2d:  input and filter must have the same depth: ${l.shape[3]} vs ${a.shape[2]}`
        );
    const u = { x: l, filter: a },
        h = { strides: e, pad: s, dilations: r },
        d = V.runKernel(Yc, u, h);
    return c ? j(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
}
const V0 = B({ dilation2d_: u2 });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Qo(n, t) {
    const e = n.length,
        s = [];
    for (let r = 0; r < e; r++) {
        const o = e - 1 - r,
            i = n[o] || 1;
        (t[t.length - 1 - r] || 1) > 1 && i === 1 && s.unshift(o);
    }
    return s;
}
function Ae(n, t) {
    const e = [];
    for (let s = 0; s < t.length; s++) {
        const r = n[n.length - s - 1],
            o = t.length - s - 1,
            i = t[o];
        (r == null || (r === 1 && i > 1)) && e.unshift(o);
    }
    return e;
}
function Dt(n, t) {
    const e = Math.max(n.length, t.length),
        s = new Array(e);
    for (let r = 0; r < e; r++) {
        let o = n[n.length - r - 1];
        o == null && (o = 1);
        let i = t[t.length - r - 1];
        if ((i == null && (i = 1), o === 1)) s[e - r - 1] = i;
        else if (i === 1) s[e - r - 1] = o;
        else if (o !== i) {
            const a = `Operands could not be broadcast together with shapes ${n} and ${t}.`;
            throw Error(a);
        } else s[e - r - 1] = o;
    }
    return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function h2(n, t) {
    let e = A(n, 'a', 'equal', 'string_or_numeric'),
        s = A(t, 'b', 'equal', 'string_or_numeric');
    ([e, s] = ye(e, s)), Dt(e.shape, s.shape);
    const r = { a: e, b: s };
    return V.runKernel(Zc, r);
}
const us = B({ equal_: h2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function d2(n, t, e) {
    const s = A(t, 'a', 'where'),
        r = A(e, 'b', 'where'),
        o = A(n, 'condition', 'where', 'bool'),
        i = Dt(Dt(o.shape, s.shape), r.shape),
        a = Go(o, i),
        l = Go(s, i),
        c = Go(r, i),
        u = { condition: a, t: l, e: c };
    return V.runKernel(Nu, u);
}
const qe = B({ where_: d2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function p2(n) {
    const e = { x: A(n, 'x', 'zerosLike') };
    return V.runKernel(Lu, e);
}
const jt = B({ zerosLike_: p2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function f2(n, t) {
    let e = A(n, 'a', 'div'),
        s = A(t, 'b', 'div');
    [e, s] = ye(e, s);
    const r = Et(e, s),
        o = jt(r),
        i = us(s, o);
    return qe(i, o, r);
}
const W0 = B({ divNoNan_: f2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function m2(n, t) {
    const e = A(n, 't1', 'dot'),
        s = A(t, 't2', 'dot');
    _(
        (e.rank === 1 || e.rank === 2) && (s.rank === 1 || s.rank === 2),
        () =>
            `Error in dot: inputs must all be rank 1 or 2, but got ranks ${e.rank} and ${s.rank}.`
    );
    const r = e.rank === 1 ? e.size : e.shape[1],
        o = s.rank === 1 ? s.size : s.shape[0];
    if (
        (_(
            r === o,
            () =>
                `Error in dot: inner dimensions of inputs must match, but got ${r} and ${o}.`
        ),
        e.rank === 1 && s.rank === 1)
    ) {
        const i = j(e, [1, -1]),
            a = j(s, [-1, 1]),
            l = Wt(i, a);
        return j(l, []);
    } else if (e.rank === 1 && s.rank === 2) {
        const i = j(e, [1, -1]),
            a = j(s, [s.shape[0], s.shape[1]]),
            l = Wt(i, a);
        return j(l, [l.size]);
    } else if (e.rank === 2 && s.rank === 1) {
        const i = j(s, [-1, 1]),
            a = Wt(e, i);
        return j(a, [a.size]);
    } else {
        const i = j(s, [s.shape[0], s.shape[1]]);
        return Wt(e, i);
    }
}
const U0 = B({ dot_: m2 });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function g2(n, ...t) {
    const e = t.map((r, o) => A(r, `tensors${o}`, 'einsum')),
        s = { equation: n };
    return V.runKernel(Tp, e, s);
}
const Po = B({ einsum_: g2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function y2(n) {
    const e = { x: A(n, 'x', 'elu', 'float32') };
    return V.runKernel(ya, e);
}
const sl = B({ elu_: y2 });
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function b2(n, t) {
    const e = A(n, 'x', 'ensureShape', 'string_or_numeric');
    if (!RI(e.shape, t))
        throw new Error(
            `EnsureShape: Shape of tensor ${e.shape} is not compatible with expected shape ${t}`
        );
    return n;
}
const x2 = B({ ensureShape_: b2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function w2(n) {
    let t = A(n, 'x', 'erf');
    _(
        t.dtype === 'int32' || t.dtype === 'float32',
        () => 'Input dtype must be `int32` or `float32`.'
    ),
        t.dtype === 'int32' && (t = bt(t, 'float32'));
    const e = { x: t };
    return V.runKernel(ba, e);
}
const G0 = B({ erf_: w2 });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function _f(n, t) {
    for (let e = 0; e < n.length; ++e)
        if (n[n.length - e - 1] !== t - 1 - e) return !1;
    return !0;
}
function H0(n, t, e) {
    const s = n.length + t.length,
        r = [];
    let o = 0,
        i = 0;
    for (let a = 0; a < s; a++)
        e.indexOf(a) === -1 ? r.push(n[o++]) : r.push(t[i++]);
    return r;
}
function Pe(n, t) {
    const e = [],
        s = n.length;
    for (let o = 0; o < s; o++) t.indexOf(o) === -1 && e.push(n[o]);
    const r = t.map((o) => n[o]);
    return [e, r];
}
function xe(n, t) {
    const e = t.map((s) => 1);
    return H0(n, e, t);
}
function Ue(n, t, e) {
    _(
        _f(t, e),
        () =>
            `${n} supports only inner-most axes for now. Got axes ${t} and rank-${e} input.`
    );
}
function me(n, t) {
    if (_f(n, t)) return null;
    const e = [];
    for (let s = 0; s < t; ++s) n.indexOf(s) === -1 && e.push(s);
    return n.forEach((s) => e.push(s)), e;
}
function Tr(n) {
    return n
        .map((t, e) => [e, t])
        .sort((t, e) => t[1] - e[1])
        .map((t) => t[0]);
}
function we(n, t) {
    const e = [];
    for (let s = t - n; s < t; ++s) e.push(s);
    return e;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function v2(n, t = null, e = !1) {
    const r = { x: A(n, 'x', 'max') },
        o = { reductionIndices: t, keepDims: e };
    return V.runKernel(cu, r, o);
}
const Yn = B({ max_: v2 });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function k2(n, t = null, e = !1) {
    const r = { x: A(n, 'x', 'min') },
        o = { axis: t, keepDims: e };
    return V.runKernel(pu, r, o);
}
const Gi = B({ min_: k2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function S2(n, t) {
    let e = A(n, 'base', 'pow'),
        s = A(t, 'exp', 'pow');
    [e, s] = ye(e, s);
    const r = { a: e, b: s };
    return V.runKernel(Oa, r);
}
const gr = B({ pow_: S2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function At(n, t) {
    if (((Zn(n) && t !== 'string') || Array.isArray(n)) && t !== 'complex64')
        throw new Error(
            'Error creating a new Scalar: value must be a primitive (number|boolean|string)'
        );
    if (t === 'string' && Zn(n) && !(n instanceof Uint8Array))
        throw new Error(
            'When making a scalar from encoded string, the value must be `Uint8Array`.'
        );
    return $r(n, [], [], t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function I2(n) {
    const e = { x: A(n, 'x', 'sqrt', 'float32') };
    return V.runKernel(ja, e);
}
const Xe = B({ sqrt_: I2 });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function C2(n) {
    const t = A(n, 'x', 'square'),
        e = {};
    return V.runKernel('Square', { x: t }, e);
}
const te = B({ square_: C2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function $2(n, t = null, e = !1) {
    let s = A(n, 'x', 'sum');
    s.dtype === 'bool' && (s = bt(s, 'int32'));
    const r = { x: s },
        o = { axis: t, keepDims: e };
    return V.runKernel(Eu, r, o);
}
const St = B({ sum_: $2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function N2(n, t = 'euclidean', e = null, s = !1) {
    n = A(n, 'x', 'norm');
    const r = j0(n, t, e);
    let o = r.shape;
    if (s) {
        const i = Bt(e, n.shape);
        o = xe(r.shape, i);
    }
    return j(r, o);
}
function j0(n, t, e = null) {
    if (n.rank === 0) return Ce(n);
    if (n.rank !== 1 && e === null) return j0(j(n, [-1]), t, e);
    if (
        n.rank === 1 ||
        typeof e == 'number' ||
        (Array.isArray(e) && e.length === 1)
    ) {
        if (t === 1) return St(Ce(n), e);
        if (t === 1 / 0) return Yn(Ce(n), e);
        if (t === -1 / 0) return Gi(Ce(n), e);
        if (t === 'euclidean' || t === 2)
            return Xe(St(gr(Ce(n), At(2, 'int32')), e));
        throw new Error(`Error in norm: invalid ord value: ${t}`);
    }
    if (Array.isArray(e) && e.length === 2) {
        if (t === 1) return Yn(St(Ce(n), e[0]), e[1] - 1);
        if (t === 1 / 0) return Yn(St(Ce(n), e[1]), e[0]);
        if (t === -1 / 0) return Gi(St(Ce(n), e[1]), e[0]);
        if (t === 'fro' || t === 'euclidean') return Xe(St(te(n), e));
        throw new Error(`Error in norm: invalid ord value: ${t}`);
    }
    throw new Error(`Error in norm: invalid axis: ${e}`);
}
const rl = B({ norm_: N2 });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function T2(n, t = null, e = !1) {
    return rl(n, 'euclidean', t, e);
}
const q0 = B({ euclideanNorm_: T2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function E2(n) {
    const e = { x: A(n, 'x', 'exp') };
    return V.runKernel(xa, e);
}
const Sn = B({ exp_: E2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function _2(n, t = 0) {
    const e = A(n, 'x', 'expandDims', 'string_or_numeric');
    _(t <= e.rank, () => 'Axis must be <= rank of the tensor');
    const s = { input: e },
        r = { dim: t };
    return V.runKernel(Jc, s, r);
}
const Qe = B({ expandDims_: _2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function A2(n) {
    const e = { x: A(n, 'x', 'expm1') };
    return V.runKernel(wa, e);
}
const K0 = B({ expm1_: A2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function R2(n, t) {
    const e = A(n, 'x', 'tile', 'string_or_numeric');
    _(
        e.rank === t.length,
        () =>
            `Error in transpose: rank of input ${e.rank} must match length of reps ${t}.`
    );
    const s = { x: e },
        r = { reps: t };
    return V.runKernel(Za, s, r);
}
const jn = B({ tile_: R2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function D2(n, t, e, s = 'float32') {
    t == null && (t = n);
    const r = Pt([n, t], s),
        o = n <= t ? n : t;
    for (let a = 0; a < o; ++a) r.set(1, a, a);
    const i = j(r.toTensor(), [n, t]);
    if (e == null) return i;
    if (e.length === 1) return jn(Qe(i, 0), [e[0], 1, 1]);
    if (e.length === 2) return jn(Qe(Qe(i, 0), 0), [e[0], e[1], 1, 1]);
    if (e.length === 3)
        return jn(Qe(Qe(Qe(i, 0), 0), 0), [e[0], e[1], e[2], 1, 1]);
    throw new Error(
        `eye() currently supports only 1D and 2D batchShapes, but received ${e.length}D.`
    );
}
const Af = B({ eye_: D2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function O2(n) {
    const e = { x: A(n, 'x', 'floor', 'float32') };
    return V.runKernel(va, e);
}
const ol = B({ floor_: O2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function F2(n, t, e = 0, s = 0) {
    const r = A(n, 'x', 'gather'),
        o = A(t, 'indices', 'gather', 'int32'),
        i = { x: r, indices: o },
        a = { axis: e, batchDims: s };
    return V.runKernel(tu, i, a);
}
const il = B({ gather_: F2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function L2(n, t) {
    let e = A(n, 'a', 'greater', 'string_or_numeric'),
        s = A(t, 'b', 'greater', 'string_or_numeric');
    ([e, s] = ye(e, s)), Dt(e.shape, s.shape);
    const r = { a: e, b: s };
    return V.runKernel(eu, r);
}
const Tn = B({ greater_: L2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function P2(n, t) {
    let e = A(n, 'a', 'greaterEqual', 'string_or_numeric'),
        s = A(t, 'b', 'greaterEqual', 'string_or_numeric');
    ([e, s] = ye(e, s)), Dt(e.shape, s.shape);
    const r = { a: e, b: s };
    return V.runKernel(Sa, r);
}
const Er = B({ greaterEqual_: P2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function z2(n) {
    const e = { input: A(n, 'input', 'imag') };
    return V.runKernel(Fp, e);
}
const Vu = B({ imag_: z2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function B2(n) {
    const e = { x: A(n, 'x', 'isFinite') };
    return V.runKernel(Ca, e);
}
const X0 = B({ isFinite_: B2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function M2(n) {
    const e = { x: A(n, 'x', 'isInf') };
    return V.runKernel($a, e);
}
const Y0 = B({ isInf_: M2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function V2(n) {
    const e = { x: A(n, 'x', 'isNaN') };
    return V.runKernel(Na, e);
}
const Z0 = B({ isNaN_: V2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function W2(n, t = 0.2) {
    const s = { x: A(n, 'x', 'leakyRelu') },
        r = { alpha: t };
    return V.runKernel(nu, s, r);
}
const Wu = B({ leakyRelu_: W2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function U2(n, t) {
    let e = A(n, 'a', 'less', 'string_or_numeric'),
        s = A(t, 'b', 'less', 'string_or_numeric');
    ([e, s] = ye(e, s)), Dt(e.shape, s.shape);
    const r = { a: e, b: s };
    return V.runKernel(su, r);
}
const Hi = B({ less_: U2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function G2(n, t) {
    let e = A(n, 'a', 'lessEqual', 'string_or_numeric'),
        s = A(t, 'b', 'lessEqual', 'string_or_numeric');
    ([e, s] = ye(e, s)), Dt(e.shape, s.shape);
    const r = { a: e, b: s };
    return V.runKernel(ru, r);
}
const yo = B({ lessEqual_: G2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function H2(n, t, e) {
    if (e <= 0) throw new Error('The number of values should be positive.');
    const s = { start: n, stop: t, num: e };
    return V.runKernel(Lp, {}, s);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function j2(n, t = 5, e = 1, s = 1, r = 0.5) {
    const o = A(n, 'x', 'localResponseNormalization');
    _(
        o.rank === 4 || o.rank === 3,
        () => `Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${o.rank}.`
    ),
        _(
            Ko(t),
            () =>
                `Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`
        );
    let i = o,
        a = !1;
    o.rank === 3 &&
        ((a = !0), (i = j(o, [1, o.shape[0], o.shape[1], o.shape[2]])));
    const l = { x: i },
        c = { depthRadius: t, bias: e, alpha: s, beta: r },
        u = V.runKernel(lu, l, c);
    return a ? j(u, [u.shape[1], u.shape[2], u.shape[3]]) : u;
}
const J0 = B({ localResponseNormalization_: j2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function q2(n) {
    const e = { x: A(n, 'x', 'log', 'float32') };
    return V.runKernel(Ta, e);
}
const Dn = B({ log_: q2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function K2(n) {
    const e = { x: A(n, 'x', 'log1p') };
    return V.runKernel(Ea, e);
}
const Uu = B({ log1p_: K2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function X2(n, t) {
    _(rd(n), () => 'The f passed in variableGrads(f) must be a function'),
        _(
            t == null || (Array.isArray(t) && t.every((c) => c instanceof rc)),
            () =>
                'The varList passed in variableGrads(f, varList) must be an array of variables'
        );
    const e = t != null;
    if (!e) {
        t = [];
        for (const c in V.registeredVariables) t.push(V.registeredVariables[c]);
    }
    const s = e ? t.filter((c) => !c.trainable) : null,
        r = t.length;
    (t = t.filter((c) => c.trainable)),
        _(
            t.length > 0,
            () =>
                `variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`
        );
    const o = !0,
        { value: i, grads: a } = V.gradients(n, t, null, o);
    _(
        a.some((c) => c != null),
        () =>
            'Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().'
    ),
        _(
            i.rank === 0,
            () =>
                `The f passed in variableGrads(f) must return a scalar, but it returned a rank-${i.rank} tensor`
        );
    const l = {};
    return (
        t.forEach((c, u) => {
            a[u] != null && (l[c.name] = a[u]);
        }),
        s != null && s.forEach((c) => (l[c.name] = null)),
        { value: i, grads: l }
    );
}
function qs(n) {
    return V.customGrad(n);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Y2(n) {
    const e = { x: A(n, 'x', 'neg') };
    return V.runKernel(mu, e);
}
const le = B({ neg_: Y2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Z2(n) {
    const e = { x: A(n, 'x', 'softplus') };
    return V.runKernel(Ha, e);
}
const mi = B({ softplus_: Z2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function J2(n) {
    const t = A(n, 'x', 'logSigmoid');
    return qs((s) => ({
        value: le(mi(le(s))),
        gradFunc: (i) => U(i, Ss(le(s))),
    }))(t);
}
const Q0 = B({ logSigmoid_: J2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Q2(n, t) {
    let e = A(n, 'a', 'sub'),
        s = A(t, 'b', 'sub');
    [e, s] = ye(e, s);
    const r = { a: e, b: s };
    return V.runKernel(Ka, r);
}
const kt = B({ sub_: Q2 });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function tN(n, t = -1) {
    const e = A(n, 'logits', 'logSoftmax');
    if ((t === -1 && (t = e.rank - 1), t !== e.rank - 1))
        throw Error(
            `Log Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and axis was ${t}`
        );
    return qs((r, o) => {
        const a = Yn(r, t, !0),
            l = kt(r, a),
            c = kt(bt(l, 'float32'), Dn(St(Sn(l), t, !0)));
        return (
            o([c]),
            {
                value: c,
                gradFunc: (h, d) => {
                    const [p] = d,
                        f = !0,
                        m = Sn(p);
                    return kt(h, U(St(h, t, f), m));
                },
            }
        );
    })(e);
}
const Rf = B({ logSoftmax_: tN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function eN(n, t = null, e = !1) {
    const s = A(n, 'x', 'logSumExp'),
        r = Bt(t, s.shape),
        o = Yn(s, r, !0),
        i = kt(s, o),
        a = Sn(i),
        l = St(a, r),
        c = Dn(l),
        u = ct(j(o, c.shape), c);
    if (e) {
        const h = xe(u.shape, r);
        return j(u, h);
    }
    return u;
}
const Gu = B({ logSumExp_: eN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function nN(n, t) {
    const e = A(n, 'a', 'logicalAnd', 'bool'),
        s = A(t, 'b', 'logicalAnd', 'bool');
    Dt(e.shape, s.shape);
    const r = { a: e, b: s };
    return V.runKernel(ou, r);
}
const Es = B({ logicalAnd_: nN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function sN(n) {
    const e = { x: A(n, 'x', 'logicalNot', 'bool') };
    return V.runKernel(iu, e);
}
const Hu = B({ logicalNot_: sN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function rN(n, t) {
    const e = A(n, 'a', 'logicalOr', 'bool'),
        s = A(t, 'b', 'logicalOr', 'bool');
    Dt(e.shape, s.shape);
    const r = { a: e, b: s };
    return V.runKernel(au, r);
}
const Df = B({ logicalOr_: rN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function oN(n, t) {
    const e = A(n, 'a', 'logicalXor', 'bool'),
        s = A(t, 'b', 'logicalXor', 'bool');
    return Dt(e.shape, s.shape), Es(Df(n, t), Hu(Es(n, t)));
}
const tx = B({ logicalXor_: oN });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const $l = 2147483648;
function iN(n, t, e = 'left') {
    const s = A(n, 'sortedSequence', 'searchSorted'),
        r = A(t, 'values', 'searchSorted'),
        o = s.shape[s.shape.length - 1],
        i = r.shape[r.shape.length - 1],
        a = j(s, [-1, o]),
        l = j(r, [-1, i]);
    if (a.rank < 2)
        throw new Error('Sorted input argument must be at least 2-dimensional');
    if (a.shape[0] !== l.shape[0])
        throw new Error(
            "Leading dimension of 'sortedSequence' and 'values' must match."
        );
    if (rt(l.shape) >= $l)
        throw new Error(`values tensor size must less than ${$l}`);
    if (a.shape[1] >= $l)
        throw new Error(
            `trailing dim_size must less than ${$l} for int32 output type, was ${a.shape[1]}`
        );
    const c = { sortedSequence: a, values: l },
        u = { side: e };
    return V.runKernel(tf, c, u);
}
const Of = B({ searchSorted_: iN });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function aN(n, t) {
    return Of(n, t, 'left');
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function lN(n, t, e, s, r) {
    const o = A(n, 'x', 'maxPool'),
        i = 1;
    let a = o,
        l = !1;
    o.rank === 3 &&
        ((l = !0), (a = j(o, [1, o.shape[0], o.shape[1], o.shape[2]]))),
        _(
            a.rank === 4,
            () =>
                `Error in maxPool: input must be rank 4 but got rank ${a.rank}.`
        ),
        _(
            We(e, i),
            () =>
                `Error in maxPool: Either strides or dilations must be 1. Got strides ${e} and dilations '${i}'`
        ),
        sn('maxPool', s, r);
    const c = { x: a },
        u = { filterSize: t, strides: e, pad: s, dimRoundingMode: r },
        h = V.runKernel(uu, c, u);
    return l ? j(h, [h.shape[1], h.shape[2], h.shape[3]]) : h;
}
const ju = B({ maxPool_: lN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function cN(n, t = [1, 1, 1], e, s, r, o = 'NDHWC') {
    const i = A(n, 'x', 'maxPool3d');
    let a = i,
        l = !1;
    i.rank === 4 &&
        ((l = !0),
        (a = j(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]]))),
        _(
            a.rank === 5,
            () => `Error in maxPool3d: x must be rank 5 but got rank ${a.rank}.`
        ),
        _(
            o === 'NDHWC',
            () =>
                `Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${o}`
        ),
        sn('maxPool3d', s, r);
    const c = { x: a },
        u = {
            filterSize: t,
            strides: e,
            pad: s,
            dimRoundingMode: r,
            dataFormat: o,
        },
        h = V.runKernel(hu, c, u);
    return l ? j(h, [h.shape[1], h.shape[2], h.shape[3], h.shape[4]]) : h;
}
const ex = B({ maxPool3d_: cN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function uN(n, t, e, s, r = !1) {
    const i = { x: A(n, 'x', 'maxPoolWithArgmax') },
        a = { filterSize: t, strides: e, pad: s, includeBatchInIndex: r },
        l = V.runKernel(Mp, i, a);
    return { result: l[0], indexes: l[1] };
}
const hN = B({ maxPoolWithArgmax_: uN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function dN(n, t) {
    let e = A(n, 'a', 'maximum'),
        s = A(t, 'b', 'maximum');
    ([e, s] = ye(e, s)),
        e.dtype === 'bool' && ((e = bt(e, 'int32')), (s = bt(s, 'int32'))),
        Dt(e.shape, s.shape);
    const r = { a: e, b: s };
    return V.runKernel(_a, r);
}
const Js = B({ maximum_: dN });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function pN(n, t = null, e = !1) {
    const r = { x: A(n, 'x', 'mean') },
        o = { axis: t, keepDims: e };
    return V.runKernel(du, r, o);
}
const ge = B({ mean_: pN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Se(n, t = 'float32') {
    if ((Fn(n), t === 'complex64')) {
        const s = Se(n, 'float32'),
            r = Se(n, 'float32');
        return pr(s, r);
    }
    const e = Ke(rt(n), t);
    return V.makeTensor(e, n, t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function xn(n, t = 'float32') {
    if ((Fn(n), t === 'complex64')) {
        const s = xn(n, 'float32'),
            r = Se(n, 'float32');
        return pr(s, r);
    }
    const e = cp(rt(n), t);
    return V.makeTensor(e, n, t);
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function fN(n, t, { indexing: e = 'xy' } = {}) {
    if (e !== 'xy' && e !== 'ij')
        throw new TypeError(`${e} is not a valid third argument to meshgrid`);
    if (n === void 0) return [];
    let s = A(n, 'x', 'meshgrid', n instanceof ce ? n.dtype : 'float32');
    if (t === void 0) return [s];
    let r = A(t, 'y', 'meshgrid', t instanceof ce ? t.dtype : 'float32');
    const o = rt(s.shape),
        i = rt(r.shape);
    return e === 'xy'
        ? ((s = j(s, [1, -1])),
          (r = j(r, [-1, 1])),
          [Wt(xn([i, 1], s.dtype), s), Wt(r, xn([1, o], r.dtype))])
        : ((s = j(s, [-1, 1])),
          (r = j(r, [1, -1])),
          [Wt(s, xn([1, i], s.dtype)), Wt(xn([o, 1], r.dtype), r)]);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function mN(n, t) {
    let e = A(n, 'a', 'minimum'),
        s = A(t, 'b', 'minimum');
    ([e, s] = ye(e, s)),
        e.dtype === 'bool' && ((e = bt(e, 'int32')), (s = bt(s, 'int32'))),
        Dt(e.shape, s.shape);
    const r = { a: e, b: s };
    return V.runKernel(Aa, r);
}
const ao = B({ minimum_: mN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function gN(n, t, e) {
    _(
        e === 'reflect' || e === 'symmetric',
        () =>
            `Invalid mode. Mode must be either reflect or symmetric. Got ${e}.`
    );
    const s = A(n, 'x', 'mirrorPad');
    if (s.rank === 0)
        throw new Error(
            'mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad'
        );
    _(
        t.length === s.rank,
        () => `Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`
    );
    const r = e === 'reflect' ? 1 : 0;
    for (let a = 0; a < s.rank; a++)
        _(
            t[a].length === 2,
            () => 'Invalid number of paddings. Must be length of 2 each.'
        ),
            _(
                t[a][0] >= 0 &&
                    t[a][0] <= s.shape[a] - r &&
                    t[a][1] >= 0 &&
                    t[a][1] <= s.shape[a] - r,
                () =>
                    `Padding in dimension ${a} cannot be greater than or equal to ${
                        s.shape[a] - r
                    } or less than 0 for input of shape ${s.shape}`
            );
    const o = { paddings: t, mode: e },
        i = { x: s };
    return V.runKernel(fu, i, o);
}
const nx = B({ mirrorPad_: gN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function yN(n, t) {
    let e = A(n, 'a', 'mod'),
        s = A(t, 'b', 'mod');
    [e, s] = ye(e, s);
    const r = { a: e, b: s };
    return V.runKernel(Ra, r);
}
const sx = B({ mod_: yN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function bN(n, t = null, e = !1) {
    n = A(n, 'x', 'moments');
    const s = Bt(t, n.shape),
        r = ge(n, s, e);
    let o = r.shape;
    e || (o = xe(r.shape, s));
    const i = te(kt(bt(n, 'float32'), j(r, o))),
        a = ge(i, s, e);
    return { mean: r, variance: a };
}
const qu = B({ moments_: bN });
function xN(n, t, e, s) {
    const r = A(t, 'data', 'multiRNNCell'),
        o = oc(e, 'c', 'multiRNNCell'),
        i = oc(s, 'h', 'multiRNNCell');
    let a = r;
    const l = [];
    for (let h = 0; h < n.length; h++) {
        const d = n[h](a, o[h], i[h]);
        l.push(d[0]), l.push(d[1]), (a = d[1]);
    }
    const c = [],
        u = [];
    for (let h = 0; h < l.length; h += 2) c.push(l[h]), u.push(l[h + 1]);
    return [c, u];
}
const wN = B({ multiRNNCell_: xN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function vN(n, t, e, s = !1) {
    const r = A(n, 'logits', 'multinomial'),
        o = r.size,
        i = r.rank;
    if (o < 2)
        throw new Error(
            `Error in multinomial: you need at least 2 outcomes, but got ${o}.`
        );
    if (i > 2)
        throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);
    e = e || Math.random();
    const l = { logits: i === 1 ? j(r, [1, -1]) : r },
        c = { numSamples: t, seed: e, normalized: s },
        u = V.runKernel(Vp, l, c);
    return i === 1 ? j(u, [u.size]) : u;
}
const kN = B({ multinomial_: vN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function SN(n, t) {
    let e = A(n, 'a', 'notEqual', 'string_or_numeric'),
        s = A(t, 'b', 'notEqual', 'string_or_numeric');
    ([e, s] = ye(e, s)), Dt(e.shape, s.shape);
    const r = { a: e, b: s };
    return V.runKernel(gu, r);
}
const ti = B({ notEqual_: SN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function IN(n, t, e = 1, s = 0, r = 'int32') {
    if (t < 2)
        throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);
    const i = { indices: A(n, 'indices', 'oneHot', 'int32') },
        a = { dtype: r, depth: t, onValue: e, offValue: s };
    return V.runKernel(bu, i, a);
}
const Ku = B({ oneHot_: IN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function CN(n) {
    const e = { x: A(n, 'x', 'onesLike') };
    return V.runKernel(yu, e);
}
const On = B({ onesLike_: CN });
function $N(n, t) {
    const e = A(n, 'v1', 'outerProduct'),
        s = A(t, 'v2', 'outerProduct');
    _(
        e.rank === 1 && s.rank === 1,
        () =>
            `Error in outerProduct: inputs must be rank 1, but got ranks ${e.rank} and ${s.rank}.`
    );
    const r = j(e, [-1, 1]),
        o = j(s, [1, -1]);
    return Wt(r, o);
}
const NN = B({ outerProduct_: $N });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function TN(n, t, e = 0) {
    const s = A(n, 'x', 'pad');
    if (s.rank === 0)
        throw new Error('pad(scalar) is not defined. Pass non-scalar to pad');
    const r = { paddings: t, constantValue: e },
        o = { x: s };
    return V.runKernel(wu, o, r);
}
const _r = B({ pad_: TN });
function EN(n, t, e = 0) {
    return (
        _(
            t.length === 2,
            () => 'Invalid number of paddings. Must be length of 2.'
        ),
        _r(n, [t], e)
    );
}
const _N = B({ pad1d_: EN });
function AN(n, t, e = 0) {
    return (
        _(
            t.length === 2 && t[0].length === 2 && t[1].length === 2,
            () => 'Invalid number of paddings. Must be length of 2 each.'
        ),
        _r(n, t, e)
    );
}
const RN = B({ pad2d_: AN });
function DN(n, t, e = 0) {
    return (
        _(
            t.length === 3 &&
                t[0].length === 2 &&
                t[1].length === 2 &&
                t[2].length === 2,
            () => 'Invalid number of paddings. Must be length of 2 each.'
        ),
        _r(n, t, e)
    );
}
const ON = B({ pad3d_: DN });
function FN(n, t, e = 0) {
    return (
        _(
            t.length === 4 &&
                t[0].length === 2 &&
                t[1].length === 2 &&
                t[2].length === 2 &&
                t[3].length === 2,
            () => 'Invalid number of paddings. Must be length of 2 each.'
        ),
        _r(n, t, e)
    );
}
const LN = B({ pad4d_: FN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function PN(n, t, e) {
    const s = A(n, 'x', 'spaceToBatchND');
    _(
        s.rank >= 1 + t.length,
        () => `input rank ${s.rank} should be > than [blockShape] ${t.length}`
    ),
        _(
            e.length === t.length,
            () =>
                `paddings.shape[0] ${e.length} must be equal to [blockShape] ${t.length}`
        ),
        _(
            s.shape.reduce(
                (i, a, l) =>
                    l > 0 && l <= t.length
                        ? i && (a + e[l - 1][0] + e[l - 1][1]) % t[l - 1] === 0
                        : i,
                !0
            ),
            () =>
                `input spatial dimensions ${s.shape.slice(
                    1
                )} with paddings ${e.toString()} must be divisible by blockShapes ${t.toString()}`
        );
    const r = { x: s },
        o = { blockShape: t, paddings: e };
    return V.runKernel(_u, r, o);
}
const Xu = B({ spaceToBatchND_: PN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function zN(n, t, e, s, r, o, i) {
    r == null && (r = [1, 1]), o == null && (o = 1), s === 0 && (s = 'valid');
    const a = A(n, 'x', 'maxPool');
    let l = a,
        c = !1;
    a.rank === 3 &&
        ((c = !0), (l = j(a, [1, a.shape[0], a.shape[1], a.shape[2]]))),
        _(
            We(o, r),
            () =>
                `Error in pool: Either strides or dilations must be 1. Got strides ${o} and dilations '${r}'`
        );
    const u = ts(l.shape, t, o, r, s),
        h = [u.dilationHeight, u.dilationWidth];
    let d;
    s === 'same'
        ? (d = MN([u.filterHeight, u.filterWidth], h))
        : (d = [
              [0, 0],
              [0, 0],
          ]);
    const p = h[0] === 1 && h[1] === 1,
        [f, m] = BN([u.inHeight, u.inWidth], h, d),
        g = p ? s : 'valid',
        y = p ? l : Xu(l, h, f),
        w = (e === 'avg' ? () => zu(y, t, o, g, i) : () => ju(y, t, o, g, i))(),
        x = p ? w : Bu(w, h, m);
    return c ? j(x, [x.shape[1], x.shape[2], x.shape[3]]) : x;
}
function BN(n, t, e) {
    const s = e.map((u) => u[0]),
        r = e.map((u) => u[1]),
        o = n.concat(s, r),
        i = t.map((u, h) => (u - (o[h] % u)) % u),
        a = r.map((u, h) => u + i[h]),
        l = t.map((u, h) => [s[h], a[h]]),
        c = t.map((u, h) => [0, i[h]]);
    return [l, c];
}
function MN(n, t) {
    const s = n.map((i, a) => i + (i - 1) * (t[a] - 1)).map((i) => i - 1),
        r = s.map((i) => Math.floor(i / 2)),
        o = s.map((i, a) => i - r[a]);
    return s.map((i, a) => [r[a], o[a]]);
}
const rx = B({ pool_: zN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function VN(n, t) {
    const e = A(n, 'x', 'prelu'),
        s = A(t, 'alpha', 'prelu'),
        r = { x: e, alpha: s };
    return V.runKernel(vu, r);
}
const Yu = B({ prelu_: VN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function WN(n, t = null, e = !1) {
    let s = A(n, 'x', 'prod');
    s.dtype === 'bool' && (s = bt(s, 'int32'));
    const r = { x: s },
        o = { axis: t, keepDims: e };
    return V.runKernel(ku, r, o);
}
const ox = B({ prod_: WN });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function UN(n, t, e, s) {
    const r = n.map((u, h) => A(u, `tensors${h}`, 'raggedGather', 'int32')),
        o = A(t, 'paramsDenseValues', 'raggedGather'),
        i = A(e, 'indices', 'raggedGather', 'int32'),
        a = { paramsNestedSplits: r, paramsDenseValues: o, indices: i },
        l = { outputRaggedRank: s },
        c = V.runKernel(Hp, a, l);
    return {
        outputNestedSplits: c.slice(0, c.length - 1),
        outputDenseValues: c[c.length - 1],
    };
}
const GN = B({ raggedGather_: UN });
/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function HN(n, t, e) {
    const s = A(n, 'starts', 'raggedRange'),
        r = A(t, 'limits', 'raggedRange', s.dtype),
        o = A(e, 'deltas', 'raggedRange', s.dtype),
        i = { starts: s, limits: r, deltas: o },
        a = V.runKernel(jp, i);
    return { rtNestedSplits: a[0], rtDenseValues: a[1] };
}
const jN = B({ raggedRange_: HN });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function qN(n, t, e, s, r) {
    const o = A(n, 'shape', 'raggedTensorToTensor', 'int32'),
        i = A(t, 'values', 'raggedTensorToTensor'),
        a = A(e, 'defaultValue', 'raggedTensorToTensor', i.dtype),
        l = s.map((h, d) =>
            A(h, `tensors${d}`, 'raggedTensorToTensor', 'int32')
        ),
        c = { shape: o, values: i, defaultValue: a, rowPartitionTensors: l },
        u = { rowPartitionTypes: r };
    return V.runKernel(qp, c, u);
}
const KN = B({ raggedTensorToTensor_: qN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function XN(n, t, e) {
    Fn(n);
    const s = rt(n);
    let r = null;
    if (e == null || e === 'float32') r = new Float32Array(s);
    else if (e === 'int32') r = new Int32Array(s);
    else if (e === 'bool') r = new Uint8Array(s);
    else throw new Error(`Unknown data type ${e}`);
    for (let o = 0; o < s; o++) r[o] = t();
    return V.makeTensor(r, n, e);
}
const YN = B({ rand_: XN });
var Ff = { exports: {} };
Ff.exports;
(function (n) {
    (function (t, e, s) {
        function r(l) {
            var c = this,
                u = a();
            (c.next = function () {
                var h = 2091639 * c.s0 + c.c * 23283064365386963e-26;
                return (c.s0 = c.s1), (c.s1 = c.s2), (c.s2 = h - (c.c = h | 0));
            }),
                (c.c = 1),
                (c.s0 = u(' ')),
                (c.s1 = u(' ')),
                (c.s2 = u(' ')),
                (c.s0 -= u(l)),
                c.s0 < 0 && (c.s0 += 1),
                (c.s1 -= u(l)),
                c.s1 < 0 && (c.s1 += 1),
                (c.s2 -= u(l)),
                c.s2 < 0 && (c.s2 += 1),
                (u = null);
        }
        function o(l, c) {
            return (c.c = l.c), (c.s0 = l.s0), (c.s1 = l.s1), (c.s2 = l.s2), c;
        }
        function i(l, c) {
            var u = new r(l),
                h = c && c.state,
                d = u.next;
            return (
                (d.int32 = function () {
                    return (u.next() * 4294967296) | 0;
                }),
                (d.double = function () {
                    return d() + ((d() * 2097152) | 0) * 11102230246251565e-32;
                }),
                (d.quick = d),
                h &&
                    (typeof h == 'object' && o(h, u),
                    (d.state = function () {
                        return o(u, {});
                    })),
                d
            );
        }
        function a() {
            var l = 4022871197,
                c = function (u) {
                    u = String(u);
                    for (var h = 0; h < u.length; h++) {
                        l += u.charCodeAt(h);
                        var d = 0.02519603282416938 * l;
                        (l = d >>> 0),
                            (d -= l),
                            (d *= l),
                            (l = d >>> 0),
                            (d -= l),
                            (l += d * 4294967296);
                    }
                    return (l >>> 0) * 23283064365386963e-26;
                };
            return c;
        }
        e && e.exports
            ? (e.exports = i)
            : s && s.amd
            ? s(function () {
                  return i;
              })
            : (this.alea = i);
    })(tn, n, !1);
})(Ff);
var ZN = Ff.exports,
    Lf = { exports: {} };
Lf.exports;
(function (n) {
    (function (t, e, s) {
        function r(a) {
            var l = this,
                c = '';
            (l.x = 0),
                (l.y = 0),
                (l.z = 0),
                (l.w = 0),
                (l.next = function () {
                    var h = l.x ^ (l.x << 11);
                    return (
                        (l.x = l.y),
                        (l.y = l.z),
                        (l.z = l.w),
                        (l.w ^= (l.w >>> 19) ^ h ^ (h >>> 8))
                    );
                }),
                a === (a | 0) ? (l.x = a) : (c += a);
            for (var u = 0; u < c.length + 64; u++)
                (l.x ^= c.charCodeAt(u) | 0), l.next();
        }
        function o(a, l) {
            return (l.x = a.x), (l.y = a.y), (l.z = a.z), (l.w = a.w), l;
        }
        function i(a, l) {
            var c = new r(a),
                u = l && l.state,
                h = function () {
                    return (c.next() >>> 0) / 4294967296;
                };
            return (
                (h.double = function () {
                    do
                        var d = c.next() >>> 11,
                            p = (c.next() >>> 0) / 4294967296,
                            f = (d + p) / (1 << 21);
                    while (f === 0);
                    return f;
                }),
                (h.int32 = c.next),
                (h.quick = h),
                u &&
                    (typeof u == 'object' && o(u, c),
                    (h.state = function () {
                        return o(c, {});
                    })),
                h
            );
        }
        e && e.exports
            ? (e.exports = i)
            : s && s.amd
            ? s(function () {
                  return i;
              })
            : (this.xor128 = i);
    })(tn, n, !1);
})(Lf);
var JN = Lf.exports,
    Pf = { exports: {} };
Pf.exports;
(function (n) {
    (function (t, e, s) {
        function r(a) {
            var l = this,
                c = '';
            (l.next = function () {
                var h = l.x ^ (l.x >>> 2);
                return (
                    (l.x = l.y),
                    (l.y = l.z),
                    (l.z = l.w),
                    (l.w = l.v),
                    ((l.d = (l.d + 362437) | 0) +
                        (l.v = l.v ^ (l.v << 4) ^ (h ^ (h << 1)))) |
                        0
                );
            }),
                (l.x = 0),
                (l.y = 0),
                (l.z = 0),
                (l.w = 0),
                (l.v = 0),
                a === (a | 0) ? (l.x = a) : (c += a);
            for (var u = 0; u < c.length + 64; u++)
                (l.x ^= c.charCodeAt(u) | 0),
                    u == c.length && (l.d = (l.x << 10) ^ (l.x >>> 4)),
                    l.next();
        }
        function o(a, l) {
            return (
                (l.x = a.x),
                (l.y = a.y),
                (l.z = a.z),
                (l.w = a.w),
                (l.v = a.v),
                (l.d = a.d),
                l
            );
        }
        function i(a, l) {
            var c = new r(a),
                u = l && l.state,
                h = function () {
                    return (c.next() >>> 0) / 4294967296;
                };
            return (
                (h.double = function () {
                    do
                        var d = c.next() >>> 11,
                            p = (c.next() >>> 0) / 4294967296,
                            f = (d + p) / (1 << 21);
                    while (f === 0);
                    return f;
                }),
                (h.int32 = c.next),
                (h.quick = h),
                u &&
                    (typeof u == 'object' && o(u, c),
                    (h.state = function () {
                        return o(c, {});
                    })),
                h
            );
        }
        e && e.exports
            ? (e.exports = i)
            : s && s.amd
            ? s(function () {
                  return i;
              })
            : (this.xorwow = i);
    })(tn, n, !1);
})(Pf);
var QN = Pf.exports,
    zf = { exports: {} };
zf.exports;
(function (n) {
    (function (t, e, s) {
        function r(a) {
            var l = this;
            l.next = function () {
                var u = l.x,
                    h = l.i,
                    d,
                    p;
                return (
                    (d = u[h]),
                    (d ^= d >>> 7),
                    (p = d ^ (d << 24)),
                    (d = u[(h + 1) & 7]),
                    (p ^= d ^ (d >>> 10)),
                    (d = u[(h + 3) & 7]),
                    (p ^= d ^ (d >>> 3)),
                    (d = u[(h + 4) & 7]),
                    (p ^= d ^ (d << 7)),
                    (d = u[(h + 7) & 7]),
                    (d = d ^ (d << 13)),
                    (p ^= d ^ (d << 9)),
                    (u[h] = p),
                    (l.i = (h + 1) & 7),
                    p
                );
            };
            function c(u, h) {
                var d,
                    p = [];
                if (h === (h | 0)) p[0] = h;
                else
                    for (h = '' + h, d = 0; d < h.length; ++d)
                        p[d & 7] =
                            (p[d & 7] << 15) ^
                            ((h.charCodeAt(d) + p[(d + 1) & 7]) << 13);
                for (; p.length < 8; ) p.push(0);
                for (d = 0; d < 8 && p[d] === 0; ++d);
                for (
                    d == 8 ? (p[7] = -1) : p[d], u.x = p, u.i = 0, d = 256;
                    d > 0;
                    --d
                )
                    u.next();
            }
            c(l, a);
        }
        function o(a, l) {
            return (l.x = a.x.slice()), (l.i = a.i), l;
        }
        function i(a, l) {
            a == null && (a = +new Date());
            var c = new r(a),
                u = l && l.state,
                h = function () {
                    return (c.next() >>> 0) / 4294967296;
                };
            return (
                (h.double = function () {
                    do
                        var d = c.next() >>> 11,
                            p = (c.next() >>> 0) / 4294967296,
                            f = (d + p) / (1 << 21);
                    while (f === 0);
                    return f;
                }),
                (h.int32 = c.next),
                (h.quick = h),
                u &&
                    (u.x && o(u, c),
                    (h.state = function () {
                        return o(c, {});
                    })),
                h
            );
        }
        e && e.exports
            ? (e.exports = i)
            : s && s.amd
            ? s(function () {
                  return i;
              })
            : (this.xorshift7 = i);
    })(tn, n, !1);
})(zf);
var tT = zf.exports,
    Bf = { exports: {} };
Bf.exports;
(function (n) {
    (function (t, e, s) {
        function r(a) {
            var l = this;
            l.next = function () {
                var u = l.w,
                    h = l.X,
                    d = l.i,
                    p,
                    f;
                return (
                    (l.w = u = (u + 1640531527) | 0),
                    (f = h[(d + 34) & 127]),
                    (p = h[(d = (d + 1) & 127)]),
                    (f ^= f << 13),
                    (p ^= p << 17),
                    (f ^= f >>> 15),
                    (p ^= p >>> 12),
                    (f = h[d] = f ^ p),
                    (l.i = d),
                    (f + (u ^ (u >>> 16))) | 0
                );
            };
            function c(u, h) {
                var d,
                    p,
                    f,
                    m,
                    g,
                    y = [],
                    b = 128;
                for (
                    h === (h | 0)
                        ? ((p = h), (h = null))
                        : ((h = h + '\0'),
                          (p = 0),
                          (b = Math.max(b, h.length))),
                        f = 0,
                        m = -32;
                    m < b;
                    ++m
                )
                    h && (p ^= h.charCodeAt((m + 32) % h.length)),
                        m === 0 && (g = p),
                        (p ^= p << 10),
                        (p ^= p >>> 15),
                        (p ^= p << 4),
                        (p ^= p >>> 13),
                        m >= 0 &&
                            ((g = (g + 1640531527) | 0),
                            (d = y[m & 127] ^= p + g),
                            (f = d == 0 ? f + 1 : 0));
                for (
                    f >= 128 && (y[((h && h.length) || 0) & 127] = -1),
                        f = 127,
                        m = 4 * 128;
                    m > 0;
                    --m
                )
                    (p = y[(f + 34) & 127]),
                        (d = y[(f = (f + 1) & 127)]),
                        (p ^= p << 13),
                        (d ^= d << 17),
                        (p ^= p >>> 15),
                        (d ^= d >>> 12),
                        (y[f] = p ^ d);
                (u.w = g), (u.X = y), (u.i = f);
            }
            c(l, a);
        }
        function o(a, l) {
            return (l.i = a.i), (l.w = a.w), (l.X = a.X.slice()), l;
        }
        function i(a, l) {
            a == null && (a = +new Date());
            var c = new r(a),
                u = l && l.state,
                h = function () {
                    return (c.next() >>> 0) / 4294967296;
                };
            return (
                (h.double = function () {
                    do
                        var d = c.next() >>> 11,
                            p = (c.next() >>> 0) / 4294967296,
                            f = (d + p) / (1 << 21);
                    while (f === 0);
                    return f;
                }),
                (h.int32 = c.next),
                (h.quick = h),
                u &&
                    (u.X && o(u, c),
                    (h.state = function () {
                        return o(c, {});
                    })),
                h
            );
        }
        e && e.exports
            ? (e.exports = i)
            : s && s.amd
            ? s(function () {
                  return i;
              })
            : (this.xor4096 = i);
    })(tn, n, !1);
})(Bf);
var eT = Bf.exports,
    Mf = { exports: {} };
Mf.exports;
(function (n) {
    (function (t, e, s) {
        function r(a) {
            var l = this,
                c = '';
            (l.next = function () {
                var h = l.b,
                    d = l.c,
                    p = l.d,
                    f = l.a;
                return (
                    (h = (h << 25) ^ (h >>> 7) ^ d),
                    (d = (d - p) | 0),
                    (p = (p << 24) ^ (p >>> 8) ^ f),
                    (f = (f - h) | 0),
                    (l.b = h = (h << 20) ^ (h >>> 12) ^ d),
                    (l.c = d = (d - p) | 0),
                    (l.d = (p << 16) ^ (d >>> 16) ^ f),
                    (l.a = (f - h) | 0)
                );
            }),
                (l.a = 0),
                (l.b = 0),
                (l.c = -1640531527),
                (l.d = 1367130551),
                a === Math.floor(a)
                    ? ((l.a = (a / 4294967296) | 0), (l.b = a | 0))
                    : (c += a);
            for (var u = 0; u < c.length + 20; u++)
                (l.b ^= c.charCodeAt(u) | 0), l.next();
        }
        function o(a, l) {
            return (l.a = a.a), (l.b = a.b), (l.c = a.c), (l.d = a.d), l;
        }
        function i(a, l) {
            var c = new r(a),
                u = l && l.state,
                h = function () {
                    return (c.next() >>> 0) / 4294967296;
                };
            return (
                (h.double = function () {
                    do
                        var d = c.next() >>> 11,
                            p = (c.next() >>> 0) / 4294967296,
                            f = (d + p) / (1 << 21);
                    while (f === 0);
                    return f;
                }),
                (h.int32 = c.next),
                (h.quick = h),
                u &&
                    (typeof u == 'object' && o(u, c),
                    (h.state = function () {
                        return o(c, {});
                    })),
                h
            );
        }
        e && e.exports
            ? (e.exports = i)
            : s && s.amd
            ? s(function () {
                  return i;
              })
            : (this.tychei = i);
    })(tn, n, !1);
})(Mf);
var nT = Mf.exports,
    ix = { exports: {} };
const sT = {},
    rT = Object.freeze(
        Object.defineProperty(
            { __proto__: null, default: sT },
            Symbol.toStringTag,
            { value: 'Module' }
        )
    ),
    oT = XI(rT);
(function (n) {
    (function (t, e, s) {
        var r = 256,
            o = 6,
            i = 52,
            a = 'random',
            l = s.pow(r, o),
            c = s.pow(2, i),
            u = c * 2,
            h = r - 1,
            d;
        function p(x, v, C) {
            var $ = [];
            v = v == !0 ? { entropy: !0 } : v || {};
            var T = y(g(v.entropy ? [x, w(e)] : x ?? b(), 3), $),
                N = new f($),
                R = function () {
                    for (var P = N.g(o), E = l, O = 0; P < c; )
                        (P = (P + O) * r), (E *= r), (O = N.g(1));
                    for (; P >= u; ) (P /= 2), (E /= 2), (O >>>= 1);
                    return (P + O) / E;
                };
            return (
                (R.int32 = function () {
                    return N.g(4) | 0;
                }),
                (R.quick = function () {
                    return N.g(4) / 4294967296;
                }),
                (R.double = R),
                y(w(N.S), e),
                (
                    v.pass ||
                    C ||
                    function (P, E, O, S) {
                        return (
                            S &&
                                (S.S && m(S, N),
                                (P.state = function () {
                                    return m(N, {});
                                })),
                            O ? ((s[a] = P), E) : P
                        );
                    }
                )(R, T, 'global' in v ? v.global : this == s, v.state)
            );
        }
        function f(x) {
            var v,
                C = x.length,
                $ = this,
                T = 0,
                N = ($.i = $.j = 0),
                R = ($.S = []);
            for (C || (x = [C++]); T < r; ) R[T] = T++;
            for (T = 0; T < r; T++)
                (R[T] = R[(N = h & (N + x[T % C] + (v = R[T])))]), (R[N] = v);
            ($.g = function (P) {
                for (var E, O = 0, S = $.i, L = $.j, q = $.S; P--; )
                    (E = q[(S = h & (S + 1))]),
                        (O =
                            O * r +
                            q[
                                h & ((q[S] = q[(L = h & (L + E))]) + (q[L] = E))
                            ]);
                return ($.i = S), ($.j = L), O;
            })(r);
        }
        function m(x, v) {
            return (v.i = x.i), (v.j = x.j), (v.S = x.S.slice()), v;
        }
        function g(x, v) {
            var C = [],
                $ = typeof x,
                T;
            if (v && $ == 'object')
                for (T in x)
                    try {
                        C.push(g(x[T], v - 1));
                    } catch {}
            return C.length ? C : $ == 'string' ? x : x + '\0';
        }
        function y(x, v) {
            for (var C = x + '', $, T = 0; T < C.length; )
                v[h & T] = h & (($ ^= v[h & T] * 19) + C.charCodeAt(T++));
            return w(v);
        }
        function b() {
            try {
                var x;
                return (
                    d && (x = d.randomBytes)
                        ? (x = x(r))
                        : ((x = new Uint8Array(r)),
                          (t.crypto || t.msCrypto).getRandomValues(x)),
                    w(x)
                );
            } catch {
                var v = t.navigator,
                    C = v && v.plugins;
                return [+new Date(), t, C, t.screen, w(e)];
            }
        }
        function w(x) {
            return String.fromCharCode.apply(0, x);
        }
        if ((y(s.random(), e), n.exports)) {
            n.exports = p;
            try {
                d = oT;
            } catch {}
        } else s['seed' + a] = p;
    })(typeof self < 'u' ? self : tn, [], Math);
})(ix);
var iT = ix.exports,
    aT = ZN,
    lT = JN,
    cT = QN,
    uT = tT,
    hT = eT,
    dT = nT,
    bo = iT;
bo.alea = aT;
bo.xor128 = lT;
bo.xorwow = cT;
bo.xorshift7 = uT;
bo.xor4096 = hT;
bo.tychei = dT;
var Zu = bo;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class Vf {
    constructor(t, e, s, r, o) {
        (this.mean = t),
            (this.stdDev = e),
            (this.dtype = s),
            (this.nextVal = NaN),
            (this.truncated = r),
            this.truncated &&
                ((this.upper = this.mean + this.stdDev * 2),
                (this.lower = this.mean - this.stdDev * 2));
        const i = o || Math.random();
        this.random = Zu.alea(i.toString());
    }
    nextValue() {
        if (!isNaN(this.nextVal)) {
            const r = this.nextVal;
            return (this.nextVal = NaN), r;
        }
        let t,
            e,
            s = !1;
        for (; !s; ) {
            let r, o, i;
            do
                (r = 2 * this.random() - 1),
                    (o = 2 * this.random() - 1),
                    (i = r * r + o * o);
            while (i >= 1 || i === 0);
            const a = Math.sqrt((-2 * Math.log(i)) / i);
            (t = this.mean + this.stdDev * r * a),
                (e = this.mean + this.stdDev * o * a),
                (!this.truncated || this.isValidTruncated(t)) && (s = !0);
        }
        return (
            (!this.truncated || this.isValidTruncated(e)) &&
                (this.nextVal = this.convertValue(e)),
            this.convertValue(t)
        );
    }
    convertValue(t) {
        return this.dtype == null || this.dtype === 'float32'
            ? t
            : Math.round(t);
    }
    isValidTruncated(t) {
        return t <= this.upper && t >= this.lower;
    }
}
class pT {
    constructor(t, e, s, r) {
        (this.alpha = t), (this.beta = 1 / e), (this.dtype = s);
        const o = r || Math.random();
        (this.randu = Zu.alea(o.toString())),
            (this.randn = new Vf(0, 1, s, !1, this.randu())),
            t < 1 ? (this.d = t + 2 / 3) : (this.d = t - 1 / 3),
            (this.c = 1 / Math.sqrt(9 * this.d));
    }
    nextValue() {
        let t, e, s, r, o, i;
        for (;;) {
            do (r = this.randn.nextValue()), (i = 1 + this.c * r);
            while (i <= 0);
            if (
                ((i *= i * i),
                (t = r * r),
                (e = 1 - 0.331 * t * t),
                (s = 0.5 * t + this.d * (1 - i + Math.log(i))),
                (o = this.randu()),
                o < e || Math.log(o) < s)
            )
                break;
        }
        return (
            (i = (1 / this.beta) * this.d * i),
            this.alpha < 1 && (i *= Math.pow(this.randu(), 1 / this.alpha)),
            this.convertValue(i)
        );
    }
    convertValue(t) {
        return this.dtype === 'float32' ? t : Math.round(t);
    }
}
class fT {
    constructor(t = 0, e = 1, s, r) {
        if (
            ((this.canReturnFloat = () =>
                this.dtype == null || this.dtype === 'float32'),
            (this.min = t),
            (this.range = e - t),
            (this.dtype = s),
            r == null && (r = Math.random()),
            typeof r == 'number' && (r = r.toString()),
            !this.canReturnFloat() && this.range <= 1)
        )
            throw new Error(
                `The difference between ${t} - ${e} <= 1 and dtype is not float`
            );
        this.random = Zu.alea(r);
    }
    convertValue(t) {
        return this.canReturnFloat() ? t : Math.round(t);
    }
    nextValue() {
        return this.convertValue(this.min + this.range * this.random());
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function mT(n, t, e = 1, s = 'float32', r) {
    if (
        (Fn(n),
        e == null && (e = 1),
        s == null && (s = 'float32'),
        s !== 'float32' && s !== 'int32')
    )
        throw new Error(`Unsupported data type ${s}`);
    const o = new pT(t, e, s, r),
        i = Pt(n, s);
    for (let a = 0; a < i.values.length; a++) i.values[a] = o.nextValue();
    return i.toTensor();
}
const gT = B({ randomGamma_: mT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function yT(n, t = 0, e = 1, s, r) {
    if ((Fn(n), s != null && s === 'bool'))
        throw new Error(`Unsupported data type ${s}`);
    const o = new Vf(t, e, s, !1, r),
        i = Pt(n, s);
    for (let a = 0; a < i.values.length; a++) i.values[a] = o.nextValue();
    return i.toTensor();
}
const Wf = B({ randomNormal_: yT });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function bT(n, t, e) {
    if (t != null && t === 'bool')
        throw new Error(`Unsupported data type ${t}`);
    return Wf(n, 0, 1, t, e);
}
const xT = B({ randomStandardNormal_: bT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function wT(n, t = 0, e = 1, s = 'float32', r) {
    Fn(n);
    const o = Pt(n, s),
        i = new fT(t, e, null, r);
    for (let a = 0; a < o.values.length; a++) o.values[a] = i.nextValue();
    return o.toTensor();
}
const xo = B({ randomUniform_: wT });
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function vT(n, t, e, s) {
    return xo(n, t, e, 'int32', s);
}
const kT = B({ randomUniformInt_: vT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function ei(n, t, e = 1, s = 'float32') {
    if (e === 0) throw new Error('Cannot have a step of zero');
    const r = { start: n, stop: t, step: e, dtype: s };
    return V.runKernel(Kp, {}, r);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function ST(n) {
    const e = { input: A(n, 'input', 'real') };
    return V.runKernel(Xp, e);
}
const ji = B({ real_: ST });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function IT(n) {
    const e = { x: A(n, 'x', 'reciprocal') };
    return V.runKernel(Fa, e);
}
const ax = B({ reciprocal_: IT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function CT(n) {
    const e = { x: A(n, 'x', 'relu') };
    return V.runKernel(La, e);
}
const Ds = B({ relu_: CT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function $T(n) {
    const e = { x: A(n, 'x', 'relu6') };
    return V.runKernel(Pa, e);
}
const Uf = B({ relu6_: $T });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function NT(n, t) {
    const s = { x: A(n, 'x', 'reverse') },
        r = { dims: t };
    return V.runKernel($u, s, r);
}
const Jn = B({ reverse_: NT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function TT(n) {
    const t = A(n, 'x', 'reverse');
    return (
        _(
            t.rank === 1,
            () => `Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`
        ),
        Jn(t, 0)
    );
}
const ET = B({ reverse1d_: TT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function _T(n, t) {
    const e = A(n, 'x', 'reverse');
    return (
        _(
            e.rank === 2,
            () => `Error in reverse2D: x must be rank 2 but got rank ${e.rank}.`
        ),
        Jn(e, t)
    );
}
const AT = B({ reverse2d_: _T });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function RT(n, t) {
    const e = A(n, 'x', 'reverse');
    return (
        _(
            e.rank === 3,
            () => `Error in reverse3D: x must be rank 3 but got rank ${e.rank}.`
        ),
        Jn(e, t)
    );
}
const DT = B({ reverse3d_: RT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function OT(n, t) {
    const e = A(n, 'x', 'reverse');
    return (
        _(
            e.rank === 4,
            () => `Error in reverse4D: x must be rank 4 but got rank ${e.rank}.`
        ),
        Jn(e, t)
    );
}
const FT = B({ reverse4d_: OT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function LT(n) {
    const e = { x: A(n, 'x', 'round') };
    return V.runKernel(za, e);
}
const Gf = B({ round_: LT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function PT(n) {
    const e = { x: A(n, 'x', 'rsqrt', 'float32') };
    return V.runKernel(Ba, e);
}
const Hf = B({ rsqrt_: PT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function zT(n) {
    const e = { x: A(n, 'x', 'selu') };
    return V.runKernel(Ma, e);
}
const jf = B({ selu_: zT });
function BT(n, t, e, s, r, o = [1, 1], i = 'NHWC') {
    const a = A(n, 'x', 'separableConv2d'),
        l = A(t, 'depthwiseFilter', 'separableConv2d'),
        c = A(e, 'pointwiseFilter', 'separableConv2d');
    let u = a,
        h = !1;
    if (
        (a.rank === 3 &&
            ((h = !0), (u = j(a, [1, a.shape[0], a.shape[1], a.shape[2]]))),
        i === 'NCHW')
    )
        throw new Error(
            'separableConv2d currently does not support dataFormat NCHW; only NHWC is supported'
        );
    _(
        u.rank === 4,
        () =>
            `Error in separableConv2d: input must be rank 4, but got rank ${u.rank}.`
    ),
        _(
            l.rank === 4,
            () =>
                `Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`
        ),
        _(
            c.rank === 4,
            () =>
                `Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`
        ),
        _(
            c.shape[0] === 1,
            () =>
                `Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${c.shape[0]}.`
        ),
        _(
            c.shape[1] === 1,
            () =>
                `Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${c.shape[1]}.`
        );
    const d = l.shape[2],
        p = l.shape[3];
    _(
        c.shape[2] === d * p,
        () =>
            `Error in separableConv2d: the third dimension of pointwise filter must be ${
                d * p
            }, but got ${c.shape[2]}.`
    );
    const f = nl(u, l, s, r, i, o),
        g = mr(f, c, 1, 'valid', i);
    return h ? j(g, [g.shape[1], g.shape[2], g.shape[3]]) : g;
}
const qf = B({ separableConv2d_: BT });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ async function MT(n, t) {
    const e = A(n, 'x', 'setdiff1d'),
        s = A(t, 'y', 'setdiff1d');
    _(
        e.dtype === s.dtype,
        () =>
            `x and y should have the same dtype, but got x (${e.dtype}) and y (${s.dtype}).`
    ),
        _(e.rank === 1, () => `x should be 1D tensor, but got x (${e.shape}).`),
        _(s.rank === 1, () => `y should be 1D tensor, but got y (${s.shape}).`);
    const r = await e.data(),
        o = await s.data(),
        i = new Set(o);
    let a = 0;
    for (let u = 0; u < r.length; u++) i.has(r[u]) || a++;
    const l = new Te([a], e.dtype),
        c = new Te([a], 'int32');
    for (let u = 0, h = 0; u < r.length; u++)
        i.has(r[u]) || ((l.values[h] = r[u]), (c.values[h] = u), h++);
    return [l.toTensor(), c.toTensor()];
}
const VT = MT;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function WT(n) {
    const e = { x: A(n, 'x', 'sign') };
    return V.runKernel(Ua, e);
}
const lx = B({ sign_: WT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function UT(n) {
    const e = { x: A(n, 'x', 'sin', 'float32') };
    return V.runKernel(Va, e);
}
const Kf = B({ sin_: UT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function GT(n) {
    const e = { x: A(n, 'x', 'sinh') };
    return V.runKernel(Wa, e);
}
const Xf = B({ sinh_: GT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function HT(n, t, e) {
    const s = A(n, 'x', 'slice1d');
    return (
        _(
            s.rank === 1,
            () =>
                `slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`
        ),
        Gt(s, [t], [e])
    );
}
const Ju = B({ slice1d_: HT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function jT(n, t, e) {
    const s = A(n, 'x', 'slice2d');
    return (
        _(
            s.rank === 2,
            () =>
                `slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`
        ),
        Gt(s, t, e)
    );
}
const Yf = B({ slice2d_: jT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function qT(n, t, e) {
    const s = A(n, 'x', 'slice3d');
    return (
        _(
            s.rank === 3,
            () =>
                `slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`
        ),
        Gt(s, t, e)
    );
}
const Qu = B({ slice3d_: qT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function KT(n, t, e) {
    const s = A(n, 'x', 'slice4d');
    return (
        _(
            s.rank === 4,
            () =>
                `slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`
        ),
        Gt(s, t, e)
    );
}
const qi = B({ slice4d_: KT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function XT(n, t = -1) {
    const e = A(n, 'logits', 'softmax', 'float32');
    if ((t === -1 && (t = e.rank - 1), t !== e.rank - 1))
        throw Error(
            `Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and dim was ${t}`
        );
    const s = { logits: e },
        r = { dim: t };
    return V.runKernel(Ru, s, r);
}
const th = B({ softmax_: XT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function YT(n) {
    _(
        n.dtype === 'complex64',
        () =>
            `The dtype for tf.spectral.fft() must be complex64 but got ${n.dtype}.`
    );
    const t = { input: n };
    return V.runKernel(_p, t);
}
const eh = B({ fft_: YT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function ZT(n) {
    _(
        n.dtype === 'complex64',
        () =>
            `The dtype for tf.spectral.ifft() must be complex64 but got ${n.dtype}.`
    );
    const t = { input: n };
    return V.runKernel(Op, t);
}
const Ki = B({ ifft_: ZT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function JT(n) {
    const t = n.shape[n.shape.length - 1],
        e = n.size / t;
    let s;
    if (t <= 2) {
        const r = j(n, [e, t]);
        s = Ki(r);
    } else {
        const r = [e, 2 * (t - 1)],
            o = j(ji(n), [e, t]),
            i = j(Vu(n), [e, t]),
            a = Jn(Gt(o, [0, 1], [e, t - 2]), 1),
            l = U(Jn(Gt(i, [0, 1], [e, t - 2]), 1), At(-1)),
            c = Ie([o, a], 1),
            u = Ie([i, l], 1),
            h = j(pr(c, u), [r[0], r[1]]);
        s = Ki(h);
    }
    if (((s = ji(s)), n.rank === 3 && n.shape[0] !== 0)) {
        const r = s,
            o = n.shape[0];
        (s = j(s, [o, s.shape[0] / o, s.shape[1]])), r.dispose();
    }
    return s;
}
const Zf = B({ irfft_: JT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function QT(n, t, e = 0) {
    const r = { x: A(n, 'x', 'split') },
        o = { numOrSizeSplits: t, axis: e };
    return V.runKernel(Au, r, o);
}
const wn = B({ split_: QT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function tE(n, t) {
    _(
        n.dtype === 'float32',
        () => `The dtype for rfft() must be real value but got ${n.dtype}`
    );
    let e = n.shape[n.shape.length - 1];
    const s = n.size / e;
    let r;
    if (t != null && t < e) {
        const f = n.shape.map((g) => 0),
            m = n.shape.map((g) => g);
        (m[n.shape.length - 1] = t), (r = Gt(n, f, m)), (e = t);
    } else if (t != null && t > e) {
        const f = n.shape.map((m) => m);
        (f[n.shape.length - 1] = t - e),
            (r = Ie([n, Se(f)], n.shape.length - 1)),
            (e = t);
    } else r = n;
    const o = jt(r),
        i = j(pr(r, o), [s, e]),
        a = eh(i),
        l = Math.floor(e / 2) + 1,
        c = ji(a),
        u = Vu(a),
        h = wn(c, [l, e - l], c.shape.length - 1),
        d = wn(u, [l, e - l], u.shape.length - 1),
        p = r.shape.slice();
    return (p[r.shape.length - 1] = l), j(pr(h[0], d[0]), p);
}
const nh = B({ rfft_: tE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function eE(n, t) {
    let e = A(n, 'a', 'squaredDifference'),
        s = A(t, 'b', 'squaredDifference');
    ([e, s] = ye(e, s)), Dt(e.shape, s.shape);
    const r = { a: e, b: s },
        o = {};
    return V.runKernel(qa, r, o);
}
const Jf = B({ squaredDifference_: eE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function nE(n, t) {
    const e = A(n, 'x', 'squeeze', 'string_or_numeric');
    return j(e, Sr(e.shape, t).newShape);
}
const wo = B({ squeeze_: nE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function sE(n, t = 0) {
    const e = oc(n, 'tensors', 'stack', 'string_or_numeric');
    _(e.length >= 1, () => 'Pass at least one tensor to tf.stack'),
        e.length > 0 &&
            _(t <= e[0].rank, () => 'Axis must be <= rank of the tensor');
    const s = e,
        r = { axis: t };
    return V.runKernel(xu, s, r);
}
const un = B({ stack_: sE });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function rE(n, t = 0) {
    const s = { x: A(n, 'x', 'step') },
        r = { alpha: t };
    return V.runKernel(Ja, s, r);
}
const gi = B({ step_: rE });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function oE(n, t, e, s, r = 0, o = 0, i = 0, a = 0, l = 0) {
    const u = { x: A(n, 'x', 'stridedSlice', 'string_or_numeric') },
        h = {
            begin: t,
            end: e,
            strides: s,
            beginMask: r,
            endMask: o,
            ellipsisMask: i,
            newAxisMask: a,
            shrinkAxisMask: l,
        };
    return V.runKernel(lf, u, h);
}
const cx = B({ stridedSlice_: oE });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function iE(n) {
    const e = { x: A(n, 'x', 'tan', 'float32') };
    return V.runKernel(Xa, e);
}
const ux = B({ tan_: iE });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function je(n, t) {
    ui(n);
    const e = Cr(n, t);
    if (e.length !== 1)
        throw new Error('tensor1d() requires values to be a flat/TypedArray');
    return $r(n, null, e, t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Mi(n, t, e) {
    if ((ui(n), t != null && t.length !== 2))
        throw new Error('tensor2d() requires shape to have two numbers');
    const s = Cr(n, e);
    if (s.length !== 2 && s.length !== 1)
        throw new Error(
            'tensor2d() requires values to be number[][] or flat/TypedArray'
        );
    if (s.length === 1 && t == null)
        throw new Error(
            'tensor2d() requires shape to be provided when `values` are a flat/TypedArray'
        );
    return $r(n, t, s, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function hx(n, t, e) {
    if ((ui(n), t != null && t.length !== 3))
        throw new Error('tensor3d() requires shape to have three numbers');
    const s = Cr(n, e);
    if (s.length !== 3 && s.length !== 1)
        throw new Error(
            'tensor3d() requires values to be number[][][] or flat/TypedArray'
        );
    if (s.length === 1 && t == null)
        throw new Error(
            'tensor3d() requires shape to be provided when `values` are a flat array'
        );
    return $r(n, t, s, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function aE(n, t, e) {
    if ((ui(n), t != null && t.length !== 4))
        throw new Error('tensor4d() requires shape to have four numbers');
    const s = Cr(n, e);
    if (s.length !== 4 && s.length !== 1)
        throw new Error(
            'tensor4d() requires values to be number[][][][] or flat/TypedArray'
        );
    if (s.length === 1 && t == null)
        throw new Error(
            'tensor4d() requires shape to be provided when `values` are a flat array'
        );
    return $r(n, t, s, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function lE(n, t, e) {
    if ((ui(n), t != null && t.length !== 5))
        throw new Error('tensor5d() requires shape to have five numbers');
    const s = Cr(n, e);
    if (s.length !== 5 && s.length !== 1)
        throw new Error(
            'tensor5d() requires values to be number[][][][][] or flat/TypedArray'
        );
    if (s.length === 1 && t == null)
        throw new Error(
            'tensor5d() requires shape to be provided when `values` are a flat array'
        );
    return $r(n, t, s, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function cE(n, t, e) {
    if ((ui(n), t != null && t.length !== 6))
        throw new Error('tensor6d() requires shape to have six numbers');
    const s = Cr(n, e);
    if (s.length !== 6 && s.length !== 1)
        throw new Error(
            'tensor6d() requires values to be number[][][][][][] or flat/TypedArray'
        );
    if (s.length === 1 && t == null)
        throw new Error(
            'tensor6d() requires shape to be provided when `values` are a flat array'
        );
    return (t = t || s), $r(n, t, s, e);
}
function dx(n, t, e) {
    const s = t.rank > 1 ? t.shape[t.rank - 1] : 1,
        r = t.rank > 1 ? t.rank - 1 : 1,
        o = `Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${e.shape}, indices.shape: ${t.shape}, shape: ${n}, sliceDim: ${s}, and batchDim: ${r}.`;
    if (e.rank < r) throw new Error(o + ` update.rank < ${r}. `);
    if (n.length < s + (e.rank - r))
        throw new Error(o + ` Output shape length < ${s + (e.rank - r)}`);
    if (e.rank !== r + n.length - s)
        throw new Error(o + ` update.rank != ${r + n.length - s}`);
    for (let i = 0; i < r; ++i)
        if (e.shape[i] !== t.shape[i])
            throw new Error(
                o +
                    ` updates.shape[${i}] (${e.shape[i]}) != indices.shape[${i}] (${t.shape[i]}).`
            );
    for (let i = 0; i < e.rank - r; ++i)
        if (e.shape[i + r] !== n[i + s])
            throw new Error(
                o +
                    ` updates.shape[${i + r}] (${e.shape[i + r]}) != shape[${
                        i + r
                    }] (${n[i + r]})`
            );
}
function Qf(n, t, e) {
    if (t.rank < 1)
        throw new Error(
            `tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`
        );
    if (n.rank < 1)
        throw new Error(
            `tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${n.rank}.`
        );
    if (t.dtype !== 'int32')
        throw new Error(
            `The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`
        );
    if (e.length < 1)
        throw new Error(
            `Output rank must be greater or equal to 1, but got shape: ${e}`
        );
    if (e.length === 0) {
        if (t.size === 0)
            throw new Error(
                `Indices specified for empty output. indices shape: ${t.shape}`
            );
        if (n.size === 0)
            throw new Error(
                `Updates specified for empty output. updates shape: ${n.shape}`
            );
    }
    dx(e, t, n);
}
function vo(n, t, e) {
    const s = t.shape.length,
        r = s > 1 ? t.shape[s - 1] : 1,
        o = e.length;
    let i = 1;
    for (let h = r; h < o; ++h) i *= e[h];
    const a = r < 1 ? 1 : r,
        l = rt(t.shape) / a,
        c = [..._t(e.slice(0, r)), 1],
        u = rt(e);
    return {
        sliceRank: r,
        numUpdates: l,
        sliceSize: i,
        strides: c,
        outputSize: u,
    };
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function uE(n, t, e) {
    const s = A(n, 'tensor', 'tensorScatterupdate'),
        r = A(t, 'indices', 'tensorScatterupdate', 'int32'),
        o = A(e, 'updates', 'tensorScatterupdate');
    if ((Qf(o, r, s.shape), s.dtype !== o.dtype))
        throw new Error(
            `tensor and updates must have the same dtype, instead they are ${s.dtype} and ${o.dtype}.`
        );
    const i = { tensor: s, indices: r, updates: o },
        a = {};
    return V.runKernel(Qp, i, a);
}
const hE = B({ tensorScatterUpdate_: uE });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function dE(n, t = 1, e = !0) {
    const s = A(n, 'x', 'topk');
    if (s.rank === 0)
        throw new Error('topk() expects the input to be of rank 1 or higher');
    const r = s.shape[s.shape.length - 1];
    if (t < 0)
        throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);
    if (t > r)
        throw new Error(
            `'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`
        );
    const o = { x: s },
        i = { k: t, sorted: e },
        [a, l] = V.runKernel(df, o, i);
    return { values: a, indices: l };
}
const px = B({ topk_: dE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function pE(n, t = 0, e = 1, s, r) {
    if ((Fn(n), s != null && s === 'bool'))
        throw new Error('Unsupported data type $ { dtype }');
    const o = new Vf(t, e, s, !0, r),
        i = Pt(n, s);
    for (let a = 0; a < i.values.length; a++) i.values[a] = o.nextValue();
    return i.toTensor();
}
const tm = B({ truncatedNormal_: pE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function fE(n, t = 0) {
    const e = A(n, 'x', 'unique', 'string_or_numeric');
    _(e.rank > 0, () => 'The input tensor must be at least 1D');
    const s = { x: e },
        r = { axis: t },
        [o, i] = V.runKernel(ff, s, r);
    return { values: o, indices: i };
}
const fx = B({ unique_: fE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function mE(n, t, e) {
    const s = A(n, 'x', 'unsortedSegmentSum'),
        r = A(t, 'segmentIds', 'unsortedSegmentSum', 'int32');
    _(Ko(e), () => 'numSegments must be of dtype int');
    const o = { x: s, segmentIds: r },
        i = { numSegments: e };
    return V.runKernel(Fu, o, i);
}
const em = B({ unsortedSegmentSum_: mE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function gE(n, t = 0) {
    const e = A(n, 'x', 'unstack', 'string_or_numeric');
    _(
        t >= -e.shape.length && t < e.shape.length,
        () => `Axis = ${t} is not in [-${e.shape.length}, ${e.shape.length})`
    );
    const s = { value: e },
        r = { axis: t };
    return V.runKernel(Ou, s, r);
}
const Qn = B({ unstack_: gE });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function yE(n, t) {
    return Of(n, t, 'right');
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function mx(n, t = !0, e, s) {
    return V.makeVariable(n, t, e, s);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function nm(n, t) {
    const e = [];
    for (let o = 0; o < t.length; o++) t[o] && e.push(o);
    const s = Pt(n, 'int32'),
        r = Pt([e.length, n.length], 'int32');
    for (let o = 0; o < e.length; o++) {
        const i = s.indexToLoc(e[o]),
            a = o * n.length;
        r.values.set(i, a);
    }
    return r.toTensor();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ async function bE(n) {
    const t = A(n, 'condition', 'whereAsync', 'bool'),
        e = await t.data(),
        s = nm(t.shape, e);
    return n !== t && t.dispose(), s;
}
const gx = bE;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ async function xE(n, t, e) {
    const s = A(n, 'tensor', 'boolMask'),
        r = A(t, 'mask', 'boolMask', 'bool'),
        o = e ?? 0,
        i = r.rank,
        a = s.shape;
    _(i > 0, () => 'mask cannot be scalar'),
        $n(
            a.slice(o, o + i),
            r.shape,
            "mask's shape must match the first K dimensions of tensor's shape,"
        );
    let l = 1;
    for (let m = o; m < o + i; m++) l *= a[m];
    const c = a.slice(0, o).concat([l], a.slice(o + i)),
        u = j(s, c),
        h = j(r, [-1]),
        d = await gx(h),
        p = wo(d, [1]),
        f = il(u, p, o);
    return (
        n !== s && s.dispose(),
        t !== r && r.dispose(),
        p.dispose(),
        u.dispose(),
        h.dispose(),
        d.dispose(),
        f
    );
}
const wE = xE;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function vE(n, t, e) {
    const s = A(n, 'x', 'transpose');
    if (
        (t == null && (t = s.shape.map((i, a) => a).reverse()),
        _(
            s.rank === t.length,
            () =>
                `Error in transpose: rank of input ${s.rank} must match length of perm ${t}.`
        ),
        t.forEach((i) => {
            _(
                i >= 0 && i < s.rank,
                () =>
                    `All entries in 'perm' must be between 0 and ${
                        s.rank - 1
                    } but got ${t}`
            );
        }),
        s.rank <= 1)
    )
        return s.clone();
    const r = { x: s },
        o = { perm: t };
    return s.dtype === 'complex64'
        ? Y(() => {
              let i = ji(s),
                  a = Vu(s);
              return (
                  (i = V.runKernel(Vo, { x: i }, o)),
                  (a = V.runKernel(Vo, { x: a }, o)),
                  e && (a = le(a)),
                  pr(i, a)
              );
          })
        : V.runKernel(Vo, r, o);
}
const Ht = B({ transpose_: vE });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function kE(n, t, e, s, r = !0) {
    const o = A(n, 'v', 'movingAverage'),
        i = A(t, 'x', 'movingAverage'),
        a = A(e, 'decay', 'movingAverage');
    fC(o, i), _(Ut(o.shape, i.shape), () => 'Shape mismatch in v and x');
    const l = At(1),
        c = kt(l, a);
    let u = U(kt(i, o), c);
    if (r) {
        _(s != null, () => 'When using zeroDebias: true, step is required.');
        const h = A(s, 'step', 'movingAverage');
        u = Et(u, kt(l, gr(a, h)));
    }
    return ct(o, u);
}
const SE = B({ movingAverage_: kE });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function IE(n, t, e) {
    Fn(e);
    const s = A(n, 'indices', 'scatterND', 'int32'),
        r = A(t, 'updates', 'scatterND');
    Qf(r, s, e);
    const o = { indices: s, updates: r },
        i = { shape: e };
    return V.runKernel(Jp, o, i);
}
const CE = B({ scatterND_: IE });
function $E(n, t, e, s) {
    if (n.dtype !== 'int32')
        throw new Error(
            `tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${n.dtype}.`
        );
    if (n.rank > 2)
        throw new Error(
            `sparseIndices should be a scalar, vector, or matrix, but got shape ${n.shape}.`
        );
    const r = n.rank > 0 ? n.shape[0] : 1,
        o = n.rank > 1 ? n.shape[1] : 1;
    if (e.length !== o)
        throw new Error(
            `outputShape has incorrect number of elements:, ${e.length}, should be: ${o}.`
        );
    const i = t.size;
    if (!(t.rank === 0 || (t.rank === 1 && i === r)))
        throw new Error(
            `sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`
        );
    if (t.dtype !== s.dtype)
        throw new Error('sparseValues.dtype must match defaultValues.dtype');
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function NE(n, t, e, s = 0) {
    Fn(e);
    const r = A(n, 'sparseIndices', 'sparseToDense', 'int32'),
        o = A(t, 'sparseValues', 'sparseToDense', 'string_or_numeric'),
        i = A(s, 'defaultValue', 'sparseToDense', o.dtype);
    $E(r, o, e, i);
    const a = { sparseIndices: r, sparseValues: o, defaultValue: i },
        l = { outputShape: e };
    return V.runKernel(of, a, l);
}
const TE = B({ sparseToDense_: NE });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function EE(n, t) {
    const e = A(t, 'indices', 'gatherND', 'int32'),
        r = { params: A(n, 'x', 'gatherND', 'string_or_numeric'), indices: e };
    return V.runKernel(Dp, r);
}
const _E = B({ gatherND_: EE });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function AE(n, t) {
    if (t == null) return n.shape.slice();
    if (Ut(n.shape, t)) return t;
    if (n.shape.length === t.length) {
        const e = [];
        for (let s = 0; s < n.shape.length; s++)
            t[s] == null && n.shape[s] != null
                ? e.push(n.shape[s])
                : e.push(t[s]);
        return e;
    }
    return t;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function RE(n, t, e, s) {
    const r = A(n, 'x', 'dropout');
    if (
        (_(
            r.dtype === 'float32',
            () =>
                `x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`
        ),
        _(
            t >= 0 && t < 1,
            () => `rate must be a float in the range [0, 1), but got ${t}.`
        ),
        t === 0)
    )
        return n instanceof ce ? r.clone() : r;
    const o = AE(r, e),
        i = 1 - t,
        a = Et(ol(ct(xo(o, 0, 1, 'float32', s), i)), i);
    return U(r, a);
}
const yx = B({ dropout_: RE });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function bx(n) {
    return Math.floor(Math.pow(2, Math.ceil(Math.log(n) / Math.log(2))));
}
function sm(n, t, e) {
    const s = 1 - (n % 2),
        r = new Float32Array(n);
    for (let o = 0; o < n; ++o) {
        const i = (2 * Math.PI * o) / (n + s - 1);
        r[o] = t - e * Math.cos(i);
    }
    return je(r, 'float32');
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ async function DE(n, t, e = 1) {
    const s = A(n, 'predictions', 'inTopK'),
        r = A(t, 'targets', 'inTopK');
    _(
        s.rank > 1,
        () =>
            `inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`
    ),
        _(
            s.rank - 1 === r.rank,
            () =>
                `predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${r.rank}`
        ),
        $n(
            s.shape.slice(0, s.shape.length - 1),
            r.shape,
            "predictions's shape should be align with the targets' shape, except the last dimension."
        );
    const o = s.shape[s.shape.length - 1];
    _(
        e > 0 && e <= o,
        () =>
            `'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${o}), but got ${e}`
    );
    const i = await s.data(),
        a = await r.data(),
        [l, c] = [i.length / o, o],
        u = Ve('bool', l);
    for (let h = 0; h < l; h++) {
        const d = h * c,
            p = i.subarray(d, d + c),
            f = [];
        for (let m = 0; m < p.length; m++) f.push({ value: p[m], index: m });
        f.sort((m, g) => g.value - m.value), (u[h] = 0);
        for (let m = 0; m < e; m++)
            if (f[m].index === a[h]) {
                u[h] = 1;
                break;
            }
    }
    return (
        n !== s && s.dispose(), t !== r && r.dispose(), ls(u, r.shape, 'bool')
    );
}
const OE = DE;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function FE(n, t, e, s, r, o = 'NHWC', i) {
    let a = n;
    n.rank === 3 && (a = j(n, [1, n.shape[0], n.shape[1], n.shape[2]]));
    let l = t;
    l.rank === 3 && (l = j(t, [1, t.shape[0], t.shape[1], t.shape[2]])),
        _(
            a.rank === 4,
            () =>
                `Error in conv2dDerFilter: input must be rank 4, but got shape ${a.shape}.`
        ),
        _(
            l.rank === 4,
            () =>
                `Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`
        ),
        _(
            e.length === 4,
            () =>
                `Error in conv2dDerFilter: filterShape must be length 4, but got ${e}.`
        );
    const c = o === 'NHWC' ? a.shape[3] : a.shape[1],
        u = o === 'NHWC' ? l.shape[3] : l.shape[1];
    _(
        c === e[2],
        () =>
            `Error in conv2dDerFilter: depth of input ${c}) must match input depth in filter (${e[2]}.`
    ),
        _(
            u === e[3],
            () =>
                `Error in conv2dDerFilter: depth of dy (${u}) must match output depth for filter (${e[3]}).`
        ),
        sn('conv2dDerFilter', r, i);
    const h = { x: a, dy: l },
        d = {
            strides: s,
            pad: r,
            dataFormat: o,
            dimRoundingMode: i,
            filterShape: e,
        };
    return V.runKernel(bp, h, d);
}
const rm = B({ conv2DBackpropFilter_: FE });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function sh(n, t, e) {
    if (e == null || e === 'linear') return n;
    if (e === 'relu') return U(n, gi(t));
    throw new Error(`Cannot compute gradient for fused activation ${e}.`);
}
function rh(n, t) {
    let e = t;
    const s = Ae(n.shape, t.shape);
    return s.length > 0 && (e = St(e, s)), j(e, n.shape);
}
function oh(n, t, e, s) {
    if (t === 'linear') return n;
    if (t === 'relu') return Ds(n);
    if (t === 'elu') return sl(n);
    if (t === 'relu6') return Uf(n);
    if (t === 'prelu') return Yu(n, e);
    if (t === 'leakyrelu') return Wu(n, s);
    if (t === 'sigmoid') return Ss(n);
    throw new Error(`Unknown fused activation ${t}.`);
}
const ih = (n, t) => !(n > 0) || t === 'linear';
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function LE({
    x: n,
    filter: t,
    strides: e,
    pad: s,
    dataFormat: r = 'NHWC',
    dilations: o = [1, 1],
    dimRoundingMode: i,
    bias: a,
    activation: l = 'linear',
    preluActivationWeights: c,
    leakyreluAlpha: u,
}) {
    if (((l = l || 'linear'), ih(V.state.gradientDepth, l) === !1)) {
        _(
            r === 'NHWC',
            () =>
                `Error in fused conv2d: got dataFormat of ${r} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`
        );
        let C = mr(n, t, e, s, r, o, i);
        return a != null && (C = ct(C, a)), oh(C, l, c, u);
    }
    const h = A(n, 'x', 'conv2d', 'float32'),
        d = A(t, 'filter', 'conv2d', 'float32');
    let p = h,
        f = !1;
    h.rank === 3 &&
        ((f = !0), (p = j(h, [1, h.shape[0], h.shape[1], h.shape[2]]))),
        _(
            p.rank === 4,
            () =>
                `Error in fused conv2d: input must be rank 4, but got rank ${p.rank}.`
        ),
        _(
            d.rank === 4,
            () =>
                `Error in fused conv2d: filter must be rank 4, but got rank ${d.rank}.`
        ),
        sn('fused conv2d', s, i);
    const m = r === 'NHWC' ? p.shape[3] : p.shape[1];
    _(
        d.shape[2] === m,
        () =>
            `Error in conv2d: depth of input (${m}) must match input depth for filter ${d.shape[2]}.`
    ),
        _(
            We(e, o),
            () =>
                `Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`
        );
    const g = Le(p.shape, d.shape, e, o, s, i);
    let y;
    a != null &&
        ((y = A(a, 'bias', 'fused conv2d')),
        ([y] = ye(y, h)),
        r === 'NHWC'
            ? Dt(g.outShape, y.shape)
            : (_(
                  y.shape.length <= 1,
                  () =>
                      `Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`
              ),
              _(
                  y.shape.length === 0 ||
                      y.shape[0] === g.outChannels ||
                      y.shape[0] === 1,
                  () =>
                      `Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${g.outChannels})`
              )));
    let b;
    if (c != null) {
        const C = c.shape;
        if (
            (_(
                C.length <= 1 || C.length === 3,
                () =>
                    `Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${C.length}.`
            ),
            C.length === 1)
        )
            _(
                C[0] === 1 || C[0] === g.outChannels,
                () =>
                    `Error in fused conv2d: PReLU activation weights (${C}) is not compatible with the number of output channels (${g.outChannels}).`
            );
        else if (C.length === 3)
            try {
                Dt(C, g.outShape);
            } catch {
                const T = `Error in fused conv2d: PReLU activation weights (${C}) is not compatible with the output shape of the conv2d (${g.outShape}).`;
                throw Error(T);
            }
        b = A(c, 'prelu weights', 'fused conv2d');
    }
    const w = (C, $) => {
            _(
                r === 'NHWC',
                () =>
                    `Error in gradient of fused conv2D: got dataFormat of ${r} but only NHWC is currently supported.`
            );
            const [T, N, R, P] = $,
                E = sh(C, R, l);
            _(
                fr(o),
                () =>
                    `Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`
            );
            const O = $f(N.shape, E, T, e, s),
                S = rm(N, E, T.shape, e, s),
                L = [O, S];
            if (P != null) {
                const q = rh(P, E);
                L.push(q);
            }
            return L;
        },
        x = { x: p, filter: d, bias: y, preluActivationWeights: b },
        v = {
            strides: e,
            pad: s,
            dataFormat: r,
            dilations: o,
            dimRoundingMode: i,
            activation: l,
            leakyreluAlpha: u,
        };
    return a == null
        ? qs(($, T, N) => {
              let R = V.runKernel(tc, x, v);
              return (
                  N([T, $, R]),
                  f && (R = j(R, [R.shape[1], R.shape[2], R.shape[3]])),
                  { value: R, gradFunc: w }
              );
          })(p, d)
        : qs(($, T, N, R) => {
              let P = V.runKernel(tc, x, v);
              return (
                  R([T, $, P, N]),
                  f && (P = j(P, [P.shape[1], P.shape[2], P.shape[3]])),
                  { value: P, gradFunc: w }
              );
          })(p, d, y);
}
const xx = B({ fusedConv2d_: LE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function PE(n, t, e, s, r, o = [1, 1], i) {
    let a = n;
    n.rank === 3 && (a = j(n, [1, n.shape[0], n.shape[1], n.shape[2]]));
    let l = t;
    l.rank === 3 && (l = j(t, [1, t.shape[0], t.shape[1], t.shape[2]]));
    const c = { x: a, dy: l },
        u = {
            strides: s,
            pad: r,
            dimRoundingMode: i,
            dilations: o,
            filterShape: e,
        };
    return V.runKernel(Cp, c, u);
}
const wx = B({ depthwiseConv2dNativeBackpropFilter_: PE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function zE(n, t, e, s, r, o = [1, 1], i) {
    let a = t,
        l = !1;
    t.rank === 3 &&
        ((l = !0), (a = j(t, [1, t.shape[0], t.shape[1], t.shape[2]])));
    const c = { dy: a, filter: e },
        u = {
            strides: s,
            pad: r,
            dimRoundingMode: i,
            dilations: o,
            inputShape: n,
        },
        h = V.runKernel($p, c, u);
    return l ? j(h, [h.shape[1], h.shape[2], h.shape[3]]) : h;
}
const vx = B({ depthwiseConv2dNativeBackpropInput_: zE });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function BE({
    x: n,
    filter: t,
    strides: e,
    pad: s,
    dataFormat: r = 'NHWC',
    dilations: o = [1, 1],
    dimRoundingMode: i,
    bias: a,
    activation: l = 'linear',
    preluActivationWeights: c,
    leakyreluAlpha: u,
}) {
    if (ih(V.state.gradientDepth, l) === !1) {
        let v = nl(n, t, e, s, r, o, i);
        return a != null && (v = ct(v, a)), oh(v, l, c, u);
    }
    const h = A(n, 'x', 'depthwiseConv2d', 'float32'),
        d = A(t, 'filter', 'depthwiseConv2d', 'float32');
    let p = h,
        f = !1;
    h.rank === 3 &&
        ((f = !0), (p = j(h, [1, h.shape[0], h.shape[1], h.shape[2]]))),
        _(
            p.rank === 4,
            () =>
                `Error in fused depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`
        ),
        _(
            d.rank === 4,
            () =>
                `Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${d.rank}.`
        ),
        _(
            p.shape[3] === d.shape[2],
            () =>
                `Error in fused depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${d.shape[2]}.`
        ),
        o == null && (o = [1, 1]),
        _(
            We(e, o),
            () =>
                `Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`
        ),
        sn('fused depthwiseConv2d', s, i);
    const m = Le(p.shape, d.shape, e, o, s, i, !0);
    let g;
    a != null &&
        ((g = A(a, 'bias', 'fused conv2d')),
        ([g] = ye(g, h)),
        Dt(m.outShape, g.shape));
    let y;
    c != null && (y = A(c, 'prelu weights', 'fused depthwiseConv2d'));
    const b = (v, C) => {
            _(
                fr(o),
                () =>
                    `Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`
            );
            const [$, T, N, R] = C,
                P = sh(v, N, l),
                E = vx(T.shape, P, $, e, s, o, i),
                O = wx(T, P, $.shape, e, s, o, i);
            if (R != null) {
                const S = rh(g, P);
                return [E, O, S];
            }
            return [E, O];
        },
        w = { x: p, filter: d, bias: g, preluActivationWeights: y },
        x = {
            strides: e,
            pad: s,
            dataFormat: r,
            dilations: o,
            dimRoundingMode: i,
            activation: l,
            leakyreluAlpha: u,
        };
    return a == null
        ? qs((C, $, T) => {
              let N = V.runKernel(ec, w, x);
              return (
                  T([$, C, N]),
                  f && (N = j(N, [N.shape[1], N.shape[2], N.shape[3]])),
                  { value: N, gradFunc: b }
              );
          })(p, d)
        : qs((C, $, T, N) => {
              let R = V.runKernel(ec, w, x);
              return (
                  N([$, C, R, T]),
                  f && (R = j(R, [R.shape[1], R.shape[2], R.shape[3]])),
                  { value: R, gradFunc: b }
              );
          })(p, d, g);
}
const ME = B({ fusedDepthwiseConv2d_: BE });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function VE({
    a: n,
    b: t,
    transposeA: e = !1,
    transposeB: s = !1,
    bias: r,
    activation: o = 'linear',
    preluActivationWeights: i,
    leakyreluAlpha: a = 0.2,
}) {
    if (ih(V.state.gradientDepth, o) === !1) {
        let P = Wt(n, t, e, s);
        return r != null && (P = ct(P, r)), oh(P, o, i, a);
    }
    let l = A(n, 'a', 'fused matMul'),
        c = A(t, 'b', 'fused matMul');
    [l, c] = ye(l, c);
    const u = e ? l.shape[l.rank - 2] : l.shape[l.rank - 1],
        h = s ? c.shape[c.rank - 1] : c.shape[c.rank - 2],
        d = e ? l.shape[l.rank - 1] : l.shape[l.rank - 2],
        p = s ? c.shape[c.rank - 2] : c.shape[c.rank - 1],
        f = l.shape.slice(0, -2),
        m = c.shape.slice(0, -2),
        g = rt(f),
        y = rt(m);
    _(
        u === h,
        () =>
            `Error in fused matMul: inner shapes (${u}) and (${h}) of Tensors with shapes ${l.shape} and ${c.shape} and transposeA=${e} and transposeB=${s} must match.`
    );
    const w = Dt(l.shape.slice(0, -2), c.shape.slice(0, -2)).concat([d, p]),
        x = e ? j(l, [g, u, d]) : j(l, [g, d, u]),
        v = s ? j(c, [y, p, h]) : j(c, [y, h, p]);
    let C;
    r != null &&
        ((C = A(r, 'bias', 'fused matMul')), ([C] = ye(C, l)), Dt(w, C.shape));
    let $;
    i != null && ($ = A(i, 'prelu weights', 'fused matMul'));
    const T = (P, E) => {
            const [O, S, L, q] = E,
                W = sh(j(P, L.shape), L, o);
            let X, G;
            if (
                (!e && !s
                    ? ((X = Wt(W, S, !1, !0)), (G = Wt(O, W, !0, !1)))
                    : !e && s
                    ? ((X = Wt(W, S, !1, !1)), (G = Wt(W, O, !0, !1)))
                    : e && !s
                    ? ((X = Wt(S, W, !1, !0)), (G = Wt(O, W, !1, !1)))
                    : ((X = Wt(S, W, !0, !0)), (G = Wt(W, O, !0, !0))),
                r != null)
            ) {
                const et = rh(q, W);
                return [X, G, et];
            } else return [X, G];
        },
        N = { a: x, b: v, bias: C, preluActivationWeights: $ },
        R = { transposeA: e, transposeB: s, activation: o, leakyreluAlpha: a };
    return r == null
        ? qs((E, O, S) => {
              const L = V.runKernel(Ql, N, R);
              return S([E, O, L]), { value: j(L, w), gradFunc: T };
          })(x, v)
        : qs((E, O, S, L) => {
              const q = V.runKernel(Ql, N, R);
              return L([E, O, q, S]), { value: j(q, w), gradFunc: T };
          })(x, v, C);
}
const Cd = B({ fusedMatMul_: VE });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const WE = Object.freeze(
    Object.defineProperty(
        { __proto__: null, conv2d: xx, depthwiseConv2d: ME, matMul: Cd },
        Symbol.toStringTag,
        { value: 'Module' }
    )
);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function UE(n) {
    return sm(n, 0.54, 0.46);
}
const GE = B({ hammingWindow_: UE });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function HE(n) {
    return sm(n, 0.5, 0.5);
}
const kx = B({ hannWindow_: HE });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function jE(n, t, e, s = !1, r = 0) {
    let o = 0;
    const i = [];
    for (; o + t <= n.size; ) i.push(Gt(n, o, t)), (o += e);
    if (s)
        for (; o < n.size; ) {
            const a = o + t - n.size,
                l = Ie([Gt(n, o, t - a), fi([a], r)]);
            i.push(l), (o += e);
        }
    return i.length === 0 ? Mi([], [0, t]) : j(Ie(i), [i.length, t]);
}
const Sx = B({ frame_: jE });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function qE(n, t, e, s, r = kx) {
    s == null && (s = bx(t));
    const o = Sx(n, t, e),
        i = U(o, r(t));
    return nh(i, s);
}
const KE = B({ stft_: qE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function XE(n, t, e, s, r = 'bilinear', o = 0) {
    const i = A(n, 'image', 'cropAndResize'),
        a = A(t, 'boxes', 'cropAndResize', 'float32'),
        l = A(e, 'boxInd', 'cropAndResize', 'int32'),
        c = a.shape[0];
    _(
        i.rank === 4,
        () =>
            `Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`
    ),
        _(
            a.rank === 2 && a.shape[1] === 4,
            () =>
                `Error in cropAndResize: boxes must be have size [${c},4] but had shape ${a.shape}.`
        ),
        _(
            l.rank === 1 && l.shape[0] === c,
            () =>
                `Error in cropAndResize: boxInd must be have size [${c}] but had shape ${a.shape}.`
        ),
        _(
            s.length === 2,
            () =>
                `Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`
        ),
        _(
            s[0] >= 1 && s[1] >= 1,
            () => `cropSize must be atleast [1,1], but was ${s}`
        ),
        _(
            r === 'bilinear' || r === 'nearest',
            () => `method must be bilinear or nearest, but was ${r}`
        );
    const u = { image: i, boxes: a, boxInd: l },
        h = { method: r, extrapolationValue: o, cropSize: s };
    return V.runKernel(kp, u, h);
}
const YE = B({ cropAndResize_: XE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function ZE(n) {
    const t = A(n, 'image', 'flipLeftRight', 'float32');
    _(
        t.rank === 4,
        () =>
            `Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`
    );
    const e = { image: t };
    return V.runKernel(Rp, e, {});
}
const JE = B({ flipLeftRight_: ZE });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function QE(n) {
    const t = A(n, 'image', 'grayscaleToRGB'),
        e = t.rank - 1,
        s = t.shape[e];
    _(
        t.rank >= 2,
        () =>
            `Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`
    ),
        _(
            s === 1,
            () =>
                `Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`
        );
    const r = new Array(t.rank);
    return r.fill(1, 0, e), (r[e] = 3), jn(t, r);
}
const t_ = B({ grayscaleToRGB_: QE });
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function e_(n) {
    const t = A(n, 'image', 'RGBToGrayscale'),
        e = t.rank - 1,
        s = t.shape[e];
    _(
        t.rank >= 2,
        () =>
            `Error in RGBToGrayscale: images must be at least rank 2, but got rank ${t.rank}.`
    ),
        _(
            s === 3,
            () =>
                `Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${s}.`
        );
    const r = t.dtype,
        o = bt(t, 'float32'),
        i = je([0.2989, 0.587, 0.114]);
    let a;
    switch (t.rank) {
        case 2:
            a = Po('ij,j->i', o, i);
            break;
        case 3:
            a = Po('ijk,k->ij', o, i);
            break;
        case 4:
            a = Po('ijkl,l->ijk', o, i);
            break;
        case 5:
            a = Po('ijklm,m->ijkl', o, i);
            break;
        case 6:
            a = Po('ijklmn,n->ijklm', o, i);
            break;
        default:
            throw new Error('Not a valid tensor rank.');
    }
    return (a = Qe(a, -1)), bt(a, r);
}
const n_ = B({ rgbToGrayscale_: e_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function s_(n, t, e = 0, s = 0.5) {
    const r = A(n, 'image', 'rotateWithOffset', 'float32');
    _(
        r.rank === 4,
        () =>
            `Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`
    );
    const o = { image: r },
        i = { radians: t, fillValue: e, center: s };
    return V.runKernel(mf, o, i);
}
const r_ = B({ rotateWithOffset_: s_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function yi(n, t, e, s, r, o) {
    s == null && (s = 0.5),
        r == null && (r = Number.NEGATIVE_INFINITY),
        o == null && (o = 0);
    const i = n.shape[0];
    return (
        (e = Math.min(e, i)),
        _(
            0 <= s && s <= 1,
            () => `iouThreshold must be in [0, 1], but was '${s}'`
        ),
        _(
            n.rank === 2,
            () => `boxes must be a 2D tensor, but was of rank '${n.rank}'`
        ),
        _(
            n.shape[1] === 4,
            () =>
                `boxes must have 4 columns, but 2nd dimension was ${n.shape[1]}`
        ),
        _(t.rank === 1, () => 'scores must be a 1D tensor'),
        _(
            t.shape[0] === i,
            () =>
                `scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`
        ),
        _(
            0 <= o && o <= 1,
            () => `softNmsSigma must be in [0, 1], but was '${o}'`
        ),
        {
            maxOutputSize: e,
            iouThreshold: s,
            scoreThreshold: r,
            softNmsSigma: o,
        }
    );
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function o_(n, t, e, s = 0.5, r = Number.NEGATIVE_INFINITY) {
    const o = A(n, 'boxes', 'nonMaxSuppression', 'float32'),
        i = A(t, 'scores', 'nonMaxSuppression', 'float32'),
        a = yi(o, i, e, s, r);
    (e = a.maxOutputSize), (s = a.iouThreshold), (r = a.scoreThreshold);
    const l = { maxOutputSize: e, iouThreshold: s, scoreThreshold: r };
    return V.runKernel(Wp, { boxes: o, scores: i }, l);
}
const i_ = B({ nonMaxSuppression_: o_ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function a_(n, t, e) {
    const s = l_(n, t, e),
        r = s < 0 ? -(s + 1) : s;
    n.splice(r, 0, t);
}
function l_(n, t, e) {
    return u_(n, t, e || c_);
}
function c_(n, t) {
    return n > t ? 1 : n < t ? -1 : 0;
}
function u_(n, t, e) {
    let s = 0,
        r = n.length,
        o = 0,
        i = !1;
    for (; s < r; ) {
        o = s + ((r - s) >>> 1);
        const a = e(t, n[o]);
        a > 0 ? (s = o + 1) : ((r = o), (i = !a));
    }
    return i ? s : -s - 1;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function om(n, t, e, s, r) {
    return lm(n, t, e, s, r, 0);
}
function im(n, t, e, s, r, o) {
    return lm(n, t, e, s, r, 0, !1, o, !0);
}
function am(n, t, e, s, r, o) {
    return lm(n, t, e, s, r, o, !0);
}
function lm(n, t, e, s, r, o, i = !1, a = !1, l = !1) {
    const c = [];
    for (let g = 0; g < t.length; g++)
        t[g] > r && c.push({ score: t[g], boxIndex: g, suppressBeginIndex: 0 });
    c.sort(Zg);
    const u = o > 0 ? -0.5 / o : 0,
        h = [],
        d = [];
    for (; h.length < e && c.length > 0; ) {
        const g = c.pop(),
            { score: y, boxIndex: b, suppressBeginIndex: w } = g;
        if (y < r) break;
        let x = !1;
        for (let v = h.length - 1; v >= w; --v) {
            const C = h_(n, b, h[v]);
            if (C >= s) {
                x = !0;
                break;
            }
            if (((g.score = g.score * d_(s, u, C)), g.score <= r)) break;
        }
        (g.suppressBeginIndex = h.length),
            x ||
                (g.score === y
                    ? (h.push(b), d.push(g.score))
                    : g.score > r && a_(c, g, Zg));
    }
    const p = h.length,
        f = e - p;
    a &&
        f > 0 &&
        (h.push(...new Array(f).fill(0)), d.push(...new Array(f).fill(0)));
    const m = { selectedIndices: h };
    return i && (m.selectedScores = d), l && (m.validOutputs = p), m;
}
function h_(n, t, e) {
    const s = n.subarray(t * 4, t * 4 + 4),
        r = n.subarray(e * 4, e * 4 + 4),
        o = Math.min(s[0], s[2]),
        i = Math.min(s[1], s[3]),
        a = Math.max(s[0], s[2]),
        l = Math.max(s[1], s[3]),
        c = Math.min(r[0], r[2]),
        u = Math.min(r[1], r[3]),
        h = Math.max(r[0], r[2]),
        d = Math.max(r[1], r[3]),
        p = (a - o) * (l - i),
        f = (h - c) * (d - u);
    if (p <= 0 || f <= 0) return 0;
    const m = Math.max(o, c),
        g = Math.max(i, u),
        y = Math.min(a, h),
        b = Math.min(l, d),
        w = Math.max(y - m, 0) * Math.max(b - g, 0);
    return w / (p + f - w);
}
function d_(n, t, e) {
    const s = Math.exp(t * e * e);
    return e <= n ? s : 0;
}
function Zg(n, t) {
    return (
        n.score - t.score || (n.score === t.score && t.boxIndex - n.boxIndex)
    );
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ async function p_(n, t, e, s = 0.5, r = Number.NEGATIVE_INFINITY) {
    const o = A(n, 'boxes', 'nonMaxSuppressionAsync'),
        i = A(t, 'scores', 'nonMaxSuppressionAsync'),
        a = yi(o, i, e, s, r);
    (e = a.maxOutputSize), (s = a.iouThreshold), (r = a.scoreThreshold);
    const l = await Promise.all([o.data(), i.data()]),
        c = l[0],
        u = l[1],
        { selectedIndices: h } = om(c, u, e, s, r);
    return o !== n && o.dispose(), i !== t && i.dispose(), je(h, 'int32');
}
const f_ = p_;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function m_(n, t, e, s = 0.5, r = Number.NEGATIVE_INFINITY, o = 0) {
    const i = A(n, 'boxes', 'nonMaxSuppression'),
        a = A(t, 'scores', 'nonMaxSuppression'),
        l = yi(i, a, e, s, r, o);
    (e = l.maxOutputSize),
        (s = l.iouThreshold),
        (r = l.scoreThreshold),
        (o = l.softNmsSigma);
    const c = { boxes: i, scores: a },
        u = {
            maxOutputSize: e,
            iouThreshold: s,
            scoreThreshold: r,
            softNmsSigma: o,
        },
        h = V.runKernel(Gp, c, u);
    return { selectedIndices: h[0], selectedScores: h[1] };
}
const g_ = B({ nonMaxSuppressionWithScore_: m_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ async function y_(n, t, e, s = 0.5, r = Number.NEGATIVE_INFINITY, o = 0) {
    const i = A(n, 'boxes', 'nonMaxSuppressionAsync'),
        a = A(t, 'scores', 'nonMaxSuppressionAsync'),
        l = yi(i, a, e, s, r, o);
    (e = l.maxOutputSize),
        (s = l.iouThreshold),
        (r = l.scoreThreshold),
        (o = l.softNmsSigma);
    const c = await Promise.all([i.data(), a.data()]),
        u = c[0],
        h = c[1],
        { selectedIndices: d, selectedScores: p } = am(u, h, e, s, r, o);
    return (
        i !== n && i.dispose(),
        a !== t && a.dispose(),
        { selectedIndices: je(d, 'int32'), selectedScores: je(p) }
    );
}
const b_ = y_;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function x_(n, t, e, s = 0.5, r = Number.NEGATIVE_INFINITY, o = !1) {
    const i = A(n, 'boxes', 'nonMaxSuppression'),
        a = A(t, 'scores', 'nonMaxSuppression'),
        l = yi(i, a, e, s, r, null),
        c = l.maxOutputSize,
        u = l.iouThreshold,
        h = l.scoreThreshold,
        d = { boxes: i, scores: a },
        p = {
            maxOutputSize: c,
            iouThreshold: u,
            scoreThreshold: h,
            padToMaxOutputSize: o,
        },
        f = V.runKernel(Up, d, p);
    return { selectedIndices: f[0], validOutputs: f[1] };
}
const w_ = B({ nonMaxSuppressionPadded_: x_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ async function v_(n, t, e, s = 0.5, r = Number.NEGATIVE_INFINITY, o = !1) {
    const i = A(n, 'boxes', 'nonMaxSuppressionAsync'),
        a = A(t, 'scores', 'nonMaxSuppressionAsync'),
        l = yi(i, a, e, s, r, null),
        c = l.maxOutputSize,
        u = l.iouThreshold,
        h = l.scoreThreshold,
        [d, p] = await Promise.all([i.data(), a.data()]),
        { selectedIndices: f, validOutputs: m } = im(d, p, c, u, h, o);
    return (
        i !== n && i.dispose(),
        a !== t && a.dispose(),
        { selectedIndices: je(f, 'int32'), validOutputs: At(m, 'int32') }
    );
}
const k_ = v_;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function S_(n, t, e = !1, s = !1) {
    const r = A(n, 'images', 'resizeBilinear');
    _(
        r.rank === 3 || r.rank === 4,
        () =>
            `Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`
    ),
        _(
            t.length === 2,
            () =>
                `Error in resizeBilinear: new shape must 2D, but got shape ${t}.`
        ),
        _(
            s === !1 || e === !1,
            () =>
                'Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.'
        );
    let o = r,
        i = !1;
    r.rank === 3 &&
        ((i = !0), (o = j(r, [1, r.shape[0], r.shape[1], r.shape[2]])));
    const a = { images: o },
        l = { alignCorners: e, halfPixelCenters: s, size: t },
        c = V.runKernel(Cu, a, l);
    return i ? j(c, [c.shape[1], c.shape[2], c.shape[3]]) : c;
}
const Ix = B({ resizeBilinear_: S_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function I_(n, t, e = !1, s = !1) {
    const r = A(n, 'images', 'resizeNearestNeighbor');
    _(
        r.rank === 3 || r.rank === 4,
        () =>
            `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`
    ),
        _(
            t.length === 2,
            () =>
                `Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`
        ),
        _(
            r.dtype === 'float32' || r.dtype === 'int32',
            () => '`images` must have `int32` or `float32` as dtype'
        ),
        _(
            s === !1 || e === !1,
            () =>
                'Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.'
        );
    let o = r,
        i = !1;
    r.rank === 3 &&
        ((i = !0), (o = j(r, [1, r.shape[0], r.shape[1], r.shape[2]])));
    const a = { images: o },
        l = { alignCorners: e, halfPixelCenters: s, size: t },
        c = V.runKernel(Iu, a, l);
    return i ? j(c, [c.shape[1], c.shape[2], c.shape[3]]) : c;
}
const Cx = B({ resizeNearestNeighbor_: I_ });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function C_(n, t = 'binary', e = !1, s = 0.5) {
    const r = A(n, 'image', 'threshold'),
        o = 0.2989,
        i = 0.587,
        a = 0.114,
        l = r.shape[0] * r.shape[1];
    let c = U(je([s]), 255),
        u,
        h,
        d,
        p;
    if (
        (_(
            r.rank === 3,
            () =>
                `Error in threshold: image must be rank 3,but got rank ${r.rank}.`
        ),
        _(
            r.shape[2] === 3 || r.shape[2] === 1,
            () =>
                `Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`
        ),
        _(
            r.dtype === 'int32' || r.dtype === 'float32',
            () =>
                `Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`
        ),
        _(
            t === 'otsu' || t === 'binary',
            () => `Method must be binary or otsu, but was ${t}`
        ),
        r.shape[2] === 3)
    ) {
        [u, h, d] = wn(r, [1, 1, 1], -1);
        const g = U(u, o),
            y = U(h, i),
            b = U(d, a);
        p = ct(ct(g, y), b);
    } else p = n;
    if (t === 'otsu') {
        const g = A0(bt(Gf(p), 'int32'), ls([]), 256);
        c = $_(g, l);
    }
    const f = e ? yo(p, c) : Tn(p, c);
    return bt(U(f, 255), 'int32');
}
function $_(n, t) {
    let e = je([-1]),
        s = je([0]),
        r = je([0]),
        o,
        i,
        a,
        l,
        c,
        u;
    for (let h = 0; h < n.size - 1; h++) {
        (o = Gt(n, 0, h + 1)),
            (i = Gt(n, h + 1)),
            (c = Et(St(o), t)),
            (u = Et(St(i), t));
        const d = St(U(o, ei(0, o.size)));
        a = Et(d, St(o));
        const p = fi(i.shape, o.size),
            f = ct(ei(0, i.size), p),
            m = U(i, f);
        l = Et(St(m), St(i));
        const g = kt(a, l),
            y = kt(a, l),
            b = U(c, u);
        r = U(U(b, g), y);
        const w = Tn(r, s);
        (s = qe(w, r, s)), (e = qe(w, je([h]), e));
    }
    return e;
}
const N_ = B({ threshold_: C_ });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function T_(n, t, e = 'nearest', s = 'constant', r = 0, o) {
    const i = A(n, 'image', 'transform', 'float32'),
        a = A(t, 'transforms', 'transform', 'float32');
    _(
        i.rank === 4,
        () => `Error in transform: image must be rank 4,but got rank ${i.rank}.`
    ),
        _(
            a.rank === 2 &&
                (a.shape[0] === i.shape[0] || a.shape[0] === 1) &&
                a.shape[1] === 8,
            () =>
                'Error in transform: Input transform should be batch x 8 or 1 x 8'
        ),
        _(
            o == null || o.length === 2,
            () =>
                `Error in transform: outputShape must be [height, width] or null, but got ${o}.`
        );
    const l = { image: i, transforms: a },
        c = { interpolation: e, fillMode: s, fillValue: r, outputShape: o };
    return V.runKernel(pf, l, c);
}
const E_ = B({ transform_: T_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function __(n, t, e) {
    const s = A(n, 'a', 'bandPart');
    _(s.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${s.rank}.`);
    const r = s.shape,
        [o, i] = s.shape.slice(-2);
    let a, l;
    typeof t == 'number'
        ? (_(
              t % 1 === 0,
              () => `bandPart(): numLower must be an integer, got ${t}.`
          ),
          _(
              t <= o,
              () =>
                  `bandPart(): numLower (${t}) must not be greater than the number of rows (${o}).`
          ),
          (a = A(t < 0 ? o : t, 'numLower', 'bandPart')))
        : (_(
              t.dtype === 'int32',
              () => "bandPart(): numLower's dtype must be an int32."
          ),
          (a = qe(Hi(t, 0), o, ao(t, o)))),
        typeof e == 'number'
            ? (_(
                  e % 1 === 0,
                  () => `bandPart(): numUpper must be an integer, got ${e}.`
              ),
              _(
                  e <= i,
                  () =>
                      `bandPart(): numUpper (${e}) must not be greater than the number of columns (${i}).`
              ),
              (l = A(e < 0 ? i : e, 'numUpper', 'bandPart')))
            : (_(
                  e.dtype === 'int32',
                  () => "bandPart(): numUpper's dtype must be an int32."
              ),
              (l = qe(Hi(e, 0), i, ao(e, i))));
    const c = j(ei(0, o, 1, 'int32'), [-1, 1]),
        u = ei(0, i, 1, 'int32'),
        h = kt(c, u),
        d = Es(yo(h, a), Er(h, le(l))),
        p = Se([o, i], s.dtype);
    return j(un(Qn(j(s, [-1, o, i])).map((f) => qe(d, f, p))), r);
}
const A_ = B({ bandPart_: __ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function R_(n) {
    let t;
    if (Array.isArray(n)) {
        (t = !1),
            _(
                n != null && n.length > 0,
                () =>
                    'Gram-Schmidt process: input must not be null, undefined, or empty'
            );
        const r = n[0].shape[0];
        for (let o = 1; o < n.length; ++o)
            _(
                n[o].shape[0] === r,
                () =>
                    `Gram-Schmidt: Non-unique lengths found in the input vectors: (${n[o].shape[0]} vs. ${r})`
            );
    } else (t = !0), (n = wn(n, n.shape[0], 0).map((r) => wo(r, [0])));
    _(
        n.length <= n[0].shape[0],
        () =>
            `Gram-Schmidt: Number of vectors (${n.length}) exceeds number of dimensions (${n[0].shape[0]}).`
    );
    const e = [],
        s = n;
    for (let r = 0; r < n.length; ++r)
        e.push(
            V.tidy(() => {
                let o = s[r];
                if (r > 0)
                    for (let i = 0; i < r; ++i) {
                        const a = U(St(U(e[i], o)), e[i]);
                        o = kt(o, a);
                    }
                return Et(o, rl(o, 'euclidean'));
            })
        );
    return t ? un(e, 0) : e;
}
const D_ = B({ gramSchmidt_: R_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function O_(n, t = !1) {
    if (
        (_(
            n.rank >= 2,
            () =>
                `qr() requires input tensor to have a rank >= 2, but got rank ${n.rank}`
        ),
        n.rank === 2)
    )
        return Jg(n, t);
    {
        const e = n.shape.slice(0, n.shape.length - 2).reduce((l, c) => l * c),
            s = Qn(
                j(n, [
                    e,
                    n.shape[n.shape.length - 2],
                    n.shape[n.shape.length - 1],
                ]),
                0
            ),
            r = [],
            o = [];
        s.forEach((l) => {
            const [c, u] = Jg(l, t);
            r.push(c), o.push(u);
        });
        const i = j(un(r, 0), n.shape),
            a = j(un(o, 0), n.shape);
        return [i, a];
    }
}
function Jg(n, t = !1) {
    return V.tidy(() => {
        _(
            n.shape.length === 2,
            () =>
                `qr2d() requires a 2D Tensor, but got a ${n.shape.length}D Tensor.`
        );
        const e = n.shape[0],
            s = n.shape[1];
        let r = Af(e),
            o = Hs(n);
        const i = Mi([[1]], [1, 1]);
        let a = Hs(i);
        const l = e >= s ? s : e;
        for (let c = 0; c < l; ++c) {
            const u = o,
                h = a,
                d = r;
            ([a, o, r] = V.tidy(() => {
                const p = Gt(o, [c, c], [e - c, 1]),
                    f = rl(p),
                    m = Gt(o, [c, c], [1, 1]),
                    g = qe(Tn(m, 0), Mi([[-1]]), Mi([[1]])),
                    y = kt(m, U(g, f)),
                    b = Et(p, y);
                b.shape[0] === 1
                    ? (a = Hs(i))
                    : (a = Ie(
                          [i, Gt(b, [1, 0], [b.shape[0] - 1, b.shape[1]])],
                          0
                      ));
                const w = le(Et(Wt(g, y), f)),
                    x = Gt(o, [c, 0], [e - c, s]),
                    v = U(w, a),
                    C = Ht(a);
                if (c === 0) o = kt(x, Wt(v, Wt(C, x)));
                else {
                    const N = kt(x, Wt(v, Wt(C, x)));
                    o = Ie([Gt(o, [0, 0], [c, s]), N], 0);
                }
                const $ = Ht(v),
                    T = Gt(r, [0, c], [e, r.shape[1] - c]);
                if (c === 0) r = kt(T, Wt(Wt(T, a), $));
                else {
                    const N = kt(T, Wt(Wt(T, a), $));
                    r = Ie([Gt(r, [0, 0], [e, c]), N], 1);
                }
                return [a, o, r];
            })),
                Lt([u, h, d]);
        }
        return (
            !t &&
                e > s &&
                ((r = Gt(r, [0, 0], [e, s])), (o = Gt(o, [0, 0], [s, s]))),
            [r, o]
        );
    });
}
const F_ = B({ qr_: O_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var ln;
(function (n) {
    (n[(n.NONE = 0)] = 'NONE'),
        (n[(n.MEAN = 1)] = 'MEAN'),
        (n[(n.SUM = 2)] = 'SUM'),
        (n[(n.SUM_BY_NONZERO_WEIGHTS = 3)] = 'SUM_BY_NONZERO_WEIGHTS');
})(ln || (ln = {}));
function L_(n, t, e = ln.SUM_BY_NONZERO_WEIGHTS) {
    const s = A(n, 'losses', 'computeWeightedLoss');
    let r = null;
    t != null && (r = A(t, 'weights', 'computeWeightedLoss'));
    const o = r == null ? s : U(s, r);
    if (e === ln.NONE) return o;
    if (e === ln.SUM) return St(o);
    if (e === ln.MEAN) {
        if (r == null) return ge(o);
        {
            const i = s.size / r.size,
                a = Et(St(o), St(r));
            return i > 1 ? Et(a, At(i)) : a;
        }
    }
    if (e === ln.SUM_BY_NONZERO_WEIGHTS) {
        if (r == null) return Et(St(o), At(s.size));
        {
            const i = U(r, xn(s.shape)),
                a = bt(St(ti(i, At(0))), 'float32');
            return Et(St(o), a);
        }
    }
    throw Error(`Unknown reduction: ${e}`);
}
const Qs = B({ computeWeightedLoss_: L_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function P_(n, t, e, s = ln.SUM_BY_NONZERO_WEIGHTS) {
    const r = A(n, 'labels', 'absoluteDifference'),
        o = A(t, 'predictions', 'absoluteDifference');
    let i = null;
    e != null && (i = A(e, 'weights', 'absoluteDifference')),
        $n(r.shape, o.shape, 'Error in absoluteDifference: ');
    const a = Ce(kt(r, o));
    return Qs(a, i, s);
}
const z_ = B({ absoluteDifference_: P_ });
function B_(n, t, e, s, r = ln.SUM_BY_NONZERO_WEIGHTS) {
    const o = A(n, 'labels', 'cosineDistance'),
        i = A(t, 'predictions', 'cosineDistance');
    let a = null;
    s != null && (a = A(s, 'weights', 'cosineDistance')),
        $n(o.shape, i.shape, 'Error in cosineDistance: ');
    const l = At(1),
        c = kt(l, St(U(o, i), e, !0));
    return Qs(c, a, r);
}
const M_ = B({ cosineDistance_: B_ });
function V_(n, t, e, s = ln.SUM_BY_NONZERO_WEIGHTS) {
    let r = A(n, 'labels', 'hingeLoss');
    const o = A(t, 'predictions', 'hingeLoss');
    let i = null;
    e != null && (i = A(e, 'weights', 'hingeLoss')),
        $n(r.shape, o.shape, 'Error in hingeLoss: ');
    const a = At(1);
    r = kt(U(At(2), r), a);
    const l = Ds(kt(a, U(r, o)));
    return Qs(l, i, s);
}
const W_ = B({ hingeLoss_: V_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function U_(n, t, e, s = 1, r = ln.SUM_BY_NONZERO_WEIGHTS) {
    const o = A(n, 'labels', 'huberLoss'),
        i = A(t, 'predictions', 'huberLoss');
    let a = null;
    e != null && (a = A(e, 'weights', 'huberLoss')),
        $n(o.shape, i.shape, 'Error in huberLoss: ');
    const l = At(s),
        c = Ce(kt(i, o)),
        u = ao(c, l),
        h = kt(c, u),
        d = ct(U(At(0.5), te(u)), U(l, h));
    return Qs(d, a, r);
}
const G_ = B({ huberLoss_: U_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function H_(n, t, e, s = 1e-7, r = ln.SUM_BY_NONZERO_WEIGHTS) {
    const o = A(n, 'labels', 'logLoss'),
        i = A(t, 'predictions', 'logLoss');
    let a = null;
    e != null && (a = A(e, 'weights', 'logLoss')),
        $n(o.shape, i.shape, 'Error in logLoss: ');
    const l = At(1),
        c = At(s),
        u = le(U(o, Dn(ct(i, c)))),
        h = U(kt(l, o), Dn(ct(kt(l, i), c))),
        d = kt(u, h);
    return Qs(d, a, r);
}
const j_ = B({ logLoss_: H_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function q_(n, t, e, s = ln.SUM_BY_NONZERO_WEIGHTS) {
    const r = A(n, 'labels', 'meanSquaredError'),
        o = A(t, 'predictions', 'meanSquaredError');
    let i = null;
    e != null && (i = A(e, 'weights', 'meanSquaredError')),
        $n(r.shape, o.shape, 'Error in meanSquaredError: ');
    const a = Jf(r, o);
    return Qs(a, i, s);
}
const K_ = B({ meanSquaredError_: q_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function X_(n, t) {
    const e = A(n, 'labels', 'sigmoidCrossEntropyWithLogits'),
        s = A(t, 'logits', 'sigmoidCrossEntropyWithLogits');
    $n(e.shape, s.shape, 'Error in sigmoidCrossEntropyWithLogits: ');
    const r = Ds(s),
        o = U(s, e),
        i = Uu(Sn(le(Ce(s))));
    return ct(kt(r, o), i);
}
function Y_(n, t, e, s = 0, r = ln.SUM_BY_NONZERO_WEIGHTS) {
    let o = A(n, 'multiClassLabels', 'sigmoidCrossEntropy');
    const i = A(t, 'logits', 'sigmoidCrossEntropy');
    let a = null;
    if (
        (e != null && (a = A(e, 'weights', 'sigmoidCrossEntropy')),
        $n(o.shape, i.shape, 'Error in sigmoidCrossEntropy: '),
        s > 0)
    ) {
        const c = At(s),
            u = At(1),
            h = At(0.5);
        o = ct(U(o, kt(u, c)), U(h, c));
    }
    const l = X_(o, i);
    return Qs(l, a, r);
}
const Z_ = B({ sigmoidCrossEntropy_: Y_ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function J_(n, t, e = -1) {
    if ((e === -1 && (e = t.rank - 1), e !== t.rank - 1))
        throw Error(
            `Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${e}`
        );
    return qs((r, o, i) => {
        const l = Gu(o, [e], !0),
            c = kt(bt(o, 'float32'), l);
        i([r, c]);
        const u = le(U(c, r));
        return {
            value: St(u, [e]),
            gradFunc: (p, f) => {
                const [m, g] = f,
                    y = xe(p.shape, [e]);
                return [
                    U(j(p, y), kt(bt(m, 'float32'), Sn(g))),
                    U(j(p, y), kt(Sn(g), bt(m, 'float32'))),
                ];
            },
        };
    })(n, t);
}
function Q_(n, t, e, s = 0, r = ln.SUM_BY_NONZERO_WEIGHTS) {
    let o = A(n, 'onehotLabels', 'softmaxCrossEntropy');
    const i = A(t, 'logits', 'softmaxCrossEntropy');
    let a = null;
    if (
        (e != null && (a = A(e, 'weights', 'softmaxCrossEntropy')),
        $n(o.shape, i.shape, 'Error in softmaxCrossEntropy: '),
        s > 0)
    ) {
        const c = At(s),
            u = At(1),
            h = At(o.shape[1]);
        o = ct(U(o, kt(u, c)), Et(c, h));
    }
    const l = J_(o, i);
    return Qs(l, a, r);
}
const tA = B({ softmaxCrossEntropy_: Q_ });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function eA(n, t, e, s) {
    const r = A(n, 'indices', 'sparseFillEmptyRows', 'int32'),
        o = A(t, 'values', 'sparseFillEmptyRows'),
        i = A(e, 'denseShape', 'sparseFillEmptyRows', 'int32'),
        a = A(s, 'defaultValue', 'sparseFillEmptyRows', o.dtype);
    if (r.rank !== 2)
        throw new Error(`Indices should be Tensor2D but received shape
        ${r.shape}`);
    if (o.rank !== 1)
        throw new Error(
            `Values should be Tensor1D but received shape ${o.shape}`
        );
    if (i.rank !== 1)
        throw new Error(
            `Dense shape should be Tensor1D but received shape ${i.shape}`
        );
    if (a.rank !== 0)
        throw new Error(
            `Default value should be a scalar but received shape ${a.shape}`
        );
    const l = { indices: r, values: o, denseShape: i, defaultValue: a },
        c = V.runKernel(ef, l);
    return {
        outputIndices: c[0],
        outputValues: c[1],
        emptyRowIndicator: c[2],
        reverseIndexMap: c[3],
    };
}
const nA = B({ sparseFillEmptyRows_: eA });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function sA(n, t, e) {
    const s = A(n, 'inputIndices', 'sparseReshape', 'int32'),
        r = A(t, 'inputShape', 'sparseReshape', 'int32'),
        o = A(e, 'newShape', 'sparseReshape', 'int32');
    if (s.rank !== 2)
        throw new Error(`Input indices should be Tensor2D but received shape
        ${s.shape}`);
    if (r.rank !== 1)
        throw new Error(
            `Input shape should be Tensor1D but received shape ${r.shape}`
        );
    if (o.rank !== 1)
        throw new Error(
            `New shape should be Tensor1D but received shape ${o.shape}`
        );
    const i = { inputIndices: s, inputShape: r, newShape: o },
        a = V.runKernel(nf, i);
    return { outputIndices: a[0], outputShape: a[1] };
}
const rA = B({ sparseReshape_: sA });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function oA(n, t, e) {
    const s = A(n, 'data', 'sparseSegmentMean'),
        r = A(t, 'indices', 'sparseSegmentMean', 'int32'),
        o = A(e, 'segmentIds', 'sparseSegmentMean', 'int32');
    if (s.rank < 1)
        throw new Error(
            'Data should be at least 1 dimensional but received scalar'
        );
    if (r.rank !== 1)
        throw new Error(`Indices should be Tensor1D but received shape
          ${r.shape}`);
    if (o.rank !== 1)
        throw new Error(`Segment ids should be Tensor1D but received shape
          ${o.shape}`);
    const i = { data: s, indices: r, segmentIds: o };
    return V.runKernel(sf, i);
}
const iA = B({ sparseSegmentMean_: oA });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function aA(n, t, e) {
    const s = A(n, 'data', 'sparseSegmentSum'),
        r = A(t, 'indices', 'sparseSegmentSum', 'int32'),
        o = A(e, 'segmentIds', 'sparseSegmentSum', 'int32');
    if (s.rank < 1)
        throw new Error(
            'Data should be at least 1 dimensional but received scalar'
        );
    if (r.rank !== 1)
        throw new Error(`Indices should be Tensor1D but received shape
         ${r.shape}`);
    if (o.rank !== 1)
        throw new Error(`Segment ids should be Tensor1D but received shape
         ${o.shape}`);
    const i = { data: s, indices: r, segmentIds: o };
    return V.runKernel(rf, i);
}
const lA = B({ sparseSegmentSum_: aA });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function cA(n, t, e, s, r, o, i, a) {
    const l = A(n, 'data', 'stringNGrams', 'string');
    if (l.dtype !== 'string')
        throw new Error('Data must be of datatype string');
    if (l.shape.length !== 1)
        throw new Error(`Data must be a vector, saw: ${l.shape}`);
    const c = A(t, 'dataSplits', 'stringNGrams');
    if (c.dtype !== 'int32')
        throw new Error('Data splits must be of datatype int32');
    const u = {
            separator: e,
            nGramWidths: s,
            leftPad: r,
            rightPad: o,
            padWidth: i,
            preserveShortSequences: a,
        },
        h = { data: l, dataSplits: c },
        d = V.runKernel(cf, h, u);
    return { nGrams: d[0], nGramsSplits: d[1] };
}
const uA = B({ stringNGrams_: cA });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function hA(n, t, e = !0) {
    const s = A(n, 'input', 'stringSplit', 'string'),
        r = A(t, 'delimiter', 'stringSplit', 'string');
    if (s.rank !== 1)
        throw new Error(
            `Input should be Tensor1D but received shape ${s.shape}`
        );
    if (r.rank !== 0)
        throw new Error(
            `Delimiter should be a scalar but received shape ${r.shape}`
        );
    const o = { skipEmpty: e },
        i = { input: s, delimiter: r },
        a = V.runKernel(uf, i, o);
    return { indices: a[0], values: a[1], shape: a[2] };
}
const dA = B({ stringSplit_: hA });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function pA(n, t) {
    const e = A(n, 'input', 'stringToHashBucketFast', 'string'),
        s = { numBuckets: t };
    if (t <= 0) throw new Error('Number of buckets must be at least 1');
    const r = { input: e };
    return V.runKernel(hf, r, s);
}
const fA = B({ stringToHashBucketFast_: pA });
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function mA(n, t, e, s = !0) {
    const r = A(n, 'input', 'staticRegexReplace', 'string'),
        o = { pattern: t, rewrite: e, replaceGlobal: s };
    return V.runKernel(Du, { x: r }, o);
}
const gA = B({ staticRegexReplace_: mA });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const yA = { fft: eh, ifft: Ki, rfft: nh, irfft: Zf },
    bA = { hammingWindow: GE, hannWindow: kx, frame: Sx, stft: KE },
    as = {
        flipLeftRight: JE,
        grayscaleToRGB: t_,
        resizeNearestNeighbor: Cx,
        resizeBilinear: Ix,
        rgbToGrayscale: n_,
        rotateWithOffset: r_,
        cropAndResize: YE,
        nonMaxSuppression: i_,
        nonMaxSuppressionAsync: f_,
        nonMaxSuppressionWithScore: g_,
        nonMaxSuppressionWithScoreAsync: b_,
        nonMaxSuppressionPadded: w_,
        nonMaxSuppressionPaddedAsync: k_,
        threshold: N_,
        transform: E_,
    },
    $x = { bandPart: A_, gramSchmidt: D_, qr: F_ },
    xA = {
        absoluteDifference: z_,
        computeWeightedLoss: Qs,
        cosineDistance: M_,
        hingeLoss: W_,
        huberLoss: G_,
        logLoss: j_,
        meanSquaredError: K_,
        sigmoidCrossEntropy: Z_,
        softmaxCrossEntropy: tA,
    },
    wA = {
        sparseFillEmptyRows: nA,
        sparseReshape: rA,
        sparseSegmentMean: iA,
        sparseSegmentSum: lA,
    },
    vA = {
        stringNGrams: uA,
        stringSplit: dA,
        stringToHashBucketFast: fA,
        staticRegexReplace: gA,
    };
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const kA = new Map(),
    SA = new Map();
class bi {
    getClassName() {
        return this.constructor.className;
    }
    static fromConfig(t, e) {
        return new t(e);
    }
}
class Wn {
    constructor() {
        this.classNameMap = {};
    }
    static getMap() {
        return Wn.instance == null && (Wn.instance = new Wn()), Wn.instance;
    }
    static register(t) {
        Wn.getMap().classNameMap[t.className] = [t, t.fromConfig];
    }
}
function ut(n, t, e) {
    _(
        n.className != null,
        () =>
            'Class being registered does not have the static className property defined.'
    ),
        _(
            typeof n.className == 'string',
            () =>
                'className is required to be a string, but got type ' +
                typeof n.className
        ),
        _(
            n.className.length > 0,
            () =>
                'Class being registered has an empty-string as its className, which is disallowed.'
        ),
        typeof t > 'u' && (t = 'Custom'),
        typeof e > 'u' && (e = n.className);
    const s = e,
        r = t + '>' + s;
    return Wn.register(n), kA.set(r, n), SA.set(n, r), n;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class Ar extends bi {
    minimize(t, e = !1, s) {
        const { value: r, grads: o } = this.computeGradients(t, s);
        if (s != null) {
            const i = s.map((a) => ({ name: a.name, tensor: o[a.name] }));
            this.applyGradients(i);
        } else this.applyGradients(o);
        return Lt(o), e ? r : (r.dispose(), null);
    }
    get iterations() {
        return (
            this.iterations_ == null && (this.iterations_ = 0), this.iterations_
        );
    }
    incrementIterations() {
        this.iterations_ = this.iterations + 1;
    }
    computeGradients(t, e) {
        return X2(t, e);
    }
    dispose() {
        this.iterations_ != null && Lt(this.iterations_);
    }
    async saveIterations() {
        return (
            this.iterations_ == null && (this.iterations_ = 0),
            { name: 'iter', tensor: At(this.iterations_, 'int32') }
        );
    }
    async getWeights() {
        throw new Error(
            'getWeights() is not implemented for this optimizer yet.'
        );
    }
    async setWeights(t) {
        throw new Error(
            `setWeights() is not implemented for this optimizer class ${this.getClassName()}`
        );
    }
    async extractIterations(t) {
        return (this.iterations_ = (await t[0].tensor.data())[0]), t.slice(1);
    }
}
Object.defineProperty(Ar, Symbol.hasInstance, {
    value: (n) =>
        n.minimize != null &&
        n.computeGradients != null &&
        n.applyGradients != null,
});
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class Nx extends Ar {
    static get className() {
        return 'Adadelta';
    }
    constructor(t, e, s = null) {
        super(),
            (this.learningRate = t),
            (this.rho = e),
            (this.epsilon = s),
            (this.accumulatedGrads = []),
            (this.accumulatedUpdates = []),
            s == null && (this.epsilon = V.backend.epsilon());
    }
    applyGradients(t) {
        (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach(
            (s, r) => {
                const o = V.registeredVariables[s],
                    i = !1;
                this.accumulatedGrads[r] == null &&
                    (this.accumulatedGrads[r] = {
                        originalName: `${s}/accum_grad`,
                        variable: Y(() => jt(o).variable(i)),
                    }),
                    this.accumulatedUpdates[r] == null &&
                        (this.accumulatedUpdates[r] = {
                            originalName: `${s}/accum_var`,
                            variable: Y(() => jt(o).variable(i)),
                        });
                const a = Array.isArray(t) ? t[r].tensor : t[s];
                if (a == null) return;
                const l = this.accumulatedGrads[r].variable,
                    c = this.accumulatedUpdates[r].variable;
                Y(() => {
                    const u = ct(U(l, this.rho), U(te(a), 1 - this.rho)),
                        h = U(
                            Et(
                                Xe(ct(c, this.epsilon)),
                                Xe(ct(l, this.epsilon))
                            ),
                            a
                        ),
                        d = ct(U(c, this.rho), U(te(h), 1 - this.rho));
                    l.assign(u), c.assign(d);
                    const p = ct(U(h, -this.learningRate), o);
                    o.assign(p);
                });
            }
        ),
            this.incrementIterations();
    }
    dispose() {
        this.accumulatedUpdates != null &&
            (Lt(this.accumulatedGrads.map((t) => t.variable)),
            Lt(this.accumulatedUpdates.map((t) => t.variable)));
    }
    async getWeights() {
        const t = [...this.accumulatedGrads, ...this.accumulatedUpdates];
        return [await this.saveIterations()].concat(
            t.map((e) => ({ name: e.originalName, tensor: e.variable }))
        );
    }
    async setWeights(t) {
        t = await this.extractIterations(t);
        const e = t.length / 2,
            s = !1;
        (this.accumulatedGrads = t
            .slice(0, e)
            .map((r) => ({
                originalName: r.name,
                variable: r.tensor.variable(s),
            }))),
            (this.accumulatedUpdates = t
                .slice(e, e * 2)
                .map((r) => ({
                    originalName: r.name,
                    variable: r.tensor.variable(s),
                })));
    }
    getConfig() {
        return {
            learningRate: this.learningRate,
            rho: this.rho,
            epsilon: this.epsilon,
        };
    }
    static fromConfig(t, e) {
        return new t(e.learningRate, e.rho, e.epsilon);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class Tx extends Ar {
    static get className() {
        return 'Adagrad';
    }
    constructor(t, e = 0.1) {
        super(),
            (this.learningRate = t),
            (this.initialAccumulatorValue = e),
            (this.accumulatedGrads = []);
    }
    applyGradients(t) {
        (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach(
            (s, r) => {
                const o = V.registeredVariables[s];
                this.accumulatedGrads[r] == null &&
                    (this.accumulatedGrads[r] = {
                        originalName: `${s}/accumulator`,
                        variable: Y(() =>
                            fi(o.shape, this.initialAccumulatorValue).variable(
                                !1
                            )
                        ),
                    });
                const i = Array.isArray(t) ? t[r].tensor : t[s];
                if (i == null) return;
                const a = this.accumulatedGrads[r].variable;
                Y(() => {
                    const l = ct(a, te(i));
                    a.assign(l);
                    const c = ct(
                        U(
                            Et(i, Xe(ct(l, V.backend.epsilon()))),
                            -this.learningRate
                        ),
                        o
                    );
                    o.assign(c);
                });
            }
        ),
            this.incrementIterations();
    }
    dispose() {
        this.accumulatedGrads != null &&
            Lt(this.accumulatedGrads.map((t) => t.variable));
    }
    async getWeights() {
        return [await this.saveIterations()].concat(
            this.accumulatedGrads.map((t) => ({
                name: t.originalName,
                tensor: t.variable,
            }))
        );
    }
    async setWeights(t) {
        t = await this.extractIterations(t);
        const e = !1;
        this.accumulatedGrads = t.map((s) => ({
            originalName: s.name,
            variable: s.tensor.variable(e),
        }));
    }
    getConfig() {
        return {
            learningRate: this.learningRate,
            initialAccumulatorValue: this.initialAccumulatorValue,
        };
    }
    static fromConfig(t, e) {
        return new t(e.learningRate, e.initialAccumulatorValue);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class Ex extends Ar {
    static get className() {
        return 'Adam';
    }
    constructor(t, e, s, r = null) {
        super(),
            (this.learningRate = t),
            (this.beta1 = e),
            (this.beta2 = s),
            (this.epsilon = r),
            (this.accumulatedFirstMoment = []),
            (this.accumulatedSecondMoment = []),
            Y(() => {
                (this.accBeta1 = At(e).variable()),
                    (this.accBeta2 = At(s).variable());
            }),
            r == null && (this.epsilon = V.backend.epsilon());
    }
    applyGradients(t) {
        const e = Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t);
        Y(() => {
            const s = kt(1, this.accBeta1),
                r = kt(1, this.accBeta2);
            e.forEach((o, i) => {
                const a = V.registeredVariables[o],
                    l = !1;
                this.accumulatedFirstMoment[i] == null &&
                    (this.accumulatedFirstMoment[i] = {
                        originalName: `${o}/m`,
                        variable: Y(() => jt(a).variable(l)),
                    }),
                    this.accumulatedSecondMoment[i] == null &&
                        (this.accumulatedSecondMoment[i] = {
                            originalName: `${o}/v`,
                            variable: Y(() => jt(a).variable(l)),
                        });
                const c = Array.isArray(t) ? t[i].tensor : t[o];
                if (c == null) return;
                const u = this.accumulatedFirstMoment[i].variable,
                    h = this.accumulatedSecondMoment[i].variable,
                    d = ct(U(u, this.beta1), U(c, 1 - this.beta1)),
                    p = ct(U(h, this.beta2), U(te(c), 1 - this.beta2)),
                    f = Et(d, s),
                    m = Et(p, r);
                u.assign(d), h.assign(p);
                const g = ct(
                    U(Et(f, ct(Xe(m), this.epsilon)), -this.learningRate),
                    a
                );
                a.assign(g);
            }),
                this.accBeta1.assign(U(this.accBeta1, this.beta1)),
                this.accBeta2.assign(U(this.accBeta2, this.beta2));
        }),
            this.incrementIterations();
    }
    dispose() {
        this.accBeta1.dispose(),
            this.accBeta2.dispose(),
            this.accumulatedFirstMoment != null &&
                Lt(this.accumulatedFirstMoment.map((t) => t.variable)),
            this.accumulatedSecondMoment != null &&
                Lt(this.accumulatedSecondMoment.map((t) => t.variable));
    }
    async getWeights() {
        const t = [
            ...this.accumulatedFirstMoment,
            ...this.accumulatedSecondMoment,
        ];
        return [await this.saveIterations()].concat(
            t.map((e) => ({ name: e.originalName, tensor: e.variable }))
        );
    }
    async setWeights(t) {
        (t = await this.extractIterations(t)),
            Y(() => {
                this.accBeta1.assign(gr(this.beta1, this.iterations_ + 1)),
                    this.accBeta2.assign(gr(this.beta2, this.iterations_ + 1));
            });
        const e = t.length / 2,
            s = !1;
        (this.accumulatedFirstMoment = t
            .slice(0, e)
            .map((r) => ({
                originalName: r.name,
                variable: r.tensor.variable(s),
            }))),
            (this.accumulatedSecondMoment = t
                .slice(e, e * 2)
                .map((r) => ({
                    originalName: r.name,
                    variable: r.tensor.variable(s),
                })));
    }
    getConfig() {
        return {
            learningRate: this.learningRate,
            beta1: this.beta1,
            beta2: this.beta2,
            epsilon: this.epsilon,
        };
    }
    static fromConfig(t, e) {
        return new t(e.learningRate, e.beta1, e.beta2, e.epsilon);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class _x extends Ar {
    static get className() {
        return 'Adamax';
    }
    constructor(t, e, s, r = null, o = 0) {
        super(),
            (this.learningRate = t),
            (this.beta1 = e),
            (this.beta2 = s),
            (this.epsilon = r),
            (this.decay = o),
            (this.accumulatedFirstMoment = []),
            (this.accumulatedWeightedInfNorm = []),
            Y(() => {
                (this.iteration = At(0).variable()),
                    (this.accBeta1 = At(e).variable());
            }),
            r == null && (this.epsilon = V.backend.epsilon());
    }
    applyGradients(t) {
        const e = Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t);
        Y(() => {
            const s = kt(1, this.accBeta1),
                r = Et(
                    -this.learningRate,
                    ct(U(this.iteration, this.decay), 1)
                );
            e.forEach((o, i) => {
                const a = V.registeredVariables[o],
                    l = !1;
                this.accumulatedFirstMoment[i] == null &&
                    (this.accumulatedFirstMoment[i] = {
                        originalName: `${o}/m`,
                        variable: jt(a).variable(l),
                    }),
                    this.accumulatedWeightedInfNorm[i] == null &&
                        (this.accumulatedWeightedInfNorm[i] = {
                            originalName: `${o}/v`,
                            variable: jt(a).variable(l),
                        });
                const c = Array.isArray(t) ? t[i].tensor : t[o];
                if (c == null) return;
                const u = this.accumulatedFirstMoment[i].variable,
                    h = this.accumulatedWeightedInfNorm[i].variable,
                    d = ct(U(u, this.beta1), U(c, 1 - this.beta1)),
                    p = U(h, this.beta2),
                    f = Ce(c),
                    m = Js(p, f);
                u.assign(d), h.assign(m);
                const g = ct(U(Et(r, s), Et(d, ct(m, this.epsilon))), a);
                a.assign(g);
            }),
                this.iteration.assign(ct(this.iteration, 1)),
                this.accBeta1.assign(U(this.accBeta1, this.beta1));
        }),
            this.incrementIterations();
    }
    dispose() {
        this.accBeta1.dispose(),
            this.iteration.dispose(),
            this.accumulatedFirstMoment != null &&
                Lt(this.accumulatedFirstMoment.map((t) => t.variable)),
            this.accumulatedWeightedInfNorm != null &&
                Lt(this.accumulatedWeightedInfNorm.map((t) => t.variable));
    }
    async getWeights() {
        throw new Error('getWeights() is not implemented for Adamax yet.');
    }
    async setWeights(t) {
        throw new Error('setWeights() is not implemented for Adamax yet.');
    }
    getConfig() {
        return {
            learningRate: this.learningRate,
            beta1: this.beta1,
            beta2: this.beta2,
            epsilon: this.epsilon,
            decay: this.decay,
        };
    }
    static fromConfig(t, e) {
        return new t(e.learningRate, e.beta1, e.beta2, e.epsilon, e.decay);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class cm extends Ar {
    static get className() {
        return 'SGD';
    }
    constructor(t) {
        super(), (this.learningRate = t), this.setLearningRate(t);
    }
    applyGradients(t) {
        (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach(
            (s, r) => {
                const o = Array.isArray(t) ? t[r].tensor : t[s];
                if (o == null) return;
                const i = V.registeredVariables[s];
                Y(() => {
                    const a = ct(U(this.c, o), i);
                    i.assign(a);
                });
            }
        ),
            this.incrementIterations();
    }
    setLearningRate(t) {
        (this.learningRate = t),
            this.c != null && this.c.dispose(),
            (this.c = Oe(At(-t)));
    }
    dispose() {
        this.c.dispose();
    }
    async getWeights() {
        return [await this.saveIterations()];
    }
    async setWeights(t) {
        if (((t = await this.extractIterations(t)), t.length !== 0))
            throw new Error('SGD optimizer does not have settable weights.');
    }
    getConfig() {
        return { learningRate: this.learningRate };
    }
    static fromConfig(t, e) {
        return new t(e.learningRate);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class Ax extends cm {
    static get className() {
        return 'Momentum';
    }
    constructor(t, e, s = !1) {
        super(t),
            (this.learningRate = t),
            (this.momentum = e),
            (this.useNesterov = s),
            (this.accumulations = []),
            (this.m = At(this.momentum));
    }
    applyGradients(t) {
        (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach(
            (s, r) => {
                const o = V.registeredVariables[s];
                this.accumulations[r] == null &&
                    (this.accumulations[r] = {
                        originalName: `${s}/momentum`,
                        variable: Y(() => jt(o).variable(!1)),
                    });
                const i = this.accumulations[r].variable,
                    a = Array.isArray(t) ? t[r].tensor : t[s];
                a != null &&
                    Y(() => {
                        let l;
                        const c = ct(U(this.m, i), a);
                        this.useNesterov
                            ? (l = ct(U(this.c, ct(a, U(c, this.m))), o))
                            : (l = ct(U(this.c, c), o)),
                            i.assign(c),
                            o.assign(l);
                    });
            }
        ),
            this.incrementIterations();
    }
    dispose() {
        this.m.dispose(),
            this.accumulations != null &&
                Lt(this.accumulations.map((t) => t.variable));
    }
    setMomentum(t) {
        this.momentum = t;
    }
    async getWeights() {
        return [await this.saveIterations()].concat(
            this.accumulations.map((t) => ({
                name: t.originalName,
                tensor: t.variable,
            }))
        );
    }
    async setWeights(t) {
        t = await this.extractIterations(t);
        const e = !1;
        this.accumulations = t.map((s) => ({
            originalName: s.name,
            variable: s.tensor.variable(e),
        }));
    }
    getConfig() {
        return {
            learningRate: this.learningRate,
            momentum: this.momentum,
            useNesterov: this.useNesterov,
        };
    }
    static fromConfig(t, e) {
        return new t(e.learningRate, e.momentum, e.useNesterov);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class Rx extends Ar {
    static get className() {
        return 'RMSProp';
    }
    constructor(t, e = 0.9, s = 0, r = null, o = !1) {
        if (
            (super(),
            (this.learningRate = t),
            (this.decay = e),
            (this.momentum = s),
            (this.epsilon = r),
            (this.accumulatedMeanSquares = []),
            (this.accumulatedMoments = []),
            (this.accumulatedMeanGrads = []),
            (this.centered = o),
            r == null && (this.epsilon = V.backend.epsilon()),
            t == null)
        )
            throw new Error(
                'learningRate for RMSPropOptimizer must be defined.'
            );
    }
    applyGradients(t) {
        (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach(
            (s, r) => {
                const o = V.registeredVariables[s],
                    i = !1;
                this.accumulatedMeanSquares[r] == null &&
                    (this.accumulatedMeanSquares[r] = {
                        originalName: `${s}/rms`,
                        variable: Y(() => jt(o).variable(i)),
                    }),
                    this.accumulatedMoments[r] == null &&
                        (this.accumulatedMoments[r] = {
                            originalName: `${s}/momentum`,
                            variable: Y(() => jt(o).variable(i)),
                        }),
                    this.accumulatedMeanGrads[r] == null &&
                        this.centered &&
                        (this.accumulatedMeanGrads[r] = {
                            originalName: `${s}/mg`,
                            variable: Y(() => jt(o).variable(i)),
                        });
                const a = Array.isArray(t) ? t[r].tensor : t[s];
                if (a == null) return;
                const l = this.accumulatedMeanSquares[r].variable,
                    c = this.accumulatedMoments[r].variable;
                Y(() => {
                    const u = ct(U(l, this.decay), U(te(a), 1 - this.decay));
                    if (this.centered) {
                        const h = this.accumulatedMeanGrads[r].variable,
                            d = ct(U(h, this.decay), U(a, 1 - this.decay)),
                            p = Et(
                                U(a, this.learningRate),
                                Xe(kt(u, ct(te(d), this.epsilon)))
                            ),
                            f = ct(U(c, this.momentum), p);
                        l.assign(u), h.assign(d), c.assign(f);
                        const m = kt(o, f);
                        o.assign(m);
                    } else {
                        const h = ct(
                                U(l, this.decay),
                                U(te(a), 1 - this.decay)
                            ),
                            d = ct(
                                U(c, this.momentum),
                                Et(
                                    U(a, this.learningRate),
                                    Xe(ct(h, this.epsilon))
                                )
                            );
                        l.assign(h), c.assign(d);
                        const p = kt(o, d);
                        o.assign(p);
                    }
                });
            }
        ),
            this.incrementIterations();
    }
    dispose() {
        this.accumulatedMeanSquares != null &&
            Lt(this.accumulatedMeanSquares.map((t) => t.variable)),
            this.accumulatedMeanGrads != null &&
                this.centered &&
                Lt(this.accumulatedMeanGrads.map((t) => t.variable)),
            this.accumulatedMoments != null &&
                Lt(this.accumulatedMoments.map((t) => t.variable));
    }
    async getWeights() {
        const t = [...this.accumulatedMeanSquares, ...this.accumulatedMoments];
        return (
            this.centered && t.push(...this.accumulatedMeanGrads),
            [await this.saveIterations()].concat(
                t.map((e) => ({ name: e.originalName, tensor: e.variable }))
            )
        );
    }
    async setWeights(t) {
        t = await this.extractIterations(t);
        const e = this.centered ? t.length / 3 : t.length / 2,
            s = !1;
        (this.accumulatedMeanSquares = t
            .slice(0, e)
            .map((r) => ({
                originalName: r.name,
                variable: r.tensor.variable(s),
            }))),
            (this.accumulatedMoments = t
                .slice(e, e * 2)
                .map((r) => ({
                    originalName: r.name,
                    variable: r.tensor.variable(s),
                }))),
            this.centered &&
                (this.accumulatedMeanGrads = t
                    .slice(e * 2, e * 3)
                    .map((r) => ({
                        originalName: r.name,
                        variable: r.tensor.variable(s),
                    })));
    }
    getConfig() {
        return {
            learningRate: this.learningRate,
            decay: this.decay,
            momentum: this.momentum,
            epsilon: this.epsilon,
            centered: this.centered,
        };
    }
    static fromConfig(t, e) {
        return new t(
            e.learningRate,
            e.decay,
            e.momentum,
            e.epsilon,
            e.centered
        );
    }
}
/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const IA = [Nx, Tx, Ex, _x, Ax, Rx, cm];
function CA() {
    for (const n of IA) ut(n);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const $A = 'model',
    NA = '.json',
    TA = '.weights.bin';
function Qg(n) {
    return new Promise((t) => setTimeout(t)).then(n);
}
class lo {
    constructor(t) {
        if (!tt().getBool('IS_BROWSER'))
            throw new Error(
                'browserDownloads() cannot proceed because the current environment is not a browser.'
            );
        t.startsWith(lo.URL_SCHEME) && (t = t.slice(lo.URL_SCHEME.length)),
            (t == null || t.length === 0) && (t = $A),
            (this.modelJsonFileName = t + NA),
            (this.weightDataFileName = t + TA);
    }
    async save(t) {
        if (typeof document > 'u')
            throw new Error(
                'Browser downloads are not supported in this environment since `document` is not present'
            );
        const e = ms.join(t.weightData),
            s = window.URL.createObjectURL(
                new Blob([e], { type: 'application/octet-stream' })
            );
        if (t.modelTopology instanceof ArrayBuffer)
            throw new Error(
                'BrowserDownloads.save() does not support saving model topology in binary formats yet.'
            );
        {
            const r = [
                    {
                        paths: ['./' + this.weightDataFileName],
                        weights: t.weightSpecs,
                    },
                ],
                o = o0(t, r),
                i = window.URL.createObjectURL(
                    new Blob([JSON.stringify(o)], { type: 'application/json' })
                ),
                a =
                    this.modelJsonAnchor == null
                        ? document.createElement('a')
                        : this.modelJsonAnchor;
            if (
                ((a.download = this.modelJsonFileName),
                (a.href = i),
                await Qg(() => a.dispatchEvent(new MouseEvent('click'))),
                t.weightData != null)
            ) {
                const l =
                    this.weightDataAnchor == null
                        ? document.createElement('a')
                        : this.weightDataAnchor;
                (l.download = this.weightDataFileName),
                    (l.href = s),
                    await Qg(() => l.dispatchEvent(new MouseEvent('click')));
            }
            return { modelArtifactsInfo: Qa(t) };
        }
    }
}
lo.URL_SCHEME = 'downloads://';
class EA {
    constructor(t) {
        if (t == null || t.length < 1)
            throw new Error(
                `When calling browserFiles, at least 1 file is required, but received ${t}`
            );
        (this.jsonFile = t[0]), (this.weightsFiles = t.slice(1));
    }
    async load() {
        return new Promise((t, e) => {
            const s = new FileReader();
            (s.onload = (r) => {
                const o = JSON.parse(r.target.result),
                    i = o.modelTopology;
                if (i == null) {
                    e(
                        new Error(
                            `modelTopology field is missing from file ${this.jsonFile.name}`
                        )
                    );
                    return;
                }
                if (o.weightsManifest == null) {
                    e(
                        new Error(
                            `weightManifest field is missing from file ${this.jsonFile.name}`
                        )
                    );
                    return;
                }
                if (this.weightsFiles.length === 0) {
                    t({ modelTopology: i });
                    return;
                }
                const l = vf(o, (c) => this.loadWeights(c));
                t(l);
            }),
                (s.onerror = (r) =>
                    e(
                        `Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`
                    )),
                s.readAsText(this.jsonFile);
        });
    }
    loadWeights(t) {
        const e = [],
            s = [];
        for (const i of t) e.push(...i.weights), s.push(...i.paths);
        const r = this.checkManifestAndWeightFiles(t),
            o = s.map((i) => this.loadWeightsFile(i, r[i]));
        return Promise.all(o).then((i) => [e, i]);
    }
    loadWeightsFile(t, e) {
        return new Promise((s, r) => {
            const o = new FileReader();
            (o.onload = (i) => {
                const a = i.target.result;
                s(a);
            }),
                (o.onerror = (i) =>
                    r(`Failed to weights data from file of path '${t}'.`)),
                o.readAsArrayBuffer(e);
        });
    }
    checkManifestAndWeightFiles(t) {
        const e = [],
            s = this.weightsFiles.map((o) => Yg(o.name)),
            r = {};
        for (const o of t)
            o.paths.forEach((i) => {
                const a = Yg(i);
                if (e.indexOf(a) !== -1)
                    throw new Error(
                        `Duplicate file basename found in weights manifest: '${a}'`
                    );
                if ((e.push(a), s.indexOf(a) === -1))
                    throw new Error(
                        `Weight file with basename '${a}' is not provided.`
                    );
                r[i] = this.weightsFiles[s.indexOf(a)];
            });
        if (e.length !== this.weightsFiles.length)
            throw new Error(
                `Mismatch in the number of files in weights manifest (${e.length}) and the number of weight files provided (${this.weightsFiles.length}).`
            );
        return r;
    }
}
const _A = (n) =>
    tt().getBool('IS_BROWSER') &&
    !Array.isArray(n) &&
    n.startsWith(lo.URL_SCHEME)
        ? AA(n.slice(lo.URL_SCHEME.length))
        : null;
de.registerSaveRouter(_A);
function AA(n = 'model') {
    return new lo(n);
}
function RA(n) {
    return new EA(n);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function ty(n, t, e, s) {
    i(n), (e = e ?? 0), (s = s ?? 1), a(e, s);
    let r = 0;
    const o = (l) => (
        l.then((c) => {
            const u = e + (++r / n.length) * (s - e);
            return t(u), c;
        }),
        l
    );
    function i(l) {
        _(
            l != null && Array.isArray(l) && l.length > 0,
            () => 'promises must be a none empty array'
        );
    }
    function a(l, c) {
        _(
            l >= 0 && l <= 1,
            () =>
                `Progress fraction must be in range [0, 1], but got startFraction ${l}`
        ),
            _(
                c >= 0 && c <= 1,
                () =>
                    `Progress fraction must be in range [0, 1], but got endFraction ${c}`
            ),
            _(
                c >= l,
                () =>
                    `startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${c}`
            );
    }
    return Promise.all(n.map(o));
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ async function Dx(n, t) {
    t == null && (t = {});
    const e = t.fetchFunc == null ? tt().platform.fetch : t.fetchFunc,
        s = n.map((h) => e(h, t.requestInit, { isBinary: !0 })),
        r = 0,
        o = 0.5,
        a = (
            t.onProgress == null
                ? await Promise.all(s)
                : await ty(s, t.onProgress, r, o)
        ).map((h) => h.arrayBuffer()),
        l = 0.5,
        c = 1;
    return t.onProgress == null
        ? await Promise.all(a)
        : await ty(a, t.onProgress, l, c);
}
async function DA(n, t = '', e, s) {
    return Ox((i) => Dx(i, { requestInit: s }))(n, t, e);
}
function Ox(n) {
    return async (t, e = '', s) => {
        const r = t.map(() => !1),
            o = {},
            i = s != null ? s.map(() => !1) : [],
            a = [];
        if (
            (t.forEach((p, f) => {
                let m = 0;
                p.weights.forEach((g) => {
                    const y =
                            'quantization' in g
                                ? g.quantization.dtype
                                : g.dtype,
                        b = yd[y] * rt(g.shape),
                        w = () => {
                            (r[f] = !0),
                                o[f] == null && (o[f] = []),
                                o[f].push({
                                    manifestEntry: g,
                                    groupOffset: m,
                                    sizeBytes: b,
                                });
                        };
                    s != null
                        ? s.forEach((x, v) => {
                              x === g.name && (w(), (i[v] = !0));
                          })
                        : w(),
                        a.push(g.name),
                        (m += b);
                });
            }),
            !i.every((p) => p))
        ) {
            const p = s.filter((f, m) => !i[m]);
            throw new Error(`Could not find weights in manifest with names: ${p.join(
                ', '
            )}. 
Manifest JSON has weights with names: ${a.join(', ')}.`);
        }
        const l = r.reduce((p, f, m) => (f && p.push(m), p), []),
            c = [];
        l.forEach((p) => {
            t[p].paths.forEach((f) => {
                const m = e + (e.endsWith('/') ? '' : '/') + f;
                c.push(m);
            });
        });
        const u = await n(c),
            h = {};
        let d = 0;
        return (
            l.forEach((p) => {
                const f = t[p].paths.length,
                    m = new ms(u.slice(d, d + f));
                o[p].forEach((y) => {
                    const b = m.slice(
                            y.groupOffset,
                            y.groupOffset + y.sizeBytes
                        ),
                        w = xf(b, [y.manifestEntry]);
                    for (const x in w) h[x] = w[x];
                }),
                    (d += f);
            }),
            h
        );
    };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const OA = 'application/octet-stream',
    FA = 'application/json';
class um {
    constructor(t, e) {
        if (
            ((this.DEFAULT_METHOD = 'POST'),
            e == null && (e = {}),
            (this.weightPathPrefix = e.weightPathPrefix),
            (this.onProgress = e.onProgress),
            (this.weightUrlConverter = e.weightUrlConverter),
            e.fetchFunc != null
                ? (_(
                      typeof e.fetchFunc == 'function',
                      () =>
                          'Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)'
                  ),
                  (this.fetch = e.fetchFunc))
                : (this.fetch = tt().platform.fetch),
            _(
                t != null && t.length > 0,
                () => 'URL path for http must not be null, undefined or empty.'
            ),
            Array.isArray(t) &&
                _(
                    t.length === 2,
                    () =>
                        `URL paths for http must have a length of 2, (actual length is ${t.length}).`
                ),
            (this.path = t),
            e.requestInit != null && e.requestInit.body != null)
        )
            throw new Error(
                'requestInit is expected to have no pre-existing body, but has one.'
            );
        this.requestInit = e.requestInit || {};
    }
    async save(t) {
        if (t.modelTopology instanceof ArrayBuffer)
            throw new Error(
                'BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.'
            );
        const e = Object.assign(
            { method: this.DEFAULT_METHOD },
            this.requestInit
        );
        e.body = new FormData();
        const s = [{ paths: ['./model.weights.bin'], weights: t.weightSpecs }],
            r = o0(t, s);
        if (
            (e.body.append(
                'model.json',
                new Blob([JSON.stringify(r)], { type: FA }),
                'model.json'
            ),
            t.weightData != null)
        ) {
            const i = ms.join(t.weightData);
            e.body.append(
                'model.weights.bin',
                new Blob([i], { type: OA }),
                'model.weights.bin'
            );
        }
        const o = await this.fetch(this.path, e);
        if (o.ok) return { modelArtifactsInfo: Qa(t), responses: [o] };
        throw new Error(
            `BrowserHTTPRequest.save() failed due to HTTP response status ${o.status}.`
        );
    }
    async load() {
        const t = await this.fetch(this.path, this.requestInit);
        if (!t.ok)
            throw new Error(
                `Request to ${this.path} failed with status code ${t.status}. Please verify this URL points to the model JSON of the model to load.`
            );
        let e;
        try {
            e = await t.json();
        } catch {
            let i = `Failed to parse model JSON of response from ${this.path}.`;
            throw (
                (this.path.endsWith('.pb')
                    ? (i +=
                          " Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.")
                    : (i +=
                          ' Please make sure the server is serving valid JSON for this request.'),
                new Error(i))
            );
        }
        const s = e.modelTopology,
            r = e.weightsManifest;
        if (s == null && r == null)
            throw new Error(
                `The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`
            );
        return vf(e, (o) => this.loadWeights(o));
    }
    async loadWeights(t) {
        const e = Array.isArray(this.path) ? this.path[1] : this.path,
            [s, r] = LA(e),
            o = this.weightPathPrefix || s,
            i = a0(t),
            a = [],
            l = [];
        for (const u of t)
            for (const h of u.paths)
                this.weightUrlConverter != null
                    ? l.push(this.weightUrlConverter(h))
                    : a.push(o + h + r);
        this.weightUrlConverter && a.push(...(await Promise.all(l)));
        const c = await Dx(a, {
            requestInit: this.requestInit,
            fetchFunc: this.fetch,
            onProgress: this.onProgress,
        });
        return [i, c];
    }
}
um.URL_SCHEME_REGEX = /^https?:\/\//;
function LA(n) {
    const t = n.lastIndexOf('/'),
        e = n.lastIndexOf('?'),
        s = n.substring(0, t),
        r = e > t ? n.substring(e) : '';
    return [s + '/', r];
}
function $d(n) {
    return n.match(um.URL_SCHEME_REGEX) != null;
}
const Fx = (n, t) => {
    if (typeof fetch > 'u' && (t == null || t.fetchFunc == null)) return null;
    {
        let e = !0;
        if ((Array.isArray(n) ? (e = n.every((s) => $d(s))) : (e = $d(n)), e))
            return hm(n, t);
    }
    return null;
};
de.registerSaveRouter(Fx);
de.registerLoadRouter(Fx);
function hm(n, t) {
    return new um(n, t);
}
function Lx(n, t) {
    return hm(n, t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class zh {
    constructor(t) {
        this.modelArtifacts = t;
    }
    load() {
        return this.modelArtifacts;
    }
}
class Px {
    constructor(t) {
        this.saveHandler = t;
    }
    save(t) {
        return this.saveHandler(t);
    }
}
class PA {
    constructor(t) {
        t.load && (this.load = () => Promise.resolve(t.load())),
            t.save && (this.save = (e) => Promise.resolve(t.save(e)));
    }
}
function zA(n, t, e, s) {
    const r = arguments;
    return new PA(zx(...r));
}
function zx(n, t, e, s) {
    return arguments.length === 1
        ? n.modelTopology != null || n.weightSpecs != null
            ? new zh(n)
            : (console.warn(
                  'Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release.'
              ),
              new zh({ modelTopology: n }))
        : (console.warn(
              'Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release.'
          ),
          new zh({
              modelTopology: n,
              weightSpecs: t,
              weightData: e,
              trainingConfig: s,
          }));
}
function Bx(n) {
    return new Px(n);
}
function BA(n) {
    return new Px(n);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Mx = Object.freeze(
    Object.defineProperty(
        {
            __proto__: null,
            CompositeArrayBuffer: ms,
            browserFiles: RA,
            browserHTTPRequest: Lx,
            concatenateArrayBuffers: r0,
            copyModel: UC,
            decodeWeights: xf,
            encodeWeights: bd,
            fromMemory: zA,
            fromMemorySync: zx,
            getLoadHandlers: c0,
            getModelArtifactsForJSON: vf,
            getModelArtifactsForJSONSync: i0,
            getModelArtifactsInfoForJSON: Qa,
            getSaveHandlers: l0,
            getWeightSpecs: a0,
            http: hm,
            isHTTPScheme: $d,
            listModels: VC,
            loadWeights: DA,
            moveModel: GC,
            registerLoadRouter: EC,
            registerSaveRouter: TC,
            removeModel: WC,
            weightsLoaderFactory: Ox,
            withSaveHandler: Bx,
            withSaveHandlerSync: BA,
        },
        Symbol.toStringTag,
        { value: 'Module' }
    )
);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ let Pr;
function MA(n, t = 3) {
    if (t > 4)
        throw new Error(
            'Cannot construct Tensor with more than 4 channels from pixels.'
        );
    if (n == null)
        throw new Error(
            'pixels passed to tf.browser.fromPixels() can not be null'
        );
    let e = !1,
        s = !1,
        r = !1,
        o = !1,
        i = !1,
        a = !1;
    if (n.data instanceof Uint8Array) e = !0;
    else if (typeof ImageData < 'u' && n instanceof ImageData) s = !0;
    else if (typeof HTMLVideoElement < 'u' && n instanceof HTMLVideoElement)
        r = !0;
    else if (typeof HTMLImageElement < 'u' && n instanceof HTMLImageElement)
        o = !0;
    else if (n.getContext != null) i = !0;
    else if (typeof ImageBitmap < 'u' && n instanceof ImageBitmap) a = !0;
    else
        throw new Error(
            `pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${n.constructor.name}`
        );
    if (ud(ld, V.backendName) != null) {
        const f = { pixels: n },
            m = { numChannels: t };
        return V.runKernel(ld, f, m);
    }
    const [c, u] = r ? [n.videoWidth, n.videoHeight] : [n.width, n.height];
    let h;
    if (i) h = n.getContext('2d').getImageData(0, 0, c, u).data;
    else if (s || e) h = n.data;
    else if (o || r || a) {
        if (Pr == null)
            if (typeof document > 'u')
                if (
                    typeof OffscreenCanvas < 'u' &&
                    typeof OffscreenCanvasRenderingContext2D < 'u'
                )
                    Pr = new OffscreenCanvas(1, 1).getContext('2d');
                else
                    throw new Error(
                        'Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.'
                    );
            else
                Pr = document
                    .createElement('canvas')
                    .getContext('2d', { willReadFrequently: !0 });
        (Pr.canvas.width = c),
            (Pr.canvas.height = u),
            Pr.drawImage(n, 0, 0, c, u),
            (h = Pr.getImageData(0, 0, c, u).data);
    }
    let d;
    if (t === 4) d = new Int32Array(h);
    else {
        const f = c * u;
        d = new Int32Array(f * t);
        for (let m = 0; m < f; m++)
            for (let g = 0; g < t; ++g) d[m * t + g] = h[m * 4 + g];
    }
    return hx(d, [u, c, t], 'int32');
}
const VA = B({ fromPixels_: MA });
function dm(n, t) {
    const e = n.shape.length,
        s = t.shape.length;
    if (e < 1)
        throw new Error(
            `tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${e}.`
        );
    if (s < 1)
        throw new Error(
            `tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`
        );
    if (t.dtype !== 'int32')
        throw new Error(
            `tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`
        );
    if (t.shape[s - 1] > e)
        throw new Error(
            `index innermost dimension length must be <= tensor rank; saw: ${
                t.shape[s - 1]
            } vs. ${e}`
        );
    if (rt(n.shape) === 0)
        throw new Error(
            `Requested more than 0 entries, but input is empty. Input shape: ${n.shape}.`
        );
    const r = t.shape,
        o = r[r.length - 1];
    let i = 1;
    for (let h = 0; h < r.length - 1; ++h) i *= r[h];
    const a = n.shape,
        l = r.slice();
    l.pop();
    let c = 1;
    for (let h = o; h < e; ++h) (c *= a[h]), l.push(a[h]);
    const u = [..._t(n.shape).map((h) => h / c), 1].slice(0, o);
    return [l, i, c, u];
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Nd = -2,
    WA = -1;
function pm(n, t, e) {
    const s = n.shape.length;
    _(
        s === t.length,
        () =>
            `Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`
    ),
        _(
            s === e.length,
            () =>
                `Error in slice${s}D: Length of size ${e} must match the rank of the array (${s}).`
        );
    for (let r = 0; r < s; ++r)
        _(
            t[r] + e[r] <= n.shape[r],
            () =>
                `Error in slice${s}D: begin[${r}] + size[${r}] (${
                    t[r] + e[r]
                }) would overflow input.shape[${r}] (${n.shape[r]})`
        );
}
function UA(n) {
    const t = [];
    let e = 0;
    for (; n > 0; ) n & 1 && t.push(e), (n /= 2), e++;
    return t;
}
function fm(n, t, e) {
    const s = [];
    for (let r = 0; r < n.length; r++) s[r] = Math.ceil((t[r] - n[r]) / e[r]);
    return s;
}
function Vx(n, t, e, s) {
    const r = [...n];
    for (let o = r.length; o < s.length; o++) r.push(1);
    for (let o = 0; o < e; o++)
        o === 0 ? (r[t] = 1) : (r.splice(t, 0, 1), r.pop());
    return r;
}
function Wx(n, t, e) {
    return e <= n ? e : e - (t - 1);
}
function Ux(n, t) {
    const e = [];
    for (let s = 0; s < n; s++) e.push(t + s);
    return e;
}
function GA(n, t, e, s, r, o, i, a, l) {
    const c = n.length;
    let u = new Array(c),
        h = new Array(c),
        d = new Array(c);
    if (t.length && e > 0) {
        const p = t[0],
            f = e + 1;
        (u = Gx(i, p, f, s, n)), (h = Hx(a, p, f, r, n)), (d = Vx(o, p, f, n));
    } else
        for (let p = 0; p < c; p++)
            (u[p] = qx(i, s, o, n, p, l)),
                (h[p] = Kx(a, r, o, n, p, l)),
                (d[p] = jx(o, p, l));
    return { begin: u, end: h, strides: d };
}
function Gx(n, t, e, s, r) {
    const o = [...r],
        i = Ux(e, t);
    for (let a = 0; a < o.length; a++)
        if (i.indexOf(a) > -1) o[a] = 0;
        else {
            const l = Wx(t, e, a);
            let c = s[l];
            n & (1 << l) && (c = 0), (o[a] = c);
        }
    return o;
}
function Hx(n, t, e, s, r) {
    const o = [...r],
        i = Ux(e, t);
    for (let a = 0; a < o.length; a++)
        if (i.indexOf(a) > -1) o[a] = Number.MAX_SAFE_INTEGER;
        else {
            const l = Wx(t, e, a);
            let c = s[l];
            n & (1 << l) && (c = Number.MAX_SAFE_INTEGER), (o[a] = c);
        }
    for (let a = 0; a < o.length; a++) {
        const l = r[a];
        o[a] < 0 && (o[a] += l), (o[a] = eo(0, o[a], r[a]));
    }
    return o;
}
function jx(n, t, e) {
    let s = n[t];
    return (e & (1 << t) || s == null) && (s = 1), s;
}
function qx(n, t, e, s, r, o) {
    let i = t[r];
    const a = e[r] || 1;
    (n & (1 << r) || o & (1 << r) || i == null) &&
        (a > 0 ? (i = Number.MIN_SAFE_INTEGER) : (i = Number.MAX_SAFE_INTEGER));
    const l = s[r];
    return i < 0 && (i += l), (i = eo(0, i, l - 1)), i;
}
function Kx(n, t, e, s, r, o) {
    let i = t[r];
    const a = e[r] || 1;
    (n & (1 << r) || o & (1 << r) || i == null) &&
        (a > 0 ? (i = Number.MAX_SAFE_INTEGER) : (i = Number.MIN_SAFE_INTEGER));
    const l = s[r];
    return (
        i < 0 && (i += l), a > 0 ? (i = eo(0, i, l)) : (i = eo(-1, i, l - 1)), i
    );
}
function mm(n, t, e) {
    let s = e.length;
    for (let r = 0; r < e.length; r++)
        if (e[r] > 1) {
            s = r;
            break;
        }
    for (let r = s + 1; r < e.length; r++)
        if (t[r] > 0 || e[r] !== n[r]) return !1;
    return !0;
}
function gm(n, t) {
    let e = n.length > 0 ? n[n.length - 1] : 1;
    for (let s = 0; s < n.length - 1; s++) e += n[s] * t[s];
    return e;
}
function ah(n, t, e) {
    let s;
    const r = n.shape.length;
    typeof t == 'number'
        ? (s = [t, ...new Array(r - 1).fill(0)])
        : t.length < r
        ? (s = t.concat(new Array(r - t.length).fill(0)))
        : (s = t.slice()),
        s.forEach((i) => {
            _(
                i !== -1,
                () => 'slice() does not support negative begin indexing.'
            );
        });
    let o;
    return (
        e == null
            ? (o = new Array(r).fill(-1))
            : typeof e == 'number'
            ? (o = [e, ...new Array(r - 1).fill(-1)])
            : e.length < r
            ? (o = e.concat(new Array(r - e.length).fill(-1)))
            : (o = e),
        (o = o.map((i, a) =>
            i >= 0
                ? i
                : (_(
                      i === -1,
                      () =>
                          `Negative size values should be exactly -1 but got ${i} for the slice() size at index ${a}.`
                  ),
                  n.shape[a] - s[a])
        )),
        [s, o]
    );
}
function ym(n, t, e, s, r, o, i, a, l) {
    let c;
    if (
        (s == null ? ((c = new Array(t.length)), c.fill(1)) : (c = s),
        i != null && i & (i - 1))
    )
        throw new Error('Multiple ellipses in slice is not allowed.');
    let u = !1;
    const h = {
        dims: c.length,
        numAddAxisAfterEllipsis: 0,
        begin: t.slice(),
        end: e.slice(),
        strides: c.slice(),
        beginMask: r,
        endMask: o,
        ellipsisMask: i,
        newAxisMask: a,
        shrinkAxisMask: l,
    };
    for (let w = 0; w < h.dims; w++)
        u && (1 << w) & a && h.numAddAxisAfterEllipsis++,
            (1 << w) & i && (u = !0);
    u || ((h.ellipsisMask |= 1 << h.dims), h.dims++);
    const d = {
        dims: n.length,
        beginMask: 0,
        endMask: 0,
        beginValid: !1,
        endValid: !1,
    };
    HA(h, d);
    let p = !0,
        f = !0,
        m = !0;
    const g = [],
        y = [];
    for (let w = 0; w < n.length; ++w) {
        if (d.strides[w] === 0) throw Error(`strides[${w}] must be non-zero`);
        const x = !!(d.shrinkAxisMask & (1 << w)),
            v = n[w];
        if (v === -1) {
            g.push(x ? 1 : -1);
            continue;
        }
        const C = [d.beginMask & (1 << w), d.endMask & (1 << w)],
            $ = [d.strides[w] > 0 ? 0 : -1, d.strides[w] > 0 ? v : v - 1];
        if (x && d.strides[w] <= 0)
            throw Error('only stride 1 allowed on non-range indexing.');
        m = m && d.strides[w] === 1;
        const T = !!(d.beginMask & (1 << w) && d.endMask & (1 << w));
        if (d.beginValid && d.endValid) {
            if (x) {
                const E = d.begin[w] < 0 ? v + d.begin[w] : d.begin[w];
                if (
                    ((d.begin[w] = E),
                    (d.end[w] = d.begin[w] + 1),
                    E < 0 || E >= v)
                )
                    throw Error(
                        `slice index ${d.begin[w]} of dimension ${w} out of bounds.`
                    );
            } else
                (d.begin[w] = ey(d.begin[w], 0, d.strides[w], v, C, $)),
                    (d.end[w] = ey(d.end[w], 1, d.strides[w], v, C, $));
            const P = d.strides[w] === 1 && d.begin[w] === 0 && d.end[w] === v;
            (p = p && P), (f = f && ((w === 0 && d.strides[w] === 1) || P));
        } else
            (p = p && d.strides[w] === 1 && T),
                (f = f && ((w === 0 && d.strides[w] === 1) || T));
        let N,
            R = !1;
        if (
            (d.beginValid && d.endValid
                ? ((N = d.end[w] - d.begin[w]), (R = !0))
                : x
                ? ((N = 1), (R = !0))
                : T &&
                  v >= 0 &&
                  (d.strides[w] < 0 ? (N = -v) : (N = v), (R = !0)),
            R)
        ) {
            let P;
            N === 0 || N < 0 != d.strides[w] < 0
                ? (P = 0)
                : (P =
                      Math.trunc(N / d.strides[w]) +
                      (N % d.strides[w] !== 0 ? 1 : 0)),
                g.push(P);
        } else g.push(-1);
    }
    for (let w = 0; w < d.finalShapeGatherIndices.length; ++w) {
        const x = d.finalShapeGatherIndices[w];
        x >= 0 ? y.push(g[x]) : x === Nd && y.push(1);
    }
    return {
        finalShapeSparse: y.filter(
            (w, x) => d.finalShapeGatherIndices[x] !== Nd
        ),
        finalShape: y,
        isIdentity: p,
        sliceDim0: f,
        isSimpleSlice: m,
        begin: d.begin,
        end: d.end,
        strides: d.strides,
    };
}
function HA(n, t) {
    (t.beginMask = 0), (t.endMask = 0), (t.shrinkAxisMask = 0);
    let e = 0;
    (t.beginValid = n.begin != null),
        (t.endValid = n.end != null),
        (t.begin = new Array(t.dims)),
        (t.end = new Array(t.dims)),
        (t.strides = new Array(t.dims)),
        (t.finalShapeGatherIndices = []),
        (t.finalShapeGatherIndicesSparse = []),
        (t.inputShapeGatherIndicesSparse = new Array(t.dims));
    for (let s = 0; s < n.dims; s++)
        if ((1 << s) & n.ellipsisMask) {
            const r = Math.min(
                t.dims - (n.dims - s) + 1 + n.numAddAxisAfterEllipsis,
                t.dims
            );
            for (; e < r; e++)
                (t.begin[e] = 0),
                    (t.end[e] = 0),
                    (t.strides[e] = 1),
                    (t.beginMask |= 1 << e),
                    (t.endMask |= 1 << e),
                    t.finalShapeGatherIndices.push(e),
                    t.finalShapeGatherIndicesSparse.push(-1),
                    (t.inputShapeGatherIndicesSparse[e] = s);
        } else if ((1 << s) & n.newAxisMask)
            t.finalShapeGatherIndices.push(Nd),
                t.finalShapeGatherIndicesSparse.push(-1);
        else {
            if (e === t.begin.length)
                throw Error(
                    `Index out of range using input dim ${e}; input has only ${t.dims} dims, ${t.begin.length}.`
                );
            n.begin != null && (t.begin[e] = n.begin[s]),
                n.end != null && (t.end[e] = n.end[s]),
                (t.strides[e] = n.strides[s]),
                n.beginMask & (1 << s) && (t.beginMask |= 1 << e),
                n.endMask & (1 << s) && (t.endMask |= 1 << e),
                n.shrinkAxisMask & (1 << s)
                    ? (t.finalShapeGatherIndices.push(WA),
                      t.finalShapeGatherIndicesSparse.push(-1),
                      (t.shrinkAxisMask |= 1 << e))
                    : (t.finalShapeGatherIndices.push(e),
                      t.finalShapeGatherIndicesSparse.push(s)),
                (t.inputShapeGatherIndicesSparse[e] = s),
                e++;
        }
}
function ey(n, t, e, s, r, o) {
    if (r[t]) return e > 0 ? o[t] : o[(t + 1) & 1];
    {
        const i = n < 0 ? s + n : n;
        return i < o[0] ? o[0] : i > o[1] ? o[1] : i;
    }
}
const jA = Object.freeze(
    Object.defineProperty(
        {
            __proto__: null,
            assertParamsValid: pm,
            computeFlatOffset: gm,
            computeOutShape: fm,
            getNormalizedAxes: GA,
            isSliceContinous: mm,
            maskToAxes: UA,
            parseSliceParams: ah,
            sliceInfo: ym,
            startForAxis: qx,
            startIndicesWithElidedDims: Gx,
            stopForAxis: Kx,
            stopIndicesWithElidedDims: Hx,
            stridesForAxis: jx,
            stridesWithElidedDims: Vx,
        },
        Symbol.toStringTag,
        { value: 'Module' }
    )
);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class qA {
    static sgd(t) {
        return new cm(t);
    }
    static momentum(t, e, s = !1) {
        return new Ax(t, e, s);
    }
    static rmsprop(t, e = 0.9, s = 0, r = null, o = !1) {
        return new Rx(t, e, s, r, o);
    }
    static adam(t = 0.001, e = 0.9, s = 0.999, r = null) {
        return new Ex(t, e, s, r);
    }
    static adadelta(t = 0.001, e = 0.95, s = null) {
        return new Nx(t, e, s);
    }
    static adamax(t = 0.002, e = 0.9, s = 0.999, r = null, o = 0) {
        return new _x(t, e, s, r, o);
    }
    static adagrad(t, e = 0.1) {
        return new Tx(t, e);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Vr = qA;
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const KA = (() =>
    typeof requestAnimationFrame < 'u'
        ? requestAnimationFrame
        : typeof setImmediate < 'u'
        ? setImmediate
        : (n) => n())();
function Xx() {
    return new Promise((n) => KA(() => n()));
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function bm(n, t) {
    const e = n[0].length;
    n.forEach((r, o) => {
        _(
            r.length === e,
            () =>
                `Error in concat${e}D: rank of tensors[${o}] must be the same as the rank of the rest (${e})`
        );
    }),
        _(
            t >= 0 && t < e,
            () => `Error in concat${e}D: axis must be between 0 and ${e - 1}.`
        );
    const s = n[0];
    n.forEach((r, o) => {
        for (let i = 0; i < e; i++)
            _(
                i === t || r[i] === s[i],
                () =>
                    `Error in concat${e}D: Shape of tensors[${o}] (${r}) does not match the shape of the rest (${s}) along the non-concatenated axis ${o}.`
            );
    });
}
function Is(n, t) {
    const e = n[0].slice();
    for (let s = 1; s < n.length; s++) e[t] += n[s][t];
    return e;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var is;
(function (n) {
    (n[(n.FIRST_DIM_SIZE = 0)] = 'FIRST_DIM_SIZE'),
        (n[(n.VALUE_ROWIDS = 1)] = 'VALUE_ROWIDS'),
        (n[(n.ROW_LENGTHS = 2)] = 'ROW_LENGTHS'),
        (n[(n.ROW_SPLITS = 3)] = 'ROW_SPLITS'),
        (n[(n.ROW_LIMITS = 4)] = 'ROW_LIMITS'),
        (n[(n.ROW_STARTS = 5)] = 'ROW_STARTS');
})(is || (is = {}));
function Yx(n, t, e) {
    let s = new Array();
    if (e == null && t == null) return s;
    if (t == null) for (; s.length < n + e.length; ) s.push(-1);
    else s = t.slice();
    if (e == null) return s;
    if (n + e.length !== s.length)
        throw new Error(
            `rt input.shape and shape=${t} are incompatible: rt input.rank = ${
                n + e.length
            }, but shape.rank = ${s.length}`
        );
    for (let r = 1; r < e.length; ++r) {
        const o = e[r],
            i = s[s.length - e.length + r],
            a = s[i];
        if (o >= 0)
            if (a >= 0) {
                if (a !== o)
                    throw new Error(
                        `rt input.shape and shape=${t} are incompatible: rt input.shape[${
                            r + n
                        }] = ${o} but shape[${r + n}] = ${a}`
                    );
            } else s[i] = o;
    }
    return s;
}
function Zx(n) {
    const t = {
            FIRST_DIM_SIZE: is.FIRST_DIM_SIZE,
            VALUE_ROWIDS: is.VALUE_ROWIDS,
            ROW_LENGTHS: is.ROW_LENGTHS,
            ROW_SPLITS: is.ROW_SPLITS,
            ROW_LIMITS: is.ROW_LIMITS,
            ROW_STARTS: is.ROW_STARTS,
        },
        e = [];
    for (const s of n)
        if (s in t) e.push(t[s]);
        else break;
    return e;
}
function Jx(n) {
    return n.length === 0
        ? 0
        : n[0] === is.FIRST_DIM_SIZE
        ? n.length - 1
        : n.length;
}
function Qx(n, t) {
    if (n == null || t == null) return;
    const e = n.length,
        s = t.length;
    if (e >= s)
        throw new Error(
            `defaultValue.shape=${n} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${e} must be less than ragged tensor input flatValues.rank = ${s})`
        );
    for (let r = 0; r < Math.min(e, s - 1); ++r) {
        const o = n[r],
            i = t[r + 1];
        if (o >= 0 && i >= 0 && o !== 1 && o !== i)
            throw new Error(
                `defaultValue.shape=${n}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${
                    r - n.length
                }] = ${o} but ragged tensor input.flatValues.shape[${
                    r - n.length
                }] = ${i}`
            );
    }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const xm = 30;
function lh(n) {
    return n <= xm ? n : od(n, Math.floor(Math.sqrt(n)));
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function wm(n, t, e) {
    const s = e * (typeof n == 'number' ? n : n[0]),
        r = t * (typeof n == 'number' ? n : n[1]);
    return [s, r];
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function al(n, t, e, s = !0) {
    let r = [];
    if (s)
        (r = r.concat(t.slice(0))),
            r.push(n[0] / e),
            (r = r.concat(n.slice(1)));
    else {
        r = r.concat(n[0]);
        const o = t.length;
        for (let i = 0; i < o; ++i) r = r.concat([n[i + 1] / t[i], t[i]]);
        r = r.concat(n.slice(o + 1));
    }
    return r;
}
function ll(n, t, e = !0) {
    const s = [];
    if (e) {
        s.push(t);
        for (let r = t + 1; r < n; ++r)
            r <= 2 * t ? (s.push(r), s.push(r - (t + 1))) : s.push(r);
    } else {
        const r = [],
            o = [];
        for (let i = 1; i < n; ++i)
            i >= t * 2 + 1 || i % 2 === 1 ? o.push(i) : r.push(i);
        s.push(...r), s.push(0), s.push(...o);
    }
    return s;
}
function cl(n, t, e, s = !0) {
    const r = [];
    s ? r.push(n[0] / e) : r.push(n[0] * e);
    for (let o = 1; o < n.length; ++o)
        o <= t.length
            ? s
                ? r.push(t[o - 1] * n[o])
                : r.push(n[o] / t[o - 1])
            : r.push(n[o]);
    return r;
}
function vm(n, t) {
    const e = [0];
    for (let s = 0; s < t; ++s) e.push(n[s][0]);
    return e;
}
function km(n, t, e) {
    const s = n.slice(0, 1);
    for (let r = 0; r < e; ++r) s.push(n[r + 1] - t[r][0] - t[r][1]);
    return s;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const ch = 1.7580993408473768,
    uh = 1.0507009873554805;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Sm = 0.3275911,
    Im = 0.254829592,
    Cm = -0.284496736,
    $m = 1.421413741,
    Nm = -1.453152027,
    Tm = 1.061405429;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Ks(n, t) {
    if (n.length !== t.length)
        throw new Error(
            `Cannot merge real and imag arrays of different lengths. real:${n.length}, imag: ${t.length}.`
        );
    const e = new Float32Array(n.length * 2);
    for (let s = 0; s < e.length; s += 2)
        (e[s] = n[s / 2]), (e[s + 1] = t[s / 2]);
    return e;
}
function t1(n) {
    const t = new Float32Array(n.length / 2),
        e = new Float32Array(n.length / 2);
    for (let s = 0; s < n.length; s += 2)
        (t[s / 2] = n[s]), (e[s / 2] = n[s + 1]);
    return { real: t, imag: e };
}
function e1(n) {
    const t = Math.ceil(n.length / 4),
        e = new Float32Array(t),
        s = new Float32Array(t);
    for (let r = 0; r < n.length; r += 4)
        (e[Math.floor(r / 4)] = n[r]), (s[Math.floor(r / 4)] = n[r + 1]);
    return { real: e, imag: s };
}
function n1(n) {
    const t = Math.floor(n.length / 4),
        e = new Float32Array(t),
        s = new Float32Array(t);
    for (let r = 2; r < n.length; r += 4)
        (e[Math.floor(r / 4)] = n[r]), (s[Math.floor(r / 4)] = n[r + 1]);
    return { real: e, imag: s };
}
function Em(n, t) {
    const e = n[t * 2],
        s = n[t * 2 + 1];
    return { real: e, imag: s };
}
function s1(n, t, e, s) {
    (n[s * 2] = t), (n[s * 2 + 1] = e);
}
function r1(n, t) {
    const e = new Float32Array(n / 2),
        s = new Float32Array(n / 2);
    for (let r = 0; r < Math.ceil(n / 2); r++) {
        const o = (t ? 2 : -2) * Math.PI * (r / n);
        (e[r] = Math.cos(o)), (s[r] = Math.sin(o));
    }
    return { real: e, imag: s };
}
function o1(n, t, e) {
    const s = (e ? 2 : -2) * Math.PI * (n / t),
        r = Math.cos(s),
        o = Math.sin(s);
    return { real: r, imag: o };
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Bh = '->',
    XA = /->/g,
    ny = ',',
    sy = '...';
function _m(n, t) {
    n = n.replace(/\s/g, '');
    const e = (n.length - n.replace(XA, '').length) / Bh.length;
    if (e < 1) throw new Error('Equations without an arrow are not supported.');
    if (e > 1)
        throw new Error(`Equation must contain exactly one arrow ("${Bh}").`);
    const [s, r] = n.split(Bh);
    _(
        s.indexOf(sy) === -1,
        () => `The ellipsis notation ("${sy}") is not supported yet.`
    );
    const o = s.split(ny),
        i = o.length;
    if (t !== i) throw new Error(`Expected ${i} input tensors, received ${t}`);
    if (i > 2)
        throw new Error(
            'Support for more than 2 input tensors is not implemented yet.'
        );
    const a = [];
    for (let d = 0; d < r.length; ++d) {
        const p = r[d];
        if (!o.some((f) => f.indexOf(p) !== -1))
            throw new Error(
                `Output subscripts contain the label ${p} not present in the input subscripts.`
            );
        a.indexOf(p) === -1 && a.push(p);
    }
    for (let d = 0; d < s.length; ++d) {
        const p = s[d];
        a.indexOf(p) === -1 && p !== ny && a.push(p);
    }
    const l = new Array(o.length);
    for (let d = 0; d < i; ++d) {
        if (new Set(o[d].split('')).size !== o[d].length)
            throw new Error(
                `Found duplicate axes in input component ${o[d]}. Support for duplicate axes in input is not implemented yet.`
            );
        l[d] = [];
        for (let p = 0; p < o[d].length; ++p) l[d].push(a.indexOf(o[d][p]));
    }
    const c = a.length,
        u = r.length,
        h = [];
    for (let d = u; d < c; ++d) h.push(d);
    return { allDims: a, summedDims: h, idDims: l };
}
function Am(n, t) {
    let e = new Array(n);
    e.fill(-1);
    for (let r = 0; r < t.length; ++r) e[t[r]] = r;
    const s = [];
    for (let r = 0; r < n; ++r) e[r] === -1 && s.push(r);
    return (
        (e = e.filter((r) => r !== -1)),
        { permutationIndices: e, expandDims: s }
    );
}
function Rm(n, t, e) {
    const s = new Array(n);
    for (let r = 0; r < e.length; ++r) {
        const o = e[r].shape;
        for (let i = 0; i < t[r].length; ++i)
            s[t[r][i]] === void 0
                ? (s[t[r][i]] = o[i])
                : _(
                      s[t[r][i]] === o[i],
                      () =>
                          `Expected dimension ${
                              s[t[r][i]]
                          } at axis ${i} of input shaped ${JSON.stringify(
                              o
                          )}, but got dimension ${o[i]}`
                  );
    }
}
function Dm(n, t) {
    const e = n,
        s = [];
    let r = 0;
    n.length === 0 && e.push(-1), (r = n.length + 1);
    for (let i = 0; i < r; ++i) s.push([]);
    const o = [];
    for (let i = 0; i < e.length; ++i) {
        const a = e[i],
            l = YA(t, a);
        for (const c of l) o.indexOf(c) === -1 && (s[i].push(c), o.push(c));
    }
    return { path: e, steps: s };
}
function Om(n) {
    return n.every((t, e) => t === e);
}
function YA(n, t) {
    const e = [];
    for (let s = 0; s < n.length; ++s)
        (n[s].length === 0 || n[s].indexOf(t) !== -1 || t === -1) && e.push(s);
    return e;
}
function Fm(n, t, e = 0) {
    let s = [];
    if (typeof t == 'number')
        _(
            n.shape[e] % t === 0,
            () => 'Number of splits must evenly divide the axis.'
        ),
            (s = new Array(t).fill(n.shape[e] / t));
    else {
        const r = t.reduce((i, a) => (a === -1 && (i += 1), i), 0);
        _(
            r <= 1,
            () => 'There should be only one negative value in split array.'
        );
        const o = t.indexOf(-1);
        if (o !== -1) {
            const i = t.reduce((a, l) => (l > 0 ? a + l : a));
            t[o] = n.shape[e] - i;
        }
        _(
            n.shape[e] === t.reduce((i, a) => i + a),
            () => 'The sum of sizes must match the size of the axis dimension.'
        ),
            (s = t);
    }
    return s;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function i1(n) {
    return `Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${n}`;
}
function a1(n, t) {
    return `indices(${n}, 0) is invalid: ${t} < 0`;
}
function l1(n, t, e) {
    return `indices(${n}, 0) is invalid: ${t} >= ${e}`;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function c1(n, t) {
    return `only one output dimension may be -1, not both ${n} and ${t}`;
}
function u1(n, t) {
    return `size ${n} must be non-negative, not ${t}`;
}
function h1() {
    return 'reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero';
}
function d1(n, t) {
    const e = rt(n),
        s = rt(t);
    return `Input to reshape is a SparseTensor with ${e}
  dense values, but the requested shape requires a multiple of ${s}. inputShape=${n} outputShape= ${t}`;
}
function p1(n, t) {
    const e = rt(n),
        s = rt(t);
    return `Input to reshape is a tensor with ${e} dense values, but the requested shape has ${s}. inputShape=${n} outputShape=${t}`;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Td() {
    return 'segment ids must be >= 0';
}
function f1() {
    return 'segment ids are not increasing';
}
function m1(n, t) {
    return `Segment id ${n} out of range [0, ${t}), possibly because segmentIds input is not sorted.`;
}
function g1(n, t, e) {
    return `Bad: indices[${n}] == ${t} out of range [0, ${e})`;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function y1(n, t) {
    let e = !1,
        s;
    for (
        n <= xm ? ((s = n), (e = !0)) : (s = od(n, Math.floor(Math.sqrt(n))));
        !e;

    )
        s > t || s === n ? (e = !0) : (s = od(n, s + 1));
    return s;
}
function b1(n, t, e) {
    const s = [],
        r = n.length;
    for (let o = 0; o < r; o++) o !== t ? s.push(n[o]) : s.push(e);
    return s;
}
function Lm(n, t, e, s) {
    const r = t.shape.length,
        o = n.shape.length;
    if (s !== 0 && (s < -r || s > r))
        throw new Error(
            `Expect batchDims in the range of [-${r}, ${r}], but got ${s}`
        );
    if ((s < 0 && (s += r), s > o))
        throw new Error(`batchDims (${s}) must be less than rank(x) (
    ${o}).`);
    if (e < s)
        throw new Error(
            `batchDims (${s}) must be less than or equal to axis (${e}).`
        );
    for (let h = 0; h < s; ++h)
        if (n.shape[h] !== t.shape[h])
            throw new Error(
                `x.shape[${h}]: ${n.shape[h]} should be equal to indices.shape[${h}]: ${t.shape[h]}.`
            );
    const i = n.shape[e],
        a = [];
    let l = 1,
        c = 1,
        u = 1;
    for (let h = 0; h < s; ++h) a.push(n.shape[h]), (l *= n.shape[h]);
    for (let h = s; h < e; h++) a.push(n.shape[h]), (c *= n.shape[h]);
    for (let h = s; h < r; h++) a.push(t.shape[h]);
    for (let h = e + 1; h < o; h++) a.push(n.shape[h]), (u *= n.shape[h]);
    return {
        batchSize: l,
        sliceSize: u,
        outerSize: c,
        dimSize: i,
        outputShape: a,
    };
}
const ZA = Object.freeze(
    Object.defineProperty(
        {
            __proto__: null,
            collectGatherOpShapeInfo: Lm,
            computeOutShape: b1,
            segOpComputeOptimalWindowSize: y1,
        },
        Symbol.toStringTag,
        { value: 'Module' }
    )
);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Xs(n) {
    try {
        return n.map((t) => dr(t));
    } catch (t) {
        throw new Error(
            `Failed to decode encoded string bytes into utf-8, error: ${t}`
        );
    }
}
function x1(n) {
    return n.map((t) => lr(t));
}
const JA = Object.freeze(
    Object.defineProperty(
        {
            __proto__: null,
            ERF_A1: Im,
            ERF_A2: Cm,
            ERF_A3: $m,
            ERF_A4: Nm,
            ERF_A5: Tm,
            ERF_P: Sm,
            PARALLELIZE_THRESHOLD: xm,
            get RowPartitionType() {
                return is;
            },
            SELU_SCALE: uh,
            SELU_SCALEALPHA: ch,
            applyActivation: oh,
            assertAndGetBroadcastShape: Dt,
            assertAxesAreInnerMostDims: Ue,
            assertParamsConsistent: bm,
            assignToTypedArray: s1,
            axesAreInnerMostDims: _f,
            calculateShapes: vo,
            checkEinsumDimSizes: Rm,
            checkPadOnDimRoundingMode: sn,
            combineLocations: H0,
            combineRaggedTensorToTensorShapes: Yx,
            complexWithEvenIndex: e1,
            complexWithOddIndex: n1,
            computeConv2DInfo: Le,
            computeConv3DInfo: Nr,
            computeDefaultPad: If,
            computeDilation2DInfo: tl,
            computeOptimalWindowSize: lh,
            computeOutAndReduceShapes: Pe,
            computeOutShape: Is,
            computePool2DInfo: ts,
            computePool3DInfo: Ys,
            convertConv2DDataFormat: Zs,
            decodeEinsumEquation: _m,
            eitherStridesOrDilationsAreOne: We,
            expandShapeToKeepDim: xe,
            exponent: o1,
            exponents: r1,
            fromStringArrayToUint8: x1,
            fromUint8ToStringArray: Xs,
            getAxesPermutation: me,
            getBroadcastDims: Qo,
            getComplexWithIndex: Em,
            getEinsumComputePath: Dm,
            getEinsumPermutation: Am,
            getFusedBiasGradient: rh,
            getFusedDyActivation: sh,
            getImageCenter: wm,
            getInnerMostAxes: we,
            getPermuted: ll,
            getRaggedRank: Jx,
            getReductionAxes: Ae,
            getReshaped: al,
            getReshapedPermuted: cl,
            getRowPartitionTypesHelper: Zx,
            getSliceBeginCoords: vm,
            getSliceSize: km,
            getSparseFillEmptyRowsIndicesDenseShapeMismatch: i1,
            getSparseFillEmptyRowsNegativeIndexErrorMessage: a1,
            getSparseFillEmptyRowsOutOfRangeIndexErrorMessage: l1,
            getSparseReshapeEmptyTensorZeroOutputDimErrorMessage: h1,
            getSparseReshapeInputOutputMismatchErrorMessage: p1,
            getSparseReshapeInputOutputMultipleErrorMessage: d1,
            getSparseReshapeMultipleNegativeOneOutputDimErrorMessage: c1,
            getSparseReshapeNegativeOutputDimErrorMessage: u1,
            getSparseSegmentReductionIndicesOutOfRangeErrorMessage: g1,
            getSparseSegmentReductionNegativeSegmentIdsErrorMessage: Td,
            getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage: f1,
            getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage: m1,
            getUndoAxesPermutation: Tr,
            isIdentityPermutation: Om,
            log: qI,
            mergeRealAndImagArrays: Ks,
            prepareAndValidate: dm,
            prepareSplitSize: Fm,
            segment_util: ZA,
            shouldFuse: ih,
            slice_util: jA,
            splitRealAndImagArrays: t1,
            stridesOrDilationsArePositive: io,
            tupleValuesAreOne: fr,
            upcastType: vn,
            validateDefaultValueShape: Qx,
            validateInput: Qf,
            validateUpdateShape: dx,
            warn: En,
        },
        Symbol.toStringTag,
        { value: 'Module' }
    )
);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ CA();
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const w1 = {
    kernelName: Oc,
    inputsToSave: ['x'],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => U(n, gi(bt(e, 'float32'), -1)) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const QA = {
    kernelName: ra,
    inputsToSave: ['x'],
    gradFunc: (n, t) => {
        const [e] = t;
        return {
            x: () => {
                const s = te(bt(e, 'float32')),
                    r = Xe(kt(At(1), s));
                return le(Et(n, r));
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const tR = {
    kernelName: oa,
    inputsToSave: ['x'],
    gradFunc: (n, t) => {
        const [e] = t;
        return {
            x: () => {
                const s = Xe(kt(te(bt(e, 'float32')), 1));
                return Et(n, s);
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const eR = {
    kernelName: pi,
    inputsToSave: ['a', 'b'],
    gradFunc: (n, t) => {
        const [e, s] = t,
            r = Dt(e.shape, s.shape);
        return {
            a: () => {
                let a = n;
                const l = Ae(e.shape, r);
                return l.length > 0 && (a = St(a, l)), j(a, e.shape);
            },
            b: () => {
                let a = n;
                const l = Ae(s.shape, r);
                return l.length > 0 && (a = St(a, l)), j(a, s.shape);
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const nR = {
    kernelName: Fc,
    saveAllInputs: !0,
    gradFunc: (n, t) => {
        const e = {};
        return (
            t.forEach((s, r) => {
                e[r] = () => n.clone();
            }),
            e
        );
    },
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const sR = {
    kernelName: Lc,
    inputsToSave: ['x'],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => jt(e) };
    },
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const rR = {
    kernelName: Pc,
    inputsToSave: ['x'],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => jt(e) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const oR = {
    kernelName: ia,
    inputsToSave: ['x'],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => Et(n, Xe(kt(At(1), te(bt(e, 'float32'))))) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const iR = {
    kernelName: aa,
    inputsToSave: ['x'],
    gradFunc: (n, t) => {
        const [e] = t;
        return {
            x: () => {
                const s = Xe(ct(At(1), te(bt(e, 'float32'))));
                return Et(n, s);
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const aR = {
    kernelName: ua,
    inputsToSave: ['a', 'b'],
    gradFunc: (n, t) => {
        const [e, s] = t,
            r = Dt(e.shape, s.shape);
        return {
            a: () => {
                const a = ct(te(e), te(s));
                let l = U(n, Et(s, a));
                const c = Ae(e.shape, r);
                return c.length > 0 && (l = St(l, c)), j(l, e.shape);
            },
            b: () => {
                const a = ct(te(e), te(s));
                let l = le(U(n, Et(e, a)));
                const c = Ae(s.shape, r);
                return c.length > 0 && (l = St(l, c)), j(l, s.shape);
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const lR = {
    kernelName: la,
    inputsToSave: ['x'],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => Et(n, ct(te(bt(e, 'float32')), 1)) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const cR = {
    kernelName: ca,
    inputsToSave: ['x'],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => Et(n, kt(At(1), te(bt(e, 'float32')))) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function uR(n, t, e, s, r, o) {
    const i = A(n, 'dy', 'avgPool3dGrad'),
        a = A(t, 'input', 'avgPool3dGrad');
    let l = i,
        c = a,
        u = !1;
    a.rank === 4 &&
        ((u = !0),
        (l = j(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]])),
        (c = j(a, [1, a.shape[0], a.shape[1], a.shape[2], a.shape[3]]))),
        _(
            l.rank === 5,
            () =>
                `Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`
        ),
        _(
            c.rank === 5,
            () =>
                `Error in avgPool3dGrad: input must be rank 5 but got rank ${c.rank}.`
        ),
        sn('avgPool3dGrad', r, o);
    const h = { dy: l, input: c },
        d = { filterSize: e, strides: s, pad: r, dimRoundingMode: o },
        p = V.runKernel(fp, h, d);
    return u ? j(p, [p.shape[1], p.shape[2], p.shape[3], p.shape[4]]) : p;
}
const hR = B({ avgPool3dGrad_: uR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const dR = {
    kernelName: Bc,
    inputsToSave: ['x'],
    gradFunc: (n, t, e) => {
        const [s] = t,
            { filterSize: r, strides: o, pad: i, dimRoundingMode: a } = e;
        return { x: () => hR(n, s, r, o, i, a) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function pR(n, t, e, s, r) {
    const o = A(n, 'dy', 'avgPoolGrad'),
        i = A(t, 'input', 'avgPoolGrad');
    _(
        i.rank === o.rank,
        () => `Rank of input (${i.rank}) does not match rank of dy (${o.rank})`
    );
    let a = i,
        l = o,
        c = !1;
    i.rank === 3 &&
        ((c = !0),
        (a = j(i, [1, i.shape[0], i.shape[1], i.shape[2]])),
        (l = j(o, [1, o.shape[0], o.shape[1], o.shape[2]]))),
        _(
            l.rank === 4,
            () =>
                `Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`
        ),
        _(
            a.rank === 4,
            () =>
                `Error in avgPoolGrad: input must be rank 4 but got rank ${a.rank}.`
        );
    const u = { dy: l, input: a },
        h = { filterSize: e, strides: s, pad: r },
        d = V.runKernel(pp, u, h);
    return c ? j(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
}
const fR = B({ avgPoolGrad_: pR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const mR = {
    kernelName: zc,
    inputsToSave: ['x'],
    gradFunc: (n, t, e) => {
        const [s] = t,
            { filterSize: r, strides: o, pad: i } = e;
        return { x: () => fR(n, s, r, o, i) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const gR = {
    kernelName: Mc,
    inputsToSave: ['a', 'b'],
    gradFunc: (n, t, e) => {
        const [s, r] = t,
            { transposeA: o, transposeB: i } = e;
        return !o && !i
            ? { a: () => Wt(n, r, !1, !0), b: () => Wt(s, n, !0, !1) }
            : !o && i
            ? { a: () => Wt(n, r, !1, !1), b: () => Wt(n, s, !0, !1) }
            : o && !i
            ? { a: () => Wt(r, n, !1, !0), b: () => Wt(s, n, !1, !1) }
            : { a: () => Wt(r, n, !0, !0), b: () => Wt(n, s, !0, !0) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const yR = {
    kernelName: Vc,
    gradFunc: (n, t, e) => {
        const { blockShape: s, crops: r } = e;
        return { x: () => Xu(n, s, r) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const bR = {
    kernelName: GI,
    gradFunc: (n, t, e) => {
        const s = e,
            r = s.inputShape,
            o = s.shape,
            i = Array.from(o);
        for (let l = r.length - 1; l >= 0; l--)
            if (r[l] === o[l]) i[l] = 1;
            else if (r[l] !== 1)
                throw new Error(
                    `broadcastTo(): [${r}] cannot be broadcast to [${o}].`
                );
        const a = [];
        for (let l = 0; l < i.length; l++) i[l] > 1 && a.push(l);
        return { x: () => St(n, a, !0) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const xR = { kernelName: ha, gradFunc: (n) => ({ x: () => n.clone() }) };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const wR = { kernelName: da, gradFunc: (n) => ({ x: () => jt(n) }) };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const vR = {
    kernelName: pa,
    inputsToSave: ['x'],
    gradFunc: (n, t, e) => {
        const [s] = t,
            { clipValueMin: r, clipValueMax: o } = e;
        return { x: () => qe(Es(Er(s, r), yo(s, o)), n, jt(n)) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const kR = { kernelName: Uc, inputsToSave: ['x'], gradFunc: w1.gradFunc };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const SR = {
    kernelName: Gc,
    saveAllInputs: !0,
    gradFunc: (n, t, e) => {
        const s = t.map((l) => l.shape),
            { axis: r } = e,
            o = Bt(r, t[0].shape)[0],
            i = s.map((l) => l[o]);
        return wn(n, i, o).map((l) => () => l);
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const IR = {
    kernelName: Hc,
    inputsToSave: ['x', 'filter'],
    gradFunc: (n, t, e) => {
        const [s, r] = t,
            { dilations: o, strides: i, pad: a, dataFormat: l } = e;
        return (
            _(
                fr(o),
                () =>
                    `Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`
            ),
            {
                x: () => $f(s.shape, n, r, i, a, l),
                filter: () => rm(s, n, r.shape, i, a, l),
            }
        );
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const CR = {
    kernelName: jc,
    inputsToSave: ['dy', 'filter'],
    gradFunc: (n, t, e) => {
        const [s, r] = t,
            { strides: o, pad: i, dataFormat: a, dimRoundingMode: l } = e;
        return {
            dy: () => mr(n, r, o, i, a, 1, l),
            filter: () => rm(n, s, r.shape, o, i, a, l),
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function $R(n, t, e, s, r) {
    let o = n;
    n.rank === 4 &&
        (o = j(n, [1, n.shape[0], n.shape[1], n.shape[2], n.shape[3]]));
    let i = t;
    i.rank === 4 &&
        (i = j(t, [1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]])),
        _(
            o.rank === 5,
            () =>
                `Error in conv3dDerFilter: input must be rank 5, but got shape ${o.shape}.`
        ),
        _(
            i.rank === 5,
            () =>
                `Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`
        ),
        _(
            e.length === 5,
            () =>
                `Error in conv3dDerFilter: filterShape must be length 5, but got ${e}.`
        ),
        _(
            o.shape[4] === e[3],
            () =>
                `Error in conv3dDerFilter: depth of input ${o.shape[4]}) must match input depth in filter (${e[3]}.`
        ),
        _(
            i.shape[4] === e[4],
            () =>
                `Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${e[4]}).`
        );
    const a = { x: o, dy: i },
        l = { strides: s, pad: r, filterShape: e };
    return V.runKernel(xp, a, l);
}
const NR = B({ conv3DBackpropFilter_: $R });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const TR = {
    kernelName: qc,
    inputsToSave: ['x', 'filter'],
    gradFunc: (n, t, e) => {
        const { dilations: s, strides: r, pad: o } = e;
        _(
            fr(s),
            () =>
                `Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`
        );
        const [i, a] = t;
        return {
            x: () => z0(i.shape, n, a, r, o),
            filter: () => NR(i, n, a.shape, r, o),
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const ER = {
    kernelName: fa,
    inputsToSave: ['x'],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => U(le(Kf(bt(e, 'float32'))), n) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const _R = {
    kernelName: ma,
    inputsToSave: ['x'],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => U(Xf(bt(e, 'float32')), n) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const AR = {
    kernelName: Kc,
    inputsToSave: ['x'],
    gradFunc: (n, t, e) => {
        const [s] = t,
            { axis: r, exclusive: o, reverse: i } = e;
        return {
            x: () => {
                const a = me([r], s.rank);
                let l = Ef(n, r, o, !i);
                return a != null && (l = Ht(l, a)), l;
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const RR = {
    kernelName: Xc,
    inputsToSave: ['x', 'filter'],
    gradFunc: (n, t, e) => {
        const { dilations: s, strides: r, pad: o, dimRoundingMode: i } = e,
            a = s ?? [1, 1];
        _(
            fr(a),
            () =>
                `Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`
        );
        const [l, c] = t;
        return (
            _(
                l.rank === 4,
                () =>
                    `Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`
            ),
            _(
                c.rank === 4,
                () =>
                    `Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${c.rank}.`
            ),
            _(
                l.shape[3] === c.shape[2],
                () =>
                    `Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${c.shape[2]}.`
            ),
            _(
                We(r, a),
                () =>
                    `Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${a}'.`
            ),
            sn('depthwiseConv2d', o, i),
            {
                x: () => vx(l.shape, n, c, r, o, a, i),
                filter: () => wx(l, n, c.shape, r, o, a, i),
            }
        );
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const DR = {
    kernelName: Yc,
    inputsToSave: ['x', 'filter'],
    gradFunc: (n, t, e) => {
        const [s, r] = t,
            o = { x: s, filter: r, dy: n },
            i = { x: s, filter: r, dy: n };
        return {
            x: () => V.runKernel(id, o, e),
            filter: () => V.runKernel(ad, i, e),
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const OR = {
    kernelName: ya,
    outputsToSave: [!0],
    gradFunc: (n, t) => {
        const [e] = t,
            s = { dy: n, y: e };
        return { x: () => V.runKernel(Ep, s) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const FR = {
    kernelName: ba,
    inputsToSave: ['x'],
    gradFunc: (n, t) => {
        const [e] = t,
            s = U(Sn(le(te(e))), 2 / Math.sqrt(Math.PI));
        return { x: () => U(n, s) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const LR = {
    kernelName: xa,
    outputsToSave: [!0],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => U(n, e) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const PR = {
    kernelName: Jc,
    inputsToSave: ['input'],
    gradFunc: (n, t) => {
        const [e] = t;
        return { input: () => j(n, e.shape) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const zR = {
    kernelName: wa,
    inputsToSave: ['x'],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => U(n, Sn(e)) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const BR = { kernelName: va, gradFunc: (n) => ({ x: () => jt(n) }) };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const MR = {
    kernelName: ka,
    inputsToSave: ['a', 'b'],
    gradFunc: (n, t) => {
        const [e, s] = t,
            r = Dt(e.shape, s.shape);
        return {
            a: () => {
                const a = Et(n, bt(s, 'float32')),
                    l = Ae(e.shape, r);
                return l.length > 0 ? j(St(a, l), e.shape) : a;
            },
            b: () => {
                let a = U(n, bt(e, 'float32'));
                const l = Ae(s.shape, r);
                l.length > 0 && (a = j(St(a, l), s.shape));
                const c = te(s);
                return le(Et(a, bt(c, 'float32')));
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const VR = {
    kernelName: Qc,
    inputsToSave: ['x', 'mean', 'variance', 'scale'],
    gradFunc: (n, t, e) => {
        const { varianceEpsilon: s } = e,
            [r, o, i, a] = t,
            l = a ?? At(1),
            c = Ae(o.shape, r.shape),
            u = [];
        if (o.rank === 1) {
            for (let x = 0; x < r.shape.length - 1; ++x) u.push(r.shape[x]);
            u.push(1);
        }
        const h = kt(r, o),
            d = U(n, l),
            p = Hf(ct(i, At(s))),
            f = U(U(U(p, p), p), At(-0.5));
        return {
            x: () =>
                o.rank === 1
                    ? j(U(U(n, jn(j(p, [1, 1, 1, o.shape[0]]), u)), l), r.shape)
                    : j(U(U(n, p), l), r.shape),
            mean: () => {
                let x = U(U(p, At(-1)), d);
                return o.rank === 1 && (x = St(x, c)), j(x, o.shape);
            },
            variance: () => {
                let x = U(U(f, h), d);
                return o.rank === 1 && (x = St(x, c)), j(x, o.shape);
            },
            scale: () => {
                const x = U(h, p);
                let v = U(n, x);
                return o.rank === 1 && (v = St(v, c)), j(v, o.shape);
            },
            offset: () => {
                let x = n;
                return o.rank === 1 && (x = St(x, c)), j(x, o.shape);
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const WR = {
    kernelName: tu,
    inputsToSave: ['x', 'indices'],
    gradFunc: (n, t, e) => {
        const [s, r] = t,
            { axis: o, batchDims: i } = e,
            a = Bt(o, s.shape)[0],
            l = (c, u, h) => () => {
                const d = c.shape,
                    p = u.size,
                    f = d.slice(0, a),
                    m = f.length,
                    g = d.slice(o, d.length).slice(1),
                    y = g.length,
                    b = ry(0, m),
                    w = ry(m + 1, m + 1 + y),
                    x = oy([f, [p], g]),
                    v = j(h, x),
                    C = j(u, [p]),
                    $ = oy([[m], b, w]),
                    T = Ht(v, $);
                let N = em(T, C, c.shape[a]);
                const R = Tr($);
                return (N = Ht(N, R)), N;
            };
        if (i === 1) {
            const c = s.shape[0],
                u = s.split(c, 0);
            return {
                x: () =>
                    un(
                        u.map((p, f) => l(p, r.slice(f, 1), n.slice(f, 1))())
                    ).reshape(s.shape),
                indices: () => r,
            };
        } else return { x: l(s, r, n), indices: () => r };
    },
};
function ry(n, t) {
    const e = [];
    for (let s = n; s < t; ++s) e.push(s);
    return e;
}
function oy(n) {
    const t = [];
    for (let e = 0; e < n.length; ++e)
        for (let s = 0; s < n[e].length; ++s) t.push(n[e][s]);
    return t;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const UR = {
    kernelName: Sa,
    inputsToSave: ['a', 'b'],
    gradFunc: (n, t) => {
        const [e, s] = t;
        return { a: () => jt(e), b: () => jt(s) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const GR = {
    kernelName: Ia,
    gradFunc: (n) => ({ x: () => bt(n, 'float32') }),
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const HR = { kernelName: Ca, gradFunc: (n) => ({ x: () => jt(n) }) };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const jR = { kernelName: $a, gradFunc: (n) => ({ x: () => jt(n) }) };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const qR = { kernelName: Na, gradFunc: (n) => ({ x: () => jt(n) }) };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const KR = {
    kernelName: nu,
    inputsToSave: ['x'],
    gradFunc: (n, t, e) => {
        const [s] = t,
            { alpha: r } = e,
            o = Tn(s, 0);
        return { x: () => qe(o, n, U(n, r)) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const XR = {
    kernelName: Ea,
    inputsToSave: ['x'],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => Et(n, ct(e, 1)) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const YR = {
    kernelName: Ta,
    inputsToSave: ['x'],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => Et(n, bt(e, 'float32')) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const ZR = {
    kernelName: jI,
    inputsToSave: [],
    outputsToSave: [!0],
    gradFunc: (n, t, e) => {
        const [s] = t,
            { axis: r } = e;
        return {
            logits: () => {
                const i = Sn(s);
                return kt(n, U(St(n, r, !0), i));
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function JR(n, t, e, s = 5, r = 1, o = 1, i = 0.5) {
    const a = { x: n, y: t, dy: e },
        l = { depthRadius: s, bias: r, alpha: o, beta: i };
    return V.runKernel(Pp, a, l);
}
const QR = B({ localResponseNormalizationBackprop_: JR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const tD = {
    kernelName: lu,
    inputsToSave: ['x'],
    outputsToSave: [!0],
    gradFunc: (n, t, e) => {
        const [s, r] = t,
            { depthRadius: o, bias: i, alpha: a, beta: l } = e;
        return { x: () => QR(s, r, n, o, i, a, l) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function v1(n, t, e, s) {
    return (
        t.rank < e.rank && (t = j(t, xe(t.shape, s))),
        n.rank < e.rank && (n = j(n, xe(n.shape, s))),
        { x: () => U(n, bt(us(e, t), n.dtype)) }
    );
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const iy = {
    kernelName: cu,
    inputsToSave: ['x'],
    outputsToSave: [!0],
    gradFunc: (n, t, e) => {
        const s = e,
            { reductionIndices: r } = s,
            o = t[0],
            i = t[1],
            a = Bt(r, o.shape),
            l = v1(n, i, o, a);
        return { x: () => l.x() };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const eD = {
    kernelName: _a,
    inputsToSave: ['a', 'b'],
    gradFunc: (n, t) => {
        const [e, s] = t;
        return {
            a: () => U(n, bt(Er(e, s), 'float32')),
            b: () => U(n, bt(Hi(e, s), 'float32')),
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function nD(n, t, e, s, r, o, i) {
    const a = A(n, 'dy', 'maxPool3dGrad'),
        l = A(t, 'input', 'maxPool3dGrad'),
        c = A(e, 'output', 'maxPool3dGrad');
    let u = a,
        h = l,
        d = c,
        p = !1;
    l.rank === 4 &&
        ((p = !0),
        (u = j(a, [1, a.shape[0], a.shape[1], a.shape[2], a.shape[3]])),
        (h = j(l, [1, l.shape[0], l.shape[1], l.shape[2], l.shape[3]])),
        (d = j(c, [1, c.shape[0], c.shape[1], c.shape[2], c.shape[3]]))),
        _(
            u.rank === 5,
            () =>
                `Error in maxPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`
        ),
        _(
            h.rank === 5,
            () =>
                `Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`
        ),
        _(
            d.rank === 5,
            () =>
                `Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`
        ),
        sn('maxPool3dGrad', o, i);
    const f = { dy: u, input: h, output: d },
        m = { filterSize: s, strides: r, pad: o, dimRoundingMode: i },
        g = V.runKernel(Bp, f, m);
    return p ? j(g, [g.shape[1], g.shape[2], g.shape[3], g.shape[4]]) : g;
}
const sD = B({ maxPool3dGrad_: nD });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const rD = {
    kernelName: hu,
    inputsToSave: ['x'],
    outputsToSave: [!0],
    gradFunc: (n, t, e) => {
        const [s, r] = t,
            { filterSize: o, strides: i, pad: a, dimRoundingMode: l } = e;
        return { x: () => sD(n, s, r, o, i, a, l) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function oD(n, t, e, s, r, o, i) {
    const a = A(n, 'dy', 'maxPoolGrad'),
        l = A(t, 'input', 'maxPoolGrad'),
        c = A(e, 'output', 'maxPoolGrad');
    _(
        l.rank === a.rank,
        () => `Rank of input (${l.rank}) does not match rank of dy (${a.rank})`
    ),
        _(
            a.rank === 4,
            () =>
                `Error in maxPoolGrad: dy must be rank 4 but got rank ${a.rank}.`
        ),
        _(
            l.rank === 4,
            () =>
                `Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`
        ),
        sn('maxPoolGrad', o, i);
    const u = { dy: a, input: l, output: c },
        h = { filterSize: s, strides: r, pad: o, dimRoundingMode: i };
    return V.runKernel(zp, u, h);
}
const iD = B({ maxPoolGrad_: oD });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const aD = {
    kernelName: uu,
    inputsToSave: ['x'],
    outputsToSave: [!0],
    gradFunc: (n, t, e) => {
        const [s, r] = t,
            { filterSize: o, strides: i, pad: a } = e;
        return { x: () => iD(n, s, r, o, i, a) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const lD = {
    kernelName: du,
    inputsToSave: ['x'],
    gradFunc: (n, t, e) => {
        const [s] = t,
            { axis: r } = e,
            o = Bt(r, s.shape),
            a = Pe(s.shape, o)[1],
            l = rt(a);
        return {
            x: () => {
                const u = s.shape.slice();
                o.forEach((p) => {
                    u[p] = 1;
                });
                const h = j(n, u);
                return Et(U(h, xn(s.shape, 'float32')), l);
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const cD = {
    kernelName: pu,
    inputsToSave: ['x'],
    outputsToSave: [!0],
    gradFunc: (n, t, e) => {
        const s = e,
            { axis: r } = s,
            [o, i] = t,
            a = Bt(r, o.shape),
            l = v1(n, i, o, a);
        return { x: () => l.x() };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const uD = {
    kernelName: Aa,
    inputsToSave: ['a', 'b'],
    gradFunc: (n, t) => {
        const [e, s] = t;
        return {
            a: () => U(n, bt(yo(e, s), 'float32')),
            b: () => U(n, bt(Tn(e, s), 'float32')),
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const hD = {
    kernelName: fu,
    inputsToSave: ['x'],
    gradFunc: (n, t, e) => {
        const s = t[0],
            { paddings: r } = e,
            o = r.map((i) => i[0]);
        return { x: () => Gt(n, o, s.shape) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const dD = {
    kernelName: Ra,
    inputsToSave: ['a', 'b'],
    gradFunc: (n, t) => {
        const [e, s] = t,
            r = Dt(e.shape, s.shape);
        return {
            a: () => {
                const a = Ae(e.shape, r);
                return a.length > 0 ? j(St(n, a), e.shape) : n;
            },
            b: () => {
                const a = U(n, le(ol(Et(e, s)))),
                    l = Ae(s.shape, r);
                return l.length > 0 ? j(St(a, l), s.shape) : a;
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const pD = {
    kernelName: Da,
    inputsToSave: ['a', 'b'],
    gradFunc: (n, t) => {
        const [e, s] = t,
            r = Dt(e.shape, s.shape);
        return {
            a: () => {
                const a = U(n, bt(s, 'float32')),
                    l = Ae(e.shape, r);
                return l.length > 0 ? j(St(a, l), e.shape) : a;
            },
            b: () => {
                const a = U(n, bt(e, 'float32')),
                    l = Ae(s.shape, r);
                return l.length > 0 ? j(St(a, l), s.shape) : a;
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const fD = { kernelName: mu, gradFunc: (n) => ({ x: () => le(n) }) };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const mD = {
    kernelName: bu,
    inputsToSave: ['indices'],
    gradFunc: (n, t) => {
        const e = t[0];
        return { indices: () => Se(e.shape, 'float32') };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const gD = { kernelName: yu, gradFunc: (n) => ({ x: () => jt(n) }) };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const yD = {
    kernelName: xu,
    saveAllInputs: !0,
    gradFunc: (n, t, e) => {
        const { axis: s } = e;
        return Qn(n, s).map((o) => () => o);
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const ay = {
    kernelName: wu,
    inputsToSave: ['x'],
    gradFunc: (n, t, e) => {
        const s = t[0],
            { paddings: r } = e,
            o = r.map((i) => i[0]);
        return { x: () => Gt(n, o, s.shape) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const bD = {
    kernelName: Oa,
    inputsToSave: ['a', 'b'],
    outputsToSave: [!0],
    gradFunc: (n, t) => {
        const [e, s, r] = t,
            o = e,
            i = s,
            a = Dt(o.shape, i.shape);
        return {
            a: () => {
                const u = bt(i, 'float32');
                let h = U(n, U(u, gr(o, kt(u, At(1)))));
                const d = Ae(o.shape, a);
                return d.length > 0 && (h = St(h, d)), j(h, o.shape);
            },
            b: () => {
                const u = Tn(o, 0),
                    h = qe(u, Dn(o), jt(o));
                let d = U(n, U(r, h));
                const p = Ae(i.shape, a);
                return p.length > 0 && (d = St(d, p)), j(d, i.shape);
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const xD = {
    kernelName: vu,
    inputsToSave: ['x', 'alpha'],
    gradFunc: (n, t) => {
        const [e, s] = t,
            r = Tn(e, 0);
        return {
            x: () => qe(r, n, U(n, s)),
            alpha: () => {
                let o = qe(r, jt(n), U(n, e));
                const i = Ae(s.shape, n.shape);
                return i.length > 0 && (o = St(o, i)), j(o, s.shape);
            },
        };
    },
};
/**
 * @license
 * Copyright 2022 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function wD(n, t, e) {
    const s = n.shape.slice();
    s[e] = 1;
    const r = j(t, s),
        o = lc(n, e, !0, !1),
        i = lc(n, e, !0, !0),
        a = U(o, i);
    return U(r, a);
}
function vD(n, t, e) {
    const s = n.shape.length,
        r = s - e.length,
        o = me(e, s);
    let i = n;
    o != null && (i = Ht(n, o));
    const a = i.shape.slice(),
        c = a.splice(s - e.length, e.length).reduce((d, p) => d * p, 1);
    a.push(c);
    const u = i.reshape(a);
    let h = wD(u, t, r);
    if (((h = h.reshape(i.shape)), o != null)) {
        const d = Tr(o);
        h = Ht(h, d);
    }
    return h;
}
const kD = {
    kernelName: ku,
    inputsToSave: ['x'],
    gradFunc: (n, t, e) => {
        const [s] = t,
            { axis: r } = e;
        let o = [];
        return (
            r == null
                ? (o = s.shape.map((i, a) => a))
                : typeof r == 'number'
                ? (o = [r])
                : (o = r),
            { x: () => vD(s, n, o) }
        );
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const SD = {
    kernelName: ga,
    inputsToSave: ['a', 'b'],
    gradFunc: (n, t) => {
        const [e, s] = t,
            r = Dt(e.shape, s.shape);
        return {
            a: () => {
                const a = Et(n, bt(s, 'float32')),
                    l = Ae(e.shape, r);
                return l.length > 0 ? j(St(a, l), e.shape) : a;
            },
            b: () => {
                let a = U(n, bt(e, 'float32'));
                const l = Ae(s.shape, r);
                l.length > 0 && (a = j(St(a, l), s.shape));
                const c = te(s);
                return le(Et(a, bt(c, 'float32')));
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const ID = {
    kernelName: Fa,
    inputsToSave: ['x'],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => Et(n, le(te(e))) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const CD = {
    kernelName: Pa,
    inputsToSave: ['x'],
    gradFunc: (n, t) => {
        const [e] = t,
            s = U(yo(e, 6), gi(e));
        return { x: () => U(n, bt(s, 'float32')) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const $D = {
    kernelName: La,
    inputsToSave: ['x'],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => U(n, bt(gi(e), 'float32')) };
    },
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const ND = {
    kernelName: Su,
    inputsToSave: ['x'],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => j(n, e.shape) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const TD = {
    kernelName: Cu,
    inputsToSave: ['images'],
    gradFunc: (n, t, e) => {
        const [s] = t,
            r = { dy: n, images: s };
        return { images: () => V.runKernel(Zp, r, e) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const ED = {
    kernelName: Iu,
    inputsToSave: ['images'],
    gradFunc: (n, t, e) => {
        const [s] = t,
            r = { dy: n, images: s };
        return { images: () => V.runKernel(Yp, r, e) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const _D = {
    kernelName: $u,
    gradFunc: (n, t, e) => {
        const { dims: s } = e,
            r = Bt(s, n.shape);
        return { x: () => Jn(n, r) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const AD = { kernelName: za, gradFunc: (n) => ({ x: () => jt(n) }) };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const RD = {
    kernelName: Ba,
    inputsToSave: ['x'],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => le(Et(n, U(gr(e, 1.5), 2))) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const DD = {
    kernelName: Nu,
    inputsToSave: ['condition'],
    gradFunc: (n, t) => {
        const [e] = t;
        return {
            condition: () => bt(jt(e), 'float32'),
            t: () => U(n, bt(e, n.dtype)),
            e: () => U(n, bt(Hu(e), n.dtype)),
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const OD = {
    kernelName: Ma,
    inputsToSave: ['x'],
    gradFunc: (n, t) => {
        const [e] = t;
        return {
            x: () => {
                const s = Tn(e, At(0)),
                    r = At(ch),
                    o = At(uh),
                    i = U(n, o),
                    a = U(U(n, r), Sn(bt(e, 'float32')));
                return qe(s, i, a);
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const FD = {
    kernelName: Ga,
    outputsToSave: [!0],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => U(n, U(e, kt(At(1), e))) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const LD = { kernelName: Ua, gradFunc: (n) => ({ x: () => jt(n) }) };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const PD = {
    kernelName: Va,
    inputsToSave: ['x'],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => U(Mu(bt(e, 'float32')), n) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const zD = {
    kernelName: Wa,
    inputsToSave: ['x'],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => U(Tf(bt(e, 'float32')), n) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const BD = {
    kernelName: Tu,
    inputsToSave: ['x'],
    gradFunc: (n, t, e) => {
        const [s] = t,
            { begin: r, size: o } = e,
            i = s.shape,
            [a, l] = ah(s, r, o),
            c = [];
        for (let u = 0; u < n.rank; u++) c.push([a[u], i[u] - a[u] - l[u]]);
        return { x: () => _r(n, c) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const MD = {
    kernelName: Ru,
    outputsToSave: [!0],
    gradFunc: (n, t, e) => {
        const [s] = t,
            { dim: r } = e,
            o = !0,
            i = U(n, s);
        return { logits: () => kt(i, U(St(i, [r], o), s)) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const VD = {
    kernelName: Ha,
    inputsToSave: ['x'],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => U(n, Ss(e)) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const ly = {
    kernelName: _u,
    gradFunc: (n, t, e) => {
        const { blockShape: s, paddings: r } = e;
        return { x: () => Bu(n, s, r) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const cy = {
    kernelName: Au,
    gradFunc: (n, t, e) => {
        const { axis: s } = e;
        return { x: () => Ie(n, s) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const WD = {
    kernelName: ja,
    inputsToSave: ['x'],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => Et(n, U(Xe(bt(e, 'float32')), 2)) };
    },
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const UD = {
    kernelName: af,
    inputsToSave: ['x'],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => U(n, U(bt(e, 'float32'), 2)) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const GD = {
    kernelName: qa,
    inputsToSave: ['a', 'b'],
    gradFunc: (n, t) => {
        const [e, s] = t,
            r = At(2);
        return { a: () => U(n, U(r, kt(e, s))), b: () => U(n, U(r, kt(s, e))) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const HD = { kernelName: Ja, gradFunc: (n) => ({ x: () => jt(n) }) };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const jD = {
    kernelName: Ka,
    inputsToSave: ['a', 'b'],
    gradFunc: (n, t) => {
        const [e, s] = t,
            r = Dt(e.shape, s.shape);
        return {
            a: () => {
                let a = n;
                const l = Ae(e.shape, r);
                return l.length > 0 && (a = St(a, l)), j(a, e.shape);
            },
            b: () => {
                let a = n;
                const l = Ae(s.shape, r);
                return l.length > 0 && (a = St(a, l)), j(le(a), s.shape);
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const qD = {
    kernelName: Eu,
    inputsToSave: ['x'],
    gradFunc: (n, t, e) => {
        const [s] = t,
            r = s.shape.slice(),
            { axis: o } = e;
        Bt(o, s.shape).forEach((c) => {
            r[c] = 1;
        });
        const a = j(n, r),
            l = U(a, xn(s.shape, 'float32'));
        return { x: () => l };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const KD = {
    kernelName: Xa,
    inputsToSave: ['x'],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => Et(n, te(Mu(e))) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const XD = {
    kernelName: Ya,
    outputsToSave: [!0],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => U(kt(At(1), te(e)), n) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const YD = {
    kernelName: Za,
    inputsToSave: ['x'],
    gradFunc: (n, t, e) => {
        const [s] = t,
            { reps: r } = e;
        return {
            x: () => {
                let i = jt(s);
                if (s.rank === 1)
                    for (let a = 0; a < r[0]; ++a)
                        i = ct(i, Gt(n, [a * s.shape[0]], [s.shape[0]]));
                else if (s.rank === 2)
                    for (let a = 0; a < r[0]; ++a)
                        for (let l = 0; l < r[1]; ++l)
                            i = ct(
                                i,
                                Gt(
                                    n,
                                    [a * s.shape[0], l * s.shape[1]],
                                    [s.shape[0], s.shape[1]]
                                )
                            );
                else if (s.rank === 3)
                    for (let a = 0; a < r[0]; ++a)
                        for (let l = 0; l < r[1]; ++l)
                            for (let c = 0; c < r[2]; ++c)
                                i = ct(
                                    i,
                                    Gt(
                                        n,
                                        [
                                            a * s.shape[0],
                                            l * s.shape[1],
                                            c * s.shape[2],
                                        ],
                                        [s.shape[0], s.shape[1], s.shape[2]]
                                    )
                                );
                else if (s.rank === 4)
                    for (let a = 0; a < r[0]; ++a)
                        for (let l = 0; l < r[1]; ++l)
                            for (let c = 0; c < r[2]; ++c)
                                for (let u = 0; u < r[3]; ++u)
                                    i = ct(
                                        i,
                                        Gt(
                                            n,
                                            [
                                                a * s.shape[0],
                                                l * s.shape[1],
                                                c * s.shape[2],
                                                u * s.shape[3],
                                            ],
                                            [
                                                s.shape[0],
                                                s.shape[1],
                                                s.shape[2],
                                                s.shape[3],
                                            ]
                                        )
                                    );
                else
                    throw new Error(
                        `Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`
                    );
                return i;
            },
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const ZD = {
    kernelName: Vo,
    gradFunc: (n, t, e) => {
        const s = e,
            { perm: r } = s,
            o = Tr(r);
        return { x: () => Ht(n, o) };
    },
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const JD = {
    kernelName: Ou,
    gradFunc: (n, t, e) => {
        const s = e,
            { axis: r } = s;
        return { value: () => un(n, r) };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const QD = {
    kernelName: Fu,
    inputsToSave: ['segmentIds'],
    gradFunc: (n, t) => {
        const [e] = t;
        return { x: () => tO(n, e) };
    },
};
function tO(n, t) {
    const e = Js(t, jt(t)),
        s = il(n, e);
    let r = Er(t, At(0, 'int32'));
    const o = s.rank - r.rank;
    for (let a = 0; a < o; ++a) r = Qe(r, a + 1);
    r = Es(r, xn(s.shape, 'bool'));
    const i = jt(s);
    return qe(r, s, i);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const eO = { kernelName: Lu, gradFunc: (n) => ({ x: () => jt(n) }) };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const nO = [
    w1,
    QA,
    tR,
    eR,
    nR,
    sR,
    rR,
    oR,
    iR,
    aR,
    lR,
    cR,
    dR,
    mR,
    gR,
    yR,
    bR,
    xR,
    wR,
    vR,
    kR,
    SR,
    CR,
    IR,
    TR,
    ER,
    _R,
    AR,
    RR,
    DR,
    SD,
    OR,
    FR,
    LR,
    PR,
    zR,
    MR,
    BR,
    VR,
    WR,
    UR,
    GR,
    HR,
    jR,
    qR,
    KR,
    XR,
    YR,
    ZR,
    tD,
    iy,
    iy,
    eD,
    rD,
    aD,
    lD,
    cD,
    uD,
    hD,
    dD,
    pD,
    fD,
    mD,
    gD,
    yD,
    ay,
    ay,
    bD,
    xD,
    kD,
    ID,
    CD,
    $D,
    ND,
    TD,
    ED,
    _D,
    AD,
    RD,
    DD,
    OD,
    FD,
    LD,
    PD,
    zD,
    BD,
    MD,
    VD,
    ly,
    ly,
    cy,
    cy,
    WD,
    GD,
    UD,
    HD,
    jD,
    qD,
    KD,
    XD,
    YD,
    ZD,
    JD,
    QD,
    eO,
];
for (const n of nO) KI(n);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.abs = function () {
    return this.throwIfDisposed(), Ce(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.acos = function () {
    return this.throwIfDisposed(), x0(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.acosh = function () {
    return this.throwIfDisposed(), w0(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.add = function (n) {
    return this.throwIfDisposed(), ct(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.all = function (n, t) {
    return this.throwIfDisposed(), Sf(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.any = function (n, t) {
    return this.throwIfDisposed(), ac(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.argMax = function (n) {
    return this.throwIfDisposed(), Zo(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.argMin = function (n) {
    return this.throwIfDisposed(), v0(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.asScalar = function () {
    return (
        this.throwIfDisposed(),
        _(this.size === 1, () => 'The array must have only 1 element.'),
        j(this, [])
    );
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.asType = function (n) {
    return this.throwIfDisposed(), bt(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.as1D = function () {
    return this.throwIfDisposed(), j(this, [this.size]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.as2D = function (n, t) {
    return this.throwIfDisposed(), j(this, [n, t]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.as3D = function (n, t, e) {
    return this.throwIfDisposed(), j(this, [n, t, e]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.as4D = function (n, t, e, s) {
    return this.throwIfDisposed(), j(this, [n, t, e, s]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.as5D = function (n, t, e, s, r) {
    return this.throwIfDisposed(), j(this, [n, t, e, s, r]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.asin = function () {
    return this.throwIfDisposed(), k0(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.asinh = function () {
    return this.throwIfDisposed(), S0(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.atan = function () {
    return this.throwIfDisposed(), I0(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.atan2 = function (n) {
    return this.throwIfDisposed(), C0(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.atanh = function () {
    return this.throwIfDisposed(), $0(this);
};
it().prototype.avgPool = function (n, t, e, s) {
    return this.throwIfDisposed(), zu(this, n, t, e, s);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.batchToSpaceND = function (n, t) {
    return this.throwIfDisposed(), Bu(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.batchNorm = function (n, t, e, s, r) {
    return this.throwIfDisposed(), el(this, n, t, e, s, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.broadcastTo = function (n) {
    return this.throwIfDisposed(), Go(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.cast = function (n) {
    return this.throwIfDisposed(), bt(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.ceil = function () {
    return this.throwIfDisposed(), R0(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.clipByValue = function (n, t) {
    return this.throwIfDisposed(), kn(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.concat = function (n, t) {
    return (
        this.throwIfDisposed(),
        n instanceof ce && (n = [n]),
        Ie([this, ...n], t)
    );
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.conv1d = function (n, t, e, s, r, o) {
    return this.throwIfDisposed(), Cf(this, n, t, e, s, r, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.conv2dTranspose = function (n, t, e, s, r) {
    return this.throwIfDisposed(), Nf(this, n, t, e, s, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.conv2d = function (n, t, e, s, r, o) {
    return this.throwIfDisposed(), mr(this, n, t, e, s, r, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.cos = function () {
    return this.throwIfDisposed(), Mu(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.cosh = function () {
    return this.throwIfDisposed(), Tf(this);
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.cumprod = function (n, t, e) {
    return this.throwIfDisposed(), lc(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.cumsum = function (n, t, e) {
    return this.throwIfDisposed(), Ef(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.depthToSpace = function (n, t) {
    return this.throwIfDisposed(), M0(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.depthwiseConv2d = function (n, t, e, s, r, o) {
    return this.throwIfDisposed(), nl(this, n, t, e, s, r, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.dilation2d = function (n, t, e, s, r) {
    return this.throwIfDisposed(), V0(this, n, t, e, s, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.divNoNan = function (n) {
    return this.throwIfDisposed(), W0(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.div = function (n) {
    return this.throwIfDisposed(), Et(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.dot = function (n) {
    return this.throwIfDisposed(), U0(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.elu = function () {
    return this.throwIfDisposed(), sl(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.equal = function (n) {
    return this.throwIfDisposed(), us(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.erf = function () {
    return this.throwIfDisposed(), G0(this);
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.euclideanNorm = function (n, t) {
    return this.throwIfDisposed(), q0(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.exp = function () {
    return this.throwIfDisposed(), Sn(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.expandDims = function (n) {
    return this.throwIfDisposed(), Qe(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.expm1 = function () {
    return this.throwIfDisposed(), K0(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.fft = function () {
    return this.throwIfDisposed(), eh(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.flatten = function () {
    return this.throwIfDisposed(), j(this, [this.size]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.floor = function () {
    return this.throwIfDisposed(), ol(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.floorDiv = function (n) {
    return this.throwIfDisposed(), kf(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.gather = function (n, t, e) {
    return this.throwIfDisposed(), il(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.greaterEqual = function (n) {
    return this.throwIfDisposed(), Er(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.greater = function (n) {
    return this.throwIfDisposed(), Tn(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.ifft = function () {
    return this.throwIfDisposed(), Ki(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.irfft = function () {
    return this.throwIfDisposed(), Zf(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.isFinite = function () {
    return this.throwIfDisposed(), X0(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.isInf = function () {
    return this.throwIfDisposed(), Y0(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.isNaN = function () {
    return this.throwIfDisposed(), Z0(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.leakyRelu = function (n) {
    return this.throwIfDisposed(), Wu(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.lessEqual = function (n) {
    return this.throwIfDisposed(), yo(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.less = function (n) {
    return this.throwIfDisposed(), Hi(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.localResponseNormalization = function (n, t, e, s) {
    return this.throwIfDisposed(), J0(this, n, t, e, s);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.logSigmoid = function () {
    return this.throwIfDisposed(), Q0(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.logSoftmax = function (n) {
    return this.throwIfDisposed(), Rf(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.logSumExp = function (n, t) {
    return this.throwIfDisposed(), Gu(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.log = function () {
    return this.throwIfDisposed(), Dn(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.log1p = function () {
    return this.throwIfDisposed(), Uu(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.logicalAnd = function (n) {
    return this.throwIfDisposed(), Es(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.logicalNot = function () {
    return this.throwIfDisposed(), Hu(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.logicalOr = function (n) {
    return this.throwIfDisposed(), Df(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.logicalXor = function (n) {
    return this.throwIfDisposed(), tx(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.matMul = function (n, t, e) {
    return this.throwIfDisposed(), Wt(this, n, t, e);
};
it().prototype.maxPool = function (n, t, e, s) {
    return this.throwIfDisposed(), ju(this, n, t, e, s);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.max = function (n, t) {
    return this.throwIfDisposed(), Yn(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.maximum = function (n) {
    return this.throwIfDisposed(), Js(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.mean = function (n, t) {
    return this.throwIfDisposed(), ge(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.min = function (n, t) {
    return this.throwIfDisposed(), Gi(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.minimum = function (n) {
    return this.throwIfDisposed(), ao(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.mirrorPad = function (n, t) {
    return this.throwIfDisposed(), nx(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.mod = function (n) {
    return this.throwIfDisposed(), sx(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.mul = function (n) {
    return this.throwIfDisposed(), U(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.neg = function () {
    return this.throwIfDisposed(), le(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.norm = function (n, t, e) {
    return this.throwIfDisposed(), rl(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.notEqual = function (n) {
    return this.throwIfDisposed(), ti(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.oneHot = function (n, t = 1, e = 0) {
    return this.throwIfDisposed(), Ku(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.onesLike = function () {
    return this.throwIfDisposed(), On(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.pad = function (n, t) {
    return this.throwIfDisposed(), _r(this, n, t);
};
it().prototype.pool = function (n, t, e, s, r, o) {
    return this.throwIfDisposed(), rx(this, n, t, e, s, r, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.pow = function (n) {
    return this.throwIfDisposed(), gr(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.prelu = function (n) {
    return this.throwIfDisposed(), Yu(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.prod = function (n, t) {
    return this.throwIfDisposed(), ox(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.reciprocal = function () {
    return this.throwIfDisposed(), ax(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.relu = function () {
    return this.throwIfDisposed(), Ds(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.relu6 = function () {
    return this.throwIfDisposed(), Uf(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.reshapeAs = function (n) {
    return this.throwIfDisposed(), j(this, n.shape);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.reshape = function (n) {
    return this.throwIfDisposed(), j(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.resizeBilinear = function (n, t, e) {
    return this.throwIfDisposed(), Ix(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.resizeNearestNeighbor = function (n, t, e) {
    return this.throwIfDisposed(), Cx(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.reverse = function (n) {
    return this.throwIfDisposed(), Jn(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.rfft = function () {
    return this.throwIfDisposed(), nh(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.round = function () {
    return this.throwIfDisposed(), Gf(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.rsqrt = function () {
    return this.throwIfDisposed(), Hf(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.selu = function () {
    return this.throwIfDisposed(), jf(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.separableConv2d = function (n, t, e, s, r, o) {
    return this.throwIfDisposed(), qf(this, n, t, e, s, r, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.sigmoid = function () {
    return this.throwIfDisposed(), Ss(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.sign = function () {
    return this.throwIfDisposed(), lx(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.sin = function () {
    return this.throwIfDisposed(), Kf(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.sinh = function () {
    return this.throwIfDisposed(), Xf(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.slice = function (n, t) {
    return this.throwIfDisposed(), Gt(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.softmax = function (n) {
    return this.throwIfDisposed(), th(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.softplus = function () {
    return this.throwIfDisposed(), mi(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.spaceToBatchND = function (n, t) {
    return this.throwIfDisposed(), Xu(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.split = function (n, t) {
    return this.throwIfDisposed(), wn(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.sqrt = function () {
    return this.throwIfDisposed(), Xe(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.square = function () {
    return this.throwIfDisposed(), te(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.squaredDifference = function (n) {
    return this.throwIfDisposed(), Jf(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.squeeze = function (n) {
    return this.throwIfDisposed(), wo(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.stack = function (n, t) {
    this.throwIfDisposed();
    const e = n instanceof ce ? [this, n] : [this, ...n];
    return un(e, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.step = function (n) {
    return this.throwIfDisposed(), gi(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.stridedSlice = function (n, t, e, s, r, o, i, a) {
    return this.throwIfDisposed(), cx(this, n, t, e, s, r, o, i, a);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.sub = function (n) {
    return this.throwIfDisposed(), kt(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.sum = function (n, t) {
    return this.throwIfDisposed(), St(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.tan = function () {
    return this.throwIfDisposed(), ux(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.tanh = function () {
    return this.throwIfDisposed(), Jo(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.tile = function (n) {
    return this.throwIfDisposed(), jn(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.toBool = function () {
    return this.throwIfDisposed(), bt(this, 'bool');
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.toFloat = function () {
    return this.throwIfDisposed(), bt(this, 'float32');
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.toInt = function () {
    return this.throwIfDisposed(), bt(this, 'int32');
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.topk = function (n, t) {
    return this.throwIfDisposed(), px(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.transpose = function (n) {
    return this.throwIfDisposed(), Ht(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.unique = function (n) {
    return this.throwIfDisposed(), fx(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.unsortedSegmentSum = function (n, t) {
    return this.throwIfDisposed(), em(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.unstack = function (n) {
    return this.throwIfDisposed(), Qn(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.where = function (n, t) {
    return this.throwIfDisposed(), qe(n, this, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ it().prototype.zerosLike = function () {
    return this.throwIfDisposed(), jt(this);
};
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ class bs extends Error {
    constructor(t) {
        super(t), Object.setPrototypeOf(this, bs.prototype);
    }
}
class qn extends Error {
    constructor(t) {
        super(t), Object.setPrototypeOf(this, qn.prototype);
    }
}
class H extends Error {
    constructor(t) {
        super(t), Object.setPrototypeOf(this, H.prototype);
    }
}
class Ft extends Error {
    constructor(t) {
        super(t), Object.setPrototypeOf(this, Ft.prototype);
    }
}
class Pm extends Error {
    constructor(t) {
        super(t), Object.setPrototypeOf(this, Pm.prototype);
    }
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ class k1 {
    constructor(t) {
        (this.maxEntries = t || 100), (this.cache = new Map());
    }
    get(t) {
        let e;
        return (
            this.cache.has(t) &&
                ((e = this.cache.get(t)),
                this.cache.delete(t),
                this.cache.set(t, e)),
            e
        );
    }
    put(t, e) {
        if (this.cache.has(t)) this.cache.delete(t);
        else if (this.cache.size >= this.maxEntries) {
            const s = this.cache.keys().next().value;
            this.cache.delete(s);
        }
        this.cache.set(t, e);
    }
    getMaxEntries() {
        return this.maxEntries;
    }
    setMaxEntries(t) {
        if (t < 0)
            throw new Error(
                `The maxEntries of LRU caches must be at least 0, but got ${t}.`
            );
        if (this.maxEntries > t)
            for (let e = 0; e < this.maxEntries - t; e++) {
                const s = this.cache.keys().next().value;
                this.cache.delete(s);
            }
        this.maxEntries = t;
    }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function co(n, t) {
    if (Array.isArray(n)) {
        let e = [];
        for (let s = 0; s < t; s++) e = e.concat(n);
        return e;
    } else {
        const e = new Array(t);
        return e.fill(n), e;
    }
}
function xs(n, t) {
    if (!n) throw new Pm(t);
}
function uy(n, t) {
    let e = 0;
    for (const s of n) s === t && e++;
    return e;
}
function an(n) {
    return n.length === 1 ? n[0] : n;
}
function Qt(n) {
    return Array.isArray(n) ? n : [n];
}
function Bs(n) {
    const e = n
        .replace(/(.)([A-Z][a-z0-9]+)/g, '$1_$2')
        .replace(/([a-z])([A-Z])/g, '$1_$2')
        .toLowerCase();
    return e[0] !== '_' ? e : 'private' + e;
}
function Ur(n) {
    return n.length <= 1 || n.indexOf('_') === -1
        ? n
        : n.replace(/[_]+(\w|$)/g, (t, e) => e.toUpperCase());
}
let Pn = {};
function zm(n) {
    if (n == null) return null;
    const t = {};
    return (t.className = n.getClassName()), (t.config = n.getConfig()), t;
}
function Ed(n) {
    if (!(n == null || typeof n != 'object'))
        if (Array.isArray(n)) n.forEach((t) => Ed(t));
        else {
            const t = Object.keys(n);
            for (const e of t) {
                const s = n[e];
                s != null &&
                    typeof s == 'object' &&
                    (!Array.isArray(s) &&
                    s.type === 'ndarray' &&
                    typeof s.value == 'number'
                        ? (n[e] = s.value)
                        : Ed(s));
            }
        }
}
function ul(n, t = {}, e = {}, s = 'object', r = !1) {
    if (typeof n == 'string') {
        const o = n;
        let i;
        if (o in e) i = e[o];
        else if (o in Pn) i = Pn[o];
        else if (((i = t[o]), i == null))
            throw new H(`Unknown ${s}: ${n}. This may be due to one of the following reasons:
1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
        return i;
    } else {
        const o = n;
        if (o.className == null || o.config == null)
            throw new H(`${s}: Improper config format: ${JSON.stringify(o)}.
'className' and 'config' must set.`);
        const i = o.className;
        let a, l;
        if (
            (i in e
                ? ([a, l] = e[i])
                : i in Pn
                ? ([a, l] = Pn.className)
                : i in t && ([a, l] = t[i]),
            a == null)
        )
            throw new H(`Unknown ${s}: ${i}. This may be due to one of the following reasons:
1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
        if (l != null) {
            const c = {};
            for (const p of Object.keys(Pn)) c[p] = Pn[p];
            for (const p of Object.keys(e)) c[p] = e[p];
            const u = o.config;
            u.customObjects = c;
            const h = Object.assign({}, Pn);
            for (const p of Object.keys(e)) Pn[p] = e[p];
            Ed(o.config);
            const d = l(a, o.config, e, r);
            return (Pn = Object.assign({}, h)), d;
        } else {
            const c = Object.assign({}, Pn);
            for (const h of Object.keys(e)) Pn[h] = e[h];
            const u = new a(o.config);
            return (Pn = Object.assign({}, c)), u;
        }
    }
}
function sO(n, t) {
    return n < t ? -1 : n > t ? 1 : 0;
}
function Nl(n, t) {
    return -1 * sO(n, t);
}
function cr(n) {
    if (n == null) return n;
    const t = [];
    for (const e of n) t.indexOf(e) === -1 && t.push(e);
    return t;
}
function rO(n) {
    if (n == null) throw new H(`Invalid value in obj: ${JSON.stringify(n)}`);
    for (const t in n) if (n.hasOwnProperty(t)) return !1;
    return !0;
}
function ko(n, t, e) {
    if (e != null && n.indexOf(e) < 0)
        throw new H(
            `${e} is not a valid ${t}.  Valid values are ${n} or null/undefined.`
        );
}
function Bm(n, t, e = 0, s = 1 / 0) {
    return (
        xs(e >= 0),
        xs(s >= e),
        Array.isArray(n) &&
            n.length >= e &&
            n.length <= s &&
            n.every((r) => typeof r === t)
    );
}
function Fe(n, t) {
    Array.isArray(n)
        ? (_(n.length > 0, () => `${t} is unexpectedly an empty array.`),
          n.forEach((e, s) => Fe(e, `element ${s + 1} of ${t}`)))
        : _(
              Number.isInteger(n) && n > 0,
              () => `Expected ${t} to be a positive integer, but got ${S1(n)}.`
          );
}
function S1(n) {
    return n === null
        ? 'null'
        : Array.isArray(n)
        ? '[' + n.map((t) => S1(t)).join(',') + ']'
        : typeof n == 'string'
        ? `"${n}"`
        : `${n}`;
}
function oO(n, t, e) {
    let s = e != null ? e() : on(),
        r;
    return (...i) => {
        const a = e != null ? e() : on();
        return a - s < t || ((s = a), (r = n(...i))), r;
    };
}
function I1(n) {
    return n === 'relu'
        ? 'relu'
        : n === 'linear'
        ? 'linear'
        : n === 'elu'
        ? 'elu'
        : null;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ let iO = 0;
function C1() {
    return iO++;
}
const Tl = {};
function hh(n = '') {
    return n in Tl || (Tl[n] = 0), (Tl[n] += 1), n + Tl[n].toString();
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ const aO = ['channelsFirst', 'channelsLast'],
    lO = ['nearest', 'bilinear'],
    cO = ['valid', 'same', 'causal'],
    uO = ['max', 'avg'],
    hO = ['sum', 'mul', 'concat', 'ave'];
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ const Ro = new Map();
function ve(n) {
    ko(aO, 'DataFormat', n);
}
function dO(n) {
    ko(lO, 'InterpolationFormat', n);
}
function Ln(n) {
    ko(cO, 'PaddingMode', n);
}
function $1(n) {
    ko(uO, 'PoolMode', n);
}
const Vi = [],
    hy = '/';
function Yr(n, t) {
    Vi.push(n);
    try {
        const e = t();
        return Vi.pop(), e;
    } catch (e) {
        throw (Vi.pop(), e);
    }
}
function pO() {
    return Vi.length === 0 ? '' : Vi.join(hy) + hy;
}
function N1(n) {
    if (!E1(n)) throw new Error("Not a valid tensor name: '" + n + "'");
    return pO() + n;
}
function T1(n) {
    if (!E1(n)) throw new Error("Not a valid tensor name: '" + n + "'");
    Ro.has(n) || Ro.set(n, 0);
    const t = Ro.get(n);
    if ((Ro.set(n, Ro.get(n) + 1), t > 0)) {
        const e = `${n}_${t}`;
        return Ro.set(e, 1), e;
    } else return n;
}
const fO = new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);
function E1(n) {
    return !!n.match(fO);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function mO(n) {
    return n === parseInt(n.toString(), 10);
}
function ur(n, t, e) {
    t == null && (t = 0), e == null && (e = n.length);
    let s = 1;
    for (let r = t; r < e; ++r) s *= n[r];
    return s;
}
function ni(n) {
    if (n.length === 0) return Number.NaN;
    let t = Number.POSITIVE_INFINITY;
    for (let e = 0; e < n.length; e++) {
        const s = n[e];
        s < t && (t = s);
    }
    return t;
}
function yr(n) {
    if (n.length === 0) return Number.NaN;
    let t = Number.NEGATIVE_INFINITY;
    for (let e = 0; e < n.length; e++) {
        const s = n[e];
        s > t && (t = s);
    }
    return t;
}
function hs(n, t) {
    if (t < n) throw new H(`end (${t}) < begin (${n}) is forbidden.`);
    const e = [];
    for (let s = n; s < t; ++s) e.push(s);
    return e;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ let Mh;
function $e() {
    return Mh == null && (Mh = ZC().epsilon()), Mh;
}
function ds() {
    return 'channelsLast';
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function Cs(n, t) {
    return bt(n, t);
}
function hl(n, t = -1) {
    const e = n.shape.slice();
    return t < 0 && (t = e.length + t + 1), e.splice(t, 0, 1), j(n, e);
}
function gO(n, t) {
    return Y(() => {
        if (n.shape.length !== 2)
            throw new H(
                `repeat() expects a rank-2 tensor, but received a rank-${n.shape.length} tensor.`
            );
        const e = hl(n, 1);
        return _d(e, [1, t, 1]);
    });
}
function yO(n) {
    const t = [ur(n.shape)];
    return j(n, t);
}
function bO(n) {
    if (n.rank <= 1)
        throw new H(
            `batchFlatten requires a minimum rank of 2. Got rank: ${n.rank}.`
        );
    const t = [n.shape[0], ur(n.shape, 1)];
    return j(n, t);
}
function Zr(n, t, e) {
    return Y(() => {
        switch (n.rank) {
            case 1:
                return Ju(n, t, e);
            case 2:
                return Yf(n, [t, 0], [e, n.shape[1]]);
            case 3:
                return Qu(n, [t, 0, 0], [e, n.shape[1], n.shape[2]]);
            case 4:
                return qi(
                    n,
                    [t, 0, 0, 0],
                    [e, n.shape[1], n.shape[2], n.shape[3]]
                );
            case 5:
                return Gt(
                    n,
                    [t, 0, 0, 0, 0],
                    [e, n.shape[1], n.shape[2], n.shape[3], n.shape[4]]
                );
            case 6:
                return Gt(
                    n,
                    [t, 0, 0, 0, 0, 0],
                    [
                        e,
                        n.shape[1],
                        n.shape[2],
                        n.shape[3],
                        n.shape[4],
                        n.shape[5],
                    ]
                );
            default:
                throw new H(
                    `sliceAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`
                );
        }
    });
}
function Vh(n, t, e) {
    return Y(() => {
        switch (n.rank) {
            case 1:
                return Ju(n, t, e);
            case 2:
                return Yf(n, [0, t], [n.shape[0], e]);
            case 3:
                return Qu(n, [0, 0, t], [n.shape[0], n.shape[1], e]);
            case 4:
                return qi(
                    n,
                    [0, 0, 0, t],
                    [n.shape[0], n.shape[1], n.shape[2], e]
                );
            default:
                throw new H(
                    `sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`
                );
        }
    });
}
function El(n, t, e, s) {
    return Y(() => {
        switch (n.rank) {
            case 1:
                return Ju(n, t, e);
            case 2:
                switch (s) {
                    case 1:
                        return Zr(n, t, e);
                    case 2:
                        return Vh(n, t, e);
                    default:
                        throw new H(
                            `The axis is not within the rank of the tensor ${s}`
                        );
                }
            case 3:
                switch (s) {
                    case 1:
                        return Zr(n, t, e);
                    case 2:
                        return Qu(n, [0, t, 0], [n.shape[0], e, n.shape[2]]);
                    case 3:
                        return Vh(n, t, e);
                    default:
                        throw new H(
                            `The axis is not within the rank of the tensor ${s}`
                        );
                }
            case 4:
                switch (s) {
                    case 1:
                        return Zr(n, t, e);
                    case 2:
                        return qi(
                            n,
                            [0, t, 0, 0],
                            [n.shape[0], e, n.shape[2], n.shape[3]]
                        );
                    case 3:
                        return qi(
                            n,
                            [0, 0, t, 0],
                            [n.shape[0], n.shape[1], e, n.shape[3]]
                        );
                    case 4:
                        return Vh(n, t, e);
                    default:
                        throw new H(
                            `The axis is not within the rank of the tensor ${s}`
                        );
                }
            default:
                throw new H(
                    `sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`
                );
        }
    });
}
function Mm(n, t = -1) {
    let e;
    return (
        t < 0 && ((e = n[0].rank), e !== 0 ? (t = e) : (t = 0)),
        t === n[0].rank && (t = -1),
        Ie(n, t)
    );
}
function dy(n, t) {
    switch (n.rank) {
        case 1:
            return D0([n, t]);
        case 2:
            return O0([n, t], 0);
        case 3:
            return F0([n, t], 0);
        case 4:
            return L0([n, t], 0);
        default:
            throw new H(
                `concatAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`
            );
    }
}
function _d(n, t) {
    if ((Array.isArray(t) || (t = [t]), n.rank !== t.length))
        throw new H(
            `The length of input n (${t.length}) does not match the number of dimensions in input x (${n.rank})`
        );
    return jn(n, t);
}
function dh(n, t = 0, e = 1, s, r) {
    return Wf(n, t, e, s, r);
}
function $s(n, t, e, s) {
    if (n.rank < 2 || t.rank < 2)
        throw new Ft(
            `dot requires both inputs to be rank >= 2 but got x shape = ${n.shape} and y shape = ${t.shape}`
        );
    if (t.rank >= 3) {
        const r = n.shape.slice(-1)[0],
            o = t.shape.slice(-2)[0];
        if (r !== o)
            throw new Ft(
                `If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${n.shape} and  y shape = ${t.shape}`
            );
    }
    if (n.rank === 2 && t.rank === 2)
        return Cd({
            a: n,
            b: t,
            transposeA: !1,
            transposeB: !1,
            bias: s ? Ad(n.rank, s, ds()) : null,
            activation: e,
        });
    {
        const r = n.shape.slice(),
            o = r.pop();
        n = j(n, [-1, o]);
        const i = t.shape.slice(),
            a = i.pop(),
            l = i.pop(),
            c = [...i, a],
            u = Array.from({ length: t.rank }, (f, m) =>
                m === 0 ? t.rank - 2 : m <= t.rank - 2 ? m - 1 : m
            );
        t = j(Ht(t, u), [l, -1]);
        const h = [...r, ...c];
        return j(
            Cd({
                a: n,
                b: t,
                transposeA: !1,
                transposeB: !1,
                bias: s ? Ad(n.rank, s, ds()) : null,
                activation: e,
            }),
            h
        );
    }
}
function _1(n, t, e) {
    return Y(
        () => (
            Array.isArray(t) ? (t = je(t, 'int32')) : (t = bt(t, 'int32')),
            il(n, t, e)
        )
    );
}
function dl(n) {
    return U(n, n);
}
function Ad(n, t, e) {
    const s = t.shape;
    if (t.rank !== 1 && t.rank !== n)
        throw new H(
            `Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${n}`
        );
    if (n === 5) {
        if (e === 'channelsFirst')
            return s.length === 1
                ? j(t, [1, s[0], 1, 1, 1])
                : j(t, [1, s[3], s[0], s[1], s[2]]);
        if (e === 'channelsLast')
            return s.length === 1
                ? j(t, [1, 1, 1, 1, s[0]])
                : j(t, [1].concat(s));
    } else if (n === 4) {
        if (e === 'channelsFirst')
            return s.length === 1
                ? j(t, [1, s[0], 1, 1])
                : j(t, [1, s[2], s[0], s[1]]);
        if (e === 'channelsLast')
            return s.length === 1 ? j(t, [1, 1, 1, s[0]]) : j(t, [1].concat(s));
    } else if (n === 3) {
        if (e === 'channelsFirst')
            return s.length === 1 ? j(t, [1, s[0], 1]) : j(t, [1, s[1], s[0]]);
        if (e === 'channelsLast')
            return s.length === 1 ? j(t, [1, 1, s[0]]) : j(t, [1].concat(s));
    } else if (n < 3) return t;
    throw new H(`Unsupported input rank by biasAdd: ${t.rank}`);
}
function gs(n, t, e) {
    return Y(() => (e == null && (e = ds()), ve(e), ct(n, Ad(n.rank, t, e))));
}
function xO(n, t = 1) {
    if (t !== 1)
        throw new Ft(
            `Support for alpha values other than 1 (${t}) is not implemented yet.`
        );
    return sl(n);
}
function wO(n) {
    return Y(() => Et(n, ct(Ce(n), 1)));
}
function A1(n, t, e, s) {
    return Y(() => yx(n, t, e, s));
}
function vO(n) {
    return Y(() => {
        const t = ct(0.5, U(0.2, n));
        return kn(t, 0, 1);
    });
}
function pl(n, t, e = !1) {
    return e ? n() : t();
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ const kO = ['fanIn', 'fanOut', 'fanAvg'],
    SO = ['normal', 'uniform', 'truncatedNormal'];
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function IO(n) {
    ko(kO, 'FanMode', n);
}
function CO(n) {
    ko(SO, 'Distribution', n);
}
class es extends bi {
    fromConfigUsesCustomObjects() {
        return !1;
    }
    getConfig() {
        return {};
    }
}
class R1 extends es {
    apply(t, e) {
        return Se(t, e);
    }
}
R1.className = 'Zeros';
ut(R1);
class Vm extends es {
    apply(t, e) {
        return xn(t, e);
    }
}
Vm.className = 'Ones';
ut(Vm);
class D1 extends es {
    constructor(t) {
        if ((super(), typeof t != 'object'))
            throw new H(
                `Expected argument of type ConstantConfig but got ${t}`
            );
        if (t.value === void 0)
            throw new H(`config must have value set but got ${t}`);
        this.value = t.value;
    }
    apply(t, e) {
        return Y(() => U(At(this.value), xn(t, e)));
    }
    getConfig() {
        return { value: this.value };
    }
}
D1.className = 'Constant';
ut(D1);
class O1 extends es {
    constructor(t) {
        super(),
            (this.DEFAULT_MINVAL = -0.05),
            (this.DEFAULT_MAXVAL = 0.05),
            (this.minval = t.minval || this.DEFAULT_MINVAL),
            (this.maxval = t.maxval || this.DEFAULT_MAXVAL),
            (this.seed = t.seed);
    }
    apply(t, e) {
        return xo(t, this.minval, this.maxval, e, this.seed);
    }
    getConfig() {
        return { minval: this.minval, maxval: this.maxval, seed: this.seed };
    }
}
O1.className = 'RandomUniform';
ut(O1);
class F1 extends es {
    constructor(t) {
        super(),
            (this.DEFAULT_MEAN = 0),
            (this.DEFAULT_STDDEV = 0.05),
            (this.mean = t.mean || this.DEFAULT_MEAN),
            (this.stddev = t.stddev || this.DEFAULT_STDDEV),
            (this.seed = t.seed);
    }
    apply(t, e) {
        if (((e = e || 'float32'), e !== 'float32' && e !== 'int32'))
            throw new Ft(`randomNormal does not support dType ${e}.`);
        return dh(t, this.mean, this.stddev, e, this.seed);
    }
    getConfig() {
        return { mean: this.mean, stddev: this.stddev, seed: this.seed };
    }
}
F1.className = 'RandomNormal';
ut(F1);
class L1 extends es {
    constructor(t) {
        super(),
            (this.DEFAULT_MEAN = 0),
            (this.DEFAULT_STDDEV = 0.05),
            (this.mean = t.mean || this.DEFAULT_MEAN),
            (this.stddev = t.stddev || this.DEFAULT_STDDEV),
            (this.seed = t.seed);
    }
    apply(t, e) {
        if (((e = e || 'float32'), e !== 'float32' && e !== 'int32'))
            throw new Ft(`truncatedNormal does not support dType ${e}.`);
        return tm(t, this.mean, this.stddev, e, this.seed);
    }
    getConfig() {
        return { mean: this.mean, stddev: this.stddev, seed: this.seed };
    }
}
L1.className = 'TruncatedNormal';
ut(L1);
class P1 extends es {
    constructor(t) {
        super(), (this.gain = t.gain != null ? t.gain : 1);
    }
    apply(t, e) {
        return Y(() => {
            if (t.length !== 2 || t[0] !== t[1])
                throw new H(
                    'Identity matrix initializer can only be used for 2D square matrices.'
                );
            return U(this.gain, Af(t[0]));
        });
    }
    getConfig() {
        return { gain: this.gain };
    }
}
P1.className = 'Identity';
ut(P1);
function $O(n, t = 'channelsLast') {
    let e, s;
    if ((ve(t), n.length === 2)) (e = n[0]), (s = n[1]);
    else if ([3, 4, 5].indexOf(n.length) !== -1) {
        if (t === 'channelsFirst') {
            const r = ur(n, 2);
            (e = n[1] * r), (s = n[0] * r);
        } else if (t === 'channelsLast') {
            const r = ur(n, 0, n.length - 2);
            (e = n[n.length - 2] * r), (s = n[n.length - 1] * r);
        }
    } else {
        const r = ur(n);
        (e = Math.sqrt(r)), (s = Math.sqrt(r));
    }
    return [e, s];
}
class In extends es {
    constructor(t) {
        if ((super(), t.scale < 0))
            throw new H(`scale must be a positive float. Got: ${t.scale}`);
        (this.scale = t.scale == null ? 1 : t.scale),
            (this.mode = t.mode == null ? 'fanIn' : t.mode),
            IO(this.mode),
            (this.distribution =
                t.distribution == null ? 'normal' : t.distribution),
            CO(this.distribution),
            (this.seed = t.seed);
    }
    apply(t, e) {
        const s = $O(t),
            r = s[0],
            o = s[1];
        let i = this.scale;
        if (
            (this.mode === 'fanIn'
                ? (i /= Math.max(1, r))
                : this.mode === 'fanOut'
                ? (i /= Math.max(1, o))
                : (i /= Math.max(1, (r + o) / 2)),
            this.distribution === 'normal')
        ) {
            const a = Math.sqrt(i);
            if (((e = e || 'float32'), e !== 'float32' && e !== 'int32'))
                throw new Ft(
                    `${this.getClassName()} does not support dType ${e}.`
                );
            return tm(t, 0, a, e, this.seed);
        } else {
            const a = Math.sqrt(3 * i);
            return xo(t, -a, a, e, this.seed);
        }
    }
    getConfig() {
        return {
            scale: this.scale,
            mode: this.mode,
            distribution: this.distribution,
            seed: this.seed,
        };
    }
}
In.className = 'VarianceScaling';
ut(In);
class Wm extends In {
    constructor(t) {
        super({
            scale: 1,
            mode: 'fanAvg',
            distribution: 'uniform',
            seed: t == null ? null : t.seed,
        });
    }
    getClassName() {
        return In.className;
    }
}
Wm.className = 'GlorotUniform';
ut(Wm);
class Um extends In {
    constructor(t) {
        super({
            scale: 1,
            mode: 'fanAvg',
            distribution: 'normal',
            seed: t == null ? null : t.seed,
        });
    }
    getClassName() {
        return In.className;
    }
}
Um.className = 'GlorotNormal';
ut(Um);
class Gm extends In {
    constructor(t) {
        super({
            scale: 2,
            mode: 'fanIn',
            distribution: 'normal',
            seed: t == null ? null : t.seed,
        });
    }
    getClassName() {
        return In.className;
    }
}
Gm.className = 'HeNormal';
ut(Gm);
class Hm extends In {
    constructor(t) {
        super({
            scale: 2,
            mode: 'fanIn',
            distribution: 'uniform',
            seed: t == null ? null : t.seed,
        });
    }
    getClassName() {
        return In.className;
    }
}
Hm.className = 'HeUniform';
ut(Hm);
class jm extends In {
    constructor(t) {
        super({
            scale: 1,
            mode: 'fanIn',
            distribution: 'normal',
            seed: t == null ? null : t.seed,
        });
    }
    getClassName() {
        return In.className;
    }
}
jm.className = 'LeCunNormal';
ut(jm);
class qm extends In {
    constructor(t) {
        super({
            scale: 1,
            mode: 'fanIn',
            distribution: 'uniform',
            seed: t == null ? null : t.seed,
        });
    }
    getClassName() {
        return In.className;
    }
}
qm.className = 'LeCunUniform';
ut(qm);
class z1 extends es {
    constructor(t) {
        super(),
            (this.DEFAULT_GAIN = 1),
            (this.ELEMENTS_WARN_SLOW = 2e3),
            (this.gain = t.gain == null ? this.DEFAULT_GAIN : t.gain),
            (this.seed = t.seed);
    }
    apply(t, e) {
        return Y(() => {
            if (t.length < 2) throw new Ft('Shape must be at least 2D.');
            if (e !== 'int32' && e !== 'float32' && e !== void 0)
                throw new TypeError(`Unsupported data type ${e}.`);
            e = e;
            const s = rt(t.slice(0, -1)),
                r = t[t.length - 1],
                o = s * r;
            o > this.ELEMENTS_WARN_SLOW &&
                console.warn(
                    `Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${o}) elements: Slowness may result.`
                );
            const i = [Math.max(r, s), Math.min(r, s)],
                a = dh(i, 0, 1, e, this.seed),
                l = $x.qr(a, !1);
            let c = l[0];
            const h = l[1]
                .flatten()
                .stridedSlice(
                    [0],
                    [Math.min(r, s) * Math.min(r, s)],
                    [Math.min(r, s) + 1]
                );
            return (
                (c = U(c, h.sign())),
                s < r && (c = c.transpose()),
                U(At(this.gain), c.reshape(t))
            );
        });
    }
    getConfig() {
        return { gain: this.gain, seed: this.seed };
    }
}
z1.className = 'Orthogonal';
ut(z1);
const py = {
    constant: 'Constant',
    glorotNormal: 'GlorotNormal',
    glorotUniform: 'GlorotUniform',
    heNormal: 'HeNormal',
    heUniform: 'HeUniform',
    identity: 'Identity',
    leCunNormal: 'LeCunNormal',
    leCunUniform: 'LeCunUniform',
    ones: 'Ones',
    orthogonal: 'Orthogonal',
    randomNormal: 'RandomNormal',
    randomUniform: 'RandomUniform',
    truncatedNormal: 'TruncatedNormal',
    varianceScaling: 'VarianceScaling',
    zeros: 'Zeros',
};
function fy(n, t = {}) {
    return ul(n, Wn.getMap().classNameMap, t, 'initializer');
}
function fe(n) {
    return zm(n);
}
function ue(n) {
    if (typeof n == 'string') {
        const t = n in py ? py[n] : n;
        if (t === 'GlorotNormal') return new Um();
        if (t === 'GlorotUniform') return new Wm();
        if (t === 'HeNormal') return new Gm();
        if (t === 'HeUniform') return new Hm();
        if (t === 'LeCunNormal') return new jm();
        if (t === 'LeCunUniform') return new qm();
        {
            const e = {};
            return (e.className = t), (e.config = {}), fy(e);
        }
    } else return n instanceof es ? n : fy(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function Rd(n) {
    return Array.isArray(n) && Array.isArray(n[0]);
}
function cc(n) {
    return n.length === 0 ? [] : Array.isArray(n[0]) ? n : [n];
}
function Rt(n) {
    let t;
    if (Array.isArray(n)) {
        if (n.length !== 1)
            throw new H(`Expected Tensor length to be 1; got ${n.length}`);
        t = n[0];
    } else t = n;
    return t;
}
function Xt(n) {
    if (Array.isArray(n) && Array.isArray(n[0])) {
        if (n.length === 1) return (n = n), n[0];
        throw new H(`Expected exactly 1 Shape; got ${n.length}`);
    } else return n;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function uc(n) {
    let t = 0;
    for (const e of n)
        e.shape.length === 0
            ? (t += 1)
            : (t += e.shape.reduce((s, r) => s * r));
    return t;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ const my = 'Variable';
class NO {
    constructor(t, e = 'float32', s = my, r = !0, o = null) {
        (this.dtype = e ?? 'float32'),
            (this.shape = t.shape),
            (this.id = C1()),
            (s = s ?? my),
            (this.originalName = N1(s)),
            (this.name = T1(this.originalName)),
            (this.trainable_ = r),
            (this.constraint = o),
            (this.val = mx(t, this.trainable_, this.name, this.dtype));
    }
    read() {
        return this.assertNotDisposed(), this.val;
    }
    write(t) {
        return (
            this.assertNotDisposed(),
            TO(this.val, t),
            this.val.id !== t.id &&
                (this.val.assign(t),
                this.constraint != null &&
                    this.val.assign(this.constraint.apply(this.val))),
            this
        );
    }
    dispose() {
        this.assertNotDisposed(), this.val.dispose();
    }
    assertNotDisposed() {
        if (this.val.isDisposed)
            throw new Error(`LayersVariable ${this.name} is already disposed.`);
    }
    get trainable() {
        return this.trainable_;
    }
    set trainable(t) {
        (this.trainable_ = t), (this.val.trainable = t);
    }
}
function TO(n, t) {
    if (n.shape.toString() !== t.shape.toString())
        throw new Error(
            'Shape mismatch: ' +
                JSON.stringify(n.shape) +
                ' vs. ' +
                JSON.stringify(t.shape)
        );
}
function Dd(n) {
    return n.map((t) => t.read());
}
function Km(n) {
    n.forEach((t) => {
        t[0].write(t[1]);
    });
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ class Ne {
    constructor(t) {
        (this.dtype = t.dtype),
            (this.shape = t.shape),
            t.shape != null
                ? (this.ndim = t.shape.length)
                : (this.ndim = t.ndim),
            (this.maxNDim = t.maxNDim),
            (this.minNDim = t.minNDim),
            (this.axes = t.axes || {});
    }
}
class _s {
    constructor(t, e, s, r, o, i, a) {
        (this.dtype = t),
            (this.shape = e),
            (this.sourceLayer = s),
            (this.inputs = r),
            (this.callArgs = o),
            (this.outputTensorIndex = a),
            (this.id = C1()),
            i != null &&
                ((this.originalName = N1(i)),
                (this.name = T1(this.originalName))),
            (this.rank = e.length);
    }
}
let EO = 0;
class ph {
    constructor(t, e) {
        (this.callArgs = e),
            (this.id = EO++),
            (this.outboundLayer = t.outboundLayer),
            (this.inboundLayers = t.inboundLayers),
            (this.nodeIndices = t.nodeIndices),
            (this.tensorIndices = t.tensorIndices),
            (this.inputTensors = t.inputTensors),
            (this.outputTensors = t.outputTensors),
            (this.inputMasks = t.inputMasks),
            (this.outputMasks = t.outputMasks),
            (this.inputShapes = t.inputShapes),
            (this.outputShapes = t.outputShapes);
        for (const s of t.inboundLayers)
            s != null && s.outboundNodes.push(this);
        t.outboundLayer.inboundNodes.push(this);
    }
    getConfig() {
        const t = [];
        for (const e of this.inboundLayers)
            e != null ? t.push(e.name) : t.push(null);
        return {
            outboundLayer: this.outboundLayer ? this.outboundLayer.name : null,
            inboundLayers: t,
            nodeIndices: this.nodeIndices,
            tensorIndices: this.tensorIndices,
        };
    }
}
let _O = 0;
class Mt extends bi {
    constructor(t = {}) {
        super(),
            (this._callHook = null),
            (this._addedWeightNames = []),
            (this._stateful = !1),
            (this.id = _O++),
            (this.activityRegularizer = null),
            (this.inputSpec = null),
            (this.supportsMasking = !1),
            (this._trainableWeights = []),
            (this._nonTrainableWeights = []),
            (this._losses = []),
            (this._updates = []),
            (this._built = !1),
            (this.inboundNodes = []),
            (this.outboundNodes = []);
        let e = t.name;
        if (!e) {
            const s = this.getClassName();
            e = Bs(s) + '_' + hh(s);
        }
        if (
            ((this.name = e),
            (this.trainable_ = t.trainable == null ? !0 : t.trainable),
            t.inputShape != null || t.batchInputShape != null)
        ) {
            let s;
            if (t.batchInputShape != null) s = t.batchInputShape;
            else if (t.inputShape != null) {
                let o = null;
                t.batchSize != null && (o = t.batchSize),
                    (s = [o].concat(t.inputShape));
            }
            this.batchInputShape = s;
            let r = t.dtype;
            r == null && (r = t.inputDType),
                r == null && (r = 'float32'),
                (this.dtype = r);
        }
        t.weights != null
            ? (this.initialWeights = t.weights)
            : (this.initialWeights = null),
            (this._refCount = null),
            (this.fastWeightInitDuringBuild = !1);
    }
    static nodeKey(t, e) {
        return t.name + '_ib-' + e.toString();
    }
    getNodeAtIndex(t, e) {
        if (this.inboundNodes.length === 0)
            throw new qn(
                `The layer has never been called and thus has no defined ${e}.`
            );
        if (this.inboundNodes.length <= t)
            throw new H(
                `Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`
            );
        return this.inboundNodes[t];
    }
    getInputAt(t) {
        return an(this.getNodeAtIndex(t, 'input').inputTensors);
    }
    getOutputAt(t) {
        return an(this.getNodeAtIndex(t, 'output').outputTensors);
    }
    get input() {
        if (this.inboundNodes.length > 1)
            throw new bs(
                `Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`
            );
        if (this.inboundNodes.length === 0)
            throw new bs(
                `Layer ${this.name} is not connected, no input to return.`
            );
        return an(this.getNodeAtIndex(0, 'input').inputTensors);
    }
    get output() {
        if (this.inboundNodes.length === 0)
            throw new bs(`Layer ${this.name} has no inbound nodes.`);
        if (this.inboundNodes.length > 1)
            throw new bs(
                `Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`
            );
        return an(this.getNodeAtIndex(0, 'output').outputTensors);
    }
    get losses() {
        return this._losses;
    }
    calculateLosses() {
        return this.losses.map((t) => t());
    }
    get updates() {
        return this._updates;
    }
    get built() {
        return this._built;
    }
    set built(t) {
        this._built = t;
    }
    get trainable() {
        return this.trainable_;
    }
    set trainable(t) {
        this._trainableWeights.forEach((e) => (e.trainable = t)),
            (this.trainable_ = t);
    }
    get trainableWeights() {
        return this.trainable_
            ? this._trainableWeights.filter((t) => t.trainable)
            : [];
    }
    set trainableWeights(t) {
        this._trainableWeights = t;
    }
    get nonTrainableWeights() {
        return this.trainable
            ? this._trainableWeights
                  .filter((t) => !t.trainable)
                  .concat(this._nonTrainableWeights)
            : this._trainableWeights.concat(this._nonTrainableWeights);
    }
    set nonTrainableWeights(t) {
        this._nonTrainableWeights = t;
    }
    get weights() {
        return this.trainableWeights.concat(this.nonTrainableWeights);
    }
    get stateful() {
        return this._stateful;
    }
    resetStates() {
        if (!this.stateful)
            throw new Error(
                'Cannot call the resetStates() method of a non-stateful Layer object.'
            );
    }
    assertInputCompatibility(t) {
        const e = Qt(t);
        if (this.inputSpec == null || this.inputSpec.length === 0) return;
        const s = Qt(this.inputSpec);
        if (e.length !== s.length)
            throw new H(
                `Layer ${this.name} expects ${s.length} inputs, but it received ${e.length} input tensors. Input received: ${t}`
            );
        for (let r = 0; r < e.length; r++) {
            const o = e[r],
                i = s[r];
            if (i == null) continue;
            const a = o.rank;
            if (i.ndim != null && a !== i.ndim)
                throw new H(
                    `Input ${r} is incompatible with layer ${this.name}: expected ndim=${i.ndim}, found ndim=${a}`
                );
            if (i.maxNDim != null && a > i.maxNDim)
                throw new H(
                    `Input ${r} is incompatible with layer ${this.name}: expected max_ndim=${i.maxNDim}, found ndim=${a}`
                );
            if (i.minNDim != null && a < i.minNDim)
                throw new H(
                    `Input ${r} is incompatible with layer ${this.name}: expected min_ndim=${i.minNDim}, found ndim=${a}.`
                );
            if (i.dtype != null && o.dtype !== i.dtype)
                throw new H(
                    `Input ${r} is incompatible with layer ${this.name} : expected dtype=${i.dtype}, found dtype=${o.dtype}.`
                );
            if (i.axes) {
                const l = o.shape;
                for (const c in i.axes) {
                    const u = Number(c),
                        h = i.axes[c],
                        d = u >= 0 ? l[u] : l[l.length + u];
                    if (h != null && [h, null].indexOf(d) === -1)
                        throw new H(
                            `Input ${r} is incompatible with layer ${this.name}: expected axis ${u} of input shape to have value ${h} but got shape ${l}.`
                        );
                }
            }
            if (i.shape != null)
                for (let l = 0; l < i.shape.length; ++l) {
                    const c = i.shape[l],
                        u = o.shape[l];
                    if (c != null && u != null && c !== u)
                        throw new H(
                            `Input ${r} is incompatible with layer ${this.name}: expected shape=${i.shape}, found shape=${o.shape}.`
                        );
                }
        }
    }
    call(t, e) {
        return t;
    }
    invokeCallHook(t, e) {
        this._callHook != null && this._callHook(t, e);
    }
    setCallHook(t) {
        this._callHook = t;
    }
    clearCallHook() {
        this._callHook = null;
    }
    apply(t, e) {
        (e = e || {}), this.assertNotDisposed();
        const s = Qt(t),
            r = DO(t),
            o = OO(t);
        if (r === o)
            throw new H(
                'Arguments to apply() must be all SymbolicTensors or all Tensors'
            );
        return Yr(this.name, () => {
            if (!this.built) {
                this.assertInputCompatibility(t);
                const i = [];
                for (const a of Qt(t)) i.push(a.shape);
                this.build(an(i)),
                    (this.built = !0),
                    this.initialWeights && this.setWeights(this.initialWeights),
                    this._refCount === null && o && (this._refCount = 1);
            }
            if ((this.assertInputCompatibility(t), o)) {
                let i = this.call(t, e);
                this.supportsMasking && this.setMaskMetadata(t, i);
                const a = Qt(i),
                    l = [];
                for (let c of a)
                    s.indexOf(c) !== -1 && (c = c.clone()), l.push(c);
                if (((i = an(l)), this.activityRegularizer != null))
                    throw new Ft(
                        'Layer invocation in the presence of activity regularizer(s) is not supported yet.'
                    );
                return i;
            } else {
                const i = AO(t),
                    a = this.computeOutputShape(i);
                let l;
                const c = RO(t);
                if (
                    (this.warnOnIncompatibleInputShape(
                        Array.isArray(t) ? i[0] : i
                    ),
                    a != null && a.length > 0 && Array.isArray(a[0])
                        ? (l = a.map(
                              (u, h) =>
                                  new _s(c, u, this, Qt(t), e, this.name, h)
                          ))
                        : (l = new _s(c, a, this, Qt(t), e, this.name)),
                    this.addInboundNode(t, l, null, null, i, a, e),
                    this._refCount++,
                    this.activityRegularizer != null)
                )
                    throw new Ft(
                        'Layer invocation in the presence of activity regularizer(s) is not supported yet.'
                    );
                return l;
            }
        });
    }
    warnOnIncompatibleInputShape(t) {
        if (this.batchInputShape != null)
            if (t.length !== this.batchInputShape.length)
                console.warn(
                    `The rank of the input tensor provided (shape: ${JSON.stringify(
                        t
                    )}) does not match that of the batchInputShape (${JSON.stringify(
                        this.batchInputShape
                    )}) of the layer ${this.name}`
                );
            else {
                let e = !1;
                this.batchInputShape.forEach((s, r) => {
                    s != null && t[r] != null && t[r] !== s && (e = !0);
                }),
                    e &&
                        console.warn(
                            `The shape of the input tensor (${JSON.stringify(
                                t
                            )}) does not match the expectation of layer ${
                                this.name
                            }: ${JSON.stringify(this.batchInputShape)}`
                        );
            }
    }
    get outputShape() {
        if (this.inboundNodes == null || this.inboundNodes.length === 0)
            throw new bs(
                `The layer ${this.name} has never been called and thus has no defined output shape.`
            );
        const t = [];
        for (const e of this.inboundNodes) {
            const s = JSON.stringify(e.outputShapes);
            t.indexOf(s) === -1 && t.push(s);
        }
        if (t.length === 1) {
            const e = this.inboundNodes[0].outputShapes;
            return Array.isArray(e) && Array.isArray(e[0]) && e.length === 1
                ? e[0]
                : e;
        } else
            throw new bs(
                `The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`
            );
    }
    countParams() {
        if (!this.built)
            throw new qn(
                `You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`
            );
        return uc(this.weights);
    }
    build(t) {
        this.built = !0;
    }
    getWeights(t = !1) {
        return Dd(t ? this.trainableWeights : this.weights);
    }
    setWeights(t) {
        Y(() => {
            const e = this.weights;
            if (e.length !== t.length)
                throw new H(
                    `You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`
                );
            if (e.length === 0) return;
            const s = [],
                r = Dd(e);
            for (let o = 0; o < r.length; ++o) {
                const i = r[o],
                    a = e[o],
                    l = t[o];
                if (!Ut(i.shape, l.shape))
                    throw new H(
                        `Layer weight shape ${i.shape} not compatible with provided weight shape ${l.shape}`
                    );
                s.push([a, l]);
            }
            Km(s);
        });
    }
    addWeight(t, e, s, r, o, i, a, l) {
        if (this._addedWeightNames.indexOf(t) !== -1)
            throw new H(`Duplicate weight name ${t} for layer ${this.name}`);
        this._addedWeightNames.push(t),
            s == null && (s = 'float32'),
            this.fastWeightInitDuringBuild &&
                (r = l != null ? l() : ue('zeros'));
        const c = r.apply(e, s),
            u = new NO(c, s, t, i, a);
        return (
            c.dispose(),
            o != null && this.addLoss(() => o.apply(u.read())),
            i == null && (i = !0),
            i
                ? this._trainableWeights.push(u)
                : this._nonTrainableWeights.push(u),
            u
        );
    }
    setFastWeightInitDuringBuild(t) {
        this.fastWeightInitDuringBuild = t;
    }
    addLoss(t) {
        t == null ||
            (Array.isArray(t) && t.length === 0) ||
            ((t = Qt(t)),
            this._losses !== void 0 &&
                this._losses !== null &&
                this.losses.push(...t));
    }
    computeOutputShape(t) {
        return t;
    }
    computeMask(t, e) {
        if (!this.supportsMasking) {
            if (e != null)
                if (Array.isArray(e))
                    e.forEach((s) => {
                        if (s != null)
                            throw new TypeError(
                                `Layer ${this.name} does not support masking, but was passed an inputMask.`
                            );
                    });
                else
                    throw new TypeError(
                        `Layer ${this.name} does not support masking, but was passed an inputMask.`
                    );
            return null;
        }
        return e;
    }
    setMaskMetadata(t, e, s) {
        if (!this.supportsMasking) return;
        const r = this.computeMask(t, s);
        if (e instanceof Array && r instanceof Array) {
            if (e.length !== r.length)
                throw new Error(
                    `${this.name} outputs ${e.length} tensors but ${r.length} masks for those tensors`
                );
            for (let o = 0; o < e.length; o++) e[o].kerasMask = r[o];
        } else {
            if (r instanceof Array)
                throw new Error(
                    `{this.name} outputs a single tensor but ${r.length} masks`
                );
            if (e instanceof Array)
                throw new Error(
                    `{this.name} outputs ${e.length} tensors but only one mask`
                );
            e.kerasMask = r;
        }
    }
    addInboundNode(t, e, s, r, o, i, a = null) {
        const l = Qt(t);
        (e = Qt(e)), (s = Qt(s)), (r = Qt(r)), (o = cc(o)), (i = cc(i));
        const c = [],
            u = [],
            h = [];
        for (const d of l)
            c.push(d.sourceLayer), u.push(d.nodeIndex), h.push(d.tensorIndex);
        new ph(
            {
                outboundLayer: this,
                inboundLayers: c,
                nodeIndices: u,
                tensorIndices: h,
                inputTensors: l,
                outputTensors: e,
                inputMasks: s,
                outputMasks: r,
                inputShapes: o,
                outputShapes: i,
            },
            a
        );
        for (let d = 0; d < e.length; d++)
            (e[d].sourceLayer = this),
                (e[d].nodeIndex = this.inboundNodes.length - 1),
                (e[d].tensorIndex = d);
    }
    getConfig() {
        const t = { name: this.name, trainable: this.trainable };
        return (
            this.batchInputShape != null &&
                (t.batchInputShape = this.batchInputShape),
            this.dtype != null && (t.dtype = this.dtype),
            t
        );
    }
    disposeWeights() {
        return this.weights.forEach((t) => t.dispose()), this.weights.length;
    }
    assertNotDisposed() {
        if (this._refCount === 0)
            throw new Error(`Layer '${this.name}' is already disposed.`);
    }
    dispose() {
        if (!this.built)
            throw new Error(
                `Cannot dispose Layer ${this.name} because it has not been built yet.`
            );
        if (this._refCount === null)
            throw new Error(
                `Cannot dispose Layer ${this.name} because it has not been used yet.`
            );
        this.assertNotDisposed();
        let t = 0;
        return (
            --this._refCount === 0 && (t = this.disposeWeights()),
            { refCountAfterDispose: this._refCount, numDisposedVariables: t }
        );
    }
}
function AO(n) {
    n = Qt(n);
    const t = [];
    for (const e of n) t.push(e.shape);
    return an(t);
}
function RO(n) {
    return 'float32';
}
function B1(n, t, e) {
    if (
        ((t == null || (e != null && e > 0)) &&
            ((t = n.sourceLayer), (e = n.nodeIndex)),
        t.inboundNodes.length === 0)
    )
        return [n];
    {
        const s = t.inboundNodes[e];
        if (s.inboundLayers.length === 0) return s.inputTensors;
        {
            const r = [];
            for (let o = 0; o < s.inboundLayers.length; o++) {
                const i = s.inputTensors[o],
                    a = s.inboundLayers[o],
                    l = s.nodeIndices[o],
                    c = B1(i, a, l);
                for (const u of c) r.indexOf(u) === -1 && r.push(u);
            }
            return r;
        }
    }
}
function DO(n) {
    let t = !0;
    for (const e of Qt(n))
        if (!(e instanceof _s)) {
            t = !1;
            break;
        }
    return t;
}
function OO(n) {
    let t = !0;
    for (const e of Qt(n))
        if (e instanceof _s) {
            t = !1;
            break;
        }
    return t;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ class fl extends Mt {
    constructor(t) {
        if (
            (super({
                dtype: t.dtype,
                name: t.name != null ? t.name : hh('input').toString(),
            }),
            t.batchSize == null && (t.batchSize = null),
            t.sparse == null && (t.sparse = !1),
            (this.trainable = !1),
            (this.built = !0),
            (this.sparse = t.sparse),
            t.inputShape != null && t.batchInputShape != null)
        )
            throw new H(
                'Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.'
            );
        let e = t.batchInputShape;
        if (e == null) {
            if (t.inputShape == null)
                throw new H(
                    'An InputLayer should be passed either a `batchInputShape` or an `inputShape`.'
                );
            e = [t.batchSize].concat(t.inputShape);
        } else if (t.batchSize != null)
            throw new H(
                'Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.'
            );
        const s = t.dtype || 'float32';
        (this.batchInputShape = e),
            (this.dtype = s),
            (this.inputSpec = [{ shape: e }]);
        const r = new _s(
            this.dtype,
            this.batchInputShape,
            this,
            [],
            {},
            this.name
        );
        (r.nodeIndex = 0),
            (r.tensorIndex = 0),
            new ph({
                outboundLayer: this,
                inboundLayers: [],
                nodeIndices: [],
                tensorIndices: [],
                inputTensors: [r],
                outputTensors: [r],
                inputMasks: [null],
                outputMasks: [null],
                inputShapes: [e],
                outputShapes: [e],
            });
    }
    apply(t, e) {
        throw new H(
            `Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`
        );
    }
    dispose() {
        return {
            refCountAfterDispose: this._refCount,
            numDisposedVariables: 0,
        };
    }
    getConfig() {
        return {
            batchInputShape: this.batchInputShape,
            dtype: this.dtype,
            sparse: this.sparse,
            name: this.name,
        };
    }
}
fl.className = 'InputLayer';
ut(fl);
function FO(n) {
    if (n.batchShape == null && n.shape == null)
        throw new Error(
            'Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.'
        );
    if (n.batchShape != null && n.shape != null)
        throw new H(
            'Please provide either a `shape` or `batchShape` argument to Input, but not both.'
        );
    let t = n.batchShape;
    n.shape != null && t == null && (t = [null].concat(n.shape));
    let e = n.dtype;
    return (
        e == null && (e = 'float32'),
        new fl({ batchInputShape: t, name: n.name, dtype: e, sparse: n.sparse })
            .inboundNodes[0].outputTensors[0]
    );
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function LO(n, t) {
    if (n.dtype == null || n.dtype === t.dtype) return t;
    try {
        return bt(t, n.dtype);
    } catch {
        throw new H(
            `The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${n.name}' (${n.dtype}).`
        );
    }
}
class or {
    constructor(t) {
        if (
            ((this.id2Value = {}),
            (this.id2Mask = {}),
            (this.name2Id = {}),
            t instanceof or)
        )
            for (const e in t.id2Value)
                (this.id2Value[e] = t.id2Value[e]),
                    e in t.id2Mask && (this.id2Mask[e] = t.id2Mask[e]);
        else {
            if (t == null) return;
            for (const e of t) this.add(e.key, e.value);
        }
    }
    add(t, e, s) {
        if (this.id2Value[t.id] == null)
            (this.id2Value[t.id] = LO(t, e)),
                (this.name2Id[t.name] = t.id),
                s != null && (this.id2Mask[t.id] = s);
        else throw new H(`Duplicate key: name=${t.name}, id=${t.id}`);
        return this;
    }
    addFeed(t) {
        this.add(t.key, t.value);
    }
    hasKey(t) {
        return this.id2Value[t.id] != null;
    }
    names() {
        return Object.keys(this.name2Id);
    }
    getValue(t) {
        if (t instanceof _s) {
            if (this.id2Value[t.id] == null)
                throw new H(`Nonexistent key: ${t.name}`);
            return this.id2Value[t.id];
        } else {
            const e = this.name2Id[t];
            if (e == null)
                throw new H(`Feed dict has no SymbolicTensor name: ${t}`);
            return this.id2Value[e];
        }
    }
    getMask(t) {
        if (t instanceof _s) {
            if (this.id2Value[t.id] == null)
                throw new H(`Nonexistent key: ${t.name}`);
            return this.id2Mask[t.id];
        } else {
            const e = this.name2Id[t];
            if (e == null)
                throw new H(`Feed dict has no SymbolicTensor name: ${t}`);
            return this.id2Mask[e];
        }
    }
    disposeMasks() {
        this.id2Mask != null && Lt(this.id2Mask);
    }
}
const hc = new k1(),
    dc = new k1();
function PO(n) {
    hc != null && hc.setMaxEntries(n), dc != null && dc.setMaxEntries(n);
}
function Li(n, t, e, s) {
    const r = e == null ? !1 : e.training,
        o = Array.isArray(n),
        i = o ? n : [n],
        a = i.map((f) => f.name),
        l = [],
        c = t.names();
    for (const f of a)
        c.indexOf(f) !== -1 ? l.push(t.getValue(f)) : l.push(null);
    s != null && ((s.maxNumTensors = -1 / 0), (s.minNumTensors = 1 / 0));
    const u = a.join(',') + '|' + t.names().sort().join(',');
    let h = hc.get(u),
        d;
    if (h == null) {
        const f = zO(i, t);
        (h = f.sorted), (d = f.recipientCounts), hc.put(u, h), dc.put(u, d);
    }
    (d = {}), r || Object.assign(d, dc.get(u));
    const p = new or(t);
    for (let f = 0; f < h.length; ++f) {
        if (s != null) {
            const N = kd().numTensors;
            N > s.maxNumTensors && (s.maxNumTensors = N),
                N < s.minNumTensors && (s.minNumTensors = N);
        }
        const m = h[f],
            g = m.sourceLayer;
        if (g instanceof fl) continue;
        const y = [],
            b = [],
            w = [];
        let x = !1;
        for (const N of m.inputs) {
            const R = p.getValue(N),
                P = p.getMask(N);
            y.push(R),
                b.push(P),
                P != null && (x = !0),
                r ||
                    (d[N.name]--,
                    d[N.name] === 0 &&
                        !t.hasKey(N) &&
                        a.indexOf(N.name) === -1 &&
                        !R.isDisposed &&
                        N.sourceLayer.stateful !== !0 &&
                        w.push(R));
        }
        x && ((e = e || {}), (e.mask = b[0]));
        const v = Qt(g.apply(y, e));
        let C = null;
        g.supportsMasking && (C = g.computeMask(y, b));
        const $ = MO(m),
            T = Array.isArray($) ? $ : [$];
        for (let N = 0; N < T.length; ++N) {
            p.hasKey(T[N]) || p.add(T[N], v[N], Array.isArray(C) ? C[0] : C);
            const R = a.indexOf(T[N].name);
            R !== -1 && (l[R] = v[N]);
        }
        r || Lt(w);
    }
    return p.disposeMasks(), o ? l : l[0];
}
function zO(n, t) {
    _(n != null && n.length > 0, () => 'Expected at least one fetch, got none');
    let e = [],
        s = {};
    if (n.length === 1) {
        const r = gy(n[0], t);
        (e = r.sorted), (s = r.recipientMap);
    } else {
        const r = new Set();
        for (const o of n) {
            const { sorted: i, recipientMap: a } = gy(o, t);
            for (const l of i) r.has(l.name) || (e.push(l), r.add(l.name));
            for (const l in a)
                s[l] == null && (s[l] = new Set()),
                    a[l].forEach((c) => s[l].add(c));
        }
    }
    return { sorted: e, recipientCounts: BO(s) };
}
function BO(n) {
    const t = {};
    for (const e in n) t[e] = n[e].size;
    return t;
}
function gy(n, t) {
    const e = new Set(),
        s = [],
        r = {};
    for (const a of t.names()) e.add(a);
    const o = [],
        i = [];
    for (o.push(n); o.length > 0; ) {
        const a = o[o.length - 1];
        if (e.has(a.name)) {
            o.pop();
            continue;
        }
        const l = i[i.length - 1] === o.length - 1;
        if (a.inputs.length === 0 || l)
            o.pop(), s.push(a), e.add(a.name), l && i.pop();
        else {
            i.push(o.length - 1);
            for (const c of a.inputs)
                r[c.name] == null && (r[c.name] = new Set()),
                    r[c.name].add(a.name),
                    !e.has(c.name) && o.push(c);
        }
    }
    return { sorted: s, recipientMap: r };
}
function MO(n) {
    let t;
    if (n.sourceLayer.inboundNodes.length === 1) t = n.sourceLayer.output;
    else {
        let e = null;
        for (let s = 0; s < n.sourceLayer.inboundNodes.length; ++s)
            for (const r of n.sourceLayer.inboundNodes[s].outputTensors)
                if (r.id === n.id) {
                    e = s;
                    break;
                }
        t = n.sourceLayer.getOutputAt(e);
    }
    return t;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const VO = tt();
VO.registerFlag('TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES', () => 100, PO);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function Xm(n, t) {
    return Y(() => Xe(St(U(n, n), t, !0)));
}
class ml extends bi {
    getConfig() {
        return {};
    }
}
class M1 extends ml {
    constructor(t) {
        super(),
            (this.defaultMaxValue = 2),
            (this.defaultAxis = 0),
            (this.maxValue =
                t.maxValue != null ? t.maxValue : this.defaultMaxValue),
            (this.axis = t.axis != null ? t.axis : this.defaultAxis);
    }
    apply(t) {
        return Y(() => {
            const e = Xm(t, this.axis),
                s = kn(e, 0, this.maxValue);
            return U(t, Et(s, ct($e(), e)));
        });
    }
    getConfig() {
        return { maxValue: this.maxValue, axis: this.axis };
    }
}
M1.className = 'MaxNorm';
ut(M1);
class V1 extends ml {
    constructor(t) {
        super(),
            (this.defaultAxis = 0),
            (this.axis = t.axis != null ? t.axis : this.defaultAxis);
    }
    apply(t) {
        return Y(() => Et(t, ct($e(), Xm(t, this.axis))));
    }
    getConfig() {
        return { axis: this.axis };
    }
}
V1.className = 'UnitNorm';
ut(V1);
class W1 extends ml {
    apply(t) {
        return Ds(t);
    }
}
W1.className = 'NonNeg';
ut(W1);
class U1 extends ml {
    constructor(t) {
        super(),
            (this.defaultMinValue = 0),
            (this.defaultMaxValue = 1),
            (this.defaultRate = 1),
            (this.defaultAxis = 0),
            (this.minValue =
                t.minValue != null ? t.minValue : this.defaultMinValue),
            (this.maxValue =
                t.maxValue != null ? t.maxValue : this.defaultMaxValue),
            (this.rate = t.rate != null ? t.rate : this.defaultRate),
            (this.axis = t.axis != null ? t.axis : this.defaultAxis);
    }
    apply(t) {
        return Y(() => {
            const e = Xm(t, this.axis),
                s = ct(
                    U(this.rate, kn(e, this.minValue, this.maxValue)),
                    U(1 - this.rate, e)
                );
            return U(t, Et(s, ct($e(), e)));
        });
    }
    getConfig() {
        return {
            minValue: this.minValue,
            maxValue: this.maxValue,
            rate: this.rate,
            axis: this.axis,
        };
    }
}
U1.className = 'MinMaxNorm';
ut(U1);
const yy = {
    maxNorm: 'MaxNorm',
    minMaxNorm: 'MinMaxNorm',
    nonNeg: 'NonNeg',
    unitNorm: 'UnitNorm',
};
function Ee(n) {
    return zm(n);
}
function by(n, t = {}) {
    return ul(n, Wn.getMap().classNameMap, t, 'constraint');
}
function _e(n) {
    if (n == null) return null;
    if (typeof n == 'string') {
        const e = { className: n in yy ? yy[n] : n, config: {} };
        return by(e);
    } else return n instanceof ml ? n : by(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ async function zr(n) {
    if (n == null) return;
    const t = [],
        e = [],
        s = [];
    for (const r in n) {
        const o = n[r];
        if (typeof o != 'number') {
            const i = o;
            t.push(i.data()), e.push(r), s.push(i);
        }
    }
    if (t.length > 0) {
        const r = await Promise.all(t);
        for (let o = 0; o < r.length; ++o) n[e[o]] = r[o][0];
        Lt(s);
    }
}
function G1(n) {
    if (n != null)
        for (const t in n) {
            const e = n[t];
            typeof e != 'number' && e.dispose();
        }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ var xy;
(function (n) {
    (n[(n.SILENT = 0)] = 'SILENT'), (n[(n.VERBOSE = 1)] = 'VERBOSE');
})(xy || (xy = {}));
const WO = 125;
class Xi {
    constructor() {
        this.validationData = null;
    }
    setParams(t) {
        this.params = t;
    }
    async onEpochBegin(t, e) {}
    async onEpochEnd(t, e) {}
    async onBatchBegin(t, e) {}
    async onBatchEnd(t, e) {}
    async onTrainBegin(t) {}
    async onTrainEnd(t) {}
    setModel(t) {}
}
class UO {
    constructor(t, e = 10) {
        t == null && (t = []), (this.callbacks = t), (this.queueLength = e);
    }
    append(t) {
        this.callbacks.push(t);
    }
    setParams(t) {
        for (const e of this.callbacks) e.setParams(t);
    }
    setModel(t) {
        for (const e of this.callbacks) e.setModel(t);
    }
    async onEpochBegin(t, e) {
        e == null && (e = {});
        for (const s of this.callbacks) await s.onEpochBegin(t, e);
    }
    async onEpochEnd(t, e) {
        e == null && (e = {});
        for (const s of this.callbacks) await s.onEpochEnd(t, e);
    }
    async onBatchBegin(t, e) {
        e == null && (e = {});
        for (const s of this.callbacks) await s.onBatchBegin(t, e);
    }
    async onBatchEnd(t, e) {
        e == null && (e = {});
        for (const s of this.callbacks) await s.onBatchEnd(t, e);
    }
    async onTrainBegin(t) {
        t == null && (t = {});
        for (const e of this.callbacks) await e.onTrainBegin(t);
    }
    async onTrainEnd(t) {
        t == null && (t = {});
        for (const e of this.callbacks) await e.onTrainEnd(t);
    }
}
class GO extends Xi {
    constructor() {
        super();
    }
    async onEpochBegin(t) {
        (this.seen = 0), (this.totals = {});
    }
    async onBatchEnd(t, e) {
        e == null && (e = {});
        const s = e.size == null ? 0 : e.size;
        this.seen += s;
        for (const r in e) {
            const o = e[r];
            if (typeof o == 'number')
                this.totals.hasOwnProperty(r) || (this.totals[r] = 0),
                    (this.totals[r] = this.totals[r] + o * s);
            else {
                let i;
                r in this.totals ? (i = this.totals[r]) : (this.totals[r] = 0);
                const a = Y(() => ct(this.totals[r], U(o, s)));
                (this.totals[r] = a), i != null && i.dispose();
            }
        }
    }
    async onEpochEnd(t, e) {
        if (e != null)
            for (const s of this.params.metrics)
                this.totals[s] != null &&
                    (typeof this.totals[s] == 'number'
                        ? (e[s] = this.totals[s] / this.seen)
                        : Y(() => {
                              const r = U(Et(1, this.seen), this.totals[s]);
                              (e[s] = r), this.totals[s].dispose(), Oe(e[s]);
                          }));
    }
}
class HO extends Xi {
    async onTrainBegin(t) {
        (this.epoch = []), (this.history = {});
    }
    async onEpochEnd(t, e) {
        e == null && (e = {}), this.epoch.push(t);
        for (const s in e)
            this.history[s] == null && (this.history[s] = []),
                this.history[s].push(e[s]);
    }
    async syncData() {
        const t = [],
            e = [],
            s = [];
        for (const o in this.history) {
            const i = this.history[o];
            for (let a = 0; a < i.length; ++a)
                if (typeof i[a] != 'number') {
                    const l = i[a];
                    t.push(l.data()), e.push(o), s.push(a);
                }
        }
        const r = await Promise.all(t);
        for (let o = 0; o < r.length; ++o)
            this.history[e[o]][s[o]].dispose(),
                (this.history[e[o]][s[o]] = r[o][0]);
    }
}
class jO extends Xi {
    constructor(t, e) {
        if (
            (super(),
            (this.currentEpoch = 0),
            (this.nowFunc = t.nowFunc),
            (this.nextFrameFunc = t.nextFrameFunc || Xx),
            (this.yieldEvery = e || 'auto'),
            this.yieldEvery === 'auto' && (this.yieldEvery = WO),
            this.yieldEvery === 'never' && t.onYield != null)
        )
            throw new Error(
                'yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback'
            );
        sd(this.yieldEvery) &&
            (this.maybeWait = oO(
                this.maybeWait.bind(this),
                this.yieldEvery,
                this.nowFunc
            )),
            (this.trainBegin = t.onTrainBegin),
            (this.trainEnd = t.onTrainEnd),
            (this.epochBegin = t.onEpochBegin),
            (this.epochEnd = t.onEpochEnd),
            (this.batchBegin = t.onBatchBegin),
            (this.batchEnd = t.onBatchEnd),
            (this.yield = t.onYield);
    }
    async maybeWait(t, e, s) {
        const r = [];
        this.yield != null && (await zr(s), r.push(this.yield(t, e, s))),
            r.push(this.nextFrameFunc()),
            await Promise.all(r);
    }
    async onEpochBegin(t, e) {
        (this.currentEpoch = t),
            this.epochBegin != null &&
                (await zr(e), await this.epochBegin(t, e));
    }
    async onEpochEnd(t, e) {
        const s = [];
        this.epochEnd != null && (await zr(e), s.push(this.epochEnd(t, e))),
            this.yieldEvery === 'epoch' && s.push(this.nextFrameFunc()),
            await Promise.all(s);
    }
    async onBatchBegin(t, e) {
        this.batchBegin != null && (await zr(e), await this.batchBegin(t, e));
    }
    async onBatchEnd(t, e) {
        const s = [];
        this.batchEnd != null && (await zr(e), s.push(this.batchEnd(t, e))),
            this.yieldEvery === 'batch'
                ? s.push(this.nextFrameFunc())
                : sd(this.yieldEvery) &&
                  s.push(this.maybeWait(this.currentEpoch, t, e)),
            await Promise.all(s);
    }
    async onTrainBegin(t) {
        this.trainBegin != null && (await zr(t), await this.trainBegin(t));
    }
    async onTrainEnd(t) {
        this.trainEnd != null && (await zr(t), await this.trainEnd(t));
    }
}
function H1(n, t) {
    return (
        n == null && (n = {}),
        n instanceof Xi
            ? [n]
            : Array.isArray(n) && n[0] instanceof Xi
            ? n
            : Qt(n).map((s) => new jO(s, t))
    );
}
class Mn {
    constructor() {}
    static registerCallbackConstructor(t, e) {
        _(
            t >= 0 && Number.isInteger(t),
            () =>
                `Verbosity level is expected to be an integer >= 0, but got ${t}`
        ),
            Mn.checkForDuplicate(e),
            Mn.constructors[t] == null && (Mn.constructors[t] = []),
            Mn.constructors[t].push(e);
    }
    static checkForDuplicate(t) {
        for (const e in Mn.constructors)
            Mn.constructors[+e].forEach((r) => {
                if (r === t) throw new H('Duplicate callback constructor.');
            });
    }
    static clear() {
        Mn.constructors = {};
    }
    static createCallbacks(t) {
        const e = [];
        for (const s in Mn.constructors) {
            const r = +s;
            t >= r && e.push(...Mn.constructors[r]);
        }
        return e.map((s) => new s());
    }
}
Mn.constructors = {};
function j1(n, t, e, s, r, o, i, a, l) {
    const c = new HO(),
        u = [new GO(), ...Mn.createCallbacks(t)];
    n != null && u.push(...n), u.push(c);
    const h = new UO(u);
    return (
        h.setParams({
            epochs: e,
            initialEpoch: s,
            samples: r,
            steps: o,
            batchSize: i,
            verbose: t,
            doValidation: a,
            metrics: l,
        }),
        { callbackList: h, history: c }
    );
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function Ns(n, t = {}, e = !1) {
    return ul(n, Wn.getMap().classNameMap, t, 'layer', e);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function pc(n, t) {
    return Y(() => {
        n.dtype !== 'float32' && (n = bt(n, 'float32'));
        const e = St(dl(n), t, !0),
            s = fi(e.shape, $e()),
            r = Xe(Js(e, s));
        return Et(n, r);
    });
}
function fh(n, t) {
    return Y(() => ge(dl(kt(t, n)), -1));
}
function Ym(n, t) {
    return Y(() => ge(Ce(kt(t, n)), -1));
}
function Zm(n, t) {
    return Y(() => {
        const e = kt(n, t),
            s = kn(Ce(n), $e(), Number.MAX_VALUE),
            r = Ce(Et(e, s));
        return U(100, ge(r, -1));
    });
}
function qO(n, t) {
    return Y(() => {
        const e = kn(t, $e(), Number.MAX_VALUE),
            s = Dn(ct(1, e)),
            r = kn(n, $e(), Number.MAX_VALUE),
            o = Dn(ct(1, r));
        return ge(dl(kt(s, o)), -1);
    });
}
function KO(n, t) {
    return Y(() => {
        const e = Js(0, kt(1, U(n, t)));
        return ge(dl(e), -1);
    });
}
function XO(n, t) {
    return Y(() => {
        const e = Js(0, kt(1, U(n, t)));
        return ge(e, -1);
    });
}
function YO(n, t) {
    return Y(() => {
        const e = St(U(n, t), -1),
            s = Yn(U(kt(1, n), t), -1);
        return Js(0, ct(1, kt(s, e)));
    });
}
function ZO(n, t) {
    return Y(() => {
        const e = Math.log(2),
            s = kt(t, n),
            r = kt(ct(s, mi(U(-2, s))), e);
        return ge(r, -1);
    });
}
function Yi(n, t, e = !1) {
    return Y(() => {
        if (e) t = th(t);
        else {
            const s = St(t, t.shape.length - 1, !0);
            t = Et(t, s);
        }
        return (
            (t = kn(t, $e(), 1 - $e())),
            le(St(U(bt(n, 'float32'), Dn(t)), t.shape.length - 1))
        );
    });
}
function fc(n, t, e = !1) {
    return Y(() => {
        const s = bt(ol(yO(n)), 'int32');
        t = kn(t, $e(), 1 - $e());
        const r = t.shape,
            o = j(Ku(s, r[r.length - 1]), r);
        return Yi(o, t, e);
    });
}
function JO(n, t) {
    if (!Ut(n.shape, t.shape))
        throw new H(
            `logits and labels must have the same shape, but got shapes ${JSON.stringify(
                n.shape
            )} and ${JSON.stringify(t.shape)}`
        );
    return Y(() => {
        const e = Ds(t),
            s = le(Ce(t));
        return ct(kt(e, U(t, n)), Uu(Sn(s)));
    });
}
function mh(n, t) {
    return Y(() => {
        let e;
        return (
            (e = kn(t, $e(), 1 - $e())),
            (e = Dn(Et(e, kt(1, e)))),
            ge(JO(n, e), -1)
        );
    });
}
function QO(n, t) {
    return Y(() => {
        const e = kn(n, $e(), 1),
            s = kn(t, $e(), 1);
        return St(U(n, Dn(Et(e, s))), -1);
    });
}
function tF(n, t) {
    return Y(() => {
        const e = Dn(ct($e(), t));
        return ge(kt(t, U(n, e)), -1);
    });
}
function q1(n, t) {
    return Y(() => {
        const e = pc(n, -1),
            s = pc(t, -1),
            r = U(e, s);
        return le(St(r, -1));
    });
}
const mc = {
    meanSquaredError: fh,
    meanAbsoluteError: Ym,
    meanAbsolutePercentageError: Zm,
    meanSquaredLogarithmicError: qO,
    squaredHinge: KO,
    hinge: XO,
    categoricalHinge: YO,
    logcosh: ZO,
    categoricalCrossentropy: Yi,
    sparseCategoricalCrossentropy: fc,
    binaryCrossentropy: mh,
    kullbackLeiblerDivergence: QO,
    poisson: tF,
    cosineProximity: q1,
};
function Wh(n) {
    if (typeof n == 'string') {
        if (n in mc) return mc[n];
        let t = `Unknown loss ${n}`;
        throw (
            (n.toLowerCase().includes('softmaxcrossentropy') &&
                (t = `Unknown loss ${n}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),
            new H(t))
        );
    } else return n;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function K1(n, t) {
    return Y(() => {
        const e = U(0.5, On(t)),
            s = Cs(Tn(t, e), n.dtype);
        return ge(us(n, s), -1);
    });
}
function X1(n, t) {
    return Y(() => Cs(us(Zo(n, -1), Zo(t, -1)), 'float32'));
}
function eF(n, t) {
    return Y(() => bt(St(Es(us(n, 1), us(t, 1))), 'float32'));
}
function nF(n, t) {
    return Y(() => bt(St(Es(us(n, 0), us(t, 1))), 'float32'));
}
function sF(n, t) {
    return Y(() => {
        const e = eF(n, t),
            s = nF(n, t),
            r = ct(e, s);
        return bt(qe(Tn(r, 0), Et(e, r), 0), 'float32');
    });
}
function rF(n, t) {
    return mh(n, t);
}
function oF(n, t) {
    return (
        n.rank === t.rank && (n = wo(n, [n.rank - 1])),
        (t = Zo(t, -1)),
        t.dtype !== n.dtype && (t = bt(t, n.dtype)),
        bt(us(n, t), 'float32')
    );
}
const iF = fh,
    aF = fh,
    lF = Ym,
    cF = Ym,
    uF = Zm,
    hF = Zm,
    Y1 = Yi,
    dF = q1,
    Z1 = fc,
    gc = {
        binaryAccuracy: K1,
        categoricalAccuracy: X1,
        precision: sF,
        categoricalCrossentropy: Y1,
        sparseCategoricalCrossentropy: Z1,
        mse: iF,
        MSE: aF,
        mae: lF,
        MAE: cF,
        mape: uF,
        MAPE: hF,
        cosine: dF,
    };
function pF(n) {
    if (typeof n == 'string' && n in gc) return gc[n];
    if (typeof n != 'string' && n != null) return n;
    throw new H(`Unknown metric ${n}`);
}
function _l(n) {
    if ((xs(n !== null, `Unknown LossOrMetricFn ${n}`), typeof n == 'string'))
        return n;
    {
        let t;
        for (const e of Object.keys(mc))
            if (mc[e] === n) {
                t = e;
                break;
            }
        if (t !== void 0) return t;
        for (const e of Object.keys(gc))
            if (gc[e] === n) {
                t = e;
                break;
            }
        return t !== void 0 ? t : n.name;
    }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function fF(n) {
    const t = {
        Adagrad: () => Vr.adagrad(0.01),
        Adadelta: () => Vr.adadelta(1, 0.95, $e()),
        Adam: () => Vr.adam(0.001, 0.9, 0.999, $e()),
        Adamax: () => Vr.adamax(0.002, 0.9, 0.999, $e(), 0),
        RMSProp: () => Vr.rmsprop(0.001, 0.9, 0, $e()),
        SGD: () => Vr.sgd(0.01),
    };
    if (
        ((t.adagrad = t.Adagrad),
        (t.adadelta = t.Adadelta),
        (t.adam = t.Adam),
        (t.adamax = t.Adamax),
        (t.rmsprop = t.RMSProp),
        (t.sgd = t.SGD),
        n in t)
    )
        return t[n]();
    throw new H(`Unknown Optimizer ${n}`);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ const wy = 1 * 1024 * 1024;
function vy(n, t, e = !1) {
    if (
        n == null ||
        typeof n != 'object' ||
        Object.getPrototypeOf(n) !== Object.prototype ||
        !Od(n)
    )
        throw new Error(
            'User-defined metadata is expected to be a JSON object, but is not.'
        );
    if (e) {
        const s = JSON.stringify(n);
        s.length > wy &&
            console.warn(
                `User-defined metadata of model "${t}" is too large in size (length=${s.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= ${wy}.`
            );
    }
}
function Od(n) {
    if (n === null) return !0;
    if (typeof n == 'object')
        if (Object.getPrototypeOf(n) === Object.prototype) {
            const t = Object.keys(n);
            for (const e of t) if (typeof e != 'string' || !Od(n[e])) return !1;
            return !0;
        } else if (Array.isArray(n)) {
            for (const t of n) if (!Od(t)) return !1;
            return !0;
        } else return !1;
    else {
        const t = typeof n;
        return t === 'string' || t === 'number' || t === 'boolean';
    }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function mF(n, t, e, s = console.log) {
    const r = yF(n),
        o = ['Layer (type)', 'Input Shape', 'Output shape', 'Param #'];
    r
        ? ((t = t || 90), (e = e || [0.32, 0.61, 0.89, 1]))
        : ((t = t || 115), (e = e || [0.24, 0.48, 0.7, 0.8, 1])),
        e[e.length - 1] <= 1 && (e = e.map((u) => Math.floor(t * u)));
    let i;
    if (!r) {
        o.push('Receives inputs'), (i = []);
        for (const u in n.nodesByDepth) i.push(...n.nodesByDepth[u]);
    }
    s('_'.repeat(t)), yc(o, e, s), s('='.repeat(t));
    const a = n.layers;
    for (let u = 0; u < a.length; ++u)
        r ? bF(a[u], e, s) : xF(a[u], e, i, s),
            s((u === a.length - 1 ? '=' : '_').repeat(t));
    n.checkTrainableWeightsConsistency();
    const l = gF(n),
        c = uc(n.nonTrainableWeights);
    s(`Total params: ${l + c}`),
        s(`Trainable params: ${l}`),
        s(`Non-trainable params: ${c}`),
        s('_'.repeat(t));
}
function gF(n) {
    let t;
    return (
        n.collectedTrainableWeights != null
            ? (t = uc(n.collectedTrainableWeights))
            : (t = uc(n.trainableWeights)),
        t
    );
}
function yF(n) {
    let t = !0;
    const e = [],
        s = [];
    for (const r in n.nodesByDepth) e.push(n.nodesByDepth[r]);
    for (const r of e) {
        if (r.length > 1 || (r.length === 1 && r[0].inboundLayers.length > 1)) {
            t = !1;
            break;
        }
        s.push(...r);
    }
    if (t)
        for (const r of n.layers) {
            let o = !1;
            for (const i of r.inboundNodes)
                if (s.indexOf(i) !== -1)
                    if (o) {
                        t = !1;
                        break;
                    } else o = !0;
            if (!t) break;
        }
    return t;
}
function yc(n, t, e = console.log) {
    let s = '';
    for (let r = 0; r < n.length; ++r)
        r > 0 && (s = s.slice(0, s.length - 1) + ' '),
            (s += n[r]),
            (s = s.slice(0, t[r])),
            (s += ' '.repeat(t[r] - s.length));
    e(s);
}
function bF(n, t, e) {
    let s, r;
    try {
        r = n.inboundNodes.map((l) => JSON.stringify(l.inputShapes)).join(',');
    } catch {
        r = 'multiple';
    }
    try {
        s = JSON.stringify(n.outputShape);
    } catch {
        s = 'multiple';
    }
    const o = n.name,
        i = n.getClassName(),
        a = [`${o} (${i})`, r, s, n.countParams().toString()];
    yc(a, t, e);
}
function xF(n, t, e, s) {
    let r, o;
    try {
        o = n.inboundNodes.map((h) => JSON.stringify(h.inputShapes)).join(',');
    } catch {
        o = 'multiple';
    }
    try {
        r = JSON.stringify(n.outputShape);
    } catch {
        r = 'multiple';
    }
    const i = [];
    for (const h of n.inboundNodes)
        if (!(e != null && e.length > 0 && e.indexOf(h) === -1))
            for (let d = 0; d < h.inboundLayers.length; ++d) {
                const p = h.inboundLayers[d].name,
                    f = h.nodeIndices[d],
                    m = h.tensorIndices[d];
                i.push(`${p}[${f}][${m}]`);
            }
    const a = n.name,
        l = n.getClassName(),
        c = i.length === 0 ? '' : i[0],
        u = [`${a} (${l})`, o, r, n.countParams().toString(), c];
    yc(u, t, s);
    for (let h = 1; h < i.length; ++h) yc(['', '', '', '', i[h]], t, s);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function J1(n, t, e) {
    return (
        (n === 'inboundNodes' || n === 'outputLayers' || n === 'inputLayers') &&
        t === 0 &&
        typeof e == 'string'
    );
}
function bc(n, t) {
    if (n === null) return null;
    if (typeof n == 'string') return Ur(n);
    if (typeof n == 'number' || typeof n == 'boolean') return n;
    if (n instanceof Array) {
        const e = [],
            s = n.length;
        for (let r = 0; r < s; ++r) {
            const o = n[r];
            J1(t, r, o) ? e.push(o) : e.push(bc(o, t));
        }
        return e;
    } else {
        const e = {};
        for (const s of Object.keys(n)) {
            const r = n[s];
            if (s === 'name' && typeof r == 'string') e[s] = r;
            else {
                const o = Ur(s);
                e[o] = bc(r, o);
            }
        }
        return e;
    }
}
function Fd(n, t) {
    if (n == null) return null;
    if (typeof n == 'string') return Bs(n);
    if (typeof n == 'number' || typeof n == 'boolean') return n;
    if (n instanceof Array) {
        const e = [],
            s = n.length;
        for (let r = 0; r < s; ++r) {
            const o = n[r];
            J1(t, r, o) ? e.push(o) : e.push(Fd(o, t));
        }
        return e;
    } else {
        const e = {};
        for (const s of Object.keys(n)) {
            const r = n[s],
                o = Bs(s);
            (s === 'name' || s === 'className') && typeof r == 'string'
                ? (e[o] = r)
                : (e[o] = Fd(r, s));
        }
        return e;
    }
}
/** @license See the LICENSE file. */ const Q1 = '4.11.0';
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ const wF = (n) => {
    const t = Object.keys(n);
    if (t.length === 0) return !1;
    const e = t[0].split('/');
    return !isNaN(parseInt(e[e.length - 1], 10));
};
class rs extends Mt {
    constructor(t) {
        if (
            (super({}),
            (this.containerNodes = new Set()),
            (this.name = t.name),
            this.name == null)
        ) {
            const b = this.getClassName().toLowerCase();
            this.name = hh(b);
        }
        if (
            ((this.supportsMasking = !1),
            (this.trainable_ = !0),
            Array.isArray(t.inputs)
                ? (this.inputs = t.inputs.slice())
                : (this.inputs = [t.inputs]),
            Array.isArray(t.outputs)
                ? (this.outputs = t.outputs.slice())
                : (this.outputs = [t.outputs]),
            cr(this.inputs).length !== this.inputs.length)
        )
            throw new H(
                `The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(
                    (b) => b.name
                )}`
            );
        cr(this.outputs).length !== this.outputs.length &&
            console.warn(
                `The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(
                    (b) => b.name
                )}`
            ),
            (this.inputLayers = []),
            (this.inputLayersNodeIndices = []),
            (this.inputLayersTensorIndices = []),
            (this.outputLayers = []),
            (this.outputLayersNodeIndices = []),
            (this.outputLayersTensorIndices = []),
            (this.layers = []),
            (this.internalContainerRefs = []);
        for (const b of this.outputs) {
            const w = b.sourceLayer,
                x = b.nodeIndex,
                v = b.tensorIndex;
            this.outputLayers.push(w),
                this.outputLayersNodeIndices.push(x),
                this.outputLayersTensorIndices.push(v);
        }
        for (const b of this.inputs) {
            const w = b.sourceLayer,
                x = b.nodeIndex,
                v = b.tensorIndex;
            xs(x === 0, 'input layer has >1 nodes'),
                xs(v === 0, 'input layer has >1 tensors'),
                this.inputLayers.push(w),
                this.inputLayersNodeIndices.push(x),
                this.inputLayersTensorIndices.push(v);
        }
        (this.inputNames = []),
            (this.outputNames = []),
            (this.feedInputShapes = []),
            (this.feedInputNames = []),
            (this.feedOutputNames = []);
        for (let b = 0; b < this.inputLayers.length; b++) {
            const w = this.inputLayers[b];
            if (!(w instanceof fl))
                throw new TypeError(
                    `Input layers to a LayersModel must be InputLayer objects. Received inputs: ${
                        t.inputs
                    }. Input ${b} (0-based) originates from layer type ${w.getClassName()}.`
                );
            this.inputNames.push(w.name),
                this.feedInputShapes.push(w.batchInputShape),
                this.feedInputNames.push(w.name);
        }
        for (const b of this.outputLayers) this.outputNames.push(b.name);
        (this.internalInputShapes = this.inputs.map((b) => b.shape)),
            (this.internalOutputShapes = this.outputs.map((b) => b.shape));
        const e = {},
            s = {},
            r = {},
            o = {},
            i = {},
            a = [],
            l = (b, w, x, v, C, $) => {
                (v == null || C == null || $ == null) &&
                    ((v = b.sourceLayer),
                    (C = b.nodeIndex),
                    ($ = b.tensorIndex));
                const T = v.inboundNodes[C];
                if (x.indexOf(T) !== -1)
                    throw new qn(
                        `The tensor ${b.name} at layer "${v.name}" is part of a cycle.`
                    );
                if (w.indexOf(T) !== -1) return;
                this.containerNodes.add(rs.nodeKey(v, C)),
                    v.id in i || (i[v.id] = Object.keys(i).length),
                    x.indexOf(T) === -1 && x.push(T);
                const N = T.inboundLayers.length;
                for (let R = 0; R < N; R++) {
                    const P = T.inputTensors[R],
                        E = T.inboundLayers[R],
                        O = T.nodeIndices[R],
                        S = T.tensorIndices[R];
                    l(P, w, x, E, O, S);
                }
                for (w.push(T); x.indexOf(T) >= 0; ) x.splice(x.indexOf(T), 1);
                a.push(T);
            },
            c = [],
            u = [];
        for (const b of this.outputs) l(b, c, u);
        const h = a.slice().reverse();
        for (const b of h) {
            (s[b.id] = b), b.id in e || (e[b.id] = 0);
            let w = e[b.id];
            const x = r[b.outboundLayer.id] == null ? 0 : r[b.outboundLayer.id];
            (w = Math.max(w, x)),
                (r[b.outboundLayer.id] = w),
                (o[b.outboundLayer.id] = b.outboundLayer),
                (e[b.id] = w);
            for (let v = 0; v < b.inboundLayers.length; v++) {
                const C = b.inboundLayers[v],
                    $ = b.nodeIndices[v],
                    T = C.inboundNodes[$],
                    N = e[T.id] == null ? 0 : e[T.id];
                (e[T.id] = Math.max(w + 1, N)), (s[T.id] = T);
            }
        }
        const d = {};
        for (const b in e) {
            const w = e[b];
            w in d || (d[w] = []), d[w].push(s[b]);
        }
        const p = {};
        for (const b in r) {
            const w = r[b];
            w in p || (p[w] = []), p[w].push(o[b]);
        }
        let f = Object.keys(p)
            .map((b) => parseInt(b, 10))
            .sort(Nl);
        this.layers = [];
        for (const b of f) {
            const w = p[b];
            w.sort((x, v) => {
                const C = i[x.id],
                    $ = i[v.id];
                return C < $ ? -1 : C > $ ? 1 : 0;
            });
            for (const x of w)
                x instanceof rs && this.internalContainerRefs.push(x),
                    this.layers.push(x);
        }
        (this.layersByDepth = p),
            (f = Object.keys(d)
                .map((b) => parseInt(b, 10))
                .sort(Nl));
        const m = this.inputs.slice(),
            g = [];
        for (const b of f)
            for (const w of d[b]) {
                const x = w.outboundLayer;
                if (x != null) {
                    for (const v of w.inputTensors)
                        if (m.indexOf(v) === -1)
                            throw new qn(
                                `Graph disconnected: cannot obtain value for tensor ${v} at layer "${x.name}". The following previous layers were accessed without issue: ${g}`
                            );
                    for (const v of w.outputTensors) m.push(v);
                    g.push(x.name);
                }
            }
        this.nodesByDepth = d;
        const y = this.layers.map((b) => b.name);
        for (const b of y) {
            const w = y.filter((x) => x === b).length;
            if (w !== 1)
                throw new qn(
                    `The name "${b}" is used ${w} times in the model. All layer names should be unique. Layer names: ` +
                        JSON.stringify(y)
                );
        }
        (this.outboundNodes = []),
            (this.inboundNodes = []),
            new ph({
                outboundLayer: this,
                inboundLayers: [],
                nodeIndices: [],
                tensorIndices: [],
                inputTensors: this.inputs,
                outputTensors: this.outputs,
                inputMasks: this.inputs.map((b) => null),
                outputMasks: this.outputs.map((b) => null),
                inputShapes: this.inputs.map((b) => b.shape),
                outputShapes: this.outputs.map((b) => b.shape),
            }),
            (this.built = !0),
            (this._refCount = 1);
    }
    assertNotDisposed() {
        if (this._refCount === 0)
            throw new Error(`Container '${this.name}' is already disposed.`);
    }
    dispose() {
        this.assertNotDisposed();
        const t = { refCountAfterDispose: null, numDisposedVariables: 0 };
        if (--this._refCount === 0) {
            for (const e of this.layers)
                t.numDisposedVariables += e.dispose().numDisposedVariables;
            for (const e of this.internalContainerRefs)
                t.numDisposedVariables += e.dispose().numDisposedVariables;
        }
        return (t.refCountAfterDispose = this._refCount), t;
    }
    get trainable() {
        return this.trainable_;
    }
    set trainable(t) {
        this.layers.forEach((e) => {
            e._trainableWeights.forEach((s) => (s.trainable = t));
        }),
            (this.trainable_ = t);
    }
    get trainableWeights() {
        if (this._trainableWeights.length > 0)
            throw new H(
                'Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.'
            );
        if (!this.trainable) return [];
        let t = [];
        for (const e of this.layers) t = t.concat(e.trainableWeights);
        return t;
    }
    get nonTrainableWeights() {
        const t = [];
        for (const e of this.layers) t.push(...e.nonTrainableWeights);
        if (!this.trainable) {
            const e = [];
            for (const s of this.layers) e.push(...s.trainableWeights);
            return e.concat(t);
        }
        return t;
    }
    get weights() {
        return this.trainableWeights.concat(this.nonTrainableWeights);
    }
    loadWeights(t, e = !0) {
        const s = {};
        let r = 0;
        const o = wF(t);
        o && this.parseWeights(t);
        for (const a of this.layers)
            for (const [l, c] of a.weights.entries()) {
                const u = o
                    ? `${c.name.split('/').slice(0, -1).join('/') + '/'}${l}`
                    : c.originalName;
                if (s[u] != null) throw new H(`Duplicate weight name: ${u}`);
                (s[u] = c), r++;
            }
        const i = [];
        for (const a in t) {
            let l = a;
            if (s[a] == null) {
                const c = a.split('/');
                l = c
                    .slice(0, -2)
                    .concat([c[c.length - 1]])
                    .join('/');
            }
            if (s[l] != null) i.push([s[l], t[a]]);
            else if (e)
                throw new H(
                    `Provided weight data has no target variable: ${a}`
                );
            delete s[l];
        }
        if (e) {
            const a = [];
            for (const l in s) a.push(l);
            if (a.length > 0)
                throw new H(`${a.length} of ${r} weights are not set: ${a}`);
        }
        Km(i);
    }
    parseWeights(t) {
        for (const e in Object.keys(t)) {
            const s = e.split('/'),
                r = ['vars', 'layer_checkpoint_dependencies'],
                o = s
                    .map((i) => (i.startsWith('_') ? i.slice(1) : i))
                    .filter((i) => !r.includes(i))
                    .join('/');
            o !== e && ((t[o] = t[e]), delete t[e]);
        }
    }
    updatedConfig() {
        const t = this.getConfig(),
            e = {};
        return (
            (e.className = this.getClassName()),
            (e.config = t),
            (e.kerasVersion = `tfjs-layers ${Q1}`),
            (e.backend = 'TensorFlow.js'),
            e
        );
    }
    toJSON(t, e = !0) {
        const s = Fd(this.updatedConfig());
        return e ? JSON.stringify(s) : s;
    }
    call(t, e) {
        return Y(() => {
            t = Qt(t);
            const s = new or();
            for (let r = 0; r < this.inputs.length; ++r)
                s.add(this.inputs[r], t[r]);
            return Li(this.outputs, s, e);
        });
    }
    computeMask(t, e) {
        return Y(() => {
            t = Qt(t);
            let s;
            return (
                e == null ? (s = co(null, t.length)) : (s = Qt(e)),
                this.runInternalGraph(t, s)[1]
            );
        });
    }
    computeOutputShape(t) {
        const e = cc(t);
        if (e.length !== this.inputLayers.length)
            throw new H(
                `Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`
            );
        const s = {};
        for (let a = 0; a < e.length; a++) {
            const l = this.inputLayers[a],
                c = e[a],
                u = l.name + '_0_0';
            s[u] = c;
        }
        const r = Object.keys(this.nodesByDepth)
            .map((a) => parseInt(a, 10))
            .sort(Nl);
        if (r.length > 1)
            for (const a of r) {
                const l = this.nodesByDepth[a];
                for (const c of l) {
                    const u = c.outboundLayer;
                    if (this.inputLayers.map((m) => m.id).indexOf(u.id) !== -1)
                        continue;
                    const h = [];
                    for (let m = 0; m < c.inboundLayers.length; m++) {
                        const g = c.inboundLayers[m],
                            y = c.nodeIndices[m],
                            b = c.tensorIndices[m],
                            w = `${g.name}_${y}_${b}`,
                            x = s[w];
                        h.push(x);
                    }
                    const d = u.computeOutputShape(an(h)),
                        p = cc(d),
                        f = u.inboundNodes.indexOf(c);
                    for (let m = 0; m < p.length; m++) {
                        const g = `${u.name}_${f}_${m}`;
                        s[g] = p[m];
                    }
                }
            }
        const o = [],
            i = [];
        for (let a = 0; a < this.outputLayers.length; a++) {
            const l = this.outputLayers[a],
                c = this.outputLayersNodeIndices[a],
                u = this.outputLayersTensorIndices[a],
                h = `${l.name}_${c}_${u}`;
            i.push(h);
        }
        for (let a = 0; a < i.length; a++) {
            const l = i[a];
            xs(l in s), o.push(s[l]);
        }
        return an(o);
    }
    runInternalGraph(t, e) {
        e == null && (e = co(null, t.length));
        const s = {};
        for (let l = 0; l < this.inputs.length; ++l) {
            const c = this.inputs[l],
                u = t[l],
                h = e[l];
            s[c.id] = [u, h];
        }
        const r = Object.keys(this.nodesByDepth)
            .map((l) => parseInt(l, 10))
            .sort(Nl);
        for (const l of r) {
            const c = this.nodesByDepth[l];
            for (const u of c) {
                const h = u.outboundLayer,
                    d = u.inputTensors,
                    p = u.outputTensors,
                    f = new Array();
                for (const m of d) m.id in s && f.push(s[m.id]);
                if (f.length === d.length) {
                    let m = {},
                        g,
                        y,
                        b,
                        w;
                    if (
                        (u.callArgs != null && (m = u.callArgs), f.length === 1)
                    ) {
                        const [x, v] = f[0];
                        m.mask == null && (m.mask = v),
                            (b = Qt(h.call(x, m))),
                            (w = Qt(h.computeMask(x, v))),
                            (g = [x]),
                            (y = [v]);
                    } else
                        (g = f.map((x) => x[0])),
                            (y = f.map((x) => x[1])),
                            m.mask == null && (m.mask = y),
                            (b = Qt(h.call(g, m))),
                            (w = Qt(h.computeMask(g, y)));
                    if (h.activityRegularizer)
                        throw new Ft(
                            'LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.'
                        );
                    for (let x = 0; x < p.length; ++x) {
                        const v = p[x],
                            C = b[x],
                            $ = w[x];
                        s[v.id] = [C, $];
                    }
                }
            }
        }
        const o = [],
            i = [],
            a = [];
        for (const l of this.outputs) {
            xs(l.id in s, `Could not compute output ${l.name} : ${l.id}`);
            const [c, u] = s[l.id];
            a.push(c.shape), o.push(c), i.push(u);
        }
        return [o, i, a];
    }
    buildNodeConversionMap(t) {
        const e = {};
        let s;
        for (const r of this.layers) {
            s = r instanceof rs ? 1 : 0;
            for (let o = 0; o < r.inboundNodes.length; o++) {
                const i = rs.nodeKey(r, o);
                this.containerNodes.has(i) && ((e[i] = s), (s += 1));
            }
        }
        return e;
    }
    getLayer(t, e) {
        if (e != null) return this.findLayer(e);
        if (t == null)
            throw new H('Provide either a layer name or layer index');
        if (typeof t == 'number') return this.findLayer(t);
        for (const s of this.layers) if (s.name === t) return s;
        throw new H(`No such layer: ${t}`);
    }
    findLayer(t) {
        if (this.layers.length <= t)
            throw new H(
                `Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`
            );
        return this.layers[t];
    }
    calculateLosses() {
        return Y(() => {
            const t = [];
            for (const e of this.layers)
                for (let s = 0; s < e.inboundNodes.length; ++s) {
                    const r = rs.nodeKey(e, s);
                    this.containerNodes.has(r) &&
                        t.push(...e.calculateLosses());
                }
            return t;
        });
    }
    getConfig() {
        const t = { name: this.name },
            e = this.buildNodeConversionMap(this.layers),
            s = [];
        for (const i of this.layers) {
            const a = i.getClassName(),
                l = i.getConfig(),
                c = [];
            for (let h = 0; h < i.inboundNodes.length; h++) {
                const d = i.inboundNodes[h],
                    p = rs.nodeKey(i, h);
                let f = {};
                if (this.containerNodes.has(p)) {
                    if (d.callArgs)
                        try {
                            JSON.stringify(d.callArgs), (f = d.callArgs);
                        } catch {
                            console.warn(
                                `Layer ${i.name} was passed non-serializable keyword arguments: ${d.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`
                            ),
                                (f = {});
                        }
                    if (d.inboundLayers.length > 0) {
                        const m = [];
                        for (let g = 0; g < d.inboundLayers.length; g++) {
                            const y = d.inboundLayers[g],
                                b = d.nodeIndices[g],
                                w = d.tensorIndices[g],
                                x = rs.nodeKey(y, b);
                            let v = e[x];
                            v == null && (v = 0), m.push([y.name, v, w, f]);
                        }
                        c.push(m);
                    }
                }
            }
            const u = {};
            (u.name = i.name),
                (u.className = a),
                (u.config = l),
                (u.inboundNodes = c),
                s.push(u);
        }
        t.layers = s;
        const r = [];
        for (let i = 0; i < this.inputLayers.length; i++) {
            const a = this.inputLayers[i],
                l = this.inputLayersNodeIndices[i],
                c = rs.nodeKey(a, l);
            if (!this.containerNodes.has(c)) continue;
            let u = e[c];
            u == null && (u = 0);
            const h = this.inputLayersTensorIndices[i];
            r.push([a.name, u, h]);
        }
        t.inputLayers = r;
        const o = [];
        for (let i = 0; i < this.outputLayers.length; i++) {
            const a = this.outputLayers[i],
                l = this.outputLayersNodeIndices[i],
                c = rs.nodeKey(a, l);
            if (!this.containerNodes.has(c)) continue;
            let u = e[c];
            u == null && (u = 0);
            const h = this.outputLayersTensorIndices[i];
            o.push([a.name, u, h]);
        }
        return (t.outputLayers = o), t;
    }
    static fromConfig(t, e, s = {}, r = !1) {
        const o = {},
            i = {};
        function a(g, y) {
            g.name in i ? i[g.name].push(y) : (i[g.name] = [y]);
        }
        function l(g, y) {
            const b = [];
            let w;
            for (const x of y) {
                const v = x[0],
                    C = x[1],
                    $ = x[2];
                if (((w = x[3] == null ? {} : x[3]), !(v in o))) {
                    a(g, y);
                    return;
                }
                const T = o[v];
                if (T.inboundNodes.length <= C) {
                    a(g, y);
                    return;
                }
                const N = T.inboundNodes[C];
                b.push(N.outputTensors[$]);
            }
            b.length > 0 && g.apply(an(b), w);
        }
        function c(g) {
            const y = g.name,
                b = Ns(g, e.customObjects != null ? e.customObjects : {});
            b.setFastWeightInitDuringBuild(r),
                (o[y] = b),
                g.inboundNodes.forEach((x) => {
                    if (!(x instanceof Array))
                        throw new H(
                            `Corrupted configuration, expected array for nodeData: ${x}`
                        );
                    a(b, x);
                });
        }
        const u = e.name,
            h = e.layers;
        for (const g of h) c(g);
        for (; !rO(i); )
            for (const g of h) {
                const y = o[g.name];
                if (y.name in i) {
                    const b = i[y.name];
                    delete i[y.name];
                    for (const w of b) l(y, w);
                }
            }
        const d = [],
            p = [],
            f = e.inputLayers;
        for (const g of f) {
            const y = g[0],
                b = g[1],
                w = g[2];
            xs(y in o);
            const v = o[y].inboundNodes[b].outputTensors;
            d.push(v[w]);
        }
        const m = e.outputLayers;
        for (const g of m) {
            const y = g[0],
                b = g[1],
                w = g[2];
            xs(y in o);
            const v = o[y].inboundNodes[b].outputTensors;
            p.push(v[w]);
        }
        return new t({ inputs: d, outputs: p, name: u });
    }
    get stateful() {
        if (this._stateful)
            throw new H(
                'Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.'
            );
        for (const t of this.layers) if (t.stateful) return !0;
        return !1;
    }
    resetStates() {
        Y(() => {
            this.layers.forEach((t) => {
                t.stateful && t.resetStates();
            });
        });
    }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function vF(n, t, e) {
    const s = t.length;
    if (n == null || (Array.isArray(n) && n.length === 0))
        return t.map((r) => null);
    if (s === 1)
        return Array.isArray(n) && n.length === 1
            ? n
            : typeof n == 'object' && t[0] in n
            ? [n[t[0]]]
            : [n];
    if (Array.isArray(n)) {
        if (n.length !== s)
            throw new Error(
                `Provided ${e} is an array of ${n.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`
            );
        return n;
    } else if (
        typeof n == 'object' &&
        Object.keys(n).length > 0 &&
        typeof n[Object.keys(n)[0]] == 'object'
    ) {
        const r = [];
        return (
            t.forEach((o) => {
                o in n ? r.push(n[o]) : r.push(null);
            }),
            r
        );
    } else
        throw new Error(
            `The model has multiple (${s}) outputs, so ${e} must be either an array with ${s} elements or an object with ${t} keys. Provided ${e} not understood: ${JSON.stringify(
                n
            )}`
        );
}
function tw(n, t) {
    return vF(n, t, 'classWeight');
}
async function ew(n, t, e, s) {
    if (t != null || s != null)
        throw new Error('Support sampleWeight is not implemented yet');
    if (e != null) {
        const r = Y(() => {
                if (n.shape.length === 1) return Hs(n);
                if (n.shape.length === 2) {
                    if (n.shape[1] > 1) return Zo(n, 1);
                    if (n.shape[1] === 1) return j(n, [n.shape[0]]);
                    throw new Error(
                        `Encountered unexpected last-dimension size (${n.shape[1]}) during handling of class weights. The size is expected to be >= 1.`
                    );
                } else
                    throw new Error(
                        `Unexpected rank of target (y) tensor (${n.rank}) during handling of class weights. The rank is expected to be 1 or 2.`
                    );
            }),
            o = Array.from(await r.data());
        Lt(r);
        const i = [];
        return (
            o.forEach((a) => {
                if (e[a] == null)
                    throw new Error(
                        `classWeight must contain all classes in the training data. The class ${a} exists in the data but not in classWeight`
                    );
                i.push(e[a]);
            }),
            je(i, 'float32')
        );
    } else return null;
}
function kF(n, t) {
    return U(n, t);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ const SF = 32;
function nw(n, t) {
    let e, s;
    const r = t;
    (e = r.xs),
        (s = r.ys),
        _(
            e != null && s != null,
            () =>
                `A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`
        );
    const o = ky('input', n.inputNames, e),
        i = ky('output', n.outputNames, s),
        a = o[0].shape[0];
    _(
        o.length === n.inputs.length,
        () =>
            `LayersModel has ${
                n.inputs.length
            } inputs, but the dataset provides ${
                o.length
            } inputs.  (Expected input keys: ${JSON.stringify(n.inputNames)})`
    ),
        _(
            i.length === n.outputs.length,
            () =>
                `LayersModel has ${
                    n.outputs.length
                } outputs, but the dataset provides ${
                    i.length
                } outputs.  (Expected output keys: ${JSON.stringify(
                    n.outputNames
                )})`
        );
    for (let l = 0; l < o.length; l++)
        _(
            o[l].shape[0] === a,
            () =>
                `Batch size mismatch: input ${n.inputNames[l]} has ${o[l].shape[0]}; expected  ${a} based on input ${n.inputNames[0]}.`
        );
    for (let l = 0; l < i.length; l++)
        _(
            i[l].shape[0] === a,
            () =>
                `Batch size mismatch: output ${n.outputNames[l]} has ${i[l].shape[0]}; expected  ${a} based on input ${n.inputNames[0]}.`
        );
    return { xs: o, ys: i };
}
function ky(n, t, e) {
    if (e instanceof ce) return [e];
    if (Array.isArray(e))
        return (
            _(
                e.length === t.length,
                () =>
                    `Received an array of ${e.length} Tensors, but expected ${t.length} to match the ${n} keys ${t}.`
            ),
            e
        );
    {
        const s = [];
        for (const r of t) {
            if (e[r] == null)
                throw new H(
                    `The feature data generated by the dataset lacks the required ${n} key '${r}'.`
                );
            s.push(e[r]);
        }
        return s;
    }
}
function IF(n) {
    if (n.length === 3)
        throw new Ft('Validation with sample weights is not implemented yet.');
    return { xs: n[0], ys: n[1] };
}
async function CF(n, t, e) {
    const s = e.batchesPerEpoch != null;
    if (
        (_(
            n.optimizer != null,
            () =>
                'You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).'
        ),
        _(
            e != null,
            () =>
                'For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.'
        ),
        _(
            e.epochs != null && e.epochs > 0 && Number.isInteger(e.epochs),
            () =>
                `For fitDataset(), config.epochs is expected to be a positive integer, but got ${e.epochs}`
        ),
        _(
            !s ||
                (e.batchesPerEpoch > 0 && Number.isInteger(e.batchesPerEpoch)),
            () =>
                `For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${e.batchesPerEpoch}`
        ),
        _(
            e.validationSplit == null,
            () =>
                '`validationSplit` is not supported by `fitDataset()`. Use validationData instead.'
        ),
        n.isTraining)
    )
        throw new Error(
            'Cannot start training because another fit() call is ongoing.'
        );
    n.isTraining = !0;
    try {
        const r = e.validationData != null;
        let o, i;
        if (r)
            if (Sy(e.validationData))
                _(
                    e.validationBatches == null ||
                        (e.validationBatches > 0 &&
                            Number.isInteger(e.validationBatches)),
                    () =>
                        `For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${e.validationBatches}`
                );
            else {
                const g = IF(e.validationData);
                (o = g.xs), (i = g.ys);
            }
        const a = n.makeTrainFunction(),
            l = n.getDedupedMetricsNames();
        let c;
        r ? (c = l.slice().concat(l.map((g) => 'val_' + g))) : (c = l.slice());
        const u = H1(e.callbacks, e.yieldEvery),
            h = e.verbose == null ? 1 : e.verbose,
            { callbackList: d, history: p } = j1(
                u,
                h,
                e.epochs,
                null,
                null,
                $F(t, e),
                null,
                r,
                c
            );
        d.setModel(n),
            (n.history = p),
            await d.onTrainBegin(),
            (n.stopTraining_ = !1);
        let f = e.initialEpoch == null ? 0 : e.initialEpoch,
            m = await t.iterator();
        for (; f < e.epochs; ) {
            const g = {};
            await d.onEpochBegin(f);
            let y = 0,
                b = 0;
            for (s || (m = await t.iterator()); !s || y < e.batchesPerEpoch; ) {
                const w = await m.next();
                if (s && w.done) {
                    console.warn(
                        `You provided \`batchesPerEpoch\` as ${
                            e.batchesPerEpoch
                        }, but your dataset iterator ran out of data after ${y} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${
                            e.batchesPerEpoch * e.epochs
                        } batches). You may need to use the repeat() function when building your dataset.`
                    );
                    break;
                }
                if (w.value != null) {
                    const { xs: x, ys: v } = nw(n, w.value),
                        C = {};
                    (C.batch = b),
                        (C.size = x[0].shape[0]),
                        await d.onBatchBegin(b, C);
                    const $ = [];
                    if (e.classWeight != null) {
                        const R = tw(e.classWeight, n.outputNames);
                        for (let P = 0; P < R.length; ++P)
                            $.push(await ew(v[P], null, R[P]));
                    }
                    const T = x.concat(v).concat($),
                        N = a(T);
                    Lt(T);
                    for (let R = 0; R < l.length; ++R) {
                        const P = l[R],
                            E = N[R];
                        (C[P] = E), Oe(E);
                    }
                    await d.onBatchEnd(b, C), G1(C), b++, y++;
                }
                if (s ? y >= e.batchesPerEpoch : w.done) {
                    if (r) {
                        let x;
                        Sy(e.validationData)
                            ? (x = Qt(
                                  await n.evaluateDataset(e.validationData, {
                                      batches: e.validationBatches,
                                  })
                              ))
                            : (x = Qt(
                                  n.evaluate(o, i, {
                                      batchSize:
                                          e.validationBatchSize == null
                                              ? SF
                                              : e.validationBatchSize,
                                      verbose: 0,
                                  })
                              ));
                        for (let v = 0; v < n.metricsNames.length; ++v)
                            g[`val_${n.metricsNames[v]}`] = x[v];
                    }
                    break;
                }
                if (n.stopTraining_) break;
            }
            if ((await d.onEpochEnd(f, g), f++, n.stopTraining_)) break;
        }
        return await d.onTrainEnd(), await n.history.syncData(), n.history;
    } finally {
        n.isTraining = !1;
    }
}
function $F(n, t) {
    let e = null;
    return (
        t.batchesPerEpoch != null
            ? (e = t.batchesPerEpoch)
            : Number.isFinite(n.size) && (e = n.size),
        e
    );
}
function Sy(n) {
    return typeof n.iterator == 'function';
}
function NF(n) {
    return typeof n.next == 'function';
}
async function TF(n, t, e) {
    e = e || {};
    const s = e.batches != null,
        r = n.testFunction;
    let o = [];
    if (e.verbose > 0) throw new Ft('Verbose mode is not implemented yet.');
    _(
        !s || (e.batches > 0 && Number.isInteger(e.batches)),
        () =>
            `Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(
                e.batches
            )}`
    );
    const i = NF(t) ? t : await t.iterator();
    let a = 0,
        l = 0;
    for (; !s || l < e.batches; ) {
        const c = await i.next();
        if (
            ((o = Y(() => {
                if (c.value) {
                    const { xs: u, ys: h } = nw(n, c.value),
                        d = u.concat(h),
                        p = Y(() => r(d));
                    if ((Lt(d), l === 0))
                        for (let m = 0; m < p.length; ++m) o.push(At(0));
                    const f = d[0].shape[0];
                    for (let m = 0; m < p.length; ++m) {
                        const g = p[m],
                            y = o[m];
                        (o[m] = Y(() => ct(o[m], U(f, g)))), l > 0 && Lt(y);
                    }
                    Lt(p), (a += f), ++l;
                }
                return o;
            })),
            c.done)
        ) {
            s &&
                console.warn(
                    `Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${e.batches} batches). You may need to use the repeat() function when building your dataset.`
                );
            break;
        }
    }
    for (let c = 0; c < o.length; ++c) {
        const u = o[c];
        (o[c] = Et(o[c], a)), Lt(u);
    }
    return an(o);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function Uh(n) {
    _(
        n > 0 && Number.isInteger(n),
        () => `batchSize is required to be a positive integer, but got ${n}`
    );
}
function Ai(n, t, e) {
    return n == null
        ? [null]
        : Array.isArray(n)
        ? n.map((s) => Zr(s, t, e - t))
        : Zr(n, t, e - t);
}
function Ld(n, t) {
    return Y(() =>
        n == null
            ? null
            : Array.isArray(n)
            ? n.map((e) => Ld(e, t))
            : _1(n, t.dtype === 'int32' ? t : bt(t, 'int32'))
    );
}
function Gh(n, t) {
    const e = [];
    let s = 0,
        r = null;
    for (; s < n; ) (r = s + t), r >= n && (r = n), e.push([s, r]), (s = r);
    return e;
}
function sw(n) {
    const t = [];
    n instanceof ce && (n = [n]);
    for (let e = 0; e < n.length; ++e) {
        const s = n[e];
        if (s.rank === 1) t.push(hl(s, 1));
        else {
            if (s.rank === 0)
                throw new Error(
                    'Expected tensor to be at least 1D, but received a 0D tensor (scalar).'
                );
            t.push(s);
        }
    }
    return t;
}
function ss(n, t) {
    if (n == null) return;
    const e = [];
    if (t instanceof ce) e.push(t.id);
    else if (Array.isArray(t)) t.forEach((r) => e.push(r.id));
    else if (t != null)
        for (const r in t) {
            const o = t[r];
            e.push(o.id);
        }
    const s = [];
    if (n instanceof ce) e.indexOf(n.id) === -1 && s.push(n);
    else if (Array.isArray(n))
        n.forEach((r) => {
            e.indexOf(r.id) === -1 && s.push(r);
        });
    else if (n != null)
        for (const r in n) {
            const o = n[r];
            e.indexOf(o.id) === -1 && s.push(o);
        }
    s.forEach((r) => {
        r.isDisposed || r.dispose();
    });
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function EF(n) {
    return n instanceof ce;
}
function Pd(n) {
    return Array.isArray(n);
}
function Iy(n) {
    return !EF(n) && !Pd(n);
}
function Cy(n, t, e, s = !0, r = '') {
    if (t == null || t.length === 0) {
        if (n != null) {
            let i = !1;
            if (Pd(n) && n.length > 0) i = !0;
            else if (Iy(n)) {
                for (const a in n)
                    if (n.hasOwnProperty(a)) {
                        i = !0;
                        break;
                    }
            } else i = !0;
            if (i)
                throw new H(
                    `Error when checking model ${r} expected no data, but got ${n}`
                );
        }
        return [];
    }
    if (n == null) return t.map((i) => null);
    let o;
    if (Iy(n)) {
        (n = n), (o = []);
        for (const i of t) {
            if (n[i] == null)
                throw new H(
                    `No data provided for "${i}". Need data for each key in: ${t}`
                );
            o.push(n[i]);
        }
    } else if (Pd(n)) {
        if (((n = n), n.length !== t.length))
            throw new H(
                `Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${n}`
            );
        o = n;
    } else {
        if (((n = n), t.length > 1))
            throw new H(
                `The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${n.shape}`
            );
        o = [n];
    }
    if (((o = sw(o)), e != null))
        for (let i = 0; i < t.length; ++i) {
            if (e[i] == null) continue;
            const a = o[i];
            if (a.shape.length !== e[i].length)
                throw new H(
                    `Error when checking ${r}: expected ${t[i]} to have ${e[i].length} dimension(s). but got array with shape ${a.shape}`
                );
            for (let l = 0; l < e[i].length; ++l) {
                if (l === 0 && !s) continue;
                const c = a.shape[l],
                    u = e[i][l];
                if (u != null && u >= 0 && c !== u)
                    throw new H(
                        `${r} expected a batch of elements where each example has shape [${e[
                            i
                        ].slice(1, e[i].length)}] (i.e.,tensor shape [*,${e[
                            i
                        ].slice(
                            1,
                            e[i].length
                        )}]) but the ${r} received an input with ${
                            a.shape[0]
                        } examples, each with shape [${a.shape.slice(
                            1,
                            a.shape.length
                        )}] (tensor shape [${a.shape}])`
                    );
            }
        }
    return o;
}
function _F(n, t, e) {
    const s = cr(n.map((o) => o.shape[0]));
    s.sort();
    const r = cr(t.map((o) => o.shape[0]));
    if ((r.sort(), s.length > 1))
        throw new H(
            `All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(
                n.map((o) => o.shape)
            )}`
        );
    if (r.length > 1)
        throw new H(
            `All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(
                t.map((o) => o.shape)
            )}`
        );
    if (s.length > 0 && r.length > 0 && !Ut(s, r))
        throw new H(
            `Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`
        );
}
function AF(n, t, e) {
    const s = [fh, mh, Yi];
    for (let r = 0; r < n.length; ++r) {
        const o = n[r],
            i = t[r],
            a = e[r];
        if (i != null) {
            if (i === Yi && o.shape[o.shape.length - 1] === 1)
                throw new H(
                    `You are passing a target array of shape ${o.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`
                );
            if (s.indexOf(i) !== -1) {
                const l = o.shape.slice(1),
                    c = a.slice(1);
                for (let u = 0; u < l.length; ++u) {
                    const h = l[u],
                        d = c[u];
                    if (d != null && h !== d)
                        throw new H(
                            `A target Tensor with shape ${o.shape} was passed for an output of shape ${a}, while using a loss function that expects targets to have the same shape as the output.`
                        );
                }
            }
        }
    }
}
function $y(n, t, e, s = !0, r = '') {
    let o;
    if (Array.isArray(n)) {
        if (n.length !== t.length)
            throw new H(
                `Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${n.length} Tensors(s).`
            );
        o = n;
    } else {
        if (t.length > 1)
            throw new H(
                `The model expects ${
                    t.length
                } ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(
                    n.shape
                )}.`
            );
        o = [n];
    }
    if (e != null)
        for (let i = 0; i < t.length; ++i) {
            if (e[i] == null) continue;
            const a = o[i];
            if (a.shape.length !== e[i].length)
                throw new H(
                    `Error when checking ${r}: expected ${t[i]} to have ${
                        e[i].length
                    } dimension(s), but got array with shape ${JSON.stringify(
                        a.shape
                    )}`
                );
            for (let l = 0; l < e[i].length; ++l) {
                if (l === 0 && !s) continue;
                const c = a.shape[l],
                    u = e[i][l];
                if (u != null && u !== c)
                    throw new H(
                        `Error when checking ${r}: expected ${
                            t[i]
                        } to have shape ${JSON.stringify(
                            e[i]
                        )} but got array with shape ${JSON.stringify(a.shape)}.`
                    );
            }
        }
}
function RF(n, t) {
    if (n == null || (Array.isArray(n) && n.length === 0))
        return t.map((s) => []);
    let e;
    if (typeof n == 'string' || typeof n == 'function') e = [n];
    else if (Array.isArray(n) || typeof n == 'object') e = n;
    else
        throw new TypeError(
            `Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${n}`
        );
    if (Array.isArray(e)) return t.map((s) => e);
    {
        const s = [];
        for (const r of t) {
            let o = e.hasOwnProperty(r) ? e[r] : [];
            Array.isArray(o) || (o = [o]), s.push(o);
        }
        return s;
    }
}
const DF = 'layers-model';
class Ho extends rs {
    constructor(t) {
        super(t), (this.isTraining = !1);
    }
    summary(t, e, s = console.log) {
        if (!this.built)
            throw new H(
                'This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).'
            );
        mF(this, t, e, s);
    }
    compile(t) {
        if (
            (t.loss == null && (t.loss = []),
            (this.loss = t.loss),
            typeof t.optimizer == 'string')
        )
            (this.optimizer_ = fF(t.optimizer)), (this.isOptimizerOwned = !0);
        else {
            if (!(t.optimizer instanceof Ar))
                throw new H(
                    'User-defined optimizer must be an instance of tf.Optimizer.'
                );
            (this.optimizer_ = t.optimizer), (this.isOptimizerOwned = !1);
        }
        let e = [];
        if (
            !Array.isArray(t.loss) &&
            typeof t.loss != 'string' &&
            typeof t.loss != 'function'
        ) {
            t.loss = t.loss;
            for (const i in t.loss)
                if (this.outputNames.indexOf(i) === -1)
                    throw new H(
                        `Unknown entry in loss dictionary: "${i}". Only expected the following keys: ${this.outputNames}`
                    );
            for (const i of this.outputNames)
                t.loss[i] == null &&
                    console.warn(
                        `Output "${i}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${i} during training`
                    ),
                    e.push(Wh(t.loss[i]));
        } else if (Array.isArray(t.loss)) {
            if (t.loss.length !== this.outputs.length)
                throw new H(
                    `When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`
                );
            e = t.loss.map((a) => Wh(a));
        } else {
            const i = Wh(t.loss);
            this.outputs.forEach((a) => {
                e.push(i);
            });
        }
        (this.lossFunctions = e),
            (this.feedOutputNames = []),
            (this.feedOutputShapes = []),
            (this.feedLossFns = []);
        for (let i = 0; i < this.outputs.length; ++i) {
            const a = this.internalOutputShapes[i],
                l = this.outputNames[i];
            this.feedOutputNames.push(l),
                this.feedOutputShapes.push(a),
                this.feedLossFns.push(this.lossFunctions[i]);
        }
        const s = [];
        (this.metrics = t.metrics),
            (this.metricsNames = ['loss']),
            (this.metricsTensors = []),
            Yr('loss', () => {
                for (let i = 0; i < this.outputs.length; ++i) {
                    if (s.indexOf(i) !== -1) continue;
                    const a = this.lossFunctions[i];
                    this.outputs.length > 1 &&
                        (this.metricsTensors.push([a, i]),
                        this.metricsNames.push(this.outputNames[i] + '_loss'));
                }
            });
        const r = RF(t.metrics, this.outputNames),
            o = (i, a, l) => {
                this.outputNames.length > 1 &&
                    (a = this.outputNames[i] + '_' + a),
                    this.metricsNames.push(a),
                    this.metricsTensors.push([l, i]);
            };
        Yr('metric', () => {
            for (let i = 0; i < this.outputs.length; ++i) {
                if (s.indexOf(i) !== -1) continue;
                const a = r[i];
                ((c) => {
                    const u = '';
                    let h, d, p;
                    for (const f of c) {
                        if (
                            typeof f == 'string' &&
                            ['accuracy', 'acc', 'crossentropy', 'ce'].indexOf(
                                f
                            ) !== -1
                        ) {
                            const g = this.internalOutputShapes[i];
                            g[g.length - 1] === 1 ||
                            this.lossFunctions[i] === mh
                                ? ['accuracy', 'acc'].indexOf(f) !== -1
                                    ? (d = K1)
                                    : ['crossentropy', 'ce'].indexOf(f) !==
                                          -1 && (d = rF)
                                : this.lossFunctions[i] === fc
                                ? ['accuracy', 'acc'].indexOf(f) !== -1
                                    ? (d = oF)
                                    : ['crossentropy', 'ce'].indexOf(f) !==
                                          -1 && (d = Z1)
                                : ['accuracy', 'acc'].indexOf(f) !== -1
                                ? (d = X1)
                                : ['crossentropy', 'ce'].indexOf(f) !== -1 &&
                                  (d = Y1);
                            let y;
                            ['accuracy', 'acc'].indexOf(f) !== -1
                                ? (y = 'acc')
                                : ['crossentropy', 'ce'].indexOf(f) !== -1 &&
                                  (y = 'ce'),
                                (p = d),
                                (h = u + y);
                        } else (p = pF(f)), (h = u + _l(f));
                        let m;
                        Yr(h, () => {
                            m = p;
                        }),
                            o(i, h, m);
                    }
                })(a);
            }
        }),
            (this.collectedTrainableWeights = this.trainableWeights);
    }
    checkTrainableWeightsConsistency() {
        this.collectedTrainableWeights != null &&
            this.trainableWeights.length !==
                this.collectedTrainableWeights.length &&
            console.warn(
                'Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?'
            );
    }
    evaluate(t, e, s = {}) {
        const r = s.batchSize == null ? 32 : s.batchSize;
        Uh(r);
        const o = !0,
            i = this.standardizeUserDataXY(t, e, o, r);
        try {
            const a = i[0].concat(i[1]);
            this.makeTestFunction();
            const l = this.testFunction,
                c = this.testLoop(l, a, r, s.verbose, s.steps);
            return an(c);
        } finally {
            ss(i[0], t), ss(i[1], e);
        }
    }
    async evaluateDataset(t, e) {
        return this.makeTestFunction(), TF(this, t, e);
    }
    checkNumSamples(t, e, s, r = 'steps') {
        let o;
        if (s != null) {
            if (((o = null), e != null))
                throw new H(
                    `If ${r} is set, batchSize must be null or undefined.Got batchSize = ${e}`
                );
        } else if (t != null)
            Array.isArray(t) ? (o = t[0].shape[0]) : (o = t.shape[0]);
        else
            throw new H(
                `Either the input data should have a defined shape, or ${r} shoud be specified.`
            );
        return o;
    }
    execute(t, e) {
        if (Array.isArray(e) && e.length === 0)
            throw new H('`outputs` is an empty Array, which is not allowed.');
        const s = Array.isArray(e),
            r = s ? e : [e],
            o = this.retrieveSymbolicTensors(r),
            i = new or();
        if ((t instanceof ce && (t = [t]), Array.isArray(t))) {
            if (t.length !== this.inputs.length)
                throw new H(
                    `The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`
                );
            for (let l = 0; l < this.inputs.length; ++l)
                i.add(this.inputs[l], t[l]);
        } else
            for (const l of this.inputs) {
                const c = t[l.name];
                if (c == null)
                    throw new H(
                        `No value is provided for the model's input ${l.name}`
                    );
                i.add(l, c);
            }
        const a = Li(o, i);
        return s ? a : a[0];
    }
    retrieveSymbolicTensors(t) {
        const e = co(null, t.length);
        let s = t.length;
        for (const r of this.layers) {
            const o = Array.isArray(r.output) ? r.output : [r.output],
                i = o.map((a) => a.name);
            for (let a = 0; a < t.length; ++a) {
                const l = i.indexOf(t[a]);
                if ((l !== -1 && ((e[a] = o[l]), s--), s === 0)) break;
            }
            if (s === 0) break;
        }
        if (s > 0) {
            const r = [];
            throw (
                (e.forEach((o, i) => {
                    o == null && r.push(t[i]);
                }),
                new H(
                    `Cannot find SymbolicTensors for output name(s): ${JSON.stringify(
                        r
                    )}`
                ))
            );
        }
        return e;
    }
    predictLoop(t, e = 32, s = !1) {
        return Y(() => {
            const r = this.checkNumSamples(t);
            if (s)
                throw new Ft('Verbose predictLoop() is not implemented yet.');
            const o = Gh(r, e),
                i = this.outputs.map((a) => []);
            for (let a = 0; a < o.length; ++a)
                Y(() => {
                    const c = o[a][0],
                        u = o[a][1],
                        h = Ai(t, c, u),
                        d = [];
                    if (Array.isArray(h))
                        for (let f = 0; f < h.length; ++f)
                            d.push({ key: this.inputs[f], value: h[f] });
                    else d.push({ key: this.inputs[0], value: h });
                    const p = new or(d);
                    return Li(this.outputs, p);
                }).forEach((c, u) => i[u].push(c));
            return an(i.map((a) => Ie(a, 0)));
        });
    }
    predict(t, e = {}) {
        const s = sw(t);
        $y(s, this.inputNames, this.feedInputShapes, !1);
        try {
            const r = e.batchSize == null ? 32 : e.batchSize;
            return Uh(r), this.predictLoop(s, r);
        } finally {
            ss(s, t);
        }
    }
    predictOnBatch(t) {
        $y(t, this.inputNames, this.feedInputShapes, !0);
        const e = (Array.isArray(t) ? t[0] : t).shape[0];
        return this.predictLoop(t, e);
    }
    standardizeUserDataXY(t, e, s = !0, r) {
        if (this.optimizer_ == null)
            throw new qn(
                'You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).'
            );
        const o = [];
        for (let i = 0; i < this.feedOutputShapes.length; ++i) {
            const a = this.feedOutputShapes[i];
            this.feedLossFns[i] === fc
                ? o.push(a.slice(0, a.length - 1).concat([1]))
                : o.push(a);
        }
        if (
            ((t = Cy(
                t,
                this.feedInputNames,
                this.feedInputShapes,
                !1,
                'input'
            )),
            (e = Cy(e, this.feedOutputNames, o, !1, 'target')),
            _F(t, e),
            AF(e, this.feedLossFns, this.feedOutputShapes),
            this.stateful && r != null && r > 0 && t[0].shape[0] % r !== 0)
        )
            throw new H(
                `In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${t[0].shape[0]} sample(s).`
            );
        return [t, e];
    }
    async standardizeUserData(t, e, s, r, o = !0, i) {
        const [a, l] = this.standardizeUserDataXY(t, e, o, i);
        if (s != null) throw new Error('sample weight is not supported yet.');
        let c = null;
        if (r != null) {
            const u = tw(r, this.outputNames);
            c = [];
            for (let h = 0; h < u.length; ++h)
                c.push(await ew(l[h], null, u[h]));
        }
        return [a, l, c];
    }
    testLoop(t, e, s, r = 0, o) {
        return Y(() => {
            const i = this.checkNumSamples(e, s, o, 'steps'),
                a = [];
            if (r > 0) throw new Ft('Verbose mode is not implemented yet.');
            if (o != null)
                throw new Ft('steps mode in testLoop() is not implemented yet');
            {
                const l = Gh(i, s),
                    c = je(hs(0, i));
                for (let u = 0; u < l.length; ++u) {
                    const h = l[u][0],
                        d = l[u][1],
                        p = Zr(c, h, d - h),
                        f = Ld(e, p),
                        m = t(f);
                    if (u === 0)
                        for (let g = 0; g < m.length; ++g) a.push(At(0));
                    for (let g = 0; g < m.length; ++g) {
                        const y = m[g];
                        a[g] = ct(a[g], U(d - h, y));
                    }
                }
                for (let u = 0; u < a.length; ++u) a[u] = Et(a[u], i);
            }
            return a;
        });
    }
    getDedupedMetricsNames() {
        const t = this.metricsNames,
            e = [];
        for (let s = 0; s < t.length; ++s) {
            const r = t[s];
            let o = r;
            if (uy(t, r) > 1) {
                const i = uy(t.slice(0, s), r);
                o += `_${i}`;
            }
            e.push(o);
        }
        return e;
    }
    makeTrainFunction() {
        return (t) => {
            const e = [],
                s = t.slice(0, this.inputs.length),
                r = t.slice(
                    this.inputs.length,
                    this.inputs.length + this.outputs.length
                ),
                o = t.slice(
                    this.inputs.length + this.outputs.length,
                    this.inputs.length + this.outputs.length * 2
                ),
                i = [],
                a = () => {
                    const h = [];
                    for (let m = 0; m < this.inputs.length; ++m)
                        h.push({ key: this.inputs[m], value: s[m] });
                    const d = new or(h),
                        p = Li(this.outputs, d, { training: !0 });
                    let f;
                    for (let m = 0; m < this.lossFunctions.length; ++m) {
                        const g = this.lossFunctions[m];
                        let y = g(r[m], p[m]);
                        o[m] != null && (y = kF(y, o[m]));
                        const b = ge(y);
                        e.push(b), m === 0 ? (f = y) : (f = ct(f, y));
                    }
                    for (let m = 0; m < this.metricsTensors.length; ++m) {
                        let g;
                        if (this.outputs.length > 1 && m < this.outputs.length)
                            g = e[m];
                        else {
                            const y = this.metricsTensors[m][0],
                                b = this.metricsTensors[m][1];
                            g = ge(y(r[b], p[b]));
                        }
                        Oe(g), i.push(g);
                    }
                    return (
                        (f = ge(f)),
                        this.calculateLosses().forEach((m) => {
                            f = ct(f, m);
                        }),
                        f
                    );
                },
                l = this.collectedTrainableWeights.map((h) => h.read()),
                c = !0;
            return [this.optimizer_.minimize(a, c, l)].concat(i);
        };
    }
    makeTestFunction() {
        this.testFunction = (t) =>
            Y(() => {
                const e = [];
                let s;
                const r = t.slice(0, this.inputs.length),
                    o = t.slice(
                        this.inputs.length,
                        this.inputs.length + this.outputs.length
                    ),
                    i = [];
                for (let c = 0; c < this.inputs.length; ++c)
                    i.push({ key: this.inputs[c], value: r[c] });
                const a = new or(i),
                    l = Li(this.outputs, a);
                for (let c = 0; c < this.lossFunctions.length; ++c) {
                    const u = this.lossFunctions[c],
                        h = ge(u(o[c], l[c]));
                    c === 0 ? (s = h) : (s = ct(s, h)), e.push(s);
                }
                for (let c = 0; c < this.metricsTensors.length; ++c) {
                    const u = this.metricsTensors[c][0],
                        h = this.metricsTensors[c][1],
                        d = ge(u(o[h], l[h]));
                    e.push(d);
                }
                return e;
            });
    }
    async fit(t, e, s = {}) {
        if (this.isTraining)
            throw new Error(
                'Cannot start training because another fit() call is ongoing.'
            );
        this.isTraining = !0;
        let r, o, i, a, l, c, u, h, d;
        try {
            const p = s.batchSize == null ? 32 : s.batchSize;
            Uh(p);
            const f = !1,
                m = await this.standardizeUserData(
                    t,
                    e,
                    s.sampleWeight,
                    s.classWeight,
                    f,
                    p
                );
            (r = m[0]), (o = m[1]), (d = m[2]);
            let g = !1,
                y;
            if (s.validationData != null && s.validationData.length > 0) {
                if (((g = !0), s.validationData.length === 2))
                    (l = s.validationData[0]), (c = s.validationData[1]);
                else
                    throw s.validationData.length === 3
                        ? new Ft(
                              'validationData including sample weights is not supported yet.'
                          )
                        : new H(
                              `When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${s.validationData} is invalid.`
                          );
                const N = !0,
                    R = await this.standardizeUserData(l, c, null, null, N, p);
                (u = R[0]), (h = R[1]), (y = u.concat(h));
            } else if (
                s.validationSplit != null &&
                s.validationSplit > 0 &&
                s.validationSplit < 1
            ) {
                g = !0;
                const N = Math.floor(r[0].shape[0] * (1 - s.validationSplit)),
                    R = r[0].shape[0];
                (u = Ai(r, N, R)),
                    (i = r),
                    (r = Ai(r, 0, N)),
                    (h = Ai(o, N, R)),
                    (a = o),
                    (o = Ai(o, 0, N)),
                    (y = u.concat(h));
            } else s.validationSteps != null && (g = !0);
            const b = r.concat(o).concat(d);
            this.checkTrainableWeightsConsistency();
            const w = this.makeTrainFunction(),
                x = this.getDedupedMetricsNames();
            let v, C;
            g
                ? (this.makeTestFunction(),
                  (v = this.testFunction),
                  (C = x.slice().concat(x.map((N) => 'val_' + N))))
                : ((v = null), (y = []), (C = x.slice()));
            const $ = H1(s.callbacks, s.yieldEvery);
            return await this.fitLoop(
                w,
                b,
                x,
                p,
                s.epochs,
                s.verbose,
                $,
                v,
                y,
                s.shuffle,
                C,
                s.initialEpoch,
                null,
                null
            );
        } finally {
            (this.isTraining = !1),
                ss(r, t),
                ss(o, e),
                ss(i, t),
                ss(a, e),
                ss(u, l),
                ss(h, c),
                d != null && Lt(d);
        }
    }
    async fitLoop(t, e, s, r, o, i, a, l, c, u, h, d, p, f) {
        r == null && (r = 32),
            o == null && (o = 1),
            u == null && (u = !0),
            d == null && (d = 0);
        let m = !1;
        if (
            (l != null && c != null && (m = !0),
            f != null && ((m = !0), p == null))
        )
            throw new H(
                'Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.'
            );
        const g = this.checkNumSamples(e, r, p, 'steps_per_epoch');
        let y;
        g != null && (y = hs(0, g)), i == null && (i = 1);
        const { callbackList: b, history: w } = j1(a, i, o, d, g, p, r, m, h);
        b.setModel(this),
            (this.history = w),
            await b.onTrainBegin(),
            (this.stopTraining_ = !1);
        for (let x = d; x < o; ++x) {
            await b.onEpochBegin(x);
            const v = {};
            if (p != null)
                throw new Ft('stepsPerEpoch mode is not implemented yet.');
            {
                if (u === 'batch')
                    throw new Ft('batch shuffling is not implemneted yet');
                u && EI(y);
                const C = je(y),
                    $ = Gh(g, r);
                for (let T = 0; T < $.length; ++T) {
                    const N = {};
                    if (
                        (await b.onBatchBegin(T, N),
                        Y(() => {
                            const R = $[T][0],
                                P = $[T][1],
                                E = Zr(C, R, P - R);
                            (N.batch = T), (N.size = P - R);
                            const O = Ld(e, E),
                                S = t(O);
                            for (let L = 0; L < s.length; ++L) {
                                const q = s[L],
                                    W = S[L];
                                (N[q] = W), Oe(W);
                            }
                            if (T === $.length - 1 && m) {
                                const L = this.testLoop(l, c, r);
                                for (let q = 0; q < s.length; ++q) {
                                    const W = s[q],
                                        X = L[q];
                                    Oe(X), (v['val_' + W] = X);
                                }
                            }
                        }),
                        await b.onBatchEnd(T, N),
                        G1(N),
                        this.stopTraining_)
                    )
                        break;
                }
                C.dispose();
            }
            if ((await b.onEpochEnd(x, v), this.stopTraining_)) break;
        }
        return (
            await b.onTrainEnd(), await this.history.syncData(), this.history
        );
    }
    async fitDataset(t, e) {
        return CF(this, t, e);
    }
    async trainOnBatch(t, e) {
        const s = await this.standardizeUserData(t, e),
            r = s[0],
            o = s[1],
            a = this.makeTrainFunction()(r.concat(o)),
            l = [];
        for (const c of a) {
            const u = await c.data();
            l.push(u[0]);
        }
        return Lt(a), ss(s[0], t), ss(s[1], e), an(l);
    }
    getNamedWeights(t) {
        const e = [],
            s = t != null && t.trainableOnly,
            r = s ? this.trainableWeights : this.weights,
            o = this.getWeights(s);
        for (let i = 0; i < r.length; ++i)
            (s && !r[i].trainable) ||
                e.push({ name: r[i].originalName, tensor: o[i] });
        return e;
    }
    set stopTraining(t) {
        this.stopTraining_ = t;
    }
    get stopTraining() {
        return this.stopTraining_;
    }
    get optimizer() {
        return this.optimizer_;
    }
    set optimizer(t) {
        this.optimizer_ !== t &&
            ((this.optimizer_ = t), (this.isOptimizerOwned = !1));
    }
    dispose() {
        const t = super.dispose();
        if (
            t.refCountAfterDispose === 0 &&
            this.optimizer != null &&
            this.isOptimizerOwned
        ) {
            const e = kd().numTensors;
            this.optimizer_.dispose(),
                (t.numDisposedVariables += e - kd().numTensors);
        }
        return t;
    }
    getLossIdentifiers() {
        let t;
        if (typeof this.loss == 'string') t = Bs(this.loss);
        else if (Array.isArray(this.loss)) {
            for (const e of this.loss)
                if (typeof e != 'string')
                    throw new Error(
                        'Serialization of non-string loss is not supported.'
                    );
            t = this.loss.map((e) => Bs(e));
        } else {
            const e = Object.keys(this.loss);
            t = {};
            const s = this.loss;
            for (const r of e)
                if (typeof s[r] == 'string') t[r] = Bs(s[r]);
                else
                    throw new Error(
                        'Serialization of non-string loss is not supported.'
                    );
        }
        return t;
    }
    getMetricIdentifiers() {
        if (
            typeof this.metrics == 'string' ||
            typeof this.metrics == 'function'
        )
            return [Bs(_l(this.metrics))];
        if (Array.isArray(this.metrics))
            return this.metrics.map((t) => Bs(_l(t)));
        {
            const t = {};
            for (const e in this.metrics) t[e] = Bs(_l(this.metrics[e]));
            return t;
        }
    }
    getTrainingConfig() {
        return {
            loss: this.getLossIdentifiers(),
            metrics: this.getMetricIdentifiers(),
            optimizer_config: {
                class_name: this.optimizer.getClassName(),
                config: this.optimizer.getConfig(),
            },
        };
    }
    loadTrainingConfig(t) {
        if (t.weighted_metrics != null)
            throw new Error('Loading weight_metrics is not supported yet.');
        if (t.loss_weights != null)
            throw new Error('Loading loss_weights is not supported yet.');
        if (t.sample_weight_mode != null)
            throw new Error('Loading sample_weight_mode is not supported yet.');
        const e = bc(t.optimizer_config),
            s = Ns(e);
        let r;
        if (typeof t.loss == 'string') r = Ur(t.loss);
        else if (Array.isArray(t.loss)) r = t.loss.map((i) => Ur(i));
        else if (t.loss != null) {
            r = {};
            for (const i in t.loss) r[i] = Ur(t.loss[i]);
        }
        let o;
        if (Array.isArray(t.metrics)) o = t.metrics.map((i) => Ur(i));
        else if (t.metrics != null) {
            o = {};
            for (const i in t.metrics) o[i] = Ur(t.metrics[i]);
        }
        this.compile({ loss: r, metrics: o, optimizer: s });
    }
    async save(t, e) {
        if (typeof t == 'string') {
            const c = l0(t);
            if (c.length === 0)
                throw new H(`Cannot find any save handlers for URL '${t}'`);
            if (c.length > 1)
                throw new H(
                    `Found more than one (${c.length}) save handlers for URL '${t}'`
                );
            t = c[0];
        }
        if (t.save == null)
            throw new H(
                'LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.'
            );
        const s = await bd(this.getNamedWeights(e)),
            r = !1,
            o = null,
            a = {
                modelTopology: this.toJSON(o, r),
                format: DF,
                generatedBy: `TensorFlow.js tfjs-layers v${Q1}`,
                convertedBy: null,
            };
        if ((e == null ? !1 : e.includeOptimizer) && this.optimizer != null) {
            a.trainingConfig = this.getTrainingConfig();
            const c = 'optimizer',
                { data: u, specs: h } = await bd(
                    await this.optimizer.getWeights(),
                    c
                );
            s.specs.push(...h), (s.data = r0([s.data, u]));
        }
        return (
            this.userDefinedMetadata != null &&
                (vy(this.userDefinedMetadata, this.name, !0),
                (a.userDefinedMetadata = this.userDefinedMetadata)),
            (a.weightData = s.data),
            (a.weightSpecs = s.specs),
            t.save(a)
        );
    }
    setUserDefinedMetadata(t) {
        vy(t, this.name), (this.userDefinedMetadata = t);
    }
    getUserDefinedMetadata() {
        return this.userDefinedMetadata;
    }
}
Ho.className = 'Model';
ut(Ho);
class rw extends Ho {}
rw.className = 'Functional';
ut(rw);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ async function OF(n, t) {
    if ((t == null && (t = {}), typeof n == 'string')) {
        const e = c0(n, t);
        if (e.length === 0) e.push(Lx(n, t));
        else if (e.length > 1)
            throw new H(
                `Found more than one (${e.length}) load handlers for URL '${n}'`
            );
        n = e[0];
    }
    return FF(n, void 0, t);
}
async function FF(n, t, e) {
    if ((e == null && (e = {}), n.load == null))
        throw new H(
            'Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.'
        );
    const s = await n.load();
    let r = s.modelTopology;
    r.model_config != null && (r = r.model_config);
    const o = e.strict == null ? !0 : e.strict,
        i = s.weightData != null && s.weightSpecs != null && o,
        a = Ns(bc(r), t, i),
        l = s.trainingConfig;
    if (
        (l != null && a.loadTrainingConfig(l),
        s.userDefinedMetadata != null &&
            a.setUserDefinedMetadata(s.userDefinedMetadata),
        s.weightData != null)
    ) {
        if (s.weightSpecs == null)
            throw new H(
                'LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.'
            );
        const { modelWeights: c, optimizerWeights: u } = LF(
            s.weightData,
            s.weightSpecs
        );
        a.loadWeights(c, o),
            a.optimizer != null &&
                u.length > 0 &&
                (await a.optimizer.setWeights(u)),
            Lt(c),
            Lt(u.map((h) => h.tensor));
    }
    return a;
}
function LF(n, t) {
    const e = xf(n, t),
        s = {},
        r = [];
    return (
        t.forEach((o) => {
            o.group === 'optimizer'
                ? r.push({ name: o.name, tensor: e[o.name] })
                : (s[o.name] = e[o.name]);
        }),
        { modelWeights: s, optimizerWeights: r }
    );
}
class si extends Ho {
    constructor(t) {
        if (
            (super({ inputs: [], outputs: [] }),
            (t = t || {}),
            (this.trainable = !0),
            (this.built = !1),
            (this.name = t.name != null ? t.name : hh('sequential_')),
            t.layers != null)
        )
            for (const e of t.layers) this.add(e);
    }
    checkShape(t) {
        if (t.inboundNodes[0].outputTensors[0].shape.some((s) => s < 0))
            throw new H(
                `Negative dimension size caused by adding layer ${t.name} with input shape [${t.inboundNodes[0].inputTensors[0].shape}]`
            );
    }
    add(t) {
        const e = t instanceof si || t instanceof Ho;
        let s;
        if (e) {
            if (((s = t), s.outputs.length !== 1))
                throw new H(
                    'All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.'
                );
            if (s.inputs.length !== 1)
                throw new H(
                    'All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.'
                );
        }
        if (this.outputs.length === 0) {
            if (t.inboundNodes.length === 0) {
                if (t.batchInputShape == null)
                    throw new H(
                        'The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.'
                    );
                const r = FO({
                    batchShape: t.batchInputShape,
                    dtype: t.dtype,
                    name: t.name + '_input',
                });
                t.apply(r);
            }
            if (e) (this.outputs = s.outputs), (this.inputs = s.inputs);
            else {
                if (t.inboundNodes.length !== 1)
                    throw new H(
                        `A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`
                    );
                if (t.inboundNodes[0].outputTensors.length !== 1)
                    throw new H(
                        'All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.'
                    );
                this.checkShape(t),
                    (this.outputs = [t.inboundNodes[0].outputTensors[0]]),
                    (this.inputs = B1(this.outputs[0]));
            }
            (this.inboundNodes = []),
                new ph({
                    outboundLayer: this,
                    inboundLayers: [],
                    nodeIndices: [],
                    tensorIndices: [],
                    inputTensors: this.inputs,
                    outputTensors: this.outputs,
                    inputMasks: co(null, this.inputs.length),
                    outputMasks: [null],
                    inputShapes: this.inputs.map((r) => r.shape),
                    outputShapes: this.outputs[0].shape,
                });
        } else {
            const r = t.apply(this.outputs[0]);
            if (Array.isArray(r))
                throw new TypeError(
                    'All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.'
                );
            this.checkShape(t),
                (this.outputs = [r]),
                (this.inboundNodes[0].outputTensors = this.outputs),
                (this.inboundNodes[0].outputShapes = [this.outputs[0].shape]);
        }
        this.layers.push(t), (this.built = !1);
    }
    pop() {
        if (this.layers.length === 0)
            throw new TypeError('There are no layers in the model.');
        if ((this.layers.pop(), this.layers.length === 0))
            (this.outputs = []),
                (this.inboundNodes = []),
                (this.outboundNodes = []);
        else {
            const t = this.layers.length - 1;
            (this.layers[t].outboundNodes = []),
                (this.outputs = [this.layers[t].output]),
                (this.inboundNodes[0].outputTensors = this.outputs),
                (this.inboundNodes[0].outputShapes = [this.outputs[0].shape]);
        }
    }
    call(t, e) {
        return this.model == null && this.build(), this.model.call(t, e);
    }
    build(t) {
        if ((Xt(t), this.inputs.length === 0 || this.outputs.length === 0))
            throw new TypeError(
                'Sequential model cannot be built: model is empty. Add some layers first.'
            );
        (this.model = new Ho({
            inputs: this.inputs,
            outputs: this.outputs[0],
            name: this.name + '_model',
        })),
            (this.model.trainable = this.trainable),
            (this.supportsMasking = this.model.supportsMasking),
            (this.inputLayers = this.model.inputLayers),
            (this.inputLayersNodeIndices = this.model.inputLayersNodeIndices),
            (this.inputLayersTensorIndices =
                this.model.inputLayersTensorIndices),
            (this.outputLayers = this.model.outputLayers),
            (this.outputLayersNodeIndices = this.model.outputLayersNodeIndices),
            (this.outputLayersTensorIndices =
                this.model.outputLayersTensorIndices),
            (this.nodesByDepth = this.model.nodesByDepth),
            (this.containerNodes = this.model.containerNodes),
            (this.outputNames = this.model.outputNames),
            (this.inputNames = this.model.inputNames),
            (this.built = !0);
    }
    countParams() {
        return this.built || this.build(), super.countParams();
    }
    summary(t, e, s = console.log) {
        this.built || this.build(), super.summary(t, e, s);
    }
    setWeights(t) {
        this.model == null && this.build(), this.model.setWeights(t);
    }
    evaluate(t, e, s = {}) {
        if (!this.built)
            throw new qn('The model needs to be compiled before being used.');
        return this.model.evaluate(t, e, s);
    }
    async evaluateDataset(t, e) {
        if (!this.built)
            throw new qn('The model needs to be compiled before being used.');
        return this.model.evaluateDataset(t, e);
    }
    predict(t, e = {}) {
        return this.model == null && this.build(), this.model.predict(t, e);
    }
    predictOnBatch(t) {
        return this.model == null && this.build(), this.model.predictOnBatch(t);
    }
    compile(t) {
        this.build(),
            this.model.compile(t),
            (this.optimizer_ = this.model.optimizer),
            (this.isOptimizerOwned = this.model.isOptimizerOwned),
            (this.loss = this.model.loss),
            (this.metrics = this.model.metrics),
            (this.metricsTensors = this.model.metricsTensors),
            (this.metricsNames = this.model.metricsNames);
    }
    get optimizer() {
        return this.model == null ? void 0 : this.model.optimizer;
    }
    set optimizer(t) {
        this.model.optimizer = t;
    }
    async fit(t, e, s = {}) {
        if (!this.built)
            throw new qn('The model needs to be compiled before being used.');
        return this.model.fit(t, e, s);
    }
    async fitDataset(t, e) {
        if (!this.built)
            throw new qn('The model needs to be compiled before being used.');
        return this.model.fitDataset(t, e);
    }
    async trainOnBatch(t, e) {
        return this.model.trainOnBatch(t, e);
    }
    static fromConfig(t, e, s = {}, r = !1) {
        let o,
            i = {};
        if (e instanceof Array) {
            if (e[0].className == null || e[0].className === 'Merge')
                throw new H('Legacy serialization format not supported yet.');
            o = e;
        } else
            _(
                e.layers != null,
                () =>
                    "When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."
            ),
                (o = e.layers),
                delete e.layers,
                (i = e);
        const a = new t(i);
        if (!(a instanceof si))
            throw new Ft(
                `Sequential.fromConfig called on non-Sequential input: ${a}`
            );
        for (const l of o) {
            const u = Ns(l, void 0, r);
            r && u.setFastWeightInitDuringBuild(!0), a.add(u);
        }
        return a;
    }
    set stopTraining(t) {
        if (this.model == null)
            throw new H(
                'Cannot set the stopTraining property of a sequential model before it is compiled.'
            );
        this.model.stopTraining = t;
    }
    get stopTraining() {
        if (this.model == null)
            throw new H(
                'Cannot get the stopTraining property of a sequential model before it is compiled.'
            );
        return this.model.stopTraining;
    }
    getConfig() {
        const t = [];
        for (const e of this.layers) {
            const s = {};
            (s.className = e.getClassName()),
                (s.config = e.getConfig()),
                t.push(s);
        }
        return { name: this.name, layers: t };
    }
}
si.className = 'Sequential';
ut(si);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function PF(n) {
    return new si(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ let dn = class extends bi {
    getConfig() {
        return {};
    }
};
class ow extends dn {
    apply(t, e = 1) {
        return xO(t, e);
    }
}
ow.className = 'elu';
ut(ow);
class iw extends dn {
    apply(t) {
        return jf(t);
    }
}
iw.className = 'selu';
ut(iw);
class aw extends dn {
    apply(t) {
        return Ds(t);
    }
}
aw.className = 'relu';
ut(aw);
class lw extends dn {
    apply(t) {
        return Y(() => ao(6, Ds(t)));
    }
}
lw.className = 'relu6';
ut(lw);
class cw extends dn {
    apply(t) {
        return t;
    }
}
cw.className = 'linear';
ut(cw);
class uw extends dn {
    apply(t) {
        return Ss(t);
    }
}
uw.className = 'sigmoid';
ut(uw);
class hw extends dn {
    apply(t) {
        return vO(t);
    }
}
hw.className = 'hardSigmoid';
ut(hw);
class dw extends dn {
    apply(t) {
        return mi(t);
    }
}
dw.className = 'softplus';
ut(dw);
class pw extends dn {
    apply(t) {
        return wO(t);
    }
}
pw.className = 'softsign';
ut(pw);
class fw extends dn {
    apply(t) {
        return Jo(t);
    }
}
fw.className = 'tanh';
ut(fw);
let Jm = class extends dn {
    apply(t, e = -1) {
        return th(t, e);
    }
};
Jm.className = 'softmax';
ut(Jm);
class mw extends dn {
    apply(t, e = -1) {
        return Rf(t, e);
    }
}
mw.className = 'logSoftmax';
ut(mw);
class gw extends dn {
    apply(t, e = 1) {
        return Y(() => U(Ss(U(t, e)), t));
    }
}
gw.className = 'swish';
ut(gw);
class yw extends dn {
    apply(t) {
        return Y(() => U(t, Jo(mi(t))));
    }
}
yw.className = 'mish';
ut(yw);
function br(n) {
    return n.getClassName();
}
function Hh(n, t = {}) {
    return ul(n, Wn.getMap().classNameMap, t, 'activation');
}
function xr(n) {
    if (n == null) {
        const t = {};
        return (t.className = 'linear'), (t.config = {}), Hh(t);
    }
    if (typeof n == 'string') {
        const t = {};
        return (t.className = n), (t.config = {}), Hh(t);
    } else return n instanceof dn ? n : Hh(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function zF(n) {
    if (n != null && typeof n != 'object')
        throw new Error(
            `Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${n}`
        );
}
class bw extends bi {}
class xw extends bw {
    constructor(t) {
        super(),
            zF(t),
            (this.l1 = t == null || t.l1 == null ? 0.01 : t.l1),
            (this.l2 = t == null || t.l2 == null ? 0.01 : t.l2),
            (this.hasL1 = this.l1 !== 0),
            (this.hasL2 = this.l2 !== 0);
    }
    apply(t) {
        return Y(() => {
            let e = Se([1]);
            return (
                this.hasL1 && (e = ct(e, St(U(this.l1, Ce(t))))),
                this.hasL2 && (e = ct(e, St(U(this.l2, dl(t))))),
                j(e, [])
            );
        });
    }
    getConfig() {
        return { l1: this.l1, l2: this.l2 };
    }
    static fromConfig(t, e) {
        return new t({ l1: e.l1, l2: e.l2 });
    }
}
xw.className = 'L1L2';
ut(xw);
const Ny = { l1l2: 'L1L2' };
function ee(n) {
    return zm(n);
}
function Ty(n, t = {}) {
    return ul(n, Wn.getMap().classNameMap, t, 'regularizer');
}
function he(n) {
    if (n == null) return null;
    if (typeof n == 'string') {
        const e = { className: n in Ny ? Ny[n] : n, config: {} };
        return Ty(e);
    } else return n instanceof bw ? n : Ty(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ class ww extends Mt {
    constructor(t) {
        super(t ?? {}),
            (this.supportsMasking = !0),
            t != null && (this.maxValue = t.maxValue);
    }
    call(t, e) {
        t = Rt(t);
        let s = Ds(t);
        return this.maxValue != null && (s = kn(s, 0, this.maxValue)), s;
    }
    computeOutputShape(t) {
        return t;
    }
    getConfig() {
        const t = { maxValue: this.maxValue },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
ww.className = 'ReLU';
ut(ww);
class vw extends Mt {
    constructor(t) {
        super(t ?? {}),
            (this.DEFAULT_ALPHA = 0.3),
            t == null && (t = {}),
            (this.alpha = t.alpha == null ? this.DEFAULT_ALPHA : t.alpha);
    }
    call(t, e) {
        const s = Rt(t);
        return Wu(s, this.alpha);
    }
    computeOutputShape(t) {
        return t;
    }
    getConfig() {
        const t = { alpha: this.alpha },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
vw.className = 'LeakyReLU';
ut(vw);
class kw extends Mt {
    constructor(t) {
        if (
            (super(t ?? {}),
            (this.DEFAULT_ALPHA_INITIALIZER = 'zeros'),
            t == null && (t = {}),
            (this.supportsMasking = !0),
            (this.alphaInitializer = ue(
                t.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER
            )),
            (this.alphaRegularizer = he(t.alphaRegularizer)),
            (this.alphaConstraint = _e(t.alphaConstraint)),
            t.sharedAxes == null)
        )
            this.sharedAxes = null;
        else if (Array.isArray(t.sharedAxes)) this.sharedAxes = t.sharedAxes;
        else if (typeof t.sharedAxes == 'number')
            this.sharedAxes = [t.sharedAxes];
        else
            throw new H(
                `Expected sharedAxes to be a number or an array of numbers, but got ${t.sharedAxes}`
            );
    }
    build(t) {
        t = Xt(t);
        const e = t.slice(1);
        if (this.sharedAxes != null)
            for (const r of this.sharedAxes) e[r - 1] = 1;
        this.alpha = this.addWeight(
            'alpha',
            e,
            'float32',
            this.alphaInitializer,
            this.alphaRegularizer,
            !0,
            this.alphaConstraint
        );
        const s = {};
        if (this.sharedAxes != null)
            for (let r = 1; r < t.length; ++r) s[r] = t[r];
        (this.inputSpec = [new Ne({ ndim: t.length, axes: s })]),
            (this.built = !0);
    }
    call(t, e) {
        return (t = Rt(t)), Yu(t, this.alpha.read());
    }
    getConfig() {
        const t = {
                alphaInitializer: fe(this.alphaInitializer),
                alphaRegularizer: ee(this.alphaRegularizer),
                alphaConstraint: Ee(this.alphaConstraint),
                sharedAxes: this.sharedAxes,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
kw.className = 'PReLU';
ut(kw);
let Sw = class extends Mt {
    constructor(t) {
        if (
            (super(t ?? {}),
            (this.DEFAULT_ALPHA = 1),
            t == null && (t = {}),
            t.alpha != null && t.alpha !== this.DEFAULT_ALPHA)
        )
            throw new Ft(
                `Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`
            );
        this.alpha = t.alpha == null ? this.DEFAULT_ALPHA : t.alpha;
    }
    call(t, e) {
        const s = Rt(t);
        return sl(s);
    }
    computeOutputShape(t) {
        return t;
    }
    getConfig() {
        const t = { alpha: this.alpha },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
};
Sw.className = 'ELU';
ut(Sw);
class Iw extends Mt {
    constructor(t) {
        super(t ?? {}),
            (this.DEFAULT_THETA = 1),
            t == null && (t = {}),
            (this.theta = t.theta == null ? this.DEFAULT_THETA : t.theta);
    }
    call(t, e) {
        const s = Rt(t);
        return U(s, bt(Tn(s, this.theta), 'float32'));
    }
    computeOutputShape(t) {
        return t;
    }
    getConfig() {
        const t = { theta: this.theta },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
Iw.className = 'ThresholdedReLU';
ut(Iw);
class Cw extends Mt {
    constructor(t) {
        super(t ?? {}),
            (this.DEFAULT_AXIS = 1),
            t == null && (t = {}),
            (this.softmax = new Jm().apply),
            (this.axis = t.axis == null ? this.DEFAULT_AXIS : t.axis);
    }
    call(t, e) {
        return Y(() => {
            let s = Rt(t);
            const r = e.mask;
            if (r != null) {
                const o = U(kt(xn(s.shape), bt(r, s.dtype)), At(-1e9));
                s = ct(s, o);
            }
            return this.axis instanceof Array
                ? this.axis.length > 1
                    ? Sn(kt(s, Gu(s, this.axis, !0)))
                    : this.softmax(s, this.axis[0])
                : this.softmax(s, this.axis);
        });
    }
    computeOutputShape(t) {
        return t;
    }
    getConfig() {
        const t = { axis: this.axis },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
Cw.className = 'Softmax';
ut(Cw);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function jo(n, t, e) {
    if (typeof n == 'number') return co(n, t);
    if (n.length !== t)
        throw new H(
            `The ${e} argument must be an integer or tuple of ${t} integers. Received: ${n.length} elements.`
        );
    for (let s = 0; s < t; ++s) {
        const r = n[s];
        if (!mO(r))
            throw new H(
                `The ${e} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(
                    n
                )} including a non-integer number ${r}`
            );
    }
    return n;
}
function cs(n, t, e, s, r = 1) {
    if (n == null) return n;
    const o = t + (t - 1) * (r - 1);
    let i;
    return (
        e === 'same' ? (i = n) : (i = n - o + 1), Math.floor((i + s - 1) / s)
    );
}
function ws(n, t, e, s) {
    if (n == null) return null;
    if (s === 'valid') n = n * t + yr([e - t, 0]);
    else if (s === 'same') n = n * t;
    else throw new H(`Unsupport padding mode: ${s}.`);
    return n;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function Qm(n, t) {
    return Y(() => (ve(t), t === 'channelsFirst' ? Ht(n, [0, 2, 3, 1]) : n));
}
function $w(n, t) {
    return Y(() => (ve(t), t === 'channelsFirst' ? Ht(n, [0, 2, 3, 4, 1]) : n));
}
function BF(n, t, e, s = 1, r = 'valid', o, i = 1) {
    return Y(() => {
        if ((o == null && (o = ds()), ve(o), n.shape.length !== 3))
            throw new H(
                `The input of a conv1dWithBias operation should be 3, but is ${n.shape.length} instead.`
            );
        if (t.shape.length !== 3)
            throw new H(
                `The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`
            );
        if (e != null && e.shape.length !== 1)
            throw new H(
                `The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`
            );
        if ((o === 'channelsFirst' && (n = Ht(n, [0, 2, 1])), r === 'causal'))
            throw new Ft(
                'The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.'
            );
        let a = Cf(n, t, s, r === 'same' ? 'same' : 'valid', 'NWC', i);
        return e != null && (a = gs(a, e)), a;
    });
}
function Ey(n, t, e, s = [1, 1], r = 'valid', o, i, a = null) {
    return Y(() => {
        if ((o == null && (o = ds()), ve(o), n.rank !== 3 && n.rank !== 4))
            throw new H(
                `conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${n.rank}.`
            );
        if (t.rank !== 3 && t.rank !== 4)
            throw new H(
                `conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${n.rank}.`
            );
        let l = Qm(n, o);
        if (r === 'causal')
            throw new Ft(
                'The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.'
            );
        return (
            (l = xx({
                x: l,
                filter: t,
                strides: s,
                pad: r === 'same' ? 'same' : 'valid',
                dilations: i,
                dataFormat: 'NHWC',
                bias: e,
                activation: a,
            })),
            o === 'channelsFirst' && (l = Ht(l, [0, 3, 1, 2])),
            l
        );
    });
}
function MF(n, t, e, s = [1, 1, 1], r = 'valid', o, i) {
    return Y(() => {
        if ((o == null && (o = ds()), ve(o), n.rank !== 4 && n.rank !== 5))
            throw new H(
                `conv3dWithBias expects input to be of rank 4 or 5, but received ${n.rank}.`
            );
        if (t.rank !== 4 && t.rank !== 5)
            throw new H(
                `conv3dWithBias expects kernel to be of rank 4 or 5, but received ${n.rank}.`
            );
        let a = $w(n, o);
        if (r === 'causal')
            throw new Ft(
                'The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.'
            );
        return (
            (a = P0(a, t, s, r === 'same' ? 'same' : 'valid', 'NDHWC', i)),
            e != null && (a = gs(a, e)),
            o === 'channelsFirst' && (a = Ht(a, [0, 4, 1, 2, 3])),
            a
        );
    });
}
class gh extends Mt {
    constructor(t, e) {
        if (
            (super(e),
            (this.bias = null),
            (this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal'),
            (this.DEFAULT_BIAS_INITIALIZER = 'zeros'),
            gh.verifyArgs(e),
            (this.rank = t),
            Fe(this.rank, 'rank'),
            this.rank !== 1 && this.rank !== 2 && this.rank !== 3)
        )
            throw new Ft(
                `Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`
            );
        if (
            ((this.kernelSize = jo(e.kernelSize, t, 'kernelSize')),
            (this.strides = jo(
                e.strides == null ? 1 : e.strides,
                t,
                'strides'
            )),
            (this.padding = e.padding == null ? 'valid' : e.padding),
            Ln(this.padding),
            (this.dataFormat =
                e.dataFormat == null ? 'channelsLast' : e.dataFormat),
            ve(this.dataFormat),
            (this.activation = xr(e.activation)),
            (this.useBias = e.useBias == null ? !0 : e.useBias),
            (this.biasInitializer = ue(
                e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER
            )),
            (this.biasConstraint = _e(e.biasConstraint)),
            (this.biasRegularizer = he(e.biasRegularizer)),
            (this.activityRegularizer = he(e.activityRegularizer)),
            (this.dilationRate = jo(
                e.dilationRate == null ? 1 : e.dilationRate,
                t,
                'dilationRate'
            )),
            this.rank === 1 &&
                Array.isArray(this.dilationRate) &&
                this.dilationRate.length !== 1)
        )
            throw new H(
                `dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(
                    this.dilationRate
                )}`
            );
        if (this.rank === 2) {
            if (typeof this.dilationRate == 'number')
                this.dilationRate = [this.dilationRate, this.dilationRate];
            else if (this.dilationRate.length !== 2)
                throw new H(
                    `dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(
                        this.dilationRate
                    )}`
                );
        } else if (this.rank === 3) {
            if (typeof this.dilationRate == 'number')
                this.dilationRate = [
                    this.dilationRate,
                    this.dilationRate,
                    this.dilationRate,
                ];
            else if (this.dilationRate.length !== 3)
                throw new H(
                    `dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(
                        this.dilationRate
                    )}`
                );
        }
    }
    static verifyArgs(t) {
        if (
            (xs('kernelSize' in t, "required key 'kernelSize' not in config"),
            typeof t.kernelSize != 'number' &&
                !Bm(t.kernelSize, 'number', 1, 3))
        )
            throw new H(
                `BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(
                    t.kernelSize
                )}.`
            );
    }
    getConfig() {
        const t = {
                kernelSize: this.kernelSize,
                strides: this.strides,
                padding: this.padding,
                dataFormat: this.dataFormat,
                dilationRate: this.dilationRate,
                activation: br(this.activation),
                useBias: this.useBias,
                biasInitializer: fe(this.biasInitializer),
                biasRegularizer: ee(this.biasRegularizer),
                activityRegularizer: ee(this.activityRegularizer),
                biasConstraint: Ee(this.biasConstraint),
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
class xi extends gh {
    constructor(t, e) {
        super(t, e),
            (this.kernel = null),
            xi.verifyArgs(e),
            (this.filters = e.filters),
            Fe(this.filters, 'filters'),
            (this.kernelInitializer = ue(
                e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER
            )),
            (this.kernelConstraint = _e(e.kernelConstraint)),
            (this.kernelRegularizer = he(e.kernelRegularizer));
    }
    build(t) {
        t = Xt(t);
        const e = this.dataFormat === 'channelsFirst' ? 1 : t.length - 1;
        if (t[e] == null)
            throw new H(
                `The channel dimension of the input should be defined. Found ${t[e]}`
            );
        const s = t[e],
            r = this.kernelSize.concat([s, this.filters]);
        (this.kernel = this.addWeight(
            'kernel',
            r,
            null,
            this.kernelInitializer,
            this.kernelRegularizer,
            !0,
            this.kernelConstraint
        )),
            this.useBias &&
                (this.bias = this.addWeight(
                    'bias',
                    [this.filters],
                    null,
                    this.biasInitializer,
                    this.biasRegularizer,
                    !0,
                    this.biasConstraint
                )),
            (this.inputSpec = [{ ndim: this.rank + 2, axes: { [e]: s } }]),
            (this.built = !0);
    }
    call(t, e) {
        return Y(() => {
            t = Rt(t);
            let s;
            const r = this.bias == null ? null : this.bias.read(),
                o = I1(this.activation.getClassName());
            if (o != null && this.rank === 2)
                s = Ey(
                    t,
                    this.kernel.read(),
                    r,
                    this.strides,
                    this.padding,
                    this.dataFormat,
                    this.dilationRate,
                    o
                );
            else {
                if (this.rank === 1)
                    s = BF(
                        t,
                        this.kernel.read(),
                        r,
                        this.strides[0],
                        this.padding,
                        this.dataFormat,
                        this.dilationRate[0]
                    );
                else if (this.rank === 2)
                    s = Ey(
                        t,
                        this.kernel.read(),
                        r,
                        this.strides,
                        this.padding,
                        this.dataFormat,
                        this.dilationRate
                    );
                else if (this.rank === 3)
                    s = MF(
                        t,
                        this.kernel.read(),
                        r,
                        this.strides,
                        this.padding,
                        this.dataFormat,
                        this.dilationRate
                    );
                else
                    throw new Ft(
                        'convolutions greater than 3D are not implemented yet.'
                    );
                this.activation != null && (s = this.activation.apply(s));
            }
            return s;
        });
    }
    computeOutputShape(t) {
        t = Xt(t);
        const e = [],
            s =
                this.dataFormat === 'channelsLast'
                    ? t.slice(1, t.length - 1)
                    : t.slice(2);
        for (let o = 0; o < s.length; ++o) {
            const i = cs(
                s[o],
                this.kernelSize[o],
                this.padding,
                this.strides[o],
                typeof this.dilationRate == 'number'
                    ? this.dilationRate
                    : this.dilationRate[o]
            );
            e.push(i);
        }
        let r = [t[0]];
        return (
            this.dataFormat === 'channelsLast'
                ? ((r = r.concat(e)), r.push(this.filters))
                : (r.push(this.filters), (r = r.concat(e))),
            r
        );
    }
    getConfig() {
        const t = {
                filters: this.filters,
                kernelInitializer: fe(this.kernelInitializer),
                kernelRegularizer: ee(this.kernelRegularizer),
                kernelConstraint: Ee(this.kernelConstraint),
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
    static verifyArgs(t) {
        if (!('filters' in t) || typeof t.filters != 'number' || t.filters < 1)
            throw new H(
                `Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(
                    t.filters
                )}`
            );
    }
}
class gl extends xi {
    constructor(t) {
        super(2, t), gl.verifyArgs(t);
    }
    getConfig() {
        const t = super.getConfig();
        return delete t.rank, t;
    }
    static verifyArgs(t) {
        if (
            typeof t.kernelSize != 'number' &&
            !Bm(t.kernelSize, 'number', 1, 2)
        )
            throw new H(
                `Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(
                    t.kernelSize
                )}.`
            );
    }
}
gl.className = 'Conv2D';
ut(gl);
class yl extends xi {
    constructor(t) {
        super(3, t), yl.verifyArgs(t);
    }
    getConfig() {
        const t = super.getConfig();
        return delete t.rank, t;
    }
    static verifyArgs(t) {
        if (
            typeof t.kernelSize != 'number' &&
            !(
                Array.isArray(t.kernelSize) &&
                (t.kernelSize.length === 1 || t.kernelSize.length === 3)
            )
        )
            throw new H(
                `Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(
                    t.kernelSize
                )}.`
            );
    }
}
yl.className = 'Conv3D';
ut(yl);
class Nw extends gl {
    constructor(t) {
        if (
            (super(t),
            (this.inputSpec = [new Ne({ ndim: 4 })]),
            this.padding !== 'same' && this.padding !== 'valid')
        )
            throw new H(
                `Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`
            );
    }
    build(t) {
        if (((t = Xt(t)), t.length !== 4))
            throw new H(
                'Input should have rank 4; Received input shape: ' +
                    JSON.stringify(t)
            );
        const e = this.dataFormat === 'channelsFirst' ? 1 : t.length - 1;
        if (t[e] == null)
            throw new H(
                'The channel dimension of the inputs should be defined. Found `None`.'
            );
        const s = t[e],
            r = this.kernelSize.concat([this.filters, s]);
        (this.kernel = this.addWeight(
            'kernel',
            r,
            'float32',
            this.kernelInitializer,
            this.kernelRegularizer,
            !0,
            this.kernelConstraint
        )),
            this.useBias &&
                (this.bias = this.addWeight(
                    'bias',
                    [this.filters],
                    'float32',
                    this.biasInitializer,
                    this.biasRegularizer,
                    !0,
                    this.biasConstraint
                )),
            (this.inputSpec = [new Ne({ ndim: 4, axes: { [e]: s } })]),
            (this.built = !0);
    }
    call(t, e) {
        return Y(() => {
            let s = Rt(t);
            if (s.shape.length !== 4)
                throw new H(
                    `Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${s.shape.length}`
                );
            const r = s.shape,
                o = r[0];
            let i, a;
            this.dataFormat === 'channelsFirst'
                ? ((i = 2), (a = 3))
                : ((i = 1), (a = 2));
            const l = r[i],
                c = r[a],
                u = this.kernelSize[0],
                h = this.kernelSize[1],
                d = this.strides[0],
                p = this.strides[1],
                f = ws(l, d, u, this.padding),
                m = ws(c, p, h, this.padding),
                g = [o, f, m, this.filters];
            this.dataFormat !== 'channelsLast' && (s = Ht(s, [0, 2, 3, 1]));
            let y = Nf(s, this.kernel.read(), g, this.strides, this.padding);
            return (
                this.dataFormat !== 'channelsLast' && (y = Ht(y, [0, 3, 1, 2])),
                this.bias != null &&
                    (y = gs(y, this.bias.read(), this.dataFormat)),
                this.activation != null && (y = this.activation.apply(y)),
                y
            );
        });
    }
    computeOutputShape(t) {
        t = Xt(t);
        const e = t.slice();
        let s, r, o;
        this.dataFormat === 'channelsFirst'
            ? ((s = 1), (r = 2), (o = 3))
            : ((s = 3), (r = 1), (o = 2));
        const i = this.kernelSize[0],
            a = this.kernelSize[1],
            l = this.strides[0],
            c = this.strides[1];
        return (
            (e[s] = this.filters),
            (e[r] = ws(e[r], l, i, this.padding)),
            (e[o] = ws(e[o], c, a, this.padding)),
            e
        );
    }
    getConfig() {
        const t = super.getConfig();
        return delete t.dilationRate, t;
    }
}
Nw.className = 'Conv2DTranspose';
ut(Nw);
class Tw extends yl {
    constructor(t) {
        if (
            (super(t),
            (this.inputSpec = [new Ne({ ndim: 5 })]),
            this.padding !== 'same' && this.padding !== 'valid')
        )
            throw new H(
                `Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`
            );
    }
    build(t) {
        if (((t = Xt(t)), t.length !== 5))
            throw new H(
                'Input should have rank 5; Received input shape: ' +
                    JSON.stringify(t)
            );
        const e = this.dataFormat === 'channelsFirst' ? 1 : t.length - 1;
        if (t[e] == null)
            throw new H(
                'The channel dimension of the inputs should be defined. Found `None`.'
            );
        const s = t[e],
            r = this.kernelSize.concat([this.filters, s]);
        (this.kernel = this.addWeight(
            'kernel',
            r,
            'float32',
            this.kernelInitializer,
            this.kernelRegularizer,
            !0,
            this.kernelConstraint
        )),
            this.useBias &&
                (this.bias = this.addWeight(
                    'bias',
                    [this.filters],
                    'float32',
                    this.biasInitializer,
                    this.biasRegularizer,
                    !0,
                    this.biasConstraint
                )),
            (this.inputSpec = [new Ne({ ndim: 5, axes: { [e]: s } })]),
            (this.built = !0);
    }
    call(t, e) {
        return Y(() => {
            let s = Rt(t);
            if (s.shape.length !== 5)
                throw new H(
                    `Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${s.shape.length}`
                );
            const r = s.shape,
                o = r[0];
            let i, a, l;
            this.dataFormat === 'channelsFirst'
                ? ((l = 2), (i = 3), (a = 4))
                : ((l = 1), (i = 2), (a = 3));
            const c = r[l],
                u = r[i],
                h = r[a],
                d = this.kernelSize[0],
                p = this.kernelSize[1],
                f = this.kernelSize[2],
                m = this.strides[0],
                g = this.strides[1],
                y = this.strides[2],
                b = ws(c, m, d, this.padding),
                w = ws(u, g, p, this.padding),
                x = ws(h, y, f, this.padding),
                v = [o, b, w, x, this.filters];
            this.dataFormat !== 'channelsLast' && (s = Ht(s, [0, 2, 3, 4, 1]));
            let C = B0(s, this.kernel.read(), v, this.strides, this.padding);
            return (
                this.dataFormat !== 'channelsLast' &&
                    (C = Ht(C, [0, 4, 1, 2, 3])),
                this.bias !== null &&
                    (C = gs(C, this.bias.read(), this.dataFormat)),
                this.activation !== null && (C = this.activation.apply(C)),
                C
            );
        });
    }
    computeOutputShape(t) {
        t = Xt(t);
        const e = t.slice();
        let s, r, o, i;
        this.dataFormat === 'channelsFirst'
            ? ((s = 1), (r = 2), (o = 3), (i = 4))
            : ((s = 4), (r = 1), (o = 2), (i = 3));
        const a = this.kernelSize[0],
            l = this.kernelSize[1],
            c = this.kernelSize[2],
            u = this.strides[0],
            h = this.strides[1],
            d = this.strides[2];
        return (
            (e[s] = this.filters),
            (e[r] = ws(e[r], u, a, this.padding)),
            (e[o] = ws(e[o], h, l, this.padding)),
            (e[i] = ws(e[i], d, c, this.padding)),
            e
        );
    }
    getConfig() {
        const t = super.getConfig();
        return delete t.dilationRate, t;
    }
}
Tw.className = 'Conv3DTranspose';
ut(Tw);
class Ew extends xi {
    constructor(t, e) {
        if (
            (super(t, e),
            (this.DEFAULT_DEPTHWISE_INITIALIZER = 'glorotUniform'),
            (this.DEFAULT_POINTWISE_INITIALIZER = 'glorotUniform'),
            (this.depthwiseKernel = null),
            (this.pointwiseKernel = null),
            e.filters == null)
        )
            throw new H(
                'The `filters` configuration field is required by SeparableConv, but is unspecified.'
            );
        if (
            e.kernelInitializer != null ||
            e.kernelRegularizer != null ||
            e.kernelConstraint != null
        )
            throw new H(
                'Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.'
            );
        if (e.padding != null && e.padding !== 'same' && e.padding !== 'valid')
            throw new H(
                `SeparableConv${
                    this.rank
                }D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(
                    e.padding
                )}`
            );
        (this.depthMultiplier =
            e.depthMultiplier == null ? 1 : e.depthMultiplier),
            (this.depthwiseInitializer = ue(
                e.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER
            )),
            (this.depthwiseRegularizer = he(e.depthwiseRegularizer)),
            (this.depthwiseConstraint = _e(e.depthwiseConstraint)),
            (this.pointwiseInitializer = ue(
                e.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER
            )),
            (this.pointwiseRegularizer = he(e.pointwiseRegularizer)),
            (this.pointwiseConstraint = _e(e.pointwiseConstraint));
    }
    build(t) {
        if (((t = Xt(t)), t.length < this.rank + 2))
            throw new H(
                `Inputs to SeparableConv${this.rank}D should have rank ${
                    this.rank + 2
                }, but received input shape: ${JSON.stringify(t)}`
            );
        const e = this.dataFormat === 'channelsFirst' ? 1 : t.length - 1;
        if (t[e] == null || t[e] < 0)
            throw new H(
                `The channel dimension of the inputs should be defined, but found ${JSON.stringify(
                    t[e]
                )}`
            );
        const s = t[e],
            r = this.kernelSize.concat([s, this.depthMultiplier]),
            o = [];
        for (let a = 0; a < this.rank; ++a) o.push(1);
        o.push(s * this.depthMultiplier, this.filters);
        const i = !0;
        (this.depthwiseKernel = this.addWeight(
            'depthwise_kernel',
            r,
            'float32',
            this.depthwiseInitializer,
            this.depthwiseRegularizer,
            i,
            this.depthwiseConstraint
        )),
            (this.pointwiseKernel = this.addWeight(
                'pointwise_kernel',
                o,
                'float32',
                this.pointwiseInitializer,
                this.pointwiseRegularizer,
                i,
                this.pointwiseConstraint
            )),
            this.useBias
                ? (this.bias = this.addWeight(
                      'bias',
                      [this.filters],
                      'float32',
                      this.biasInitializer,
                      this.biasRegularizer,
                      i,
                      this.biasConstraint
                  ))
                : (this.bias = null),
            (this.inputSpec = [
                new Ne({ ndim: this.rank + 2, axes: { [e]: s } }),
            ]),
            (this.built = !0);
    }
    call(t, e) {
        return Y(() => {
            t = Rt(t);
            let s;
            if (this.rank === 1)
                throw new Ft(
                    '1D separable convolution is not implemented yet.'
                );
            return (
                this.rank === 2 &&
                    (this.dataFormat === 'channelsFirst' &&
                        (t = Ht(t, [0, 2, 3, 1])),
                    (s = qf(
                        t,
                        this.depthwiseKernel.read(),
                        this.pointwiseKernel.read(),
                        this.strides,
                        this.padding,
                        this.dilationRate,
                        'NHWC'
                    ))),
                this.useBias && (s = gs(s, this.bias.read(), this.dataFormat)),
                this.activation != null && (s = this.activation.apply(s)),
                this.dataFormat === 'channelsFirst' &&
                    (s = Ht(s, [0, 3, 1, 2])),
                s
            );
        });
    }
    getConfig() {
        const t = super.getConfig();
        return (
            delete t.rank,
            delete t.kernelInitializer,
            delete t.kernelRegularizer,
            delete t.kernelConstraint,
            (t.depthwiseInitializer = fe(this.depthwiseInitializer)),
            (t.pointwiseInitializer = fe(this.pointwiseInitializer)),
            (t.depthwiseRegularizer = ee(this.depthwiseRegularizer)),
            (t.pointwiseRegularizer = ee(this.pointwiseRegularizer)),
            (t.depthwiseConstraint = Ee(this.depthwiseConstraint)),
            (t.pointwiseConstraint = Ee(this.pointwiseConstraint)),
            t
        );
    }
}
Ew.className = 'SeparableConv';
class _w extends Ew {
    constructor(t) {
        super(2, t);
    }
}
_w.className = 'SeparableConv2D';
ut(_w);
class yh extends xi {
    constructor(t) {
        super(1, t), yh.verifyArgs(t), (this.inputSpec = [{ ndim: 3 }]);
    }
    getConfig() {
        const t = super.getConfig();
        return delete t.rank, delete t.dataFormat, t;
    }
    static verifyArgs(t) {
        if (
            typeof t.kernelSize != 'number' &&
            !Bm(t.kernelSize, 'number', 1, 1)
        )
            throw new H(
                `Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(
                    t.kernelSize
                )}.`
            );
    }
}
yh.className = 'Conv1D';
ut(yh);
class Aw extends Mt {
    constructor(t) {
        super(t),
            typeof t.cropping == 'number'
                ? (this.cropping = [
                      [t.cropping, t.cropping],
                      [t.cropping, t.cropping],
                  ])
                : typeof t.cropping[0] == 'number'
                ? (this.cropping = [
                      [t.cropping[0], t.cropping[0]],
                      [t.cropping[1], t.cropping[1]],
                  ])
                : (this.cropping = t.cropping),
            (this.dataFormat =
                t.dataFormat === void 0 ? 'channelsLast' : t.dataFormat),
            (this.inputSpec = [{ ndim: 4 }]);
    }
    computeOutputShape(t) {
        return this.dataFormat === 'channelsFirst'
            ? [
                  t[0],
                  t[1],
                  t[2] - this.cropping[0][0] - this.cropping[0][1],
                  t[3] - this.cropping[1][0] - this.cropping[1][1],
              ]
            : [
                  t[0],
                  t[1] - this.cropping[0][0] - this.cropping[0][1],
                  t[2] - this.cropping[1][0] - this.cropping[1][1],
                  t[3],
              ];
    }
    call(t, e) {
        return Y(() => {
            if (((t = Rt(t)), this.dataFormat === 'channelsLast')) {
                const s = El(
                    t,
                    this.cropping[0][0],
                    t.shape[1] - this.cropping[0][0] - this.cropping[0][1],
                    2
                );
                return El(
                    s,
                    this.cropping[1][0],
                    t.shape[2] - this.cropping[1][1] - this.cropping[1][0],
                    3
                );
            } else {
                const s = El(
                    t,
                    this.cropping[0][0],
                    t.shape[2] - this.cropping[0][0] - this.cropping[0][1],
                    3
                );
                return El(
                    s,
                    this.cropping[1][0],
                    t.shape[3] - this.cropping[1][1] - this.cropping[1][0],
                    4
                );
            }
        });
    }
    getConfig() {
        const t = { cropping: this.cropping, dataFormat: this.dataFormat },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
Aw.className = 'Cropping2D';
ut(Aw);
class Rw extends Mt {
    constructor(t) {
        super(t),
            (this.DEFAULT_SIZE = [2, 2]),
            (this.inputSpec = [{ ndim: 4 }]),
            (this.size = t.size == null ? this.DEFAULT_SIZE : t.size),
            (this.dataFormat =
                t.dataFormat == null ? 'channelsLast' : t.dataFormat),
            ve(this.dataFormat),
            (this.interpolation =
                t.interpolation == null ? 'nearest' : t.interpolation),
            dO(this.interpolation);
    }
    computeOutputShape(t) {
        if (this.dataFormat === 'channelsFirst') {
            const e = t[2] == null ? null : this.size[0] * t[2],
                s = t[3] == null ? null : this.size[1] * t[3];
            return [t[0], t[1], e, s];
        } else {
            const e = t[1] == null ? null : this.size[0] * t[1],
                s = t[2] == null ? null : this.size[1] * t[2];
            return [t[0], e, s, t[3]];
        }
    }
    call(t, e) {
        return Y(() => {
            let s = Rt(t);
            const r = s.shape;
            if (this.dataFormat === 'channelsFirst') {
                s = Ht(s, [0, 2, 3, 1]);
                const o = this.size[0] * r[2],
                    i = this.size[1] * r[3],
                    a =
                        this.interpolation === 'nearest'
                            ? as.resizeNearestNeighbor(s, [o, i])
                            : as.resizeBilinear(s, [o, i]);
                return Ht(a, [0, 3, 1, 2]);
            } else {
                const o = this.size[0] * r[1],
                    i = this.size[1] * r[2];
                return this.interpolation === 'nearest'
                    ? as.resizeNearestNeighbor(s, [o, i])
                    : as.resizeBilinear(s, [o, i]);
            }
        });
    }
    getConfig() {
        const t = {
                size: this.size,
                dataFormat: this.dataFormat,
                interpolation: this.interpolation,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
Rw.className = 'UpSampling2D';
ut(Rw);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function VF(n, t, e = [1, 1], s = 'valid', r, o) {
    return Y(() => {
        r == null && (r = ds()), ve(r);
        let i = Qm(n, r);
        if (n.rank !== 4)
            throw new H(
                `Input for depthwiseConv2d is required to be 4-D, but is instead ${n.rank}-D`
            );
        if (t.rank !== 4)
            throw new H(
                `depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`
            );
        return (
            (i = nl(i, t, e, s === 'same' ? 'same' : 'valid', 'NHWC', o)),
            r === 'channelsFirst' && (i = Ht(i, [0, 3, 1, 2])),
            i
        );
    });
}
class Dw extends gh {
    constructor(t) {
        super(2, t),
            (this.depthwiseKernel = null),
            (this.depthMultiplier =
                t.depthMultiplier == null ? 1 : t.depthMultiplier),
            (this.depthwiseInitializer = ue(
                t.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER
            )),
            (this.depthwiseConstraint = _e(t.depthwiseConstraint)),
            (this.depthwiseRegularizer = he(t.depthwiseRegularizer));
    }
    build(t) {
        if (((t = Xt(t)), t.length < 4))
            throw new H(
                `Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(
                    t
                )}.`
            );
        const e = this.dataFormat === 'channelsFirst' ? 1 : 3;
        if (t[e] == null || t[e] < 0)
            throw new H(
                `The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`
            );
        const s = t[e],
            r = [
                this.kernelSize[0],
                this.kernelSize[1],
                s,
                this.depthMultiplier,
            ];
        (this.depthwiseKernel = this.addWeight(
            'depthwise_kernel',
            r,
            null,
            this.depthwiseInitializer,
            this.depthwiseRegularizer,
            !0,
            this.depthwiseConstraint
        )),
            this.useBias
                ? (this.bias = this.addWeight(
                      'bias',
                      [s * this.depthMultiplier],
                      null,
                      this.biasInitializer,
                      this.biasRegularizer,
                      !0,
                      this.biasConstraint
                  ))
                : (this.bias = null),
            (this.built = !0);
    }
    call(t, e) {
        return Y(() => {
            t = Rt(t);
            let s = VF(
                t,
                this.depthwiseKernel.read(),
                this.strides,
                this.padding,
                this.dataFormat,
                null
            );
            return (
                this.useBias && (s = gs(s, this.bias.read(), this.dataFormat)),
                this.activation != null && (s = this.activation.apply(s)),
                s
            );
        });
    }
    computeOutputShape(t) {
        t = Xt(t);
        const e = this.dataFormat === 'channelsFirst' ? t[2] : t[1],
            s = this.dataFormat === 'channelsFirst' ? t[3] : t[2],
            r =
                this.dataFormat === 'channelsFirst'
                    ? t[1] * this.depthMultiplier
                    : t[3] * this.depthMultiplier,
            o = cs(e, this.kernelSize[0], this.padding, this.strides[0]),
            i = cs(s, this.kernelSize[1], this.padding, this.strides[1]);
        return this.dataFormat === 'channelsFirst'
            ? [t[0], r, o, i]
            : [t[0], o, i, r];
    }
    getConfig() {
        const t = super.getConfig();
        return (
            (t.depthMultiplier = this.depthMultiplier),
            (t.depthwiseInitializer = fe(this.depthwiseInitializer)),
            (t.depthwiseRegularizer = ee(this.depthwiseRegularizer)),
            (t.depthwiseConstraint = Ee(this.depthwiseRegularizer)),
            t
        );
    }
}
Dw.className = 'DepthwiseConv2D';
ut(Dw);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function Ow(n, t, e, s) {
    if (Array.isArray(n)) {
        if (t != null || e != null)
            throw new H(
                'When inputs is an array, neither initialState or constants should be provided'
            );
        s != null &&
            ((e = n.slice(n.length - s, n.length)),
            (n = n.slice(0, n.length - s))),
            n.length > 1 && (t = n.slice(1, n.length)),
            (n = n[0]);
    }
    function r(o) {
        return o == null || Array.isArray(o) ? o : [o];
    }
    return (t = r(t)), (e = r(e)), { inputs: n, initialState: t, constants: e };
}
function Fw(n, t, e, s = !1, r, o, i = !1, a = !1) {
    return Y(() => {
        const l = t.shape.length;
        if (l < 3) throw new H(`Input should be at least 3D, but is ${l}D.`);
        const c = [1, 0].concat(hs(2, l));
        if (((t = Ht(t, c)), o != null))
            throw new Ft(
                'The rnn() functoin of the deeplearn.js backend does not support constants yet.'
            );
        i &&
            console.warn(
                'Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend.'
            ),
            r != null &&
                ((r = bt(bt(r, 'bool'), 'float32')),
                r.rank === l - 1 && (r = Qe(r, -1)),
                (r = Ht(r, c))),
            s && ((t = Jn(t, 0)), r != null && (r = Jn(r, 0)));
        const u = [];
        let h,
            d = e;
        const p = t.shape[0],
            f = Qn(t);
        let m;
        r != null && (m = Qn(r));
        for (let y = 0; y < p; ++y) {
            const b = f[y],
                w = Y(() => n(b, d));
            if (r == null) (h = w[0]), (d = w[1]);
            else {
                const x = Y(() => {
                    const v = m[y],
                        C = kt(On(v), v),
                        $ = ct(U(w[0], v), U(d[0], C)),
                        T = d.map((N, R) => ct(U(w[1][R], v), U(N, C)));
                    return { output: $, newStates: T };
                });
                (h = x.output), (d = x.newStates);
            }
            a && u.push(h);
        }
        let g;
        return a && (g = un(u, 1)), [h, g, d];
    });
}
class Rr extends Mt {
    constructor(t) {
        super(t);
        let e;
        if (t.cell == null)
            throw new H('cell property is missing for the constructor of RNN.');
        if (
            (Array.isArray(t.cell)
                ? (e = new ng({ cells: t.cell }))
                : (e = t.cell),
            e.stateSize == null)
        )
            throw new H(
                'The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).'
            );
        (this.cell = e),
            (this.returnSequences =
                t.returnSequences == null ? !1 : t.returnSequences),
            (this.returnState = t.returnState == null ? !1 : t.returnState),
            (this.goBackwards = t.goBackwards == null ? !1 : t.goBackwards),
            (this._stateful = t.stateful == null ? !1 : t.stateful),
            (this.unroll = t.unroll == null ? !1 : t.unroll),
            (this.supportsMasking = !0),
            (this.inputSpec = [new Ne({ ndim: 3 })]),
            (this.stateSpec = null),
            (this.states_ = null),
            (this.numConstants = null),
            (this.keptStates = []);
    }
    getStates() {
        if (this.states_ == null) {
            const t = Array.isArray(this.cell.stateSize)
                ? this.cell.stateSize.length
                : 1;
            return hs(0, t).map((e) => null);
        } else return this.states_;
    }
    setStates(t) {
        this.states_ = t;
    }
    computeOutputShape(t) {
        Rd(t) && (t = t[0]), (t = t);
        let e = this.cell.stateSize;
        Array.isArray(e) || (e = [e]);
        const s = e[0];
        let r;
        if (
            (this.returnSequences ? (r = [t[0], t[1], s]) : (r = [t[0], s]),
            this.returnState)
        ) {
            const o = [];
            for (const i of e) o.push([t[0], i]);
            return [r].concat(o);
        } else return r;
    }
    computeMask(t, e) {
        return Y(() => {
            Array.isArray(e) && (e = e[0]);
            const s = this.returnSequences ? e : null;
            if (this.returnState) {
                const r = this.states.map((o) => null);
                return [s].concat(r);
            } else return s;
        });
    }
    get states() {
        if (this.states_ == null) {
            const t = Array.isArray(this.cell.stateSize)
                    ? this.cell.stateSize.length
                    : 1,
                e = [];
            for (let s = 0; s < t; ++s) e.push(null);
            return e;
        } else return this.states_;
    }
    set states(t) {
        this.states_ = t;
    }
    build(t) {
        if (this.numConstants != null)
            throw new Ft('Constants support is not implemented in RNN yet.');
        Rd(t) && (t = t[0]), (t = t);
        const e = this.stateful ? t[0] : null,
            s = t.slice(2);
        this.inputSpec[0] = new Ne({ shape: [e, null, ...s] });
        const r = [t[0]].concat(t.slice(2));
        this.cell.build(r);
        let o;
        if (
            (Array.isArray(this.cell.stateSize)
                ? (o = this.cell.stateSize)
                : (o = [this.cell.stateSize]),
            this.stateSpec != null)
        ) {
            if (
                !Ut(
                    this.stateSpec.map((i) => i.shape[i.shape.length - 1]),
                    o
                )
            )
                throw new H(
                    `An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`
                );
        } else this.stateSpec = o.map((i) => new Ne({ shape: [null, i] }));
        this.stateful && this.resetStates();
    }
    resetStates(t, e = !1) {
        Y(() => {
            if (!this.stateful)
                throw new bs(
                    'Cannot call resetStates() on an RNN Layer that is not stateful.'
                );
            const s = this.inputSpec[0].shape[0];
            if (s == null)
                throw new H(
                    'If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.'
                );
            if (this.states_ == null)
                Array.isArray(this.cell.stateSize)
                    ? (this.states_ = this.cell.stateSize.map((r) =>
                          Se([s, r])
                      ))
                    : (this.states_ = [Se([s, this.cell.stateSize])]);
            else if (t == null)
                Lt(this.states_),
                    this.keptStates != null &&
                        (Lt(this.keptStates), (this.keptStates = [])),
                    Array.isArray(this.cell.stateSize)
                        ? (this.states_ = this.cell.stateSize.map((r) =>
                              Se([s, r])
                          ))
                        : (this.states_[0] = Se([s, this.cell.stateSize]));
            else {
                if (
                    (Array.isArray(t) || (t = [t]),
                    t.length !== this.states_.length)
                )
                    throw new H(
                        `Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`
                    );
                e === !0
                    ? this.keptStates.push(this.states_.slice())
                    : Lt(this.states_);
                for (let r = 0; r < this.states_.length; ++r) {
                    const o = t[r],
                        i = Array.isArray(this.cell.stateSize)
                            ? this.cell.stateSize[r]
                            : this.cell.stateSize,
                        a = [s, i];
                    if (!Ut(o.shape, a))
                        throw new H(
                            `State ${r} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${o.shape}`
                        );
                    this.states_[r] = o;
                }
            }
            this.states_ = this.states_.map((r) => Oe(r.clone()));
        });
    }
    apply(t, e) {
        let s = e == null ? null : e.initialState,
            r = e == null ? null : e.constants;
        e == null && (e = {});
        const o = Ow(t, s, r, this.numConstants);
        (t = o.inputs), (s = o.initialState), (r = o.constants);
        let i = [],
            a = [];
        if (s != null) {
            (e.initialState = s), (i = i.concat(s)), (this.stateSpec = []);
            for (const c of s) this.stateSpec.push(new Ne({ shape: c.shape }));
            a = a.concat(this.stateSpec);
        }
        if (
            (r != null &&
                ((e.constants = r),
                (i = i.concat(r)),
                (this.numConstants = r.length)),
            i[0] instanceof _s)
        ) {
            const c = [t].concat(i),
                u = this.inputSpec.concat(a),
                h = this.inputSpec;
            this.inputSpec = u;
            const d = super.apply(c, e);
            return (this.inputSpec = h), d;
        } else return super.apply(t, e);
    }
    call(t, e) {
        return Y(() => {
            const s = e == null ? null : e.mask,
                r = e == null ? null : e.training;
            let o = e == null ? null : e.initialState;
            (t = Rt(t)),
                o == null &&
                    (this.stateful
                        ? (o = this.states_)
                        : (o = this.getInitialState(t)));
            const i = Array.isArray(this.cell.stateSize)
                ? this.cell.stateSize.length
                : 1;
            if (o.length !== i)
                throw new H(
                    `RNN Layer has ${i} state(s) but was passed ${o.length} initial state(s).`
                );
            this.unroll &&
                console.warn(
                    'Ignoring unroll = true for RNN layer, due to imperative backend.'
                );
            const a = { training: r },
                c = Fw(
                    (f, m) => {
                        const g = this.cell.call([f].concat(m), a);
                        return [g[0], g.slice(1)];
                    },
                    t,
                    o,
                    this.goBackwards,
                    s,
                    null,
                    this.unroll,
                    this.returnSequences
                ),
                u = c[0],
                h = c[1],
                d = c[2];
            this.stateful && this.resetStates(d, r);
            const p = this.returnSequences ? h : u;
            return this.returnState ? [p].concat(d) : p;
        });
    }
    getInitialState(t) {
        return Y(() => {
            let e = Se(t.shape);
            return (
                (e = St(e, [1, 2])),
                (e = hl(e)),
                Array.isArray(this.cell.stateSize)
                    ? this.cell.stateSize.map((s) =>
                          s > 1 ? _d(e, [1, s]) : e
                      )
                    : this.cell.stateSize > 1
                    ? [_d(e, [1, this.cell.stateSize])]
                    : [e]
            );
        });
    }
    get trainableWeights() {
        return this.trainable ? this.cell.trainableWeights : [];
    }
    get nonTrainableWeights() {
        return this.trainable
            ? this.cell.nonTrainableWeights
            : this.cell.weights;
    }
    setFastWeightInitDuringBuild(t) {
        super.setFastWeightInitDuringBuild(t),
            this.cell != null && this.cell.setFastWeightInitDuringBuild(t);
    }
    getConfig() {
        const t = super.getConfig(),
            e = {
                returnSequences: this.returnSequences,
                returnState: this.returnState,
                goBackwards: this.goBackwards,
                stateful: this.stateful,
                unroll: this.unroll,
            };
        this.numConstants != null && (e.numConstants = this.numConstants);
        const s = this.cell.getConfig();
        return (
            this.getClassName() === Rr.className &&
                (e.cell = { className: this.cell.getClassName(), config: s }),
            Object.assign(Object.assign(Object.assign({}, s), t), e)
        );
    }
    static fromConfig(t, e, s = {}) {
        const r = e.cell,
            o = Ns(r, s);
        return new t(Object.assign(e, { cell: o }));
    }
}
Rr.className = 'RNN';
ut(Rr);
class bh extends Mt {}
class tg extends bh {
    constructor(t) {
        super(t),
            (this.DEFAULT_ACTIVATION = 'tanh'),
            (this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal'),
            (this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal'),
            (this.DEFAULT_BIAS_INITIALIZER = 'zeros'),
            (this.units = t.units),
            Fe(this.units, 'units'),
            (this.activation = xr(
                t.activation == null ? this.DEFAULT_ACTIVATION : t.activation
            )),
            (this.useBias = t.useBias == null ? !0 : t.useBias),
            (this.kernelInitializer = ue(
                t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER
            )),
            (this.recurrentInitializer = ue(
                t.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER
            )),
            (this.biasInitializer = ue(
                t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER
            )),
            (this.kernelRegularizer = he(t.kernelRegularizer)),
            (this.recurrentRegularizer = he(t.recurrentRegularizer)),
            (this.biasRegularizer = he(t.biasRegularizer)),
            (this.kernelConstraint = _e(t.kernelConstraint)),
            (this.recurrentConstraint = _e(t.recurrentConstraint)),
            (this.biasConstraint = _e(t.biasConstraint)),
            (this.dropout = ni([
                1,
                yr([0, t.dropout == null ? 0 : t.dropout]),
            ])),
            (this.recurrentDropout = ni([
                1,
                yr([0, t.recurrentDropout == null ? 0 : t.recurrentDropout]),
            ])),
            (this.dropoutFunc = t.dropoutFunc),
            (this.stateSize = this.units),
            (this.dropoutMask = null),
            (this.recurrentDropoutMask = null);
    }
    build(t) {
        (t = Xt(t)),
            (this.kernel = this.addWeight(
                'kernel',
                [t[t.length - 1], this.units],
                null,
                this.kernelInitializer,
                this.kernelRegularizer,
                !0,
                this.kernelConstraint
            )),
            (this.recurrentKernel = this.addWeight(
                'recurrent_kernel',
                [this.units, this.units],
                null,
                this.recurrentInitializer,
                this.recurrentRegularizer,
                !0,
                this.recurrentConstraint
            )),
            this.useBias
                ? (this.bias = this.addWeight(
                      'bias',
                      [this.units],
                      null,
                      this.biasInitializer,
                      this.biasRegularizer,
                      !0,
                      this.biasConstraint
                  ))
                : (this.bias = null),
            (this.built = !0);
    }
    call(t, e) {
        return Y(() => {
            if (((t = t), t.length !== 2))
                throw new H(
                    `SimpleRNNCell expects 2 input Tensors, got ${t.length}.`
                );
            let s = t[1];
            t = t[0];
            const r = e.training == null ? !1 : e.training;
            0 < this.dropout &&
                this.dropout < 1 &&
                this.dropoutMask == null &&
                (this.dropoutMask = wr({
                    ones: () => On(t),
                    rate: this.dropout,
                    training: r,
                    dropoutFunc: this.dropoutFunc,
                })),
                0 < this.recurrentDropout &&
                    this.recurrentDropout < 1 &&
                    this.recurrentDropoutMask == null &&
                    (this.recurrentDropoutMask = wr({
                        ones: () => On(s),
                        rate: this.recurrentDropout,
                        training: r,
                        dropoutFunc: this.dropoutFunc,
                    }));
            let o;
            const i = this.dropoutMask,
                a = this.recurrentDropoutMask;
            i != null
                ? (o = $s(U(t, i), this.kernel.read()))
                : (o = $s(t, this.kernel.read())),
                this.bias != null && (o = gs(o, this.bias.read())),
                a != null && (s = U(s, a));
            let l = ct(o, $s(s, this.recurrentKernel.read()));
            return (
                this.activation != null && (l = this.activation.apply(l)),
                [l, l]
            );
        });
    }
    getConfig() {
        const t = super.getConfig(),
            e = {
                units: this.units,
                activation: br(this.activation),
                useBias: this.useBias,
                kernelInitializer: fe(this.kernelInitializer),
                recurrentInitializer: fe(this.recurrentInitializer),
                biasInitializer: fe(this.biasInitializer),
                kernelRegularizer: ee(this.kernelRegularizer),
                recurrentRegularizer: ee(this.recurrentRegularizer),
                biasRegularizer: ee(this.biasRegularizer),
                activityRegularizer: ee(this.activityRegularizer),
                kernelConstraint: Ee(this.kernelConstraint),
                recurrentConstraint: Ee(this.recurrentConstraint),
                biasConstraint: Ee(this.biasConstraint),
                dropout: this.dropout,
                recurrentDropout: this.recurrentDropout,
            };
        return Object.assign(Object.assign({}, t), e);
    }
}
tg.className = 'SimpleRNNCell';
ut(tg);
class Lw extends Rr {
    constructor(t) {
        (t.cell = new tg(t)), super(t);
    }
    call(t, e) {
        return Y(() => {
            this.cell.dropoutMask != null &&
                (Lt(this.cell.dropoutMask), (this.cell.dropoutMask = null)),
                this.cell.recurrentDropoutMask != null &&
                    (Lt(this.cell.recurrentDropoutMask),
                    (this.cell.recurrentDropoutMask = null));
            const s = e == null ? null : e.mask,
                r = e == null ? null : e.training,
                o = e == null ? null : e.initialState;
            return super.call(t, { mask: s, training: r, initialState: o });
        });
    }
    static fromConfig(t, e) {
        return new t(e);
    }
}
Lw.className = 'SimpleRNN';
ut(Lw);
class eg extends bh {
    constructor(t) {
        if (
            (super(t),
            (this.DEFAULT_ACTIVATION = 'tanh'),
            (this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid'),
            (this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal'),
            (this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal'),
            (this.DEFAULT_BIAS_INITIALIZER = 'zeros'),
            t.resetAfter)
        )
            throw new H(
                'GRUCell does not support reset_after parameter set to true.'
            );
        (this.units = t.units),
            Fe(this.units, 'units'),
            (this.activation = xr(
                t.activation === void 0 ? this.DEFAULT_ACTIVATION : t.activation
            )),
            (this.recurrentActivation = xr(
                t.recurrentActivation === void 0
                    ? this.DEFAULT_RECURRENT_ACTIVATION
                    : t.recurrentActivation
            )),
            (this.useBias = t.useBias == null ? !0 : t.useBias),
            (this.kernelInitializer = ue(
                t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER
            )),
            (this.recurrentInitializer = ue(
                t.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER
            )),
            (this.biasInitializer = ue(
                t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER
            )),
            (this.kernelRegularizer = he(t.kernelRegularizer)),
            (this.recurrentRegularizer = he(t.recurrentRegularizer)),
            (this.biasRegularizer = he(t.biasRegularizer)),
            (this.kernelConstraint = _e(t.kernelConstraint)),
            (this.recurrentConstraint = _e(t.recurrentConstraint)),
            (this.biasConstraint = _e(t.biasConstraint)),
            (this.dropout = ni([
                1,
                yr([0, t.dropout == null ? 0 : t.dropout]),
            ])),
            (this.recurrentDropout = ni([
                1,
                yr([0, t.recurrentDropout == null ? 0 : t.recurrentDropout]),
            ])),
            (this.dropoutFunc = t.dropoutFunc),
            (this.implementation = t.implementation),
            (this.stateSize = this.units),
            (this.dropoutMask = null),
            (this.recurrentDropoutMask = null);
    }
    build(t) {
        t = Xt(t);
        const e = t[t.length - 1];
        (this.kernel = this.addWeight(
            'kernel',
            [e, this.units * 3],
            null,
            this.kernelInitializer,
            this.kernelRegularizer,
            !0,
            this.kernelConstraint
        )),
            (this.recurrentKernel = this.addWeight(
                'recurrent_kernel',
                [this.units, this.units * 3],
                null,
                this.recurrentInitializer,
                this.recurrentRegularizer,
                !0,
                this.recurrentConstraint
            )),
            this.useBias
                ? (this.bias = this.addWeight(
                      'bias',
                      [this.units * 3],
                      null,
                      this.biasInitializer,
                      this.biasRegularizer,
                      !0,
                      this.biasConstraint
                  ))
                : (this.bias = null),
            (this.built = !0);
    }
    call(t, e) {
        return Y(() => {
            if (((t = t), t.length !== 2))
                throw new H(
                    `GRUCell expects 2 input Tensors (inputs, h, c), got ${t.length}.`
                );
            const s = e.training == null ? !1 : e.training;
            let r = t[1];
            (t = t[0]),
                0 < this.dropout &&
                    this.dropout < 1 &&
                    this.dropoutMask == null &&
                    (this.dropoutMask = wr({
                        ones: () => On(t),
                        rate: this.dropout,
                        training: s,
                        count: 3,
                        dropoutFunc: this.dropoutFunc,
                    })),
                0 < this.recurrentDropout &&
                    this.recurrentDropout < 1 &&
                    this.recurrentDropoutMask == null &&
                    (this.recurrentDropoutMask = wr({
                        ones: () => On(r),
                        rate: this.recurrentDropout,
                        training: s,
                        count: 3,
                        dropoutFunc: this.dropoutFunc,
                    }));
            const o = this.dropoutMask,
                i = this.recurrentDropoutMask;
            let a, l, c;
            0 < this.dropout && this.dropout < 1 && (t = U(t, o[0]));
            let u = $s(t, this.kernel.read());
            this.useBias && (u = gs(u, this.bias.read())),
                0 < this.recurrentDropout &&
                    this.recurrentDropout < 1 &&
                    (r = U(r, i[0]));
            const h = this.recurrentKernel.read(),
                [d, p] = wn(h, [2 * this.units, this.units], h.rank - 1),
                f = $s(r, d),
                [m, g, y] = wn(u, 3, u.rank - 1),
                [b, w] = wn(f, 2, f.rank - 1);
            (a = this.recurrentActivation.apply(ct(m, b))),
                (l = this.recurrentActivation.apply(ct(g, w)));
            const x = $s(U(l, r), p);
            c = this.activation.apply(ct(y, x));
            const v = ct(U(a, r), U(ct(1, le(a)), c));
            return [v, v];
        });
    }
    getConfig() {
        const t = super.getConfig(),
            e = {
                units: this.units,
                activation: br(this.activation),
                recurrentActivation: br(this.recurrentActivation),
                useBias: this.useBias,
                kernelInitializer: fe(this.kernelInitializer),
                recurrentInitializer: fe(this.recurrentInitializer),
                biasInitializer: fe(this.biasInitializer),
                kernelRegularizer: ee(this.kernelRegularizer),
                recurrentRegularizer: ee(this.recurrentRegularizer),
                biasRegularizer: ee(this.biasRegularizer),
                activityRegularizer: ee(this.activityRegularizer),
                kernelConstraint: Ee(this.kernelConstraint),
                recurrentConstraint: Ee(this.recurrentConstraint),
                biasConstraint: Ee(this.biasConstraint),
                dropout: this.dropout,
                recurrentDropout: this.recurrentDropout,
                implementation: this.implementation,
                resetAfter: !1,
            };
        return Object.assign(Object.assign({}, t), e);
    }
}
eg.className = 'GRUCell';
ut(eg);
class Pw extends Rr {
    constructor(t) {
        t.implementation === 0 &&
            console.warn(
                '`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call.'
            ),
            (t.cell = new eg(t)),
            super(t);
    }
    call(t, e) {
        return Y(() => {
            this.cell.dropoutMask != null &&
                (Lt(this.cell.dropoutMask), (this.cell.dropoutMask = null)),
                this.cell.recurrentDropoutMask != null &&
                    (Lt(this.cell.recurrentDropoutMask),
                    (this.cell.recurrentDropoutMask = null));
            const s = e == null ? null : e.mask,
                r = e == null ? null : e.training,
                o = e == null ? null : e.initialState;
            return super.call(t, { mask: s, training: r, initialState: o });
        });
    }
    static fromConfig(t, e) {
        return e.implmentation === 0 && (e.implementation = 1), new t(e);
    }
}
Pw.className = 'GRU';
ut(Pw);
class xh extends bh {
    constructor(t) {
        super(t),
            (this.DEFAULT_ACTIVATION = 'tanh'),
            (this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid'),
            (this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal'),
            (this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal'),
            (this.DEFAULT_BIAS_INITIALIZER = 'zeros'),
            (this.units = t.units),
            Fe(this.units, 'units'),
            (this.activation = xr(
                t.activation === void 0 ? this.DEFAULT_ACTIVATION : t.activation
            )),
            (this.recurrentActivation = xr(
                t.recurrentActivation === void 0
                    ? this.DEFAULT_RECURRENT_ACTIVATION
                    : t.recurrentActivation
            )),
            (this.useBias = t.useBias == null ? !0 : t.useBias),
            (this.kernelInitializer = ue(
                t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER
            )),
            (this.recurrentInitializer = ue(
                t.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER
            )),
            (this.biasInitializer = ue(
                t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER
            )),
            (this.unitForgetBias = t.unitForgetBias),
            (this.kernelRegularizer = he(t.kernelRegularizer)),
            (this.recurrentRegularizer = he(t.recurrentRegularizer)),
            (this.biasRegularizer = he(t.biasRegularizer)),
            (this.kernelConstraint = _e(t.kernelConstraint)),
            (this.recurrentConstraint = _e(t.recurrentConstraint)),
            (this.biasConstraint = _e(t.biasConstraint)),
            (this.dropout = ni([
                1,
                yr([0, t.dropout == null ? 0 : t.dropout]),
            ])),
            (this.recurrentDropout = ni([
                1,
                yr([0, t.recurrentDropout == null ? 0 : t.recurrentDropout]),
            ])),
            (this.dropoutFunc = t.dropoutFunc),
            (this.implementation = t.implementation),
            (this.stateSize = [this.units, this.units]),
            (this.dropoutMask = null),
            (this.recurrentDropoutMask = null);
    }
    build(t) {
        var e;
        t = Xt(t);
        const s = t[t.length - 1];
        (this.kernel = this.addWeight(
            'kernel',
            [s, this.units * 4],
            null,
            this.kernelInitializer,
            this.kernelRegularizer,
            !0,
            this.kernelConstraint
        )),
            (this.recurrentKernel = this.addWeight(
                'recurrent_kernel',
                [this.units, this.units * 4],
                null,
                this.recurrentInitializer,
                this.recurrentRegularizer,
                !0,
                this.recurrentConstraint
            ));
        let r;
        if (this.useBias) {
            if (this.unitForgetBias) {
                const o = this.biasInitializer,
                    i = this.units;
                r = new ((e = class extends es {
                    apply(l, c) {
                        const u = o.apply([i]),
                            h = new Vm().apply([i]),
                            d = o.apply([i * 2]);
                        return dy(dy(u, h), d);
                    }
                }),
                (e.className = 'CustomInit'),
                e)();
            } else r = this.biasInitializer;
            this.bias = this.addWeight(
                'bias',
                [this.units * 4],
                null,
                r,
                this.biasRegularizer,
                !0,
                this.biasConstraint
            );
        } else this.bias = null;
        this.built = !0;
    }
    call(t, e) {
        return Y(() => {
            const s = e.training == null ? !1 : e.training;
            if (((t = t), t.length !== 3))
                throw new H(
                    `LSTMCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`
                );
            let r = t[1];
            const o = t[2];
            (t = t[0]),
                0 < this.dropout &&
                    this.dropout < 1 &&
                    this.dropoutMask == null &&
                    (this.dropoutMask = wr({
                        ones: () => On(t),
                        rate: this.dropout,
                        training: s,
                        count: 4,
                        dropoutFunc: this.dropoutFunc,
                    })),
                0 < this.recurrentDropout &&
                    this.recurrentDropout < 1 &&
                    this.recurrentDropoutMask == null &&
                    (this.recurrentDropoutMask = wr({
                        ones: () => On(r),
                        rate: this.recurrentDropout,
                        training: s,
                        count: 4,
                        dropoutFunc: this.dropoutFunc,
                    }));
            const i = this.dropoutMask,
                a = this.recurrentDropoutMask;
            let l, c, u, h;
            0 < this.dropout && this.dropout < 1 && (t = U(t, i[0]));
            let d = $s(t, this.kernel.read());
            0 < this.recurrentDropout &&
                this.recurrentDropout < 1 &&
                (r = U(r, a[0])),
                (d = ct(d, $s(r, this.recurrentKernel.read()))),
                this.useBias && (d = gs(d, this.bias.read()));
            const [p, f, m, g] = wn(d, 4, d.rank - 1);
            (l = this.recurrentActivation.apply(p)),
                (c = this.recurrentActivation.apply(f)),
                (u = ct(U(c, o), U(l, this.activation.apply(m)))),
                (h = this.recurrentActivation.apply(g));
            const y = U(h, this.activation.apply(u));
            return [y, y, u];
        });
    }
    getConfig() {
        const t = super.getConfig(),
            e = {
                units: this.units,
                activation: br(this.activation),
                recurrentActivation: br(this.recurrentActivation),
                useBias: this.useBias,
                kernelInitializer: fe(this.kernelInitializer),
                recurrentInitializer: fe(this.recurrentInitializer),
                biasInitializer: fe(this.biasInitializer),
                unitForgetBias: this.unitForgetBias,
                kernelRegularizer: ee(this.kernelRegularizer),
                recurrentRegularizer: ee(this.recurrentRegularizer),
                biasRegularizer: ee(this.biasRegularizer),
                activityRegularizer: ee(this.activityRegularizer),
                kernelConstraint: Ee(this.kernelConstraint),
                recurrentConstraint: Ee(this.recurrentConstraint),
                biasConstraint: Ee(this.biasConstraint),
                dropout: this.dropout,
                recurrentDropout: this.recurrentDropout,
                implementation: this.implementation,
            };
        return Object.assign(Object.assign({}, t), e);
    }
}
xh.className = 'LSTMCell';
ut(xh);
class zw extends Rr {
    constructor(t) {
        t.implementation === 0 &&
            console.warn(
                '`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call.'
            ),
            (t.cell = new xh(t)),
            super(t);
    }
    call(t, e) {
        return Y(() => {
            this.cell.dropoutMask != null &&
                (Lt(this.cell.dropoutMask), (this.cell.dropoutMask = null)),
                this.cell.recurrentDropoutMask != null &&
                    (Lt(this.cell.recurrentDropoutMask),
                    (this.cell.recurrentDropoutMask = null));
            const s = e == null ? null : e.mask,
                r = e == null ? null : e.training,
                o = e == null ? null : e.initialState;
            return super.call(t, { mask: s, training: r, initialState: o });
        });
    }
    static fromConfig(t, e) {
        return e.implmentation === 0 && (e.implementation = 1), new t(e);
    }
}
zw.className = 'LSTM';
ut(zw);
class ng extends bh {
    constructor(t) {
        super(t), (this.cells = t.cells);
    }
    get stateSize() {
        const t = [];
        for (const e of this.cells.slice().reverse())
            Array.isArray(e.stateSize)
                ? t.push(...e.stateSize)
                : t.push(e.stateSize);
        return t;
    }
    call(t, e) {
        return Y(() => {
            t = t;
            let s = t.slice(1);
            const r = [];
            for (const a of this.cells.slice().reverse())
                Array.isArray(a.stateSize)
                    ? r.push(s.splice(0, a.stateSize.length))
                    : r.push(s.splice(0, 1));
            r.reverse();
            const o = [];
            let i;
            for (let a = 0; a < this.cells.length; ++a) {
                const l = this.cells[a];
                (s = r[a]),
                    a === 0 ? (i = [t[0]].concat(s)) : (i = [i[0]].concat(s)),
                    (i = l.call(i, e)),
                    o.push(i.slice(1));
            }
            s = [];
            for (const a of o.slice().reverse()) s.push(...a);
            return [i[0]].concat(s);
        });
    }
    build(t) {
        Rd(t) && (t = t[0]), (t = t);
        let e;
        this.cells.forEach((s, r) => {
            Yr(`RNNCell_${r}`, () => {
                s.build(t),
                    Array.isArray(s.stateSize)
                        ? (e = s.stateSize[0])
                        : (e = s.stateSize),
                    (t = [t[0], e]);
            });
        }),
            (this.built = !0);
    }
    getConfig() {
        const t = super.getConfig(),
            e = (o) => ({ className: o.getClassName(), config: o.getConfig() }),
            r = { cells: this.cells.map(e) };
        return Object.assign(Object.assign({}, t), r);
    }
    static fromConfig(t, e, s = {}) {
        const r = [];
        for (const o of e.cells) r.push(Ns(o, s));
        return new t({ cells: r });
    }
    get trainableWeights() {
        if (!this.trainable) return [];
        const t = [];
        for (const e of this.cells) t.push(...e.trainableWeights);
        return t;
    }
    get nonTrainableWeights() {
        const t = [];
        for (const e of this.cells) t.push(...e.nonTrainableWeights);
        if (!this.trainable) {
            const e = [];
            for (const s of this.cells) e.push(...s.trainableWeights);
            return e.concat(t);
        }
        return t;
    }
    getWeights() {
        const t = [];
        for (const e of this.cells) t.push(...e.weights);
        return Dd(t);
    }
    setWeights(t) {
        const e = [];
        for (const s of this.cells) {
            const r = s.weights.length,
                o = t.splice(r);
            for (let i = 0; i < s.weights.length; ++i)
                e.push([s.weights[i], o[i]]);
        }
        Km(e);
    }
}
ng.className = 'StackedRNNCells';
ut(ng);
function wr(n) {
    const {
            ones: t,
            rate: e,
            training: s = !1,
            count: r = 1,
            dropoutFunc: o,
        } = n,
        i = () => (o != null ? o(t(), e) : A1(t(), e)),
        a = () => pl(i, t, s);
    return !r || r <= 1
        ? Oe(a().clone())
        : Array(r)
              .fill(void 0)
              .map(a)
              .map((c) => Oe(c.clone()));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ var WF =
    (globalThis && globalThis.__rest) ||
    function (n, t) {
        var e = {};
        for (var s in n)
            Object.prototype.hasOwnProperty.call(n, s) &&
                t.indexOf(s) < 0 &&
                (e[s] = n[s]);
        if (n != null && typeof Object.getOwnPropertySymbols == 'function')
            for (
                var r = 0, s = Object.getOwnPropertySymbols(n);
                r < s.length;
                r++
            )
                t.indexOf(s[r]) < 0 &&
                    Object.prototype.propertyIsEnumerable.call(n, s[r]) &&
                    (e[s[r]] = n[s[r]]);
        return e;
    };
class Bw extends Rr {
    constructor(t) {
        if (t.unroll)
            throw new Ft('Unrolling is not possible with convolutional RNNs.');
        if (Array.isArray(t.cell))
            throw new Ft(
                'It is not possible at the moment to stack convolutional cells.'
            );
        super(t), (this.inputSpec = [new Ne({ ndim: 5 })]);
    }
    call(t, e) {
        return Y(() => {
            if (
                (this.cell.dropoutMask != null &&
                    (Lt(this.cell.dropoutMask), (this.cell.dropoutMask = null)),
                this.cell.recurrentDropoutMask != null &&
                    (Lt(this.cell.recurrentDropoutMask),
                    (this.cell.recurrentDropoutMask = null)),
                e && e.constants)
            )
                throw new H('ConvRNN2D cell does not support constants');
            const s = e == null ? null : e.mask,
                r = e == null ? null : e.training,
                o = e == null ? null : e.initialState;
            return super.call(t, { mask: s, training: r, initialState: o });
        });
    }
    computeOutputShape(t) {
        let e = this.computeSingleOutputShape(t);
        return (
            this.returnSequences || (e = [e[0], ...e.slice(2)]),
            this.returnState &&
                (e = [e, ...Array(2).fill([t[0], ...e.slice(-3)])]),
            e
        );
    }
    getInitialState(t) {
        return Y(() => {
            const { stateSize: e } = this.cell,
                s = t.shape,
                r = this.computeSingleOutputShape(s),
                o = [r[0], ...r.slice(2)],
                i = Se(o);
            return Array.isArray(e) ? Array(e.length).fill(i) : [i];
        });
    }
    resetStates(t, e = !1) {
        Y(() => {
            if (!this.stateful)
                throw new bs(
                    'Cannot call resetStates() on an RNN Layer that is not stateful.'
                );
            const s = this.inputSpec[0].shape,
                r = this.computeSingleOutputShape(s),
                o = [r[0], ...r.slice(2)];
            if (s[0] == null)
                throw new H(
                    'If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.'
                );
            if (this.getStates() == null)
                Array.isArray(this.cell.stateSize)
                    ? (this.states_ = this.cell.stateSize.map(() => Se(o)))
                    : (this.states_ = [Se(o)]);
            else if (t == null)
                Lt(this.states_),
                    this.keptStates != null &&
                        (Lt(this.keptStates), (this.keptStates = [])),
                    Array.isArray(this.cell.stateSize)
                        ? (this.states_ = this.cell.stateSize.map(() => Se(o)))
                        : (this.states_[0] = Se(o));
            else {
                if (
                    (Array.isArray(t) || (t = [t]),
                    t.length !== this.states_.length)
                )
                    throw new H(
                        `Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`
                    );
                e
                    ? this.keptStates.push(this.states_.slice())
                    : Lt(this.states_);
                for (let a = 0; a < this.states_.length; ++a) {
                    const l = t[a],
                        c = o;
                    if (!Ut(l.shape, c))
                        throw new H(
                            `State ${a} is incompatible with layer ${this.name}: expected shape=${c}, received shape=${l.shape}`
                        );
                    this.states_[a] = l;
                }
            }
            this.states_ = this.states_.map((a) => Oe(a.clone()));
        });
    }
    computeSingleOutputShape(t) {
        const {
                dataFormat: e,
                filters: s,
                kernelSize: r,
                padding: o,
                strides: i,
                dilationRate: a,
            } = this.cell,
            l = e === 'channelsFirst',
            c = t[l ? 3 : 2],
            u = t[l ? 4 : 3],
            h = cs(c, r[0], o, i[0], a[0]),
            d = cs(u, r[1], o, i[1], a[1]);
        return [...t.slice(0, 2), ...(l ? [s, h, d] : [h, d, s])];
    }
}
Bw.className = 'ConvRNN2D';
class sg extends xh {
    constructor(t) {
        const {
            filters: e,
            kernelSize: s,
            strides: r,
            padding: o,
            dataFormat: i,
            dilationRate: a,
        } = t;
        super(Object.assign(Object.assign({}, t), { units: e })),
            (this.filters = e),
            Fe(this.filters, 'filters'),
            (this.kernelSize = jo(s, 2, 'kernelSize')),
            this.kernelSize.forEach((l) => Fe(l, 'kernelSize')),
            (this.strides = jo(r || 1, 2, 'strides')),
            this.strides.forEach((l) => Fe(l, 'strides')),
            (this.padding = o || 'valid'),
            Ln(this.padding),
            (this.dataFormat = i || 'channelsLast'),
            ve(this.dataFormat),
            (this.dilationRate = jo(a || 1, 2, 'dilationRate')),
            this.dilationRate.forEach((l) => Fe(l, 'dilationRate'));
    }
    build(t) {
        var e;
        t = Xt(t);
        const s = this.dataFormat === 'channelsFirst' ? 1 : t.length - 1;
        if (t[s] == null)
            throw new H(
                `The channel dimension of the input should be defined. Found ${t[s]}`
            );
        const r = t[s],
            o = 4,
            i = this.kernelSize.concat([r, this.filters * o]);
        this.kernel = this.addWeight(
            'kernel',
            i,
            null,
            this.kernelInitializer,
            this.kernelRegularizer,
            !0,
            this.kernelConstraint
        );
        const a = this.kernelSize.concat([this.filters, this.filters * o]);
        if (
            ((this.recurrentKernel = this.addWeight(
                'recurrent_kernel',
                a,
                null,
                this.recurrentInitializer,
                this.recurrentRegularizer,
                !0,
                this.recurrentConstraint
            )),
            this.useBias)
        ) {
            let l;
            if (this.unitForgetBias) {
                const c = this.biasInitializer,
                    u = this.filters;
                l = new ((e = class extends es {
                    apply(d, p) {
                        const f = c.apply([u]),
                            m = xn([u]),
                            g = c.apply([u * 2]);
                        return Mm([f, m, g]);
                    }
                }),
                (e.className = 'CustomInit'),
                e)();
            } else l = this.biasInitializer;
            this.bias = this.addWeight(
                'bias',
                [this.filters * o],
                null,
                l,
                this.biasRegularizer,
                !0,
                this.biasConstraint
            );
        }
        this.built = !0;
    }
    call(t, e) {
        return Y(() => {
            if (t.length !== 3)
                throw new H(
                    `ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`
                );
            const s = e.training || !1,
                r = t[0],
                o = t[1],
                i = t[2],
                a = 4;
            0 < this.dropout &&
                this.dropout < 1 &&
                this.dropoutMask == null &&
                (this.dropoutMask = wr({
                    ones: () => On(r),
                    rate: this.dropout,
                    training: s,
                    count: a,
                    dropoutFunc: this.dropoutFunc,
                }));
            const l = this.dropoutMask,
                c = (et, z, M) => (!z || !z[M] ? et : U(z[M], et));
            let u = c(r, l, 0),
                h = c(r, l, 1),
                d = c(r, l, 2),
                p = c(r, l, 3);
            0 < this.recurrentDropout &&
                this.recurrentDropout < 1 &&
                this.recurrentDropoutMask == null &&
                (this.recurrentDropoutMask = wr({
                    ones: () => On(o),
                    rate: this.recurrentDropout,
                    training: s,
                    count: a,
                    dropoutFunc: this.dropoutFunc,
                }));
            const f = this.recurrentDropoutMask;
            let m = c(o, f, 0),
                g = c(o, f, 1),
                y = c(o, f, 2),
                b = c(o, f, 3);
            const w = 3,
                [x, v, C, $] = wn(this.kernel.read(), a, w),
                [T, N, R, P] = this.useBias
                    ? wn(this.bias.read(), a)
                    : [null, null, null, null];
            (u = this.inputConv(u, x, T, this.padding)),
                (h = this.inputConv(h, v, N, this.padding)),
                (d = this.inputConv(d, C, R, this.padding)),
                (p = this.inputConv(p, $, P, this.padding));
            const [E, O, S, L] = wn(this.recurrentKernel.read(), a, w);
            (m = this.recurrentConv(m, E)),
                (g = this.recurrentConv(g, O)),
                (y = this.recurrentConv(y, S)),
                (b = this.recurrentConv(b, L));
            const q = this.recurrentActivation.apply(ct(u, m)),
                W = this.recurrentActivation.apply(ct(h, g)),
                X = ct(U(W, i), U(q, this.activation.apply(ct(d, y)))),
                G = U(
                    this.recurrentActivation.apply(ct(p, b)),
                    this.activation.apply(X)
                );
            return [G, G, X];
        });
    }
    getConfig() {
        const t = super.getConfig(),
            e = WF(t, ['units']),
            s = {
                filters: this.filters,
                kernelSize: this.kernelSize,
                padding: this.padding,
                dataFormat: this.dataFormat,
                dilationRate: this.dilationRate,
                strides: this.strides,
            };
        return Object.assign(Object.assign({}, e), s);
    }
    inputConv(t, e, s, r) {
        const o = mr(
            t,
            e,
            this.strides,
            r || 'valid',
            this.dataFormat === 'channelsFirst' ? 'NCHW' : 'NHWC',
            this.dilationRate
        );
        return s ? gs(o, s, this.dataFormat) : o;
    }
    recurrentConv(t, e) {
        return mr(
            t,
            e,
            1,
            'same',
            this.dataFormat === 'channelsFirst' ? 'NCHW' : 'NHWC'
        );
    }
}
sg.className = 'ConvLSTM2DCell';
ut(sg);
class Mw extends Bw {
    constructor(t) {
        const e = new sg(t);
        super(Object.assign(Object.assign({}, t), { cell: e }));
    }
    static fromConfig(t, e) {
        return new t(e);
    }
}
Mw.className = 'ConvLSTM2D';
ut(Mw);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ class rg extends Mt {
    constructor(t) {
        super(t),
            (this.rate = Math.max(Math.min(t.rate, 1), 0)),
            (this.noiseShape = t.noiseShape),
            (this.seed = t.seed),
            (this.supportsMasking = !0);
    }
    getNoiseShape(t) {
        if (this.noiseShape == null) return this.noiseShape;
        const e = t.shape,
            s = [];
        for (let r = 0; r < this.noiseShape.length; ++r)
            s.push(this.noiseShape[r] == null ? e[r] : this.noiseShape[r]);
        return s;
    }
    call(t, e) {
        return Y(() => {
            this.invokeCallHook(t, e);
            const s = Rt(t);
            if (0 < this.rate && this.rate < 1) {
                const r = e.training == null ? !1 : e.training,
                    o = this.getNoiseShape(s);
                return pl(
                    () => A1(s, this.rate, o, this.seed),
                    () => s,
                    r
                );
            }
            return t;
        });
    }
    getConfig() {
        const t = {
                rate: this.rate,
                noiseShape: this.noiseShape,
                seed: this.seed,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
    dispose() {
        return super.dispose();
    }
}
rg.className = 'Dropout';
ut(rg);
class Vw extends rg {
    constructor(t) {
        super(t), (this.inputSpec = [{ ndim: 3 }]);
    }
    getNoiseShape(t) {
        const e = t.shape;
        return [e[0], 1, e[2]];
    }
}
Vw.className = 'SpatialDropout1D';
ut(Vw);
class og extends Mt {
    constructor(t) {
        if (
            (super(t),
            (this.activation = null),
            (this.useBias = !0),
            (this.kernel = null),
            (this.bias = null),
            (this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal'),
            (this.DEFAULT_BIAS_INITIALIZER = 'zeros'),
            t.batchInputShape == null &&
                t.inputShape == null &&
                t.inputDim != null)
        ) {
            let e = null;
            t.batchSize != null && (e = t.batchSize),
                (this.batchInputShape = [e, t.inputDim]);
        }
        (this.units = t.units),
            Fe(this.units, 'units'),
            (this.activation = xr(t.activation)),
            t.useBias != null && (this.useBias = t.useBias),
            (this.kernelInitializer = ue(
                t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER
            )),
            (this.biasInitializer = ue(
                t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER
            )),
            (this.kernelConstraint = _e(t.kernelConstraint)),
            (this.biasConstraint = _e(t.biasConstraint)),
            (this.kernelRegularizer = he(t.kernelRegularizer)),
            (this.biasRegularizer = he(t.biasRegularizer)),
            (this.activityRegularizer = he(t.activityRegularizer)),
            (this.supportsMasking = !0),
            (this.inputSpec = [{ minNDim: 2 }]);
    }
    build(t) {
        t = Xt(t);
        const e = t[t.length - 1];
        this.kernel == null &&
            ((this.kernel = this.addWeight(
                'kernel',
                [e, this.units],
                null,
                this.kernelInitializer,
                this.kernelRegularizer,
                !0,
                this.kernelConstraint
            )),
            this.useBias &&
                (this.bias = this.addWeight(
                    'bias',
                    [this.units],
                    null,
                    this.biasInitializer,
                    this.biasRegularizer,
                    !0,
                    this.biasConstraint
                ))),
            (this.inputSpec = [{ minNDim: 2, axes: { [-1]: e } }]),
            (this.built = !0);
    }
    computeOutputShape(t) {
        t = Xt(t);
        const e = t.slice();
        return (e[e.length - 1] = this.units), e;
    }
    call(t, e) {
        return Y(() => {
            this.invokeCallHook(t, e);
            const s = Rt(t),
                r = I1(this.activation.getClassName());
            let o;
            return (
                r != null
                    ? (o = $s(
                          s,
                          this.kernel.read(),
                          r,
                          this.bias ? this.bias.read() : null
                      ))
                    : ((o = $s(s, this.kernel.read())),
                      this.bias != null && (o = gs(o, this.bias.read())),
                      this.activation != null &&
                          (o = this.activation.apply(o))),
                o
            );
        });
    }
    getConfig() {
        const t = {
                units: this.units,
                activation: br(this.activation),
                useBias: this.useBias,
                kernelInitializer: fe(this.kernelInitializer),
                biasInitializer: fe(this.biasInitializer),
                kernelRegularizer: ee(this.kernelRegularizer),
                biasRegularizer: ee(this.biasRegularizer),
                activityRegularizer: ee(this.activityRegularizer),
                kernelConstraint: Ee(this.kernelConstraint),
                biasConstraint: Ee(this.biasConstraint),
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
og.className = 'Dense';
ut(og);
class Ww extends Mt {
    constructor(t) {
        (t = t || {}),
            super(t),
            (this.inputSpec = [{ minNDim: 3 }]),
            (this.dataFormat = t.dataFormat);
    }
    computeOutputShape(t) {
        t = Xt(t);
        for (const e of t.slice(1))
            if (e == null)
                throw new H(
                    `The shape of the input to "Flatten" is not fully defined (got ${t.slice(
                        1
                    )}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`
                );
        return [t[0], ur(t, 1)];
    }
    call(t, e) {
        return Y(() => {
            this.invokeCallHook(t, e);
            let s = Rt(t);
            if (this.dataFormat === 'channelsFirst' && s.rank > 1) {
                const r = [0];
                for (let o = 2; o < s.rank; ++o) r.push(o);
                r.push(1), (s = Ht(s, r));
            }
            return bO(s);
        });
    }
    getConfig() {
        const t = {};
        this.dataFormat != null && (t.dataFormat = this.dataFormat);
        const e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
Ww.className = 'Flatten';
ut(Ww);
class Uw extends Mt {
    constructor(t) {
        super(t),
            (this.supportsMasking = !0),
            (this.activation = xr(t.activation));
    }
    call(t, e) {
        return Y(() => {
            this.invokeCallHook(t, e);
            const s = Rt(t);
            return this.activation.apply(s);
        });
    }
    getConfig() {
        const t = { activation: br(this.activation) },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
Uw.className = 'Activation';
ut(Uw);
class Gw extends Mt {
    constructor(t) {
        super(t), (this.n = t.n), (this.inputSpec = [{ ndim: 2 }]);
    }
    computeOutputShape(t) {
        return [t[0], this.n, t[1]];
    }
    call(t, e) {
        return Y(() => ((t = Rt(t)), gO(t, this.n)));
    }
    getConfig() {
        const t = { n: this.n },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
Gw.className = 'RepeatVector';
ut(Gw);
class Hw extends Mt {
    constructor(t) {
        super(t), (this.targetShape = t.targetShape);
        for (let e = 0; e < this.targetShape.length; ++e)
            this.isUnknown(this.targetShape[e]) && (this.targetShape[e] = null);
    }
    isUnknown(t) {
        return t < 0 || t == null;
    }
    fixUnknownDimension(t, e) {
        const s = 'Total size of new array must be unchanged.',
            r = e.slice();
        let o = 1,
            i = null;
        for (let l = 0; l < r.length; ++l) {
            const c = r[l];
            if (this.isUnknown(c))
                if (i === null) i = l;
                else throw new H('Can only specifiy one unknown dimension.');
            else o *= c;
        }
        const a = ur(t);
        if (i !== null) {
            if (o === 0 || a % o !== 0) throw new H(s);
            r[i] = a / o;
        } else if (a !== o) throw new H(s);
        return r;
    }
    computeOutputShape(t) {
        let e = !1;
        for (let s = 0; s < t.length; ++s)
            if (this.isUnknown(t[s])) {
                e = !0;
                break;
            }
        return e
            ? t.slice(0, 1).concat(this.targetShape)
            : t
                  .slice(0, 1)
                  .concat(
                      this.fixUnknownDimension(t.slice(1), this.targetShape)
                  );
    }
    call(t, e) {
        return Y(() => {
            this.invokeCallHook(t, e);
            const s = Rt(t),
                r = s.shape,
                o = r
                    .slice(0, 1)
                    .concat(
                        this.fixUnknownDimension(r.slice(1), this.targetShape)
                    );
            return j(s, o);
        });
    }
    getConfig() {
        const t = { targetShape: this.targetShape },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
Hw.className = 'Reshape';
ut(Hw);
class jw extends Mt {
    constructor(t) {
        if ((super(t), t.dims == null))
            throw new Error(
                'Required configuration field `dims` is missing during Permute constructor call.'
            );
        if (!Array.isArray(t.dims))
            throw new Error(
                `Permute constructor requires \`dims\` to be an Array, but received ${t.dims} instead.`
            );
        const e = hs(1, t.dims.length + 1);
        if (!Ut(t.dims.slice().sort(), e))
            throw new Error(
                'Invalid permutation `dims`: ' +
                    JSON.stringify(t.dims) +
                    ' `dims` must contain consecutive integers starting from 1.'
            );
        (this.dims = t.dims),
            (this.dimsIncludingBatch = [0].concat(this.dims)),
            (this.inputSpec = [new Ne({ ndim: this.dims.length + 1 })]);
    }
    computeOutputShape(t) {
        t = Xt(t);
        const e = t.slice();
        return (
            this.dims.forEach((s, r) => {
                e[r + 1] = t[s];
            }),
            e
        );
    }
    call(t, e) {
        return Ht(Rt(t), this.dimsIncludingBatch);
    }
    getConfig() {
        const t = { dims: this.dims },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
jw.className = 'Permute';
ut(jw);
class qw extends Mt {
    constructor(t) {
        super(t ?? {}),
            (this.supportsMasking = !0),
            t != null
                ? (this.maskValue = t.maskValue == null ? 0 : t.maskValue)
                : (this.maskValue = 0);
    }
    computeOutputShape(t) {
        return t;
    }
    getConfig() {
        const t = super.getConfig(),
            e = { maskValue: this.maskValue };
        return Object.assign(e, t), e;
    }
    computeMask(t, e) {
        const s = Rt(t),
            r = -1;
        return ac(ti(s, this.maskValue), r);
    }
    call(t, e) {
        return Y(() => {
            this.invokeCallHook(t, e);
            const s = Rt(t),
                r = -1,
                o = !0,
                i = ac(ti(s, this.maskValue), r, o);
            return U(s, bt(i, s.dtype));
        });
    }
}
qw.className = 'Masking';
ut(qw);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ class Kw extends Mt {
    constructor(t) {
        if (
            (super(t),
            (this.embeddings = null),
            (this.DEFAULT_EMBEDDINGS_INITIALIZER = 'randomUniform'),
            t.batchInputShape == null && t.inputShape == null)
        ) {
            let e = null;
            t.batchSize != null && (e = t.batchSize),
                t.inputLength == null
                    ? (this.batchInputShape = [e, null])
                    : (this.batchInputShape = [e].concat(Qt(t.inputLength)));
        }
        (this.inputDim = t.inputDim),
            Fe(this.inputDim, 'inputDim'),
            (this.outputDim = t.outputDim),
            Fe(this.outputDim, 'outputDim'),
            (this.embeddingsInitializer = ue(
                t.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER
            )),
            (this.embeddingsRegularizer = he(t.embeddingsRegularizer)),
            (this.activityRegularizer = he(t.activityRegularizer)),
            (this.embeddingsConstraint = _e(t.embeddingsConstraint)),
            (this.maskZero = t.maskZero),
            (this.supportsMasking = t.maskZero),
            (this.inputLength = t.inputLength);
    }
    build(t) {
        (this.embeddings = this.addWeight(
            'embeddings',
            [this.inputDim, this.outputDim],
            this.dtype,
            this.embeddingsInitializer,
            this.embeddingsRegularizer,
            !0,
            this.embeddingsConstraint
        )),
            (this.built = !0);
    }
    warnOnIncompatibleInputShape(t) {}
    computeMask(t, e) {
        return Y(() => (this.maskZero ? ((t = Rt(t)), ti(t, jt(t))) : null));
    }
    computeOutputShape(t) {
        if (((t = Xt(t)), this.inputLength == null))
            return [...t, this.outputDim];
        const e = Qt(this.inputLength);
        if (e.length !== t.length - 1)
            throw new H(
                `"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`
            );
        {
            let s = 0;
            for (let r = 0; r < e.length; ++r) {
                const o = e[r],
                    i = t[r + 1];
                if (o != null && i != null && o !== i)
                    throw new H(
                        `"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`
                    );
                o == null && (e[s] = i), s++;
            }
        }
        return [t[0], ...e, this.outputDim];
    }
    call(t, e) {
        return Y(() => {
            this.invokeCallHook(t, e);
            let s = Rt(t);
            s.dtype !== 'int32' && (s = Cs(s, 'int32'));
            const r = _1(this.embeddings.read(), j(s, [s.size]));
            return j(r, Xt(this.computeOutputShape(s.shape)));
        });
    }
    getConfig() {
        const t = {
                inputDim: this.inputDim,
                outputDim: this.outputDim,
                embeddingsInitializer: fe(this.embeddingsInitializer),
                embeddingsRegularizer: ee(this.embeddingsRegularizer),
                activityRegularizer: ee(this.activityRegularizer),
                embeddingsConstraint: Ee(this.embeddingsConstraint),
                maskZero: this.maskZero,
                inputLength: this.inputLength,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
Kw.className = 'Embedding';
ut(Kw);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ class So extends Mt {
    constructor(t) {
        super(t || {}), (this.supportsMasking = !0);
    }
    mergeFunction(t) {
        throw new Ft();
    }
    computeElementwiseOpOutputShape(t, e) {
        if (t == null || e == null) return null;
        if (t.length < e.length)
            return this.computeElementwiseOpOutputShape(e, t);
        if (e.length === 0) return t;
        const s = t.slice(0, t.length - e.length);
        for (let r = 0; r < e.length; ++r) {
            const o = t[t.length - e.length + r],
                i = e[r];
            if (o == null || i == null || o < 0 || i < 0) s.push(null);
            else if (o === 1) s.push(i);
            else if (i === 1) s.push(o);
            else {
                if (o !== i)
                    throw new H(
                        'Operands could not be broadcast together with shapes ' +
                            JSON.stringify(t) +
                            ' ' +
                            JSON.stringify(e)
                    );
                s.push(o);
            }
        }
        return s;
    }
    build(t) {
        if (
            (Array.isArray(t) && !Array.isArray(t[0]) && (t = [Xt(t)]),
            (t = t),
            t.length < 2)
        )
            throw new H(
                `A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`
            );
        let e = [];
        for (const o of t) o != null && o[0] !== null && e.push(o[0]);
        if (((e = cr(e)), e.length > 1))
            throw new H(
                `Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(
                    t
                )}.`
            );
        let s = t[0] == null ? null : t[0].slice(1);
        for (let o = 1; o < t.length; ++o) {
            const i = t[o] == null ? null : t[o].slice(1);
            s = this.computeElementwiseOpOutputShape(s, i);
        }
        const r = t.map((o) => o.length);
        t.indexOf(null) === -1 && cr(r).length === 1
            ? (this.reshapeRequired = !1)
            : (this.reshapeRequired = !0);
    }
    call(t, e) {
        return Y(() => {
            if (((t = t), this.reshapeRequired)) {
                const s = [],
                    r = t.map((o) => o.rank);
                if (r.indexOf(null) === -1) {
                    const o = yr(r);
                    for (let i of t) {
                        const a = i.rank;
                        for (let l = 0; l < o - a; ++l) i = hl(i, 1);
                        s.push(i);
                    }
                    return this.mergeFunction(s);
                } else {
                    let o = !1;
                    for (const l of t) {
                        const c = l.rank;
                        if (c == null) {
                            const u = l.shape,
                                h = u[0],
                                d = u.slice(1).concat([h]);
                            let p = j(l, [h].concat(ur(u.slice(1))));
                            (p = Ht(p, [1, 0])),
                                (p = j(p, d)),
                                s.push(p),
                                (o = !0);
                        } else if (c > 1) {
                            const u = hs(1, c).concat([0]);
                            s.push(Ht(l, u)), (o = !0);
                        } else s.push(l);
                    }
                    let i = this.mergeFunction(s);
                    const a = i.rank;
                    if (o) {
                        if (a == null) {
                            const l = i.shape,
                                c = l.length,
                                u = l[c - 1],
                                h = [u].concat(l.slice(0, l.length - 1));
                            i = j(Ht(j(i, [-1, u]), [1, 0]), h);
                        } else if (a > 1) {
                            const l = [a - 1].concat(hs(0, a - 1));
                            i = Ht(i, l);
                        }
                    }
                    return i;
                }
            } else return this.mergeFunction(t);
        });
    }
    computeOutputShape(t) {
        t = t;
        let e;
        t[0] == null ? (e = null) : (e = t[0].slice(1));
        for (let r = 1; r < t.length; ++r) {
            const o = t[r] == null ? null : t[r].slice(1);
            e = this.computeElementwiseOpOutputShape(e, o);
        }
        let s = [];
        for (const r of t) r != null && r[0] !== null && s.push(r[0]);
        return (
            (s = cr(s)),
            s.length === 1 ? (e = s.concat(e)) : (e = [null].concat(e)),
            e
        );
    }
    computeMask(t, e) {
        return Y(() => {
            if (e == null) return null;
            if (!Array.isArray(e)) throw new H('`mask` should be an Array');
            if (!Array.isArray(t)) throw new H('`inputs` should be an Array');
            if (e.length !== t.length)
                throw new H(
                    `The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`
                );
            if (e.every((r) => r == null)) return null;
            e = e.map((r) => (r == null ? r : Qe(r, 0)));
            let s = e[0];
            for (let r = 1; r < e.length - 1; ++r) s = Es(s, e[r]);
            return s;
        });
    }
}
class Xw extends So {
    constructor(t) {
        super(t);
    }
    mergeFunction(t) {
        return Y(() => {
            let e = t[0].clone();
            for (let s = 1; s < t.length; ++s) e = ct(e, t[s]);
            return e;
        });
    }
}
Xw.className = 'Add';
ut(Xw);
class Yw extends So {
    constructor(t) {
        super(t);
    }
    mergeFunction(t) {
        return Y(() => {
            let e = t[0].clone();
            for (let s = 1; s < t.length; ++s) e = U(e, t[s]);
            return e;
        });
    }
}
Yw.className = 'Multiply';
ut(Yw);
class Zw extends So {
    constructor(t) {
        super(t);
    }
    mergeFunction(t) {
        return Y(() => {
            let e = t[0].clone();
            for (let s = 1; s < t.length; ++s) e = ct(e, t[s]);
            return U(1 / t.length, e);
        });
    }
}
Zw.className = 'Average';
ut(Zw);
class Jw extends So {
    constructor(t) {
        super(t);
    }
    mergeFunction(t) {
        return Y(() => {
            let e = t[0];
            for (let s = 1; s < t.length; ++s) e = Js(e, t[s]);
            return e;
        });
    }
}
Jw.className = 'Maximum';
ut(Jw);
class Qw extends So {
    constructor(t) {
        super(t);
    }
    mergeFunction(t) {
        return Y(() => {
            let e = t[0];
            for (let s = 1; s < t.length; ++s) e = ao(e, t[s]);
            return e;
        });
    }
}
Qw.className = 'Minimum';
ut(Qw);
class tv extends So {
    constructor(t) {
        super(t),
            (this.DEFAULT_AXIS = -1),
            t == null && (t = {}),
            (this.axis = t.axis == null ? this.DEFAULT_AXIS : t.axis),
            (this.supportsMasking = !0),
            (this.reshapeRequired = !1);
    }
    build(t) {
        if (!(Array.isArray(t) && Array.isArray(t[0])) || t.length === 1)
            throw new H(
                'A `Concatenate` layer should be called on a list of at least 2 inputs'
            );
        t = t;
        let e = !0;
        for (const r of t)
            if (r != null) {
                e = !1;
                break;
            }
        if (e) return;
        const s = [];
        for (let r = 0; r < t.length; ++r) {
            const o = t[r].slice();
            o.splice(this.axis, 1);
            let i = !1;
            for (const a of s)
                if (Ut(a, o)) {
                    i = !0;
                    break;
                }
            i || s.push(o);
        }
        if (s.length > 1)
            throw new H(
                'A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: ' +
                    JSON.stringify(t)
            );
    }
    mergeFunction(t) {
        return Y(() => Mm(t, this.axis));
    }
    computeOutputShape(t) {
        if (!(Array.isArray(t) && Array.isArray(t[0])))
            throw new H(
                'A `Concatenate` layer should be called on a list of inputs.'
            );
        const e = t,
            s = e[0].slice(),
            r = this.axis < 0 ? s.length + this.axis : this.axis;
        for (const o of e.slice(1)) {
            if (s[r] == null || o[r] == null) {
                s[r] = null;
                break;
            }
            s[r] += o[r];
        }
        return s;
    }
    computeMask(t, e) {
        if (e == null) return null;
        if (!Array.isArray(e))
            throw new H('`mask` should be an array for Concatenate');
        if (!Array.isArray(t))
            throw new H('`inputs` should be an array for Concatenate');
        if (e.length !== t.length)
            throw new H(
                `Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`
            );
        return Y(() => {
            let s = !0;
            if (
                (e.forEach((i) => {
                    if (i != null) {
                        s = !1;
                        return;
                    }
                }),
                s)
            )
                return null;
            const r = [];
            for (let i = 0; i < t.length; ++i)
                e[i] == null
                    ? r.push(bt(On(t[i]), 'bool'))
                    : e[i].rank < t[i].rank
                    ? r.push(Qe(e[i], -1))
                    : r.push(e[i]);
            const o = Ie(r, this.axis);
            return Sf(o, -1, !1);
        });
    }
    getConfig() {
        const t = { axis: this.axis },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
tv.className = 'Concatenate';
ut(tv);
function Ri(n, t) {
    for (; n < 0; ) n += t;
    return n;
}
function UF(n, t, e) {
    if (n.shape.length > 3 || t.shape.length > 3)
        throw new Ft(
            'batchDot is not implemented for tensors of 4D or higher rank yet'
        );
    if (
        (_(
            n.shape.length >= 2,
            () =>
                `batchDot requires the rank of x to be >= 2, but got ${n.shape.length}`
        ),
        _(
            n.shape.length >= 2,
            () =>
                `batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`
        ),
        typeof e == 'number' && (e = [e, e]),
        n.dtype === 'complex64' || t.dtype === 'complex64')
    )
        throw new Ft(
            'batchDot is not implemented for complex64-type Tensors yet.'
        );
    const s = n.shape.length,
        r = t.shape.length;
    e == null && (e = [s - 1, r - 2]);
    const o = e;
    return Y(() => {
        let i;
        if (s > r) {
            i = s - r;
            const l = [];
            for (let c = 0; c < i; ++c) l.push(1);
            t = j(t, t.shape.concat(l));
        } else if (r > s) {
            i = r - s;
            const l = [];
            for (let c = 0; c < i; ++c) l.push(1);
            n = j(n, n.shape.concat(l));
        } else i = 0;
        let a;
        if (n.shape.length === 2 && t.shape.length === 2)
            o[0] === o[1]
                ? (a = St(U(n, t), o[0]))
                : (a = St(U(Ht(n, [1, 0]), t), o[1]));
        else {
            const l = o[0] !== n.shape.length - 1,
                c = o[1] === t.shape.length - 1;
            a = Wt(n, t, l, c);
        }
        if (i > 0) {
            let l;
            s > r ? (l = s + r - 3) : (l = s - 1);
            const c = [];
            for (let u = l; u < l + i; ++u) c.push(u);
            a = wo(a, c);
        }
        return a.shape.length === 1 && (a = Qe(a, 1)), a;
    });
}
class ev extends So {
    constructor(t) {
        super(t),
            (this.axes = t.axes),
            (this.normalize = t.normalize == null ? !1 : t.normalize),
            (this.supportsMasking = !0),
            (this.reshapeRequired = !1);
    }
    build(t) {
        _(
            Array.isArray(t) &&
                t.length === 2 &&
                Array.isArray(t[0]) &&
                Array.isArray(t[1]),
            () =>
                'A `Dot` layer should be called on a list of exactly 2 inputs.'
        );
        const e = t[0],
            s = t[1];
        if (e.length > 3 || s.length > 3)
            throw new Ft(
                'Dot layer does not support tensors of 4D or higher rank yet.'
            );
        const r = this.interpretAxes(e, s);
        if (e[r[0]] !== s[r[1]])
            throw new H(`Dimension incompatibility: ${e[r[0]]} !== ${s[r[1]]}`);
    }
    mergeFunction(t) {
        if (t.length !== 2)
            throw new H(
                `A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`
            );
        let e = t[0],
            s = t[1],
            r;
        return (
            Array.isArray(this.axes)
                ? (r = this.axes.map((o, i) => Ri(o, t[i].shape.length)))
                : (r = [
                      Ri(this.axes, e.shape.length),
                      Ri(this.axes, s.shape.length),
                  ]),
            this.normalize && ((e = pc(e, r[0])), (s = pc(s, r[1]))),
            UF(e, s, r)
        );
    }
    interpretAxes(t, e) {
        let s;
        return (
            Array.isArray(this.axes)
                ? (s = this.axes)
                : (s = [Ri(this.axes, t.length), Ri(this.axes, e.length)]),
            s
        );
    }
    computeOutputShape(t) {
        _(
            Array.isArray(t) &&
                t.length === 2 &&
                Array.isArray(t[0]) &&
                Array.isArray(t[1]),
            () =>
                'A `Dot` layer should be called on a list of exactly 2 inputs.'
        );
        const e = t[0].slice(),
            s = t[1].slice();
        if (e.length > 3 || s.length > 3)
            throw new Ft(
                'Dot layer does not support tensors of 4D or higher rank yet.'
            );
        const r = this.interpretAxes(e, s);
        e.splice(r[0], 1), s.splice(r[1], 1), s.splice(0, 1);
        const o = e.concat(s);
        return o.length === 1 && o.push(1), o;
    }
    computeMask(t, e) {
        return null;
    }
    getConfig() {
        const t = { axes: this.axes, normalize: this.normalize },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
ev.className = 'Dot';
ut(ev);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ class nv extends Mt {
    constructor(t) {
        super(t), (this.supportsMasking = !0), (this.stddev = t.stddev);
    }
    computeOutputShape(t) {
        return t;
    }
    getConfig() {
        const t = super.getConfig(),
            e = { stddev: this.stddev };
        return Object.assign(e, t), e;
    }
    call(t, e) {
        return Y(() => {
            this.invokeCallHook(t, e);
            const s = Rt(t);
            return pl(
                () => ct(dh(s.shape, 0, this.stddev), s),
                () => s,
                e.training || !1
            );
        });
    }
}
nv.className = 'GaussianNoise';
ut(nv);
class sv extends Mt {
    constructor(t) {
        super(t), (this.supportsMasking = !0), (this.rate = t.rate);
    }
    computeOutputShape(t) {
        return t;
    }
    getConfig() {
        const t = super.getConfig(),
            e = { rate: this.rate };
        return Object.assign(e, t), e;
    }
    call(t, e) {
        return Y(() => {
            this.invokeCallHook(t, e);
            const s = Rt(t);
            return this.rate > 0 && this.rate < 1
                ? pl(
                      () => {
                          const o = Math.sqrt(this.rate / (1 - this.rate));
                          return U(s, dh(s.shape, 1, o));
                      },
                      () => s,
                      e.training || !1
                  )
                : s;
        });
    }
}
sv.className = 'GaussianDropout';
ut(sv);
class rv extends Mt {
    constructor(t) {
        super(t),
            (this.supportsMasking = !0),
            (this.rate = t.rate),
            (this.noiseShape = t.noiseShape);
    }
    _getNoiseShape(t) {
        return this.noiseShape || Rt(t).shape;
    }
    computeOutputShape(t) {
        return t;
    }
    getConfig() {
        const t = super.getConfig(),
            e = { rate: this.rate };
        return Object.assign(e, t), e;
    }
    call(t, e) {
        return Y(() => {
            if (this.rate < 1 && this.rate > 0) {
                const s = this._getNoiseShape(t);
                return pl(
                    () => {
                        const o = Rt(t),
                            i = 1.6732632423543772,
                            a = 1.0507009873554805,
                            l = -i * a;
                        let c = Er(xo(s), this.rate);
                        c = Cs(c, 'float32');
                        const u =
                                ((1 - this.rate) * (1 + this.rate * l ** 2)) **
                                -0.5,
                            h = -u * l * this.rate,
                            d = ct(U(o, c), U(ct(c, -1), l));
                        return ct(U(d, u), h);
                    },
                    () => Rt(t),
                    e.training || !1
                );
            }
            return t;
        });
    }
}
rv.className = 'AlphaDropout';
ut(rv);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function Zi(n, t, e, s, r, o = 0.001) {
    let i;
    if (n.rank === 2) i = T0(n, t, e, s, r, o);
    else if (n.rank === 3) i = E0(n, t, e, s, r, o);
    else if (n.rank === 4) i = _0(n, t, e, s, r, o);
    else
        throw new Ft(
            `batchNormalization is not implemented for array of rank ${n.rank} yet`
        );
    return i;
}
function GF(n, t, e, s, r = 0.001) {
    return Y(() => {
        const o = qu(n, s),
            i = o.mean,
            a = o.variance;
        return [Zi(n, i, a, e, t, r), i, a];
    });
}
function HF(n, t, e, s, r = 0.001) {
    return Y(() => {
        const o = qu(n, s),
            i = o.mean,
            a = o.variance,
            l = [];
        for (const f of hs(0, n.rank))
            s.indexOf(f) !== -1 ? l.push(1) : l.push(n.shape[f]);
        const c = j(i, l),
            u = j(a, l),
            h = t == null ? null : j(t, l),
            d = e == null ? null : j(e, l);
        return [Zi(n, c, u, d, h, r), i, a];
    });
}
function jF(n, t, e, s, r = 0.001) {
    return Ut(s.slice().sort(), hs(0, n.rank - 1))
        ? GF(n, t, e, s, r)
        : HF(n, t, e, s, r);
}
class ov extends Mt {
    constructor(t) {
        t == null && (t = {}),
            super(t),
            (this.supportsMasking = !0),
            (this.axis = t.axis == null ? -1 : t.axis),
            (this.momentum = t.momentum == null ? 0.99 : t.momentum),
            (this.epsilon = t.epsilon == null ? 0.001 : t.epsilon),
            (this.center = t.center == null ? !0 : t.center),
            (this.scale = t.scale == null ? !0 : t.scale),
            (this.betaInitializer = ue(t.betaInitializer || 'zeros')),
            (this.gammaInitializer = ue(t.gammaInitializer || 'ones')),
            (this.movingMeanInitializer = ue(
                t.movingMeanInitializer || 'zeros'
            )),
            (this.movingVarianceInitializer = ue(
                t.movingVarianceInitializer || 'ones'
            )),
            (this.betaConstraint = _e(t.betaConstraint)),
            (this.gammaConstraint = _e(t.gammaConstraint)),
            (this.betaRegularizer = he(t.betaRegularizer)),
            (this.gammaRegularizer = he(t.gammaRegularizer));
    }
    build(t) {
        t = Xt(t);
        const e = this.axis >= 0 ? this.axis : this.axis + t.length,
            s = t[e];
        if (s == null)
            throw new H(
                `Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(
                    t
                )}.`
            );
        this.inputSpec = [new Ne({ ndim: t.length, axes: { [e]: s } })];
        const r = [s];
        this.scale &&
            (this.gamma = this.addWeight(
                'gamma',
                r,
                null,
                this.gammaInitializer,
                this.gammaRegularizer,
                !0,
                this.gammaConstraint
            )),
            this.center &&
                (this.beta = this.addWeight(
                    'beta',
                    r,
                    null,
                    this.betaInitializer,
                    this.betaRegularizer,
                    !0,
                    this.betaConstraint
                )),
            (this.movingMean = this.addWeight(
                'moving_mean',
                r,
                null,
                this.movingMeanInitializer,
                null,
                !1
            )),
            (this.movingVariance = this.addWeight(
                'moving_variance',
                r,
                null,
                this.movingVarianceInitializer,
                null,
                !1
            )),
            (this.built = !0);
    }
    call(t, e) {
        return Y(() => {
            const s = e.training == null ? !1 : e.training,
                r = Rt(t),
                o = r.shape,
                i = o.length,
                a = hs(0, i),
                l = this.axis >= 0 ? this.axis : this.axis + i;
            a.splice(l, 1);
            const c = co(1, i);
            c[l] = o[l];
            const u = a.slice();
            u.sort();
            const h = !Ut(u, hs(0, i).slice(0, i - 1)),
                d = () => {
                    if (h) {
                        const b = j(this.movingMean.read(), c),
                            w = j(this.movingVariance.read(), c),
                            x = this.center ? j(this.beta.read(), c) : null,
                            v = this.scale ? j(this.gamma.read(), c) : null;
                        return Zi(r, b, w, x, v, this.epsilon);
                    } else
                        return Zi(
                            r,
                            this.movingMean.read(),
                            this.movingVariance.read(),
                            this.beta == null ? null : this.beta.read(),
                            this.gamma == null ? null : this.gamma.read(),
                            this.epsilon
                        );
                };
            if (!s) return d();
            const [p, f, m] = jF(
                    r,
                    this.gamma.read(),
                    this.beta.read(),
                    a,
                    this.epsilon
                ),
                g = (b, w, x) => {
                    Y(() => {
                        const v = 1 - x,
                            C = b.read(),
                            $ = U(kt(C, w), v);
                        b.write(kt(C, $));
                    });
                };
            return (
                (() => {
                    g(this.movingMean, f, this.momentum),
                        g(this.movingVariance, m, this.momentum);
                })(),
                p
            );
        });
    }
    getConfig() {
        const t = {
                axis: this.axis,
                momentum: this.momentum,
                epsilon: this.epsilon,
                center: this.center,
                scale: this.scale,
                betaInitializer: fe(this.betaInitializer),
                gammaInitializer: fe(this.gammaInitializer),
                movingMeanInitializer: fe(this.movingMeanInitializer),
                movingVarianceInitializer: fe(this.movingVarianceInitializer),
                betaRegularizer: ee(this.betaRegularizer),
                gammaRegularizer: ee(this.gammaRegularizer),
                betaConstraint: Ee(this.betaConstraint),
                gammaConstraint: Ee(this.gammaConstraint),
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
ov.className = 'BatchNormalization';
ut(ov);
class iv extends Mt {
    constructor(t) {
        if (
            (t == null && (t = {}),
            super(t),
            (this.axis = t.axis == null ? -1 : t.axis),
            typeof this.axis == 'number')
        ) {
            if (!Number.isInteger(this.axis))
                throw new Error(
                    `Expected axis to be an integer, but received ${this.axis}`
                );
        } else if (Array.isArray(this.axis)) {
            for (const e of this.axis)
                if (!Number.isInteger(e))
                    throw new Error(
                        `Expected axis to be an array of integers, but received ${JSON.stringify(
                            this.axis
                        )}`
                    );
        } else
            throw new Error(
                `Expected axis to be an integer or an array of integers, but received ${JSON.stringify(
                    this.axis
                )}`
            );
        (this.epsilon = t.epsilon == null ? 0.001 : t.epsilon),
            (this.center = t.center == null ? !0 : t.center),
            (this.scale = t.scale == null ? !0 : t.scale),
            (this.betaInitializer = ue(t.betaInitializer || 'zeros')),
            (this.gammaInitializer = ue(t.gammaInitializer || 'ones')),
            (this.betaRegularizer = he(t.betaRegularizer)),
            (this.gammaRegularizer = he(t.gammaRegularizer)),
            (this.supportsMasking = !0);
    }
    build(t) {
        t = Xt(t);
        const e = t.length;
        typeof this.axis == 'number' && (this.axis = [this.axis]);
        for (let o = 0; o < this.axis.length; ++o)
            this.axis[o] < 0 && (this.axis[o] += e);
        for (const o of this.axis)
            if (o < 0 || o >= e) throw new Error(`Invalid axis: ${o}`);
        if (this.axis.length !== cr(this.axis).length)
            throw new Error(`Found duplicate axes in: ${this.axis}`);
        const s = this.axis.map((o) => t[o]),
            r = !0;
        this.scale
            ? (this.gamma = this.addWeight(
                  'gamma',
                  s,
                  'float32',
                  this.gammaInitializer,
                  this.gammaRegularizer,
                  r
              ))
            : (this.gamma = null),
            this.center
                ? (this.beta = this.addWeight(
                      'beta',
                      s,
                      'float32',
                      this.betaInitializer,
                      this.betaRegularizer,
                      r
                  ))
                : (this.beta = null),
            (this.built = !0);
    }
    call(t, e) {
        const s = Rt(t),
            r = s.shape,
            o = r.length;
        return Y(() => {
            let { mean: a, variance: l } = qu(s, this.axis, !0);
            const c = co(1, o);
            for (const m of this.axis) c[m] = r[m];
            const u = (m) => (m != null && m.shape.length !== o ? j(m, c) : m);
            let h = this.scale ? u(this.gamma.read()) : null,
                d = this.center ? u(this.beta.read()) : null;
            const p = [],
                f = [];
            for (let m = 0; m < o; ++m)
                this.axis.indexOf(m) !== -1
                    ? (p.push(r[m]), f.push(1))
                    : (p.push(1), f.push(r[m]));
            return (
                (a = jn(a, p)),
                (l = jn(l, p)),
                h != null && (h = jn(h, f)),
                d != null && (d = jn(d, f)),
                Zi(s, a, l, d, h, this.epsilon)
            );
        });
    }
    getConfig() {
        const t = {
                axis: this.axis,
                epsilon: this.epsilon,
                center: this.center,
                scale: this.scale,
                betaInitializer: fe(this.betaInitializer),
                gammaInitializer: fe(this.gammaInitializer),
                betaRegularizer: ee(this.betaRegularizer),
                gammaRegularizer: ee(this.gammaRegularizer),
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
iv.className = 'LayerNormalization';
ut(iv);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function qF(n, t, e) {
    return Y(() => {
        if (n.rank !== 4)
            throw new H(
                `temporalPadding expects input tensor to be 4-D, but received a ${n.rank}-D tensor.`
            );
        if (
            (t == null &&
                (t = [
                    [1, 1],
                    [1, 1],
                ]),
            t.length !== 2 || t[0].length !== 2 || t[1].length !== 2)
        )
            throw new H(
                'spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.'
            );
        if (
            (e == null && (e = ds()),
            e !== 'channelsLast' && e !== 'channelsFirst')
        )
            throw new H(
                `Unknown data format: ${e}. Supported data formats are 'channelsLast' and 'channelsFirst.`
            );
        let s;
        return (
            e === 'channelsFirst'
                ? (s = [[0, 0], [0, 0], t[0], t[1]])
                : (s = [[0, 0], t[0], t[1], [0, 0]]),
            _r(n, s)
        );
    });
}
class av extends Mt {
    constructor(t) {
        if (
            (t == null && (t = {}),
            super(t),
            (this.dataFormat = t.dataFormat == null ? ds() : t.dataFormat),
            t.padding == null)
        )
            this.padding = [
                [1, 1],
                [1, 1],
            ];
        else if (typeof t.padding == 'number')
            this.padding = [
                [t.padding, t.padding],
                [t.padding, t.padding],
            ];
        else {
            if (((t.padding = t.padding), t.padding.length !== 2))
                throw new H(
                    `ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`
                );
            let e, s;
            if (typeof t.padding[0] == 'number')
                (e = [t.padding[0], t.padding[0]]),
                    (s = [t.padding[1], t.padding[1]]);
            else {
                if (((t.padding = t.padding), t.padding[0].length !== 2))
                    throw new H(
                        `ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`
                    );
                if (((e = t.padding[0]), t.padding[1].length !== 2))
                    throw new H(
                        `ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`
                    );
                s = t.padding[1];
            }
            this.padding = [e, s];
        }
        this.inputSpec = [new Ne({ ndim: 4 })];
    }
    computeOutputShape(t) {
        t = Xt(t);
        let e, s;
        return this.dataFormat === 'channelsFirst'
            ? (t[2] != null && t[2] >= 0
                  ? (e = t[2] + this.padding[0][0] + this.padding[0][1])
                  : (e = null),
              t[3] != null && t[3] >= 0
                  ? (s = t[3] + this.padding[1][0] + this.padding[1][1])
                  : (s = null),
              [t[0], t[1], e, s])
            : (t[1] != null && t[1] >= 0
                  ? (e = t[1] + this.padding[0][0] + this.padding[0][1])
                  : (e = null),
              t[2] != null && t[2] >= 0
                  ? (s = t[2] + this.padding[1][0] + this.padding[1][1])
                  : (s = null),
              [t[0], e, s, t[3]]);
    }
    call(t, e) {
        return Y(() => qF(Rt(t), this.padding, this.dataFormat));
    }
    getConfig() {
        const t = { padding: this.padding, dataFormat: this.dataFormat },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
av.className = 'ZeroPadding2D';
ut(av);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function wh(n, t, e, s, r, o) {
    return Y(() => {
        ve(r),
            $1(o),
            Ln(s),
            e == null && (e = [1, 1]),
            s == null && (s = 'valid'),
            r == null && (r = ds()),
            o == null && (o = 'max'),
            (n = Qm(n, r));
        let i;
        const a = s === 'same' ? 'same' : 'valid';
        return (
            o === 'max' ? (i = ju(n, t, e, a)) : (i = zu(n, t, e, a)),
            r === 'channelsFirst' && (i = Ht(i, [0, 3, 1, 2])),
            i
        );
    });
}
function lv(n, t, e, s, r, o) {
    return Y(() => {
        ve(r),
            $1(o),
            Ln(s),
            e == null && (e = [1, 1, 1]),
            s == null && (s = 'valid'),
            r == null && (r = ds()),
            o == null && (o = 'max'),
            (n = $w(n, r));
        let i;
        const a = s === 'same' ? 'same' : 'valid';
        return (
            o === 'max' ? (i = ex(n, t, e, a)) : (i = N0(n, t, e, a)),
            r === 'channelsFirst' && (i = Ht(i, [0, 4, 1, 2, 3])),
            i
        );
    });
}
class cv extends Mt {
    constructor(t) {
        if (
            (t.poolSize == null && (t.poolSize = 2),
            super(t),
            typeof t.poolSize == 'number')
        )
            this.poolSize = [t.poolSize];
        else if (
            Array.isArray(t.poolSize) &&
            t.poolSize.length === 1 &&
            typeof t.poolSize[0] == 'number'
        )
            this.poolSize = t.poolSize;
        else
            throw new H(
                `poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(
                    t.poolSize
                )}`
            );
        if ((Fe(this.poolSize, 'poolSize'), t.strides == null))
            this.strides = this.poolSize;
        else if (typeof t.strides == 'number') this.strides = [t.strides];
        else if (
            Array.isArray(t.strides) &&
            t.strides.length === 1 &&
            typeof t.strides[0] == 'number'
        )
            this.strides = t.strides;
        else
            throw new H(
                `strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(
                    t.strides
                )}`
            );
        Fe(this.strides, 'strides'),
            (this.padding = t.padding == null ? 'valid' : t.padding),
            Ln(this.padding),
            (this.inputSpec = [new Ne({ ndim: 3 })]);
    }
    computeOutputShape(t) {
        t = Xt(t);
        const e = cs(t[1], this.poolSize[0], this.padding, this.strides[0]);
        return [t[0], e, t[2]];
    }
    call(t, e) {
        return Y(() => {
            this.invokeCallHook(t, e), (t = hl(Rt(t), 2));
            const s = this.poolingFunction(
                Rt(t),
                [this.poolSize[0], 1],
                [this.strides[0], 1],
                this.padding,
                'channelsLast'
            );
            return wo(s, [2]);
        });
    }
    getConfig() {
        const t = {
                poolSize: this.poolSize,
                padding: this.padding,
                strides: this.strides,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
class uv extends cv {
    constructor(t) {
        super(t);
    }
    poolingFunction(t, e, s, r, o) {
        return ve(o), Ln(r), wh(t, e, s, r, o, 'max');
    }
}
uv.className = 'MaxPooling1D';
ut(uv);
class hv extends cv {
    constructor(t) {
        super(t);
    }
    poolingFunction(t, e, s, r, o) {
        return ve(o), Ln(r), wh(t, e, s, r, o, 'avg');
    }
}
hv.className = 'AveragePooling1D';
ut(hv);
class dv extends Mt {
    constructor(t) {
        if (
            (t.poolSize == null && (t.poolSize = [2, 2]),
            super(t),
            (this.poolSize = Array.isArray(t.poolSize)
                ? t.poolSize
                : [t.poolSize, t.poolSize]),
            t.strides == null)
        )
            this.strides = this.poolSize;
        else if (Array.isArray(t.strides)) {
            if (t.strides.length !== 2)
                throw new H(
                    `If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${t.strides.length}.`
                );
            this.strides = t.strides;
        } else this.strides = [t.strides, t.strides];
        Fe(this.poolSize, 'poolSize'),
            Fe(this.strides, 'strides'),
            (this.padding = t.padding == null ? 'valid' : t.padding),
            (this.dataFormat =
                t.dataFormat == null ? 'channelsLast' : t.dataFormat),
            ve(this.dataFormat),
            Ln(this.padding),
            (this.inputSpec = [new Ne({ ndim: 4 })]);
    }
    computeOutputShape(t) {
        t = Xt(t);
        let e = this.dataFormat === 'channelsFirst' ? t[2] : t[1],
            s = this.dataFormat === 'channelsFirst' ? t[3] : t[2];
        return (
            (e = cs(e, this.poolSize[0], this.padding, this.strides[0])),
            (s = cs(s, this.poolSize[1], this.padding, this.strides[1])),
            this.dataFormat === 'channelsFirst'
                ? [t[0], t[1], e, s]
                : [t[0], e, s, t[3]]
        );
    }
    call(t, e) {
        return Y(
            () => (
                this.invokeCallHook(t, e),
                this.poolingFunction(
                    Rt(t),
                    this.poolSize,
                    this.strides,
                    this.padding,
                    this.dataFormat
                )
            )
        );
    }
    getConfig() {
        const t = {
                poolSize: this.poolSize,
                padding: this.padding,
                strides: this.strides,
                dataFormat: this.dataFormat,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
class pv extends dv {
    constructor(t) {
        super(t);
    }
    poolingFunction(t, e, s, r, o) {
        return ve(o), Ln(r), wh(t, e, s, r, o, 'max');
    }
}
pv.className = 'MaxPooling2D';
ut(pv);
class fv extends dv {
    constructor(t) {
        super(t);
    }
    poolingFunction(t, e, s, r, o) {
        return ve(o), Ln(r), wh(t, e, s, r, o, 'avg');
    }
}
fv.className = 'AveragePooling2D';
ut(fv);
class mv extends Mt {
    constructor(t) {
        if (
            (t.poolSize == null && (t.poolSize = [2, 2, 2]),
            super(t),
            (this.poolSize = Array.isArray(t.poolSize)
                ? t.poolSize
                : [t.poolSize, t.poolSize, t.poolSize]),
            t.strides == null)
        )
            this.strides = this.poolSize;
        else if (Array.isArray(t.strides)) {
            if (t.strides.length !== 3)
                throw new H(
                    `If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${t.strides.length}.`
                );
            this.strides = t.strides;
        } else this.strides = [t.strides, t.strides, t.strides];
        Fe(this.poolSize, 'poolSize'),
            Fe(this.strides, 'strides'),
            (this.padding = t.padding == null ? 'valid' : t.padding),
            (this.dataFormat =
                t.dataFormat == null ? 'channelsLast' : t.dataFormat),
            ve(this.dataFormat),
            Ln(this.padding),
            (this.inputSpec = [new Ne({ ndim: 5 })]);
    }
    computeOutputShape(t) {
        t = Xt(t);
        let e = this.dataFormat === 'channelsFirst' ? t[2] : t[1],
            s = this.dataFormat === 'channelsFirst' ? t[3] : t[2],
            r = this.dataFormat === 'channelsFirst' ? t[4] : t[3];
        return (
            (e = cs(e, this.poolSize[0], this.padding, this.strides[0])),
            (s = cs(s, this.poolSize[1], this.padding, this.strides[1])),
            (r = cs(r, this.poolSize[2], this.padding, this.strides[2])),
            this.dataFormat === 'channelsFirst'
                ? [t[0], t[1], e, s, r]
                : [t[0], e, s, r, t[4]]
        );
    }
    call(t, e) {
        return Y(
            () => (
                this.invokeCallHook(t, e),
                this.poolingFunction(
                    Rt(t),
                    this.poolSize,
                    this.strides,
                    this.padding,
                    this.dataFormat
                )
            )
        );
    }
    getConfig() {
        const t = {
                poolSize: this.poolSize,
                padding: this.padding,
                strides: this.strides,
                dataFormat: this.dataFormat,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
class gv extends mv {
    constructor(t) {
        super(t);
    }
    poolingFunction(t, e, s, r, o) {
        return ve(o), Ln(r), lv(t, e, s, r, o, 'max');
    }
}
gv.className = 'MaxPooling3D';
ut(gv);
class yv extends mv {
    constructor(t) {
        super(t);
    }
    poolingFunction(t, e, s, r, o) {
        return ve(o), Ln(r), lv(t, e, s, r, o, 'avg');
    }
}
yv.className = 'AveragePooling3D';
ut(yv);
class bv extends Mt {
    constructor(t) {
        super(t), (this.inputSpec = [new Ne({ ndim: 3 })]);
    }
    computeOutputShape(t) {
        return [t[0], t[2]];
    }
    call(t, e) {
        throw new Ft();
    }
}
class xv extends bv {
    constructor(t) {
        super(t || {});
    }
    call(t, e) {
        return Y(() => {
            const s = Rt(t);
            return ge(s, 1);
        });
    }
}
xv.className = 'GlobalAveragePooling1D';
ut(xv);
class wv extends bv {
    constructor(t) {
        super(t || {});
    }
    call(t, e) {
        return Y(() => {
            const s = Rt(t);
            return Yn(s, 1);
        });
    }
}
wv.className = 'GlobalMaxPooling1D';
ut(wv);
class vv extends Mt {
    constructor(t) {
        super(t),
            (this.dataFormat =
                t.dataFormat == null ? 'channelsLast' : t.dataFormat),
            ve(this.dataFormat),
            (this.inputSpec = [new Ne({ ndim: 4 })]);
    }
    computeOutputShape(t) {
        return (
            (t = t),
            this.dataFormat === 'channelsLast' ? [t[0], t[3]] : [t[0], t[1]]
        );
    }
    call(t, e) {
        throw new Ft();
    }
    getConfig() {
        const t = { dataFormat: this.dataFormat },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
class kv extends vv {
    call(t, e) {
        return Y(() => {
            const s = Rt(t);
            return this.dataFormat === 'channelsLast'
                ? ge(s, [1, 2])
                : ge(s, [2, 3]);
        });
    }
}
kv.className = 'GlobalAveragePooling2D';
ut(kv);
class Sv extends vv {
    call(t, e) {
        return Y(() => {
            const s = Rt(t);
            return this.dataFormat === 'channelsLast'
                ? Yn(s, [1, 2])
                : Yn(s, [2, 3]);
        });
    }
}
Sv.className = 'GlobalMaxPooling2D';
ut(Sv);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ class Iv extends Mt {
    constructor(t) {
        super(t), (this.layer = t.layer);
    }
    build(t) {
        this.built = !0;
    }
    get trainable() {
        return this.layer != null ? this.layer.trainable : !1;
    }
    set trainable(t) {
        this.layer != null && (this.layer.trainable = t);
    }
    get trainableWeights() {
        return this.layer.trainableWeights;
    }
    get nonTrainableWeights() {
        return this.layer.nonTrainableWeights;
    }
    get updates() {
        return this.layer._updates;
    }
    get losses() {
        return this.layer.losses;
    }
    getWeights() {
        return this.layer.getWeights();
    }
    setWeights(t) {
        this.layer.setWeights(t);
    }
    getConfig() {
        const t = {
                layer: {
                    className: this.layer.getClassName(),
                    config: this.layer.getConfig(),
                },
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
    setFastWeightInitDuringBuild(t) {
        super.setFastWeightInitDuringBuild(t),
            this.layer != null && this.layer.setFastWeightInitDuringBuild(t);
    }
    static fromConfig(t, e, s = {}) {
        const r = e.layer,
            o = Ns(r, s);
        delete e.layer;
        const i = { layer: o };
        return Object.assign(i, e), new t(i);
    }
}
class Cv extends Iv {
    constructor(t) {
        super(t), (this.supportsMasking = !0);
    }
    build(t) {
        if (((t = Xt(t)), t.length < 3))
            throw new H(
                `TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(
                    t
                )}`
            );
        this.inputSpec = [{ shape: t }];
        const e = [t[0]].concat(t.slice(2));
        this.layer.built || (this.layer.build(e), (this.layer.built = !0)),
            super.build(t);
    }
    computeOutputShape(t) {
        t = Xt(t);
        const e = [t[0]].concat(t.slice(2)),
            s = this.layer.computeOutputShape(e),
            r = t[1];
        return [s[0], r].concat(s.slice(1));
    }
    call(t, e) {
        return Y(
            () => (
                (t = Rt(t)),
                Fw(
                    (i, a) => [Rt(this.layer.call(i, e)), []],
                    t,
                    [],
                    !1,
                    null,
                    null,
                    !1,
                    !0
                )[1]
            )
        );
    }
}
Cv.className = 'TimeDistributed';
ut(Cv);
function KF(n) {
    ko(hO, 'BidirectionalMergeMode', n);
}
const XF = 'concat';
class $v extends Iv {
    constructor(t) {
        super(t);
        const e = t.layer.getConfig(),
            s = {};
        (s.className = t.layer.getClassName()),
            (s.config = e),
            (this.forwardLayer = Ns(s)),
            (e.goBackwards = e.goBackwards !== !0);
        const r = {};
        if (
            ((r.className = t.layer.getClassName()),
            (r.config = e),
            (this.backwardLayer = Ns(r)),
            (this.forwardLayer.name = 'forward_' + this.forwardLayer.name),
            (this.backwardLayer.name = 'backward_' + this.backwardLayer.name),
            (this.mergeMode = t.mergeMode === void 0 ? XF : t.mergeMode),
            KF(this.mergeMode),
            t.weights)
        )
            throw new Ft(
                'weights support is not implemented for Bidirectional layer yet.'
            );
        (this._stateful = t.layer.stateful),
            (this.returnSequences = t.layer.returnSequences),
            (this.returnState = t.layer.returnState),
            (this.supportsMasking = !0),
            (this._trainable = !0),
            (this.inputSpec = t.layer.inputSpec),
            (this.numConstants = null);
    }
    get trainable() {
        return this._trainable;
    }
    set trainable(t) {
        (this._trainable = t),
            this.forwardLayer != null && (this.forwardLayer.trainable = t),
            this.backwardLayer != null && (this.backwardLayer.trainable = t);
    }
    getWeights() {
        return this.forwardLayer
            .getWeights()
            .concat(this.backwardLayer.getWeights());
    }
    setWeights(t) {
        const e = t.length,
            s = Math.floor(e / 2);
        this.forwardLayer.setWeights(t.slice(0, s)),
            this.backwardLayer.setWeights(t.slice(s));
    }
    computeOutputShape(t) {
        let e = this.forwardLayer.computeOutputShape(t);
        (Array.isArray(e) && Array.isArray(e[0])) || (e = [e]), (e = e);
        let s, r, o;
        return (
            this.returnState && (o = e.slice(1)),
            (s = e[0]),
            (s = s),
            this.mergeMode === 'concat'
                ? ((s[s.length - 1] *= 2), (r = [s]))
                : this.mergeMode == null
                ? (r = [s, s.slice()])
                : (r = [s]),
            this.returnState
                ? this.mergeMode == null
                    ? r.concat(o).concat(o.slice())
                    : [s].concat(o).concat(o.slice())
                : an(r)
        );
    }
    apply(t, e) {
        let s = e == null ? null : e.initialState,
            r = e == null ? null : e.constants;
        e == null && (e = {});
        const o = Ow(t, s, r, this.numConstants);
        if (
            ((t = o.inputs),
            (s = o.initialState),
            (r = o.constants),
            Array.isArray(t) && ((s = t.slice(1)), (t = t[0])),
            (s == null || s.length === 0) && r == null)
        )
            return super.apply(t, e);
        const i = [],
            a = [];
        if (s != null) {
            const c = s.length;
            if (c % 2 > 0)
                throw new H(
                    'When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.'
                );
            (e.initialState = s), i.push(...s);
            const u = s.map((h) => new Ne({ shape: h.shape }));
            (this.forwardLayer.stateSpec = u.slice(0, c / 2)),
                (this.backwardLayer.stateSpec = u.slice(c / 2)),
                a.push(...u);
        }
        if (r != null)
            throw new Ft(
                'Support for constants in Bidirectional layers is not implemented yet.'
            );
        const l = i[0] instanceof _s;
        for (const c of i)
            if (c instanceof _s !== l)
                throw new H(
                    'The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors'
                );
        if (l) {
            const c = [t].concat(i),
                u = this.inputSpec.concat(a),
                h = this.inputSpec;
            this.inputSpec = u;
            const d = super.apply(c, e);
            return (this.inputSpec = h), d;
        } else return super.apply(t, e);
    }
    call(t, e) {
        return Y(() => {
            const s = e.initialState;
            let r, o;
            if (s == null)
                (r = this.forwardLayer.call(t, e)),
                    (o = this.backwardLayer.call(t, e));
            else {
                const l = s.slice(0, s.length / 2),
                    c = s.slice(s.length / 2);
                (r = this.forwardLayer.call(
                    t,
                    Object.assign(e, { initialState: l })
                )),
                    (o = this.backwardLayer.call(
                        t,
                        Object.assign(e, { initialState: c })
                    ));
            }
            let i;
            this.returnState &&
                (Array.isArray(r) && (i = r.slice(1).concat(o.slice(1))),
                (r = r[0]),
                (o = o[0])),
                this.returnSequences && (o = Jn(o, 1));
            let a;
            return (
                this.mergeMode === 'concat'
                    ? (a = Mm([r, o]))
                    : this.mergeMode === 'sum'
                    ? (a = ct(r, o))
                    : this.mergeMode === 'ave'
                    ? (a = U(0.5, ct(r, o)))
                    : this.mergeMode === 'mul'
                    ? (a = U(r, o))
                    : this.mergeMode == null && (a = [r, o]),
                this.returnState
                    ? this.mergeMode == null
                        ? a.concat(i)
                        : [a].concat(i)
                    : a
            );
        });
    }
    resetStates(t) {
        this.forwardLayer.resetStates(), this.backwardLayer.resetStates();
    }
    build(t) {
        Yr(this.forwardLayer.name, () => {
            this.forwardLayer.build(t);
        }),
            Yr(this.backwardLayer.name, () => {
                this.backwardLayer.build(t);
            }),
            (this.built = !0);
    }
    computeMask(t, e) {
        Array.isArray(e) && (e = e[0]);
        let s;
        if (
            (this.returnSequences
                ? this.mergeMode == null
                    ? (s = [e, e])
                    : (s = e)
                : this.mergeMode == null
                ? (s = [null, null])
                : (s = null),
            this.returnState)
        ) {
            const o = this.forwardLayer.states.map((i) => null);
            return Array.isArray(s)
                ? s.concat(o).concat(o)
                : [s].concat(o).concat(o);
        } else return s;
    }
    get trainableWeights() {
        return this.forwardLayer.trainableWeights.concat(
            this.backwardLayer.trainableWeights
        );
    }
    get nonTrainableWeights() {
        return this.forwardLayer.nonTrainableWeights.concat(
            this.backwardLayer.nonTrainableWeights
        );
    }
    setFastWeightInitDuringBuild(t) {
        super.setFastWeightInitDuringBuild(t),
            this.forwardLayer != null &&
                this.forwardLayer.setFastWeightInitDuringBuild(t),
            this.backwardLayer != null &&
                this.backwardLayer.setFastWeightInitDuringBuild(t);
    }
    getConfig() {
        const t = { mergeMode: this.mergeMode },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
    static fromConfig(t, e) {
        const s = Ns(e.layer);
        if ((delete e.layer, e.numConstants != null))
            throw new Ft(
                'Deserialization of a Bidirectional layer with numConstants present is not supported yet.'
            );
        const r = e;
        return (r.layer = s), new t(r);
    }
}
$v.className = 'Bidirectional';
ut($v);
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ class Nv extends Mt {
    constructor(t) {
        super(t),
            (this.scale = t.scale),
            t.offset ? (this.offset = t.offset) : (this.offset = 0);
    }
    getConfig() {
        const t = { scale: this.scale, offset: this.offset },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
    call(t, e) {
        return Y(
            () => (
                (t = Rt(t)),
                t.dtype !== 'float32' && (t = Cs(t, 'float32')),
                ct(U(t, this.scale), this.offset)
            )
        );
    }
}
Nv.className = 'Rescaling';
ut(Nv);
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ const { resizeBilinear: YF, cropAndResize: ZF } = as;
class Tv extends Mt {
    constructor(t) {
        super(t), (this.height = t.height), (this.width = t.width);
    }
    centerCrop(t, e, s, r, o, i, a, l) {
        return Y(() => {
            let c,
                u = !1;
            const h = e / i,
                d = s / a,
                p = (r + e) / i,
                f = (o + s) / a,
                m = [h, d, p, f],
                g = [];
            t.rank === 3 ? ((u = !0), (c = un([t]))) : (c = t);
            for (let v = 0; v < c.shape[0]; v++) g.push(m);
            const y = ls(g, [g.length, 4]),
                b = ei(0, g.length, 1, 'int32'),
                x = ZF(c, y, b, [r, o], 'nearest');
            return Cs(u ? Rt(Qn(x)) : x, l);
        });
    }
    upsize(t, e, s, r) {
        return Y(() => {
            const o = YF(t, [e, s]);
            return Cs(o, r);
        });
    }
    call(t, e) {
        return Y(() => {
            const s = Rt(t),
                r = s.dtype,
                o = s.shape,
                i = o[o.length - 3],
                a = o[o.length - 2];
            let l = 0;
            i !== this.height && (l = Math.floor((i - this.height) / 2));
            let c = 0;
            return (
                a !== this.width &&
                    ((c = Math.floor((a - this.width) / 2)),
                    c === 0 && (c = 1)),
                l >= 0 && c >= 0
                    ? this.centerCrop(s, l, c, this.height, this.width, i, a, r)
                    : this.upsize(t, this.height, this.width, r)
            );
        });
    }
    getConfig() {
        const t = { height: this.height, width: this.width },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
    computeOutputShape(t) {
        t = Xt(t);
        const e = t.length - 3,
            s = t.length - 2;
        return (t[e] = this.height), (t[s] = this.width), t;
    }
}
Tv.className = 'CenterCrop';
ut(Tv);
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function JF(n, t, e, s) {
    let r = Rt(n);
    if ((r.dtype !== 'int32' && (r = Cs(r, 'int32')), t === 'int')) return r;
    const o = r.shape;
    if (
        (r.rank === 0 && (r = Qe(r, -1)),
        t === 'oneHot' && r.shape[r.shape.length - 1] !== 1 && (r = Qe(r, -1)),
        r.rank > 2)
    )
        throw new H(
            `When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${o} which would result in output rank ${r.rank}.`
        );
    const i = ['multiHot', 'oneHot'].includes(t),
        a = r;
    let l;
    if (
        (typeof s < 'u' && t === 'count'
            ? (l = Id(a, s, e, i))
            : (l = Id(a, [], e, i)),
        t !== 'tfIdf')
    )
        return l;
    if (s) return U(l, s);
    throw new H("When outputMode is 'tfIdf', weights must be provided.");
}
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ class Ev extends Mt {
    constructor(t) {
        super(t),
            (this.numTokens = t.numTokens),
            t.outputMode
                ? (this.outputMode = t.outputMode)
                : (this.outputMode = 'multiHot');
    }
    getConfig() {
        const t = { numTokens: this.numTokens, outputMode: this.outputMode },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
    computeOutputShape(t) {
        return (
            (t = Xt(t)),
            t == null
                ? [this.numTokens]
                : this.outputMode === 'oneHot' && t[t.length - 1] !== 1
                ? (t.push(this.numTokens), t)
                : ((t[t.length - 1] = this.numTokens), t)
        );
    }
    call(t, e) {
        return Y(() => {
            (t = Rt(t)), t.dtype !== 'int32' && (t = Cs(t, 'int32'));
            let s;
            if (typeof e.countWeights < 'u') {
                if (this.outputMode !== 'count')
                    throw new H(`countWeights is not used when outputMode !== count.
              Received countWeights=${e.countWeights}`);
                s = Rt(e.countWeights);
            }
            const r = Yn(t),
                o = Gi(t),
                i = Tn(this.numTokens, r).bufferSync().get(0),
                a = Er(o, 0).bufferSync().get(0);
            if (!(i && a))
                throw new H(
                    `Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`
                );
            return JF(t, this.outputMode, this.numTokens, s);
        });
    }
}
Ev.className = 'CategoryEncoding';
ut(Ev);
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ const QF = ['bilinear', 'nearest'],
    _y = new Set(QF);
class _v extends Mt {
    constructor(t) {
        if (
            (super(t),
            (this.height = t.height),
            (this.width = t.width),
            t.interpolation)
        )
            if (_y.has(t.interpolation)) this.interpolation = t.interpolation;
            else
                throw new H(
                    `Invalid interpolation parameter: ${t.interpolation} is not implemented`
                );
        else this.interpolation = 'bilinear';
        this.cropToAspectRatio = !!t.cropToAspectRatio;
    }
    computeOutputShape(t) {
        t = Xt(t);
        const e = t[2];
        return [this.height, this.width, e];
    }
    getConfig() {
        const t = {
                height: this.height,
                width: this.width,
                interpolation: this.interpolation,
                cropToAspectRatio: this.cropToAspectRatio,
            },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
    call(t, e) {
        return Y(() => {
            const s = [this.height, this.width];
            if (this.interpolation === 'bilinear')
                return as.resizeBilinear(t, s, !this.cropToAspectRatio);
            if (this.interpolation === 'nearest')
                return as.resizeNearestNeighbor(t, s, !this.cropToAspectRatio);
            throw new Error(
                `Interpolation is ${this.interpolation} but only ${[
                    ..._y,
                ]} are supported`
            );
        });
    }
}
_v.className = 'Resizing';
ut(_v);
/**
 * @license
 * Copyright 2023 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ class Av {
    constructor(t) {
        this.seed = t;
    }
    next() {
        if (this.seed !== void 0) return this.seed++;
    }
}
Av.className = 'RandomSeed';
/**
 * @license
 * Copyright 2023 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ class Rv extends Mt {
    constructor(t) {
        super(t), (this.randomGenerator = new Av(t.seed));
    }
    getConfig() {
        const t = { seed: this.randomGenerator.seed },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
}
Rv.className = 'BaseRandomLayer';
/**
 * @license
 * Copyright 2023 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ const t3 = ['bilinear', 'nearest'],
    Ay = new Set(t3);
class Dv extends Rv {
    constructor(t) {
        super(t);
        const { factor: e, interpolation: s = 'bilinear' } = t;
        if (
            ((this.factor = e),
            Array.isArray(this.factor) && this.factor.length === 2)
        )
            (this.widthLower = this.factor[0]),
                (this.widthUpper = this.factor[1]);
        else if (!Array.isArray(this.factor) && this.factor > 0)
            (this.widthLower = -this.factor), (this.widthUpper = this.factor);
        else
            throw new H(
                `Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`
            );
        if (this.widthLower < -1 || this.widthUpper < -1)
            throw new H(
                `factor must have values larger than -1. Got: ${this.factor}`
            );
        if (this.widthUpper < this.widthLower)
            throw new H(`factor cannot have upper bound less than lower bound.
        Got upper bound: ${this.widthUpper}.
        Got lower bound: ${this.widthLower}
      `);
        if (s)
            if (Ay.has(s)) this.interpolation = s;
            else
                throw new H(
                    `Invalid interpolation parameter: ${s} is not implemented`
                );
    }
    getConfig() {
        const t = { factor: this.factor, interpolation: this.interpolation },
            e = super.getConfig();
        return Object.assign(t, e), t;
    }
    computeOutputShape(t) {
        t = Xt(t);
        const e = t[2];
        return [this.imgHeight, -1, e];
    }
    call(t, e) {
        return Y(() => {
            const s = Rt(t);
            this.imgHeight = s.shape[s.shape.length - 3];
            const r = s.shape[s.shape.length - 2];
            this.widthFactor = xo(
                [1],
                1 + this.widthLower,
                1 + this.widthUpper,
                'float32',
                this.randomGenerator.next()
            );
            let o = this.widthFactor.dataSync()[0] * r;
            o = Math.round(o);
            const i = [this.imgHeight, o];
            switch (this.interpolation) {
                case 'bilinear':
                    return as.resizeBilinear(t, i);
                case 'nearest':
                    return as.resizeNearestNeighbor(t, i);
                default:
                    throw new Error(`Interpolation is ${this.interpolation}
          but only ${[...Ay]} are supported`);
            }
        });
    }
}
Dv.className = 'RandomWidth';
ut(Dv);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */ function Ry(n) {
    return new og(n);
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const e3 = tt();
e3.registerFlag(
    'KEEP_INTERMEDIATE_TENSORS',
    () => !1,
    (n) => {
        n &&
            console.warn(
                'Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.'
            );
    }
);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */ var Bn;
(function (n) {
    (n[(n.DT_INVALID = 0)] = 'DT_INVALID'),
        (n[(n.DT_FLOAT = 1)] = 'DT_FLOAT'),
        (n[(n.DT_DOUBLE = 2)] = 'DT_DOUBLE'),
        (n[(n.DT_INT32 = 3)] = 'DT_INT32'),
        (n[(n.DT_UINT8 = 4)] = 'DT_UINT8'),
        (n[(n.DT_INT16 = 5)] = 'DT_INT16'),
        (n[(n.DT_INT8 = 6)] = 'DT_INT8'),
        (n[(n.DT_STRING = 7)] = 'DT_STRING'),
        (n[(n.DT_COMPLEX64 = 8)] = 'DT_COMPLEX64'),
        (n[(n.DT_INT64 = 9)] = 'DT_INT64'),
        (n[(n.DT_BOOL = 10)] = 'DT_BOOL'),
        (n[(n.DT_QINT8 = 11)] = 'DT_QINT8'),
        (n[(n.DT_QUINT8 = 12)] = 'DT_QUINT8'),
        (n[(n.DT_QINT32 = 13)] = 'DT_QINT32'),
        (n[(n.DT_BFLOAT16 = 14)] = 'DT_BFLOAT16'),
        (n[(n.DT_QINT16 = 15)] = 'DT_QINT16'),
        (n[(n.DT_QUINT16 = 16)] = 'DT_QUINT16'),
        (n[(n.DT_UINT16 = 17)] = 'DT_UINT16'),
        (n[(n.DT_COMPLEX128 = 18)] = 'DT_COMPLEX128'),
        (n[(n.DT_HALF = 19)] = 'DT_HALF'),
        (n[(n.DT_RESOURCE = 20)] = 'DT_RESOURCE'),
        (n[(n.DT_VARIANT = 21)] = 'DT_VARIANT'),
        (n[(n.DT_UINT32 = 22)] = 'DT_UINT32'),
        (n[(n.DT_UINT64 = 23)] = 'DT_UINT64'),
        (n[(n.DT_FLOAT_REF = 101)] = 'DT_FLOAT_REF'),
        (n[(n.DT_DOUBLE_REF = 102)] = 'DT_DOUBLE_REF'),
        (n[(n.DT_INT32_REF = 103)] = 'DT_INT32_REF'),
        (n[(n.DT_UINT8_REF = 104)] = 'DT_UINT8_REF'),
        (n[(n.DT_INT16_REF = 105)] = 'DT_INT16_REF'),
        (n[(n.DT_INT8_REF = 106)] = 'DT_INT8_REF'),
        (n[(n.DT_STRING_REF = 107)] = 'DT_STRING_REF'),
        (n[(n.DT_COMPLEX64_REF = 108)] = 'DT_COMPLEX64_REF'),
        (n[(n.DT_INT64_REF = 109)] = 'DT_INT64_REF'),
        (n[(n.DT_BOOL_REF = 110)] = 'DT_BOOL_REF'),
        (n[(n.DT_QINT8_REF = 111)] = 'DT_QINT8_REF'),
        (n[(n.DT_QUINT8_REF = 112)] = 'DT_QUINT8_REF'),
        (n[(n.DT_QINT32_REF = 113)] = 'DT_QINT32_REF'),
        (n[(n.DT_BFLOAT16_REF = 114)] = 'DT_BFLOAT16_REF'),
        (n[(n.DT_QINT16_REF = 115)] = 'DT_QINT16_REF'),
        (n[(n.DT_QUINT16_REF = 116)] = 'DT_QUINT16_REF'),
        (n[(n.DT_UINT16_REF = 117)] = 'DT_UINT16_REF'),
        (n[(n.DT_COMPLEX128_REF = 118)] = 'DT_COMPLEX128_REF'),
        (n[(n.DT_HALF_REF = 119)] = 'DT_HALF_REF'),
        (n[(n.DT_RESOURCE_REF = 120)] = 'DT_RESOURCE_REF'),
        (n[(n.DT_VARIANT_REF = 121)] = 'DT_VARIANT_REF'),
        (n[(n.DT_UINT32_REF = 122)] = 'DT_UINT32_REF'),
        (n[(n.DT_UINT64_REF = 123)] = 'DT_UINT64_REF');
})(Bn || (Bn = {}));
var Dy;
(function (n) {
    (function (t) {
        (t[(t.LEGACY = 0)] = 'LEGACY'),
            (t[(t.V1 = 1)] = 'V1'),
            (t[(t.V2 = 2)] = 'V2');
    })(n.CheckpointFormatVersion || (n.CheckpointFormatVersion = {}));
})(Dy || (Dy = {}));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const n3 = {};
function Ov(n) {
    return n3[n];
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function k(n, t, e, s, r) {
    const o = t.inputParams[n];
    if (o && o.inputIndexStart !== void 0) {
        const a = o.inputIndexStart,
            l =
                o.inputIndexEnd === 0
                    ? void 0
                    : o.inputIndexEnd === void 0
                    ? a + 1
                    : o.inputIndexEnd,
            c = a < 0 ? t.inputNames.length + a : a;
        if (o.type === 'tensor') return Be(t.inputNames[c], e, s, r);
        if (o.type === 'tensors') {
            const d = t.inputs.slice(a, l);
            return t.inputNames
                .slice(a, l)
                .filter((f, m) => {
                    var g;
                    return (
                        ((g = d[m]) === null || g === void 0
                            ? void 0
                            : g.op) !== 'NoOp'
                    );
                })
                .map((f) => Be(f, e, s, r));
        }
        const u = Be(t.inputNames[c], e, s, r),
            h = u.dataSync();
        return o.type === 'number' ? h[0] : Xn(u.shape, h);
    }
    const i = t.attrParams[n];
    return i && i.value;
}
function Be(n, t, e, s) {
    const [r, o] = mn(n, e);
    if (s != null) {
        const a = s.getHashTableHandleByName(r);
        if (a != null) return a;
    }
    const i = e.currentContextIds.find((a) => !!t[xc(r, a)]);
    return i !== void 0 ? t[xc(r, i)][o] : void 0;
}
function Oy(n, t, e) {
    return t[xc(n, e.currentContextId)];
}
function Ms(n, t) {
    const [e, s, r] = mn(n, t);
    return [xc(e, t && t.currentContextId), s, r];
}
function xc(n, t) {
    return t ? `${n}-${t}` : n;
}
function mn(n, t) {
    if (n === '') return ['', 0, void 0];
    const e = t != null && t.parseNodeNameCache != null;
    if (e) {
        const o = t.parseNodeNameCache.get(n);
        if (o != null) return o;
    }
    const s = n.split(':');
    let r;
    if (s.length === 1) r = [n, 0, void 0];
    else {
        const o = s[0],
            i = s.length === 3 ? s[1] : void 0,
            a = Number(s[s.length - 1]);
        r = [o, a, i];
    }
    return e && t.parseNodeNameCache.set(n, r), r;
}
function Hl(n, t, e) {
    let s = k('pad', n, t, e);
    if (s === 'explicit') {
        s = k('explicitPaddings', n, t, e);
        const r = [
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
        ];
        for (let o = 0; o < 4; o++)
            (r[o][0] = s[o * 2]), (r[o][1] = s[o * 2 + 1]);
        return r;
    }
    return s;
}
function Vs(n) {
    return n.kept ? n : Hs(n);
}
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const s3 = [
        {
            tfOpName: 'Add',
            category: 'arithmetic',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'b', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'AddV2',
            category: 'arithmetic',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'b', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'AddN',
            category: 'arithmetic',
            inputs: [{ start: 0, end: 0, name: 'tensors', type: 'tensors' }],
        },
        {
            tfOpName: 'BiasAdd',
            category: 'arithmetic',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'b', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
                {
                    tfName: 'data_format',
                    name: 'dataFormat',
                    type: 'string',
                    notSupported: !0,
                },
            ],
        },
        {
            tfOpName: 'Sub',
            category: 'arithmetic',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'b', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'RealDiv',
            category: 'arithmetic',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'b', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Div',
            category: 'arithmetic',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'b', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'DivNoNan',
            category: 'arithmetic',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'b', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'FloorDiv',
            category: 'arithmetic',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'b', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Mul',
            category: 'arithmetic',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'b', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Maximum',
            category: 'arithmetic',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'b', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Minimum',
            category: 'arithmetic',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'b', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Pow',
            category: 'arithmetic',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'b', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'SquaredDifference',
            category: 'arithmetic',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'b', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Mod',
            category: 'arithmetic',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'b', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'FloorMod',
            category: 'arithmetic',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'b', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
    ],
    r3 = Object.freeze(
        Object.defineProperty(
            { __proto__: null, json: s3 },
            Symbol.toStringTag,
            { value: 'Module' }
        )
    );
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const o3 = [
        {
            tfOpName: 'Abs',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Acos',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Asin',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Atan',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Atan2',
            category: 'basic_math',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'y', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Ceil',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'ClipByValue',
            category: 'basic_math',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'clipValueMin', type: 'number' },
                { start: 2, name: 'clipValueMax', type: 'number' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Complex',
            category: 'basic_math',
            inputs: [
                { start: 0, name: 'real', type: 'tensor' },
                { start: 1, name: 'imag', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'ComplexAbs',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Cos',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Cosh',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Elu',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Exp',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Floor',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Log',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Imag',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
                {
                    tfName: 'Tout',
                    name: 'outputType',
                    type: 'dtype',
                    notSupported: !0,
                },
            ],
        },
        {
            tfOpName: 'Neg',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Real',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
                {
                    tfName: 'Tout',
                    name: 'outputType',
                    type: 'dtype',
                    notSupported: !0,
                },
            ],
        },
        {
            tfOpName: 'Prelu',
            category: 'basic_math',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'alpha', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Relu',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Relu6',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Selu',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Sigmoid',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Sin',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Sinh',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Sqrt',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Rsqrt',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Square',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Tan',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Tanh',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Sign',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Round',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Expm1',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Log1p',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Reciprocal',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Softplus',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Asinh',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Acosh',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Atanh',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Erf',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'LeakyRelu',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                {
                    tfName: 'alpha',
                    name: 'alpha',
                    type: 'number',
                    defaultValue: 0.2,
                },
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'IsNan',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'IsFinite',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'IsInf',
            category: 'basic_math',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
    ],
    i3 = Object.freeze(
        Object.defineProperty(
            { __proto__: null, json: o3 },
            Symbol.toStringTag,
            { value: 'Module' }
        )
    );
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const a3 = [
        {
            tfOpName: 'EmptyTensorList',
            category: 'control',
            inputs: [
                { start: 0, name: 'elementShape', type: 'shape' },
                { start: 1, name: 'maxNumElements', type: 'number' },
            ],
            attrs: [
                {
                    tfName: 'element_dtype',
                    name: 'elementDType',
                    type: 'dtype',
                },
            ],
        },
        {
            tfOpName: 'LoopCond',
            category: 'control',
            inputs: [{ start: 0, name: 'pred', type: 'tensor' }],
        },
        {
            tfOpName: 'Switch',
            category: 'control',
            inputs: [
                { start: 0, name: 'data', type: 'tensor' },
                { start: 1, name: 'pred', type: 'tensor' },
            ],
        },
        {
            tfOpName: 'Merge',
            category: 'control',
            inputs: [{ start: 0, end: 0, name: 'tensors', type: 'tensors' }],
        },
        {
            tfOpName: 'Enter',
            category: 'control',
            inputs: [{ start: 0, name: 'tensor', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
                { tfName: 'frame_name', name: 'frameName', type: 'string' },
                { tfName: 'is_constant', name: 'isConstant', type: 'bool' },
            ],
        },
        {
            tfOpName: 'Exit',
            category: 'control',
            inputs: [{ start: 0, name: 'tensor', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'NextIteration',
            category: 'control',
            inputs: [{ start: 0, name: 'tensor', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'TensorArrayV3',
            category: 'control',
            inputs: [{ start: 0, name: 'size', type: 'number' }],
            attrs: [
                { tfName: 'dtype', name: 'dtype', type: 'dtype' },
                {
                    tfName: 'element_shape',
                    name: 'elementShape',
                    type: 'shape',
                },
                { tfName: 'dynamic_size', name: 'dynamicSize', type: 'bool' },
                {
                    tfName: 'clear_after_read',
                    name: 'clearAfterRead',
                    type: 'bool',
                },
                {
                    tfName: 'identical_element_shapes',
                    name: 'identicalElementShapes',
                    type: 'bool',
                },
                { tfName: 'tensor_array_name', name: 'name', type: 'string' },
            ],
        },
        {
            tfOpName: 'TensorArrayWriteV3',
            category: 'control',
            inputs: [
                { start: 0, name: 'tensorArrayId', type: 'tensor' },
                { start: 1, name: 'index', type: 'number' },
                { start: 2, name: 'tensor', type: 'tensor' },
                { start: 3, name: 'flowIn', type: 'number' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'TensorArrayReadV3',
            category: 'control',
            inputs: [
                { start: 0, name: 'tensorArrayId', type: 'tensor' },
                { start: 1, name: 'index', type: 'number' },
                { start: 2, name: 'flowIn', type: 'number' },
            ],
            attrs: [
                {
                    tfName: 'dtype',
                    name: 'dtype',
                    type: 'dtype',
                    notSupported: !0,
                },
            ],
        },
        {
            tfOpName: 'TensorArrayGatherV3',
            category: 'control',
            inputs: [
                { start: 0, name: 'tensorArrayId', type: 'tensor' },
                { start: 1, name: 'indices', type: 'number[]' },
                { start: 2, name: 'flowIn', type: 'number' },
            ],
            attrs: [
                { tfName: 'dtype', name: 'dtype', type: 'dtype' },
                {
                    tfName: 'element_shape',
                    name: 'elementShape',
                    type: 'shape',
                },
            ],
        },
        {
            tfOpName: 'TensorArrayScatterV3',
            category: 'control',
            inputs: [
                { start: 0, name: 'tensorArrayId', type: 'tensor' },
                { start: 1, name: 'indices', type: 'number[]' },
                { start: 2, name: 'tensor', type: 'tensor' },
                { start: 3, name: 'flowIn', type: 'number' },
            ],
            attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype' }],
        },
        {
            tfOpName: 'TensorArrayConcatV3',
            category: 'control',
            inputs: [
                { start: 0, name: 'tensorArrayId', type: 'tensor' },
                { start: 1, name: 'flowIn', type: 'number' },
            ],
            attrs: [
                { tfName: 'dtype', name: 'dtype', type: 'dtype' },
                {
                    tfName: 'element_shape_except0',
                    name: 'elementShapeExcept0',
                    type: 'shape',
                    notSupported: !0,
                },
            ],
        },
        {
            tfOpName: 'TensorArraySplitV3',
            category: 'control',
            inputs: [
                { start: 0, name: 'tensorArrayId', type: 'tensor' },
                { start: 1, name: 'tensor', type: 'tensor' },
                { start: 2, name: 'lengths', type: 'number[]' },
                { start: 3, name: 'flowIn', type: 'number' },
            ],
            attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype' }],
        },
        {
            tfOpName: 'TensorArraySizeV3',
            category: 'control',
            inputs: [
                { start: 0, name: 'tensorArrayId', type: 'tensor' },
                { start: 1, name: 'flowIn', type: 'number' },
            ],
        },
        {
            tfOpName: 'TensorArrayCloseV3',
            category: 'control',
            inputs: [{ start: 0, name: 'tensorArrayId', type: 'tensor' }],
        },
        {
            tfOpName: 'StatelessIf',
            category: 'control',
            inputs: [
                { start: 0, name: 'cond', type: 'tensor' },
                { start: 1, end: 0, name: 'args', type: 'tensors' },
            ],
            attrs: [
                { tfName: 'then_branch', name: 'thenBranch', type: 'func' },
                { tfName: 'else_branch', name: 'elseBranch', type: 'func' },
            ],
        },
        {
            tfOpName: 'If',
            category: 'control',
            inputs: [
                { start: 0, name: 'cond', type: 'tensor' },
                { start: 1, end: 0, name: 'args', type: 'tensors' },
            ],
            attrs: [
                { tfName: 'then_branch', name: 'thenBranch', type: 'func' },
                { tfName: 'else_branch', name: 'elseBranch', type: 'func' },
            ],
        },
        {
            tfOpName: 'StatelessWhile',
            category: 'control',
            inputs: [{ start: 0, end: 0, name: 'args', type: 'tensors' }],
            attrs: [
                { tfName: 'cond', name: 'cond', type: 'func' },
                { tfName: 'body', name: 'body', type: 'func' },
            ],
        },
        {
            tfOpName: 'While',
            category: 'control',
            inputs: [{ start: 0, end: 0, name: 'args', type: 'tensors' }],
            attrs: [
                { tfName: 'cond', name: 'cond', type: 'func' },
                { tfName: 'body', name: 'body', type: 'func' },
            ],
        },
        {
            tfOpName: 'TensorListScatter',
            category: 'control',
            inputs: [
                { start: 0, name: 'tensor', type: 'tensor' },
                { start: 1, name: 'indices', type: 'number[]' },
                { start: 2, name: 'elementShape', type: 'shape' },
            ],
            attrs: [
                {
                    tfName: 'element_dtype',
                    name: 'elementDType',
                    type: 'dtype',
                },
            ],
        },
        {
            tfOpName: 'TensorListScatterV2',
            category: 'control',
            inputs: [
                { start: 0, name: 'tensor', type: 'tensor' },
                { start: 1, name: 'indices', type: 'number[]' },
                { start: 2, name: 'elementShape', type: 'shape' },
                { start: 3, name: 'numElements', type: 'number' },
            ],
            attrs: [
                {
                    tfName: 'element_dtype',
                    name: 'elementDType',
                    type: 'dtype',
                },
            ],
        },
        {
            tfOpName: 'TensorListGather',
            category: 'control',
            inputs: [
                { start: 0, name: 'tensorListId', type: 'tensor' },
                { start: 1, name: 'indices', type: 'number[]' },
                { start: 2, name: 'elementShape', type: 'shape' },
            ],
            attrs: [
                {
                    tfName: 'element_dtype',
                    name: 'elementDType',
                    type: 'dtype',
                },
            ],
        },
        {
            tfOpName: 'TensorListGetItem',
            category: 'control',
            inputs: [
                { start: 0, name: 'tensorListId', type: 'tensor' },
                { start: 1, name: 'index', type: 'number' },
                { start: 2, name: 'elementShape', type: 'shape' },
            ],
            attrs: [
                {
                    tfName: 'element_dtype',
                    name: 'elementDType',
                    type: 'dtype',
                },
            ],
        },
        {
            tfOpName: 'TensorListSetItem',
            category: 'control',
            inputs: [
                { start: 0, name: 'tensorListId', type: 'tensor' },
                { start: 1, name: 'index', type: 'number' },
                { start: 2, name: 'tensor', type: 'tensor' },
            ],
            attrs: [
                {
                    tfName: 'element_dtype',
                    name: 'elementDType',
                    type: 'dtype',
                },
            ],
        },
        {
            tfOpName: 'TensorListReserve',
            category: 'control',
            inputs: [
                { start: 0, name: 'elementShape', type: 'shape' },
                { start: 1, name: 'numElements', type: 'number' },
            ],
            attrs: [
                {
                    tfName: 'element_dtype',
                    name: 'elementDType',
                    type: 'dtype',
                },
            ],
        },
        {
            tfOpName: 'TensorListFromTensor',
            category: 'control',
            inputs: [
                { start: 0, name: 'tensor', type: 'tensor' },
                { start: 1, name: 'elementShape', type: 'shape' },
            ],
            attrs: [
                {
                    tfName: 'element_dtype',
                    name: 'elementDType',
                    type: 'dtype',
                },
            ],
        },
        {
            tfOpName: 'TensorListStack',
            category: 'control',
            inputs: [
                { start: 0, name: 'tensorListId', type: 'tensor' },
                { start: 1, name: 'elementShape', type: 'shape' },
            ],
            attrs: [
                {
                    tfName: 'element_dtype',
                    name: 'elementDType',
                    type: 'dtype',
                },
                { tfName: 'num_elements', name: 'numElements', type: 'dtype' },
            ],
        },
        {
            tfOpName: 'TensorListSplit',
            category: 'control',
            inputs: [
                { start: 0, name: 'tensor', type: 'tensor' },
                { start: 1, name: 'elementShape', type: 'shape' },
                { start: 2, name: 'lengths', type: 'number[]' },
            ],
            attrs: [
                {
                    tfName: 'element_dtype',
                    name: 'elementDType',
                    type: 'dtype',
                },
            ],
        },
        {
            tfOpName: 'TensorListConcat',
            category: 'control',
            inputs: [{ start: 0, name: 'tensorListId', type: 'tensor' }],
            attrs: [
                {
                    tfName: 'element_shape',
                    name: 'elementShape',
                    type: 'shape',
                },
                {
                    tfName: 'element_dtype',
                    name: 'elementDType',
                    type: 'dtype',
                },
            ],
        },
        {
            tfOpName: 'TensorListConcatV2',
            category: 'control',
            inputs: [{ start: 0, name: 'tensorListId', type: 'tensor' }],
            attrs: [
                {
                    tfName: 'element_shape',
                    name: 'elementShape',
                    type: 'shape',
                },
                {
                    tfName: 'element_dtype',
                    name: 'elementDType',
                    type: 'dtype',
                },
            ],
        },
        {
            tfOpName: 'TensorListPopBack',
            category: 'control',
            inputs: [
                { start: 0, name: 'tensorListId', type: 'tensor' },
                { start: 1, name: 'elementShape', type: 'shape' },
            ],
            attrs: [
                {
                    tfName: 'element_dtype',
                    name: 'elementDType',
                    type: 'dtype',
                },
            ],
        },
        {
            tfOpName: 'TensorListPushBack',
            category: 'control',
            inputs: [
                { start: 0, name: 'tensorListId', type: 'tensor' },
                { start: 1, name: 'tensor', type: 'tensor' },
            ],
            attrs: [
                {
                    tfName: 'element_dtype',
                    name: 'elementDType',
                    type: 'dtype',
                },
            ],
        },
        {
            tfOpName: 'TensorListLength',
            category: 'control',
            inputs: [{ start: 0, name: 'tensorListId', type: 'tensor' }],
        },
        {
            tfOpName: 'TensorListResize',
            category: 'control',
            inputs: [
                { start: 0, name: 'tensorListId', type: 'tensor' },
                { start: 1, name: 'size', type: 'number' },
            ],
        },
    ],
    l3 = Object.freeze(
        Object.defineProperty(
            { __proto__: null, json: a3 },
            Symbol.toStringTag,
            { value: 'Module' }
        )
    );
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const c3 = [
        {
            tfOpName: 'AvgPool',
            category: 'convolution',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'strides', name: 'strides', type: 'number[]' },
                { tfName: 'padding', name: 'pad', type: 'string' },
                {
                    tfName: 'data_format',
                    name: 'dataFormat',
                    type: 'string',
                    notSupported: !0,
                },
                { tfName: 'ksize', name: 'kernelSize', type: 'number[]' },
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'MaxPool',
            category: 'convolution',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'strides', name: 'strides', type: 'number[]' },
                { tfName: 'padding', name: 'pad', type: 'string' },
                {
                    tfName: 'data_format',
                    name: 'dataFormat',
                    type: 'string',
                    notSupported: !0,
                },
                { tfName: 'ksize', name: 'kernelSize', type: 'number[]' },
                {
                    tfName: 'explicit_paddings',
                    name: 'explicitPaddings',
                    type: 'number[]',
                    defaultValue: [],
                    notSupported: !0,
                },
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'MaxPoolWithArgmax',
            category: 'convolution',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'strides', name: 'strides', type: 'number[]' },
                { tfName: 'padding', name: 'pad', type: 'string' },
                { tfName: 'ksize', name: 'kernelSize', type: 'number[]' },
                {
                    tfName: 'include_batch_in_index',
                    name: 'includeBatchInIndex',
                    type: 'bool',
                },
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'AvgPool3D',
            category: 'convolution',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'strides', name: 'strides', type: 'number[]' },
                { tfName: 'padding', name: 'pad', type: 'string' },
                {
                    tfName: 'data_format',
                    name: 'dataFormat',
                    type: 'string',
                    notSupported: !0,
                },
                { tfName: 'ksize', name: 'kernelSize', type: 'number[]' },
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'MaxPool3D',
            category: 'convolution',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'strides', name: 'strides', type: 'number[]' },
                { tfName: 'padding', name: 'pad', type: 'string' },
                {
                    tfName: 'data_format',
                    name: 'dataFormat',
                    type: 'string',
                    notSupported: !0,
                },
                { tfName: 'ksize', name: 'kernelSize', type: 'number[]' },
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Conv1D',
            category: 'convolution',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'filter', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'stride', name: 'stride', type: 'number' },
                { tfName: 'padding', name: 'pad', type: 'string' },
                {
                    tfName: 'data_format',
                    name: 'dataFormat',
                    type: 'string',
                    defaultValue: 'NWC',
                },
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
                {
                    tfName: 'dilation',
                    name: 'dilation',
                    type: 'number',
                    defaultValue: 1,
                },
            ],
        },
        {
            tfOpName: 'Conv2D',
            category: 'convolution',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'filter', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
                { tfName: 'strides', name: 'strides', type: 'number[]' },
                { tfName: 'padding', name: 'pad', type: 'string' },
                {
                    tfName: 'useCudnnOnGpu',
                    name: 'useCudnnOnGpu',
                    type: 'bool',
                },
                {
                    tfName: 'data_format',
                    name: 'dataFormat',
                    type: 'string',
                    defaultValue: 'NHWC',
                },
                {
                    tfName: 'explicit_paddings',
                    name: 'explicitPaddings',
                    type: 'number[]',
                    defaultValue: [],
                },
                { tfName: 'dilations', name: 'dilations', type: 'number[]' },
            ],
        },
        {
            tfOpName: '_FusedConv2D',
            category: 'convolution',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'filter', type: 'tensor' },
                { start: 2, end: 0, name: 'args', type: 'tensors' },
            ],
            attrs: [
                { tfName: 'num_args', name: 'numArgs', type: 'number' },
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
                { tfName: 'strides', name: 'strides', type: 'number[]' },
                { tfName: 'padding', name: 'pad', type: 'string' },
                {
                    tfName: 'explicit_paddings',
                    name: 'explicitPaddings',
                    type: 'number[]',
                    defaultValue: [],
                },
                {
                    tfName: 'use_cudnn_on_gpu',
                    name: 'useCudnnOnGpu',
                    type: 'bool',
                    defaultValue: !0,
                },
                {
                    tfName: 'data_format',
                    name: 'dataFormat',
                    type: 'string',
                    defaultValue: 'NHWC',
                },
                {
                    tfName: 'dilations',
                    name: 'dilations',
                    type: 'number[]',
                    defaultValue: [1, 1, 1, 1],
                },
                {
                    tfName: 'fused_ops',
                    name: 'fusedOps',
                    type: 'string[]',
                    defaultValue: [],
                },
                {
                    tfName: 'epsilon',
                    name: 'epsilon',
                    type: 'number',
                    defaultValue: 1e-4,
                },
                {
                    tfName: 'leakyrelu_alpha',
                    name: 'leakyreluAlpha',
                    type: 'number',
                    defaultValue: 0.2,
                },
            ],
        },
        {
            tfOpName: 'Conv2DBackpropInput',
            category: 'convolution',
            inputs: [
                { start: 2, name: 'x', type: 'tensor' },
                { start: 1, name: 'filter', type: 'tensor' },
                { start: 0, name: 'outputShape', type: 'number[]' },
            ],
            attrs: [
                { tfName: 'strides', name: 'strides', type: 'number[]' },
                { tfName: 'padding', name: 'pad', type: 'string' },
                {
                    tfName: 'data_format',
                    name: 'dataFormat',
                    type: 'string',
                    notSupported: !0,
                },
                {
                    tfName: 'explicit_paddings',
                    name: 'explicitPaddings',
                    type: 'number[]',
                    defaultValue: [],
                },
                {
                    tfName: 'dilations',
                    name: 'dilations',
                    type: 'number[]',
                    notSupported: !0,
                },
            ],
        },
        {
            tfOpName: 'DepthwiseConv2d',
            category: 'convolution',
            inputs: [
                { start: 0, name: 'input', type: 'tensor' },
                { start: 1, name: 'filter', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'strides', name: 'strides', type: 'number[]' },
                { tfName: 'padding', name: 'pad', type: 'string' },
                {
                    tfName: 'data_format',
                    name: 'dataFormat',
                    type: 'string',
                    defaultValue: 'NHWC',
                },
                {
                    tfName: 'explicit_paddings',
                    name: 'explicitPaddings',
                    type: 'number[]',
                    defaultValue: [],
                },
                { tfName: 'dilations', name: 'dilations', type: 'number[]' },
            ],
        },
        {
            tfOpName: 'DepthwiseConv2dNative',
            category: 'convolution',
            inputs: [
                { start: 0, name: 'input', type: 'tensor' },
                { start: 1, name: 'filter', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'strides', name: 'strides', type: 'number[]' },
                { tfName: 'padding', name: 'pad', type: 'string' },
                {
                    tfName: 'data_format',
                    name: 'dataFormat',
                    type: 'string',
                    defaultValue: 'NHWC',
                },
                {
                    tfName: 'explicit_paddings',
                    name: 'explicitPaddings',
                    type: 'number[]',
                    defaultValue: [],
                },
                { tfName: 'dilations', name: 'dilations', type: 'number[]' },
            ],
        },
        {
            tfOpName: 'FusedDepthwiseConv2dNative',
            category: 'convolution',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'filter', type: 'tensor' },
                { start: 2, end: 0, name: 'args', type: 'tensors' },
            ],
            attrs: [
                { tfName: 'num_args', name: 'numArgs', type: 'number' },
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
                { tfName: 'strides', name: 'strides', type: 'number[]' },
                { tfName: 'padding', name: 'pad', type: 'string' },
                {
                    tfName: 'data_format',
                    name: 'dataFormat',
                    type: 'string',
                    defaultValue: 'NHWC',
                },
                {
                    tfName: 'dilations',
                    name: 'dilations',
                    type: 'number[]',
                    defaultValue: [1, 1, 1, 1],
                },
                {
                    tfName: 'fused_ops',
                    name: 'fusedOps',
                    type: 'string[]',
                    defaultValue: [],
                },
                {
                    tfName: 'explicit_paddings',
                    name: 'explicitPaddings',
                    type: 'number[]',
                    defaultValue: [],
                },
            ],
        },
        {
            tfOpName: 'Conv3D',
            category: 'convolution',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'filter', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'strides', name: 'strides', type: 'number[]' },
                { tfName: 'padding', name: 'pad', type: 'string' },
                {
                    tfName: 'data_format',
                    name: 'dataFormat',
                    type: 'string',
                    defaultValue: 'NHWC',
                },
                { tfName: 'dilations', name: 'dilations', type: 'number[]' },
            ],
        },
        {
            tfOpName: 'Dilation2D',
            category: 'convolution',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'filter', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'strides', name: 'strides', type: 'number[]' },
                { tfName: 'rates', name: 'dilations', type: 'number[]' },
                { tfName: 'padding', name: 'pad', type: 'string' },
            ],
        },
    ],
    u3 = Object.freeze(
        Object.defineProperty(
            { __proto__: null, json: c3 },
            Symbol.toStringTag,
            { value: 'Module' }
        )
    );
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const h3 = [
        {
            tfOpName: 'Fill',
            category: 'creation',
            inputs: [
                { start: 0, name: 'shape', type: 'number[]' },
                { start: 1, name: 'value', type: 'number' },
            ],
            attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype' }],
        },
        {
            tfOpName: 'LinSpace',
            category: 'creation',
            inputs: [
                { start: 0, name: 'start', type: 'number' },
                { start: 1, name: 'stop', type: 'number' },
                { start: 2, name: 'num', type: 'number' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'OneHot',
            category: 'creation',
            inputs: [
                { start: 0, name: 'indices', type: 'tensor' },
                { start: 1, name: 'depth', type: 'number' },
                { start: 2, name: 'onValue', type: 'number', defaultValue: 1 },
                { start: 3, name: 'offValue', type: 'number', defaultValue: 0 },
            ],
            attrs: [
                {
                    tfName: 'axis',
                    name: 'axis',
                    type: 'number',
                    notSupported: !0,
                },
                { tfName: 'T', name: 'dtype', type: 'dtype' },
            ],
        },
        {
            tfOpName: 'Ones',
            category: 'creation',
            inputs: [{ start: 0, name: 'shape', type: 'number[]' }],
            attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype' }],
        },
        {
            tfOpName: 'OnesLike',
            category: 'creation',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [{ tfName: 'dtype', name: 'dtype', type: 'dtype' }],
        },
        {
            tfOpName: 'RandomStandardNormal',
            category: 'creation',
            inputs: [{ start: 0, name: 'shape', type: 'number[]' }],
            attrs: [
                {
                    tfName: 'seed',
                    name: 'seed',
                    type: 'number',
                    defaultValue: 0,
                },
                {
                    tfName: 'seed2',
                    name: 'seed2',
                    type: 'number',
                    defaultValue: 0,
                    notSupported: !0,
                },
                { tfName: 'dtype', name: 'dtype', type: 'dtype' },
                { tfName: 'T', name: 'T', type: 'number', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'RandomUniform',
            category: 'creation',
            inputs: [{ start: 0, name: 'shape', type: 'number[]' }],
            attrs: [
                {
                    tfName: 'minval',
                    name: 'minval',
                    type: 'number',
                    defaultValue: 0,
                },
                {
                    tfName: 'maxval',
                    name: 'maxval',
                    type: 'number',
                    defaultValue: 1,
                },
                { tfName: 'dtype', name: 'dtype', type: 'dtype' },
                {
                    tfName: 'seed',
                    name: 'seed',
                    type: 'number',
                    defaultValue: 0,
                },
                {
                    tfName: 'seed2',
                    name: 'seed2',
                    type: 'number',
                    defaultValue: 0,
                    notSupported: !0,
                },
                { tfName: 'T', name: 'T', type: 'number', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'RandomUniformInt',
            category: 'creation',
            inputs: [{ start: 0, name: 'shape', type: 'number[]' }],
            attrs: [
                { tfName: 'minval', name: 'minval', type: 'number' },
                { tfName: 'maxval', name: 'maxval', type: 'number' },
                {
                    tfName: 'seed',
                    name: 'seed',
                    type: 'number',
                    defaultValue: 0,
                },
                {
                    tfName: 'seed2',
                    name: 'seed2',
                    type: 'number',
                    defaultValue: 0,
                    notSupported: !0,
                },
            ],
        },
        {
            tfOpName: 'Range',
            category: 'creation',
            inputs: [
                { start: 0, name: 'start', type: 'number' },
                { start: 1, name: 'stop', type: 'number' },
                { start: 2, name: 'step', type: 'number', defaultValue: 0 },
            ],
            attrs: [{ tfName: 'Tidx', name: 'dtype', type: 'dtype' }],
        },
        {
            tfOpName: 'TruncatedNormal',
            category: 'creation',
            inputs: [{ start: 0, name: 'shape', type: 'number[]' }],
            attrs: [
                {
                    tfName: 'means',
                    name: 'mean',
                    type: 'number',
                    defaultValue: 0,
                },
                {
                    tfName: 'stddev',
                    name: 'stdDev',
                    type: 'number',
                    defaultValue: 1,
                },
                { tfName: 'seed', name: 'seed', type: 'number' },
                {
                    tfName: 'seed2',
                    name: 'seed2',
                    type: 'number',
                    defaultValue: 0,
                    notSupported: !0,
                },
                { tfName: 'dtype', name: 'dtype', type: 'dtype' },
                { tfName: 'T', name: 'T', type: 'number', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Zeros',
            category: 'creation',
            inputs: [{ start: 0, name: 'shape', type: 'number[]' }],
            attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype' }],
        },
        {
            tfOpName: 'ZerosLike',
            category: 'creation',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype' }],
        },
        {
            tfOpName: 'Multinomial',
            category: 'creation',
            inputs: [
                { start: 0, name: 'logits', type: 'tensor' },
                { start: 1, name: 'numSamples', type: 'number' },
            ],
            attrs: [
                { tfName: 'seed', name: 'seed', type: 'number' },
                { tfName: 'seed2', name: 'seed2', type: 'number' },
                { tfName: 'T', name: 'dtype', type: 'dtype' },
                { tfName: 'output_dtype', name: 'output_dtype', type: 'dtype' },
            ],
        },
    ],
    d3 = Object.freeze(
        Object.defineProperty(
            { __proto__: null, json: h3 },
            Symbol.toStringTag,
            { value: 'Module' }
        )
    );
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const p3 = [
        {
            tfOpName: 'NonMaxSuppressionV2',
            category: 'dynamic',
            inputs: [
                { start: 0, name: 'boxes', type: 'tensor' },
                { start: 1, name: 'scores', type: 'tensor' },
                { start: 2, name: 'maxOutputSize', type: 'number' },
                { start: 3, name: 'iouThreshold', type: 'number' },
            ],
        },
        {
            tfOpName: 'NonMaxSuppressionV3',
            category: 'dynamic',
            inputs: [
                { start: 0, name: 'boxes', type: 'tensor' },
                { start: 1, name: 'scores', type: 'tensor' },
                { start: 2, name: 'maxOutputSize', type: 'number' },
                { start: 3, name: 'iouThreshold', type: 'number' },
                { start: 4, name: 'scoreThreshold', type: 'number' },
            ],
        },
        {
            tfOpName: 'NonMaxSuppressionV4',
            category: 'dynamic',
            inputs: [
                { start: 0, name: 'boxes', type: 'tensor' },
                { start: 1, name: 'scores', type: 'tensor' },
                { start: 2, name: 'maxOutputSize', type: 'number' },
                { start: 3, name: 'iouThreshold', type: 'number' },
                { start: 4, name: 'scoreThreshold', type: 'number' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
                {
                    tfName: 'T_threshold',
                    name: 'threshold',
                    type: 'dtype',
                    notSupported: !0,
                },
                {
                    tfName: 'pad_to_max_output_size',
                    name: 'padToMaxOutputSize',
                    type: 'bool',
                },
            ],
        },
        {
            tfOpName: 'NonMaxSuppressionV5',
            category: 'dynamic',
            inputs: [
                { start: 0, name: 'boxes', type: 'tensor' },
                { start: 1, name: 'scores', type: 'tensor' },
                { start: 2, name: 'maxOutputSize', type: 'number' },
                { start: 3, name: 'iouThreshold', type: 'number' },
                { start: 4, name: 'scoreThreshold', type: 'number' },
                { start: 5, name: 'softNmsSigma', type: 'number' },
            ],
        },
        {
            tfOpName: 'Where',
            category: 'dynamic',
            inputs: [{ start: 0, name: 'condition', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'ListDiff',
            category: 'dynamic',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'y', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
    ],
    f3 = Object.freeze(
        Object.defineProperty(
            { __proto__: null, json: p3 },
            Symbol.toStringTag,
            { value: 'Module' }
        )
    );
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const m3 = [
        {
            tfOpName: 'LowerBound',
            category: 'evaluation',
            inputs: [
                { start: 0, name: 'sortedSequence', type: 'tensor' },
                { start: 1, name: 'values', type: 'tensor' },
            ],
        },
        {
            tfOpName: 'TopKV2',
            category: 'evaluation',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'k', type: 'number' },
            ],
            attrs: [{ tfName: 'sorted', name: 'sorted', type: 'bool' }],
        },
        {
            tfOpName: 'UpperBound',
            category: 'evaluation',
            inputs: [
                { start: 0, name: 'sortedSequence', type: 'tensor' },
                { start: 1, name: 'values', type: 'tensor' },
            ],
        },
        {
            tfOpName: 'Unique',
            category: 'evaluation',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
        },
        {
            tfOpName: 'UniqueV2',
            category: 'evaluation',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'axis', type: 'number' },
            ],
        },
    ],
    g3 = Object.freeze(
        Object.defineProperty(
            { __proto__: null, json: m3 },
            Symbol.toStringTag,
            { value: 'Module' }
        )
    );
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const y3 = [
        {
            tfOpName: 'PlaceholderWithDefault',
            category: 'graph',
            inputs: [{ start: 0, name: 'default', type: 'tensor' }],
            attrs: [
                { tfName: 'shape', name: 'shape', type: 'shape' },
                { tfName: 'dtype', name: 'dtype', type: 'dtype' },
            ],
        },
        {
            tfOpName: 'Placeholder',
            category: 'graph',
            attrs: [
                { tfName: 'shape', name: 'shape', type: 'shape' },
                { tfName: 'dtype', name: 'dtype', type: 'dtype' },
            ],
        },
        { tfOpName: 'Const', category: 'graph' },
        {
            tfOpName: 'Identity',
            category: 'graph',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
        },
        {
            tfOpName: 'IdentityN',
            category: 'graph',
            inputs: [{ start: 0, end: 0, name: 'x', type: 'tensors' }],
        },
        {
            tfOpName: 'Snapshot',
            category: 'graph',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
        },
        {
            tfOpName: 'Rank',
            category: 'graph',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
        },
        {
            tfOpName: 'Size',
            category: 'graph',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
        },
        {
            tfOpName: 'Shape',
            category: 'graph',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
        },
        {
            tfOpName: 'ShapeN',
            category: 'graph',
            inputs: [{ start: 0, end: 0, name: 'x', type: 'tensors' }],
        },
        {
            tfOpName: 'Print',
            category: 'graph',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'data', type: 'tensors' },
            ],
            attrs: [
                { tfName: 'message', name: 'message', type: 'string' },
                {
                    tfName: 'first_n',
                    name: 'firstN',
                    type: 'number',
                    notSupported: !0,
                },
                {
                    tfName: 'summarize',
                    name: 'summarize',
                    type: 'number',
                    defaultValue: 3,
                },
            ],
        },
        { tfOpName: 'NoOp', category: 'graph', inputs: [] },
        {
            tfOpName: 'StopGradient',
            category: 'graph',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
        },
        {
            tfOpName: 'FakeQuantWithMinMaxVars',
            category: 'graph',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'min', name: 'min', type: 'number' },
                { tfName: 'max', name: 'max', type: 'number' },
            ],
        },
    ],
    b3 = Object.freeze(
        Object.defineProperty(
            { __proto__: null, json: y3 },
            Symbol.toStringTag,
            { value: 'Module' }
        )
    );
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const x3 = [
        {
            tfOpName: 'HashTable',
            category: 'hash_table',
            inputs: [],
            attrs: [
                { tfName: 'shared_name', name: 'sharedName', type: 'string' },
                {
                    tfName: 'use_node_name_sharing',
                    name: 'useNodeNameSharing',
                    type: 'bool',
                },
                { tfName: 'key_dtype', name: 'keyDType', type: 'dtype' },
                { tfName: 'value_dtype', name: 'valueDType', type: 'dtype' },
            ],
        },
        {
            tfOpName: 'HashTableV2',
            category: 'hash_table',
            inputs: [],
            attrs: [
                { tfName: 'shared_name', name: 'sharedName', type: 'string' },
                {
                    tfName: 'use_node_name_sharing',
                    name: 'useNodeNameSharing',
                    type: 'bool',
                },
                { tfName: 'key_dtype', name: 'keyDType', type: 'dtype' },
                { tfName: 'value_dtype', name: 'valueDType', type: 'dtype' },
            ],
        },
        {
            tfOpName: 'LookupTableImport',
            category: 'hash_table',
            inputs: [
                { start: 0, name: 'tableHandle', type: 'tensor' },
                { start: 1, name: 'keys', type: 'tensor' },
                { start: 2, name: 'values', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'Tin', name: 'tIn', type: 'dtype', notSupported: !0 },
                {
                    tfName: 'Tout',
                    name: 'tOut',
                    type: 'dtype',
                    notSupported: !0,
                },
            ],
        },
        {
            tfOpName: 'LookupTableImportV2',
            category: 'hash_table',
            inputs: [
                { start: 0, name: 'tableHandle', type: 'tensor' },
                { start: 1, name: 'keys', type: 'tensor' },
                { start: 2, name: 'values', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'Tin', name: 'tIn', type: 'dtype', notSupported: !0 },
                {
                    tfName: 'Tout',
                    name: 'tOut',
                    type: 'dtype',
                    notSupported: !0,
                },
            ],
        },
        {
            tfOpName: 'LookupTableFind',
            category: 'hash_table',
            inputs: [
                { start: 0, name: 'tableHandle', type: 'tensor' },
                { start: 1, name: 'keys', type: 'tensor' },
                { start: 2, name: 'defaultValue', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'Tin', name: 'tIn', type: 'dtype', notSupported: !0 },
                {
                    tfName: 'Tout',
                    name: 'tOut',
                    type: 'dtype',
                    notSupported: !0,
                },
            ],
        },
        {
            tfOpName: 'LookupTableFindV2',
            category: 'hash_table',
            inputs: [
                { start: 0, name: 'tableHandle', type: 'tensor' },
                { start: 1, name: 'keys', type: 'tensor' },
                { start: 2, name: 'defaultValue', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'Tin', name: 'tIn', type: 'dtype', notSupported: !0 },
                {
                    tfName: 'Tout',
                    name: 'tOut',
                    type: 'dtype',
                    notSupported: !0,
                },
            ],
        },
        {
            tfOpName: 'LookupTableSize',
            category: 'hash_table',
            inputs: [{ start: 0, name: 'tableHandle', type: 'tensor' }],
        },
        {
            tfOpName: 'LookupTableSizeV2',
            category: 'hash_table',
            inputs: [{ start: 0, name: 'tableHandle', type: 'tensor' }],
        },
        {
            tfOpName: 'InitializeTable',
            category: 'hash_table',
            inputs: [
                { start: 0, name: 'tableHandle', type: 'tensor' },
                { start: 1, name: 'keys', type: 'tensor' },
                { start: 2, name: 'values', type: 'tensor' },
            ],
        },
        {
            tfOpName: 'InitializeTableV2',
            category: 'hash_table',
            inputs: [
                { start: 0, name: 'tableHandle', type: 'tensor' },
                { start: 1, name: 'keys', type: 'tensor' },
                { start: 2, name: 'values', type: 'tensor' },
            ],
        },
    ],
    w3 = Object.freeze(
        Object.defineProperty(
            { __proto__: null, json: x3 },
            Symbol.toStringTag,
            { value: 'Module' }
        )
    );
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const v3 = [
        {
            tfOpName: 'ResizeBilinear',
            category: 'image',
            inputs: [
                { start: 0, name: 'images', type: 'tensor' },
                { start: 1, name: 'size', type: 'number[]' },
            ],
            attrs: [
                { tfName: 'align_corners', name: 'alignCorners', type: 'bool' },
                {
                    tfName: 'half_pixel_centers',
                    name: 'halfPixelCenters',
                    type: 'bool',
                },
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'ResizeNearestNeighbor',
            category: 'image',
            inputs: [
                { start: 0, name: 'images', type: 'tensor' },
                { start: 1, name: 'size', type: 'number[]' },
            ],
            attrs: [
                { tfName: 'align_corners', name: 'alignCorners', type: 'bool' },
                {
                    tfName: 'half_pixel_centers',
                    name: 'halfPixelCenters',
                    type: 'bool',
                },
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'CropAndResize',
            category: 'image',
            inputs: [
                { start: 0, name: 'image', type: 'tensor' },
                { start: 1, name: 'boxes', type: 'tensor' },
                { start: 2, name: 'boxInd', type: 'tensor' },
                { start: 3, name: 'cropSize', type: 'number[]' },
            ],
            attrs: [
                { tfName: 'method', name: 'method', type: 'string' },
                {
                    tfName: 'extrapolation_value',
                    name: 'extrapolationValue',
                    type: 'number',
                },
            ],
        },
        {
            tfOpName: 'ImageProjectiveTransformV3',
            category: 'image',
            inputs: [
                { start: 0, name: 'images', type: 'tensor' },
                { start: 1, name: 'transforms', type: 'tensor' },
                { start: 2, name: 'outputShape', type: 'number[]' },
                { start: 3, name: 'fillValue', type: 'number' },
            ],
            attrs: [
                {
                    tfName: 'interpolation',
                    name: 'interpolation',
                    type: 'string',
                },
                { tfName: 'fill_mode', name: 'fillMode', type: 'string' },
            ],
        },
    ],
    k3 = Object.freeze(
        Object.defineProperty(
            { __proto__: null, json: v3 },
            Symbol.toStringTag,
            { value: 'Module' }
        )
    );
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const S3 = [
        {
            tfOpName: 'Equal',
            category: 'logical',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'b', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'NotEqual',
            category: 'logical',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'b', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Greater',
            category: 'logical',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'b', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'GreaterEqual',
            category: 'logical',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'b', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Less',
            category: 'logical',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'b', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'LessEqual',
            category: 'logical',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'b', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'LogicalAnd',
            category: 'logical',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'b', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'LogicalNot',
            category: 'logical',
            inputs: [{ start: 0, name: 'a', type: 'tensor' }],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'LogicalOr',
            category: 'logical',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'b', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Select',
            category: 'logical',
            inputs: [
                { start: 0, name: 'condition', type: 'tensor' },
                { start: 1, name: 'a', type: 'tensor' },
                { start: 2, name: 'b', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'SelectV2',
            category: 'logical',
            inputs: [
                { start: 0, name: 'condition', type: 'tensor' },
                { start: 1, name: 'a', type: 'tensor' },
                { start: 2, name: 'b', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'BitwiseAnd',
            category: 'logical',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'y', type: 'tensor' },
            ],
        },
    ],
    I3 = Object.freeze(
        Object.defineProperty(
            { __proto__: null, json: S3 },
            Symbol.toStringTag,
            { value: 'Module' }
        )
    );
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const C3 = [
        {
            tfOpName: '_FusedMatMul',
            category: 'matrices',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'b', type: 'tensor' },
                { start: 2, end: 0, name: 'args', type: 'tensors' },
            ],
            attrs: [
                { tfName: 'num_args', name: 'numArgs', type: 'number' },
                {
                    tfName: 'fused_ops',
                    name: 'fusedOps',
                    type: 'string[]',
                    defaultValue: [],
                },
                {
                    tfName: 'epsilon',
                    name: 'epsilon',
                    type: 'number',
                    defaultValue: 1e-4,
                },
                {
                    tfName: 'transpose_a',
                    name: 'transposeA',
                    type: 'bool',
                    defaultValue: !1,
                },
                {
                    tfName: 'transpose_b',
                    name: 'transposeB',
                    type: 'bool',
                    defaultValue: !1,
                },
                {
                    tfName: 'leakyrelu_alpha',
                    name: 'leakyreluAlpha',
                    type: 'number',
                    defaultValue: 0.2,
                },
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'MatMul',
            category: 'matrices',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'b', type: 'tensor' },
            ],
            attrs: [
                {
                    tfName: 'transpose_a',
                    name: 'transposeA',
                    type: 'bool',
                    defaultValue: !1,
                },
                {
                    tfName: 'transpose_b',
                    name: 'transposeB',
                    type: 'bool',
                    defaultValue: !1,
                },
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'BatchMatMul',
            category: 'matrices',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'b', type: 'tensor' },
            ],
            attrs: [
                {
                    tfName: 'adj_x',
                    name: 'transposeA',
                    type: 'bool',
                    defaultValue: !1,
                },
                {
                    tfName: 'adj_y',
                    name: 'transposeB',
                    type: 'bool',
                    defaultValue: !1,
                },
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'BatchMatMulV2',
            category: 'matrices',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'b', type: 'tensor' },
            ],
            attrs: [
                {
                    tfName: 'adj_x',
                    name: 'transposeA',
                    type: 'bool',
                    defaultValue: !1,
                },
                {
                    tfName: 'adj_y',
                    name: 'transposeB',
                    type: 'bool',
                    defaultValue: !1,
                },
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Transpose',
            category: 'matrices',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'perm', type: 'number[]' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Einsum',
            category: 'matrices',
            inputs: [{ start: 0, end: 0, name: 'tensors', type: 'tensors' }],
            attrs: [
                { tfName: 'equation', name: 'equation', type: 'string' },
                { tfName: 'N', name: 'n', type: 'number', defaultValue: 2 },
                { tfName: 'T', name: 'dtype', type: 'dtype' },
            ],
        },
        {
            tfOpName: 'MatrixBandPart',
            category: 'matrices',
            inputs: [
                { start: 0, name: 'a', type: 'tensor' },
                { start: 1, name: 'numLower', type: 'tensor' },
                { start: 1, name: 'numUpper', type: 'tensor' },
            ],
        },
    ],
    $3 = Object.freeze(
        Object.defineProperty(
            { __proto__: null, json: C3 },
            Symbol.toStringTag,
            { value: 'Module' }
        )
    );
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const N3 = [
        {
            tfOpName: 'EuclideanNorm',
            category: 'normalization',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'axis', type: 'number[]' },
            ],
            attrs: [
                {
                    tfName: 'keep_dims',
                    name: 'keepDims',
                    type: 'bool',
                    defaultValue: !1,
                },
            ],
        },
        {
            tfOpName: 'FusedBatchNorm',
            category: 'normalization',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'scale', type: 'tensor' },
                { start: 2, name: 'offset', type: 'tensor' },
                { start: 3, name: 'mean', type: 'tensor' },
                { start: 4, name: 'variance', type: 'tensor' },
            ],
            attrs: [
                {
                    tfName: 'epsilon',
                    name: 'epsilon',
                    type: 'number',
                    defaultValue: 0.001,
                },
                {
                    tfName: 'data_format',
                    name: 'dataFormat',
                    type: 'string',
                    notSupported: !0,
                },
            ],
        },
        {
            tfOpName: 'FusedBatchNormV2',
            category: 'normalization',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'scale', type: 'tensor' },
                { start: 2, name: 'offset', type: 'tensor' },
                { start: 3, name: 'mean', type: 'tensor' },
                { start: 4, name: 'variance', type: 'tensor' },
            ],
            attrs: [
                {
                    tfName: 'epsilon',
                    name: 'epsilon',
                    type: 'number',
                    defaultValue: 0.001,
                },
                {
                    tfName: 'data_format',
                    name: 'dataFormat',
                    type: 'string',
                    notSupported: !0,
                },
            ],
        },
        {
            tfOpName: 'FusedBatchNormV3',
            category: 'normalization',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'scale', type: 'tensor' },
                { start: 2, name: 'offset', type: 'tensor' },
                { start: 3, name: 'mean', type: 'tensor' },
                { start: 4, name: 'variance', type: 'tensor' },
            ],
            attrs: [
                {
                    tfName: 'epsilon',
                    name: 'epsilon',
                    type: 'number',
                    defaultValue: 0.001,
                },
                {
                    tfName: 'data_format',
                    name: 'dataFormat',
                    type: 'string',
                    notSupported: !0,
                },
            ],
        },
        {
            tfOpName: 'LRN',
            category: 'normalization',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                {
                    tfName: 'depth_radius',
                    name: 'radius',
                    type: 'number',
                    defaultValue: 5,
                },
                {
                    tfName: 'bias',
                    name: 'bias',
                    type: 'number',
                    defaultValue: 1,
                },
                {
                    tfName: 'alpha',
                    name: 'alpha',
                    type: 'number',
                    defaultValue: 1,
                },
                {
                    tfName: 'beta',
                    name: 'beta',
                    type: 'number',
                    defaultValue: 0.5,
                },
            ],
        },
        {
            tfOpName: 'Softmax',
            category: 'normalization',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
        },
        {
            tfOpName: 'LogSoftmax',
            category: 'normalization',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
        },
    ],
    T3 = Object.freeze(
        Object.defineProperty(
            { __proto__: null, json: N3 },
            Symbol.toStringTag,
            { value: 'Module' }
        )
    );
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const E3 = [
        {
            tfOpName: 'Bincount',
            category: 'reduction',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'size', type: 'number' },
                { start: 2, name: 'weights', type: 'tensor' },
            ],
        },
        {
            tfOpName: 'DenseBincount',
            category: 'reduction',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'size', type: 'number' },
                { start: 2, name: 'weights', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'binary_output', name: 'binaryOutput', type: 'bool' },
            ],
        },
        {
            tfOpName: 'Max',
            category: 'reduction',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'axis', type: 'number[]' },
            ],
            attrs: [{ tfName: 'keep_dims', name: 'keepDims', type: 'bool' }],
        },
        {
            tfOpName: 'Mean',
            category: 'reduction',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'axis', type: 'number[]' },
            ],
            attrs: [{ tfName: 'keep_dims', name: 'keepDims', type: 'bool' }],
        },
        {
            tfOpName: 'Min',
            category: 'reduction',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'axis', type: 'number[]' },
            ],
            attrs: [{ tfName: 'keep_dims', name: 'keepDims', type: 'bool' }],
        },
        {
            tfOpName: 'Sum',
            category: 'reduction',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'axis', type: 'number[]' },
            ],
            attrs: [{ tfName: 'keep_dims', name: 'keepDims', type: 'bool' }],
        },
        {
            tfOpName: 'All',
            category: 'reduction',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'axis', type: 'number[]' },
            ],
            attrs: [{ tfName: 'keep_dims', name: 'keepDims', type: 'bool' }],
        },
        {
            tfOpName: 'Any',
            category: 'reduction',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'axis', type: 'number[]' },
            ],
            attrs: [{ tfName: 'keep_dims', name: 'keepDims', type: 'bool' }],
        },
        {
            tfOpName: 'ArgMax',
            category: 'reduction',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'axis', type: 'number' },
            ],
        },
        {
            tfOpName: 'ArgMin',
            category: 'reduction',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'axis', type: 'number' },
            ],
        },
        {
            tfOpName: 'Prod',
            category: 'reduction',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'axis', type: 'number[]' },
            ],
            attrs: [
                { tfName: 'keep_dims', name: 'keepDims', type: 'bool' },
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'Cumprod',
            category: 'reduction',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'axis', type: 'number' },
            ],
            attrs: [
                { tfName: 'exclusive', name: 'exclusive', type: 'bool' },
                { tfName: 'reverse', name: 'reverse', type: 'bool' },
            ],
        },
        {
            tfOpName: 'Cumsum',
            category: 'reduction',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'axis', type: 'number' },
            ],
            attrs: [
                { tfName: 'exclusive', name: 'exclusive', type: 'bool' },
                { tfName: 'reverse', name: 'reverse', type: 'bool' },
            ],
        },
    ],
    _3 = Object.freeze(
        Object.defineProperty(
            { __proto__: null, json: E3 },
            Symbol.toStringTag,
            { value: 'Module' }
        )
    );
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const A3 = [
        {
            tfOpName: 'ConcatV2',
            category: 'slice_join',
            inputs: [
                { start: 0, end: -1, name: 'tensors', type: 'tensors' },
                { start: -1, name: 'axis', type: 'number' },
            ],
            attrs: [
                { tfName: 'N', name: 'n', type: 'number', defaultValue: 2 },
            ],
        },
        {
            tfOpName: 'Concat',
            category: 'slice_join',
            inputs: [
                { start: 1, end: 0, name: 'tensors', type: 'tensors' },
                { start: 0, name: 'axis', type: 'number' },
            ],
            attrs: [
                { tfName: 'N', name: 'n', type: 'number', defaultValue: 2 },
            ],
        },
        {
            tfOpName: 'GatherV2',
            category: 'slice_join',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'indices', type: 'tensor' },
                { start: 2, name: 'axis', type: 'number', defaultValue: 0 },
            ],
            attrs: [
                {
                    tfName: 'batch_dims',
                    name: 'batchDims',
                    type: 'number',
                    defaultValue: 0,
                },
            ],
        },
        {
            tfOpName: 'Gather',
            category: 'slice_join',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'indices', type: 'tensor' },
            ],
            attrs: [
                {
                    tfName: 'validate_indices',
                    name: 'validateIndices',
                    type: 'bool',
                    notSupported: !0,
                },
            ],
        },
        {
            tfOpName: 'Reverse',
            category: 'slice_join',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'dims', type: 'bool[]' },
            ],
        },
        {
            tfOpName: 'ReverseV2',
            category: 'slice_join',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'axis', type: 'number[]' },
            ],
        },
        {
            tfOpName: 'Slice',
            category: 'slice_join',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'begin', type: 'number[]' },
                { start: 2, name: 'size', type: 'number[]' },
            ],
        },
        {
            tfOpName: 'StridedSlice',
            category: 'slice_join',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'begin', type: 'number[]' },
                { start: 2, name: 'end', type: 'number[]' },
                { start: 3, name: 'strides', type: 'number[]' },
            ],
            attrs: [
                {
                    tfName: 'begin_mask',
                    name: 'beginMask',
                    type: 'number',
                    defaultValue: 0,
                },
                {
                    tfName: 'end_mask',
                    name: 'endMask',
                    type: 'number',
                    defaultValue: 0,
                },
                {
                    tfName: 'new_axis_mask',
                    name: 'newAxisMask',
                    type: 'number',
                    defaultValue: 0,
                },
                {
                    tfName: 'ellipsis_mask',
                    name: 'ellipsisMask',
                    type: 'number',
                    defaultValue: 0,
                },
                {
                    tfName: 'shrink_axis_mask',
                    name: 'shrinkAxisMask',
                    type: 'number',
                    defaultValue: 0,
                },
            ],
        },
        {
            tfOpName: 'Pack',
            category: 'slice_join',
            inputs: [{ start: 0, end: 0, name: 'tensors', type: 'tensors' }],
            attrs: [
                {
                    tfName: 'axis',
                    name: 'axis',
                    type: 'number',
                    defaultValue: 0,
                },
            ],
        },
        {
            tfOpName: 'Unpack',
            category: 'slice_join',
            inputs: [{ start: 0, name: 'tensor', type: 'tensor' }],
            attrs: [
                {
                    tfName: 'axis',
                    name: 'axis',
                    type: 'number',
                    defaultValue: 0,
                },
                {
                    tfName: 'num',
                    name: 'num',
                    type: 'number',
                    defaultValue: 0,
                    notSupported: !0,
                },
            ],
        },
        {
            tfOpName: 'Tile',
            category: 'slice_join',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'reps', type: 'number[]' },
            ],
        },
        {
            tfOpName: 'Split',
            category: 'slice_join',
            inputs: [
                { start: 0, name: 'axis', type: 'number', defaultValue: 0 },
                { start: 1, name: 'x', type: 'tensor' },
            ],
            attrs: [
                {
                    tfName: 'num_split',
                    name: 'numOrSizeSplits',
                    type: 'number',
                    defaultValue: 1,
                },
            ],
        },
        {
            tfOpName: 'SplitV',
            category: 'slice_join',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'numOrSizeSplits', type: 'number[]' },
                { start: 2, name: 'axis', type: 'number', defaultValue: 0 },
            ],
        },
        {
            tfOpName: 'ScatterNd',
            category: 'slice_join',
            inputs: [
                { start: 0, name: 'indices', type: 'tensor' },
                { start: 1, name: 'values', type: 'tensor' },
                { start: 2, name: 'shape', type: 'number[]' },
            ],
        },
        {
            tfOpName: 'GatherNd',
            category: 'slice_join',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'indices', type: 'tensor' },
            ],
        },
        {
            tfOpName: 'SparseToDense',
            category: 'slice_join',
            inputs: [
                { start: 0, name: 'sparseIndices', type: 'tensor' },
                { start: 1, name: 'outputShape', type: 'number[]' },
                { start: 2, name: 'sparseValues', type: 'tensor' },
                { start: 3, name: 'defaultValue', type: 'tensor' },
            ],
            attrs: [
                {
                    tfName: 'validate_indices',
                    name: 'validateIndices',
                    type: 'bool',
                    defaultValue: !1,
                    notSupported: !0,
                },
            ],
        },
        {
            tfOpName: 'TensorScatterUpdate',
            category: 'slice_join',
            inputs: [
                { start: 0, name: 'tensor', type: 'tensor' },
                { start: 1, name: 'indices', type: 'tensor' },
                { start: 2, name: 'values', type: 'tensor' },
            ],
        },
    ],
    R3 = Object.freeze(
        Object.defineProperty(
            { __proto__: null, json: A3 },
            Symbol.toStringTag,
            { value: 'Module' }
        )
    );
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const D3 = [
        {
            tfOpName: 'SparseFillEmptyRows',
            category: 'sparse',
            inputs: [
                { start: 0, name: 'indices', type: 'tensor' },
                { start: 1, name: 'values', type: 'tensor' },
                { start: 2, name: 'denseShape', type: 'tensor' },
                { start: 3, name: 'defaultValue', type: 'tensor' },
            ],
        },
        {
            tfOpName: 'SparseReshape',
            category: 'sparse',
            inputs: [
                { start: 0, name: 'inputIndices', type: 'tensor' },
                { start: 1, name: 'inputShape', type: 'tensor' },
                { start: 2, name: 'newShape', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
            ],
        },
        {
            tfOpName: 'SparseSegmentMean',
            category: 'sparse',
            inputs: [
                { start: 0, name: 'data', type: 'tensor' },
                { start: 1, name: 'indices', type: 'tensor' },
                { start: 2, name: 'segmentIds', type: 'tensor' },
            ],
        },
        {
            tfOpName: 'SparseSegmentSum',
            category: 'sparse',
            inputs: [
                { start: 0, name: 'data', type: 'tensor' },
                { start: 1, name: 'indices', type: 'tensor' },
                { start: 2, name: 'segmentIds', type: 'tensor' },
            ],
        },
    ],
    O3 = Object.freeze(
        Object.defineProperty(
            { __proto__: null, json: D3 },
            Symbol.toStringTag,
            { value: 'Module' }
        )
    );
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const F3 = [
        {
            tfOpName: 'FFT',
            category: 'spectral',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
        },
        {
            tfOpName: 'IFFT',
            category: 'spectral',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
        },
        {
            tfOpName: 'RFFT',
            category: 'spectral',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                {
                    start: 1,
                    name: 'fft_length',
                    type: 'number',
                    notSupported: !0,
                },
            ],
        },
        {
            tfOpName: 'IRFFT',
            category: 'spectral',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                {
                    start: 1,
                    name: 'fft_length',
                    type: 'number',
                    notSupported: !0,
                },
            ],
        },
    ],
    L3 = Object.freeze(
        Object.defineProperty(
            { __proto__: null, json: F3 },
            Symbol.toStringTag,
            { value: 'Module' }
        )
    );
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const P3 = [
        {
            tfOpName: 'StaticRegexReplace',
            category: 'string',
            inputs: [{ start: 0, name: 'input', type: 'tensor' }],
            attrs: [
                { tfName: 'pattern', name: 'pattern', type: 'string' },
                { tfName: 'rewrite', name: 'rewrite', type: 'string' },
                {
                    tfName: 'replace_global',
                    name: 'replaceGlobal',
                    type: 'bool',
                },
            ],
        },
        {
            tfOpName: 'StringNGrams',
            category: 'string',
            inputs: [
                { start: 0, name: 'data', type: 'tensor' },
                { start: 1, name: 'dataSplits', type: 'tensor' },
            ],
            attrs: [
                { tfName: 'separator', name: 'separator', type: 'string' },
                {
                    tfName: 'ngram_widths',
                    name: 'nGramWidths',
                    type: 'number[]',
                },
                { tfName: 'left_pad', name: 'leftPad', type: 'string' },
                { tfName: 'right_pad', name: 'rightPad', type: 'string' },
                { tfName: 'pad_width', name: 'padWidth', type: 'number' },
                {
                    tfName: 'preserve_short_sequences',
                    name: 'preserveShortSequences',
                    type: 'bool',
                },
            ],
            outputs: ['ngrams', 'ngrams_splits'],
        },
        {
            tfOpName: 'StringSplit',
            category: 'string',
            inputs: [
                { start: 0, name: 'input', type: 'tensor' },
                { start: 1, name: 'delimiter', type: 'tensor' },
            ],
            attrs: [{ tfName: 'skip_empty', name: 'skipEmpty', type: 'bool' }],
            outputs: ['indices', 'values', 'shape'],
        },
        {
            tfOpName: 'StringToHashBucketFast',
            category: 'string',
            inputs: [{ start: 0, name: 'input', type: 'tensor' }],
            attrs: [
                { tfName: 'num_buckets', name: 'numBuckets', type: 'number' },
            ],
        },
    ],
    z3 = Object.freeze(
        Object.defineProperty(
            { __proto__: null, json: P3 },
            Symbol.toStringTag,
            { value: 'Module' }
        )
    );
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const B3 = [
        {
            tfOpName: 'Cast',
            category: 'transformation',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                {
                    tfName: 'SrcT',
                    name: 'sdtype',
                    type: 'dtype',
                    notSupported: !0,
                },
                { tfName: 'DstT', name: 'dtype', type: 'dtype' },
            ],
        },
        {
            tfOpName: 'ExpandDims',
            category: 'transformation',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'axis', type: 'number' },
            ],
        },
        {
            tfOpName: 'MirrorPad',
            category: 'transformation',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'padding', type: 'number[]' },
            ],
            attrs: [{ tfName: 'mode', name: 'mode', type: 'string' }],
        },
        {
            tfOpName: 'Pad',
            category: 'transformation',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'padding', type: 'number[]' },
            ],
            attrs: [
                {
                    tfName: 'constant_value',
                    name: 'constantValue',
                    type: 'number',
                    defaultValue: 0,
                },
            ],
        },
        {
            tfOpName: 'PadV2',
            category: 'transformation',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'padding', type: 'number[]' },
                {
                    start: 2,
                    name: 'constantValue',
                    type: 'number',
                    defaultValue: 0,
                },
            ],
        },
        {
            tfOpName: 'Reshape',
            category: 'transformation',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'shape', type: 'number[]' },
            ],
        },
        {
            tfOpName: 'EnsureShape',
            category: 'transformation',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'shape', type: 'number[]' },
            ],
        },
        {
            tfOpName: 'Squeeze',
            category: 'transformation',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                {
                    tfName: 'axis',
                    tfDeprecatedName: 'squeeze_dims',
                    name: 'axis',
                    type: 'number[]',
                },
            ],
        },
        {
            tfOpName: 'SpaceToBatchND',
            category: 'transformation',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'blockShape', type: 'number[]' },
                { start: 2, name: 'paddings', type: 'number[]' },
            ],
        },
        {
            tfOpName: 'BatchToSpaceND',
            category: 'transformation',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'blockShape', type: 'number[]' },
                { start: 2, name: 'crops', type: 'number[]' },
            ],
        },
        {
            tfOpName: 'DepthToSpace',
            category: 'transformation',
            inputs: [{ start: 0, name: 'x', type: 'tensor' }],
            attrs: [
                { tfName: 'block_size', name: 'blockSize', type: 'number' },
                { tfName: 'data_format', name: 'dataFormat', type: 'string' },
            ],
        },
        {
            tfOpName: 'BroadcastTo',
            category: 'transformation',
            inputs: [
                { start: 0, name: 'x', type: 'tensor' },
                { start: 1, name: 'shape', type: 'number[]' },
            ],
            attrs: [],
        },
        {
            tfOpName: 'BroadcastArgs',
            category: 'transformation',
            inputs: [
                { start: 0, name: 's0', type: 'tensor' },
                { start: 1, name: 's1', type: 'tensor' },
            ],
            attrs: [],
        },
    ],
    M3 = Object.freeze(
        Object.defineProperty(
            { __proto__: null, json: B3 },
            Symbol.toStringTag,
            { value: 'Module' }
        )
    );
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class Fy {
    static get Instance() {
        return this._instance || (this._instance = new this());
    }
    constructor() {
        const t = [
                r3,
                i3,
                l3,
                u3,
                d3,
                f3,
                g3,
                b3,
                w3,
                k3,
                I3,
                $3,
                T3,
                _3,
                R3,
                O3,
                L3,
                z3,
                M3,
            ],
            e = [].concat(...t.map((s) => s.json));
        this.opMappers = e.reduce((s, r) => ((s[r.tfOpName] = r), s), {});
    }
    transformGraph(t, e = {}) {
        const s = t.node,
            r = [],
            o = [],
            i = [],
            a = s.reduce(
                (m, g) => (
                    (m[g.name] = this.mapNode(g)),
                    g.op.startsWith('Placeholder')
                        ? r.push(m[g.name])
                        : g.op === 'Const'
                        ? o.push(m[g.name])
                        : (g.input == null || g.input.length === 0) &&
                          i.push(m[g.name]),
                    m
                ),
                {}
            );
        let l = [];
        const c = [];
        let u = {},
            h = {};
        e != null &&
            ((u = this.mapSignatureEntries(e.inputs)),
            (h = this.mapSignatureEntries(e.outputs)));
        const d = Object.keys(a);
        d.forEach((m) => {
            const g = a[m];
            g.inputNames.forEach((y, b) => {
                const [w, , x] = Ms(y),
                    v = a[w];
                if (v.outputs != null) {
                    const C = v.outputs.indexOf(x);
                    if (C !== -1) {
                        const $ = `${w}:${C}`;
                        g.inputNames[b] = $;
                    }
                }
                g.inputs.push(v), v.children.push(g);
            });
        }),
            Object.keys(h).length === 0
                ? d.forEach((m) => {
                      const g = a[m];
                      g.children.length === 0 && c.push(g);
                  })
                : Object.keys(h).forEach((m) => {
                      const [g] = Ms(m),
                          y = a[g];
                      y != null && ((y.signatureKey = h[m]), c.push(y));
                  }),
            Object.keys(u).length > 0
                ? Object.keys(u).forEach((m) => {
                      const [g] = Ms(m),
                          y = a[g];
                      y && ((y.signatureKey = u[m]), l.push(y));
                  })
                : (l = r);
        let p = {};
        t.library != null &&
            t.library.function != null &&
            (p = t.library.function.reduce(
                (m, g) => ((m[g.signature.name] = this.mapFunction(g)), m),
                {}
            ));
        const f = {
            nodes: a,
            inputs: l,
            outputs: c,
            weights: o,
            placeholders: r,
            signature: e,
            functions: p,
        };
        return i.length > 0 && (f.initNodes = i), f;
    }
    mapSignatureEntries(t) {
        return Object.keys(t || {}).reduce(
            (e, s) => ((e[t[s].name] = s), e),
            {}
        );
    }
    mapNode(t) {
        const e = Ov(t.op) || this.opMappers[t.op] || {};
        t.attr == null && (t.attr = {});
        const s = {
            name: t.name,
            op: t.op,
            category: e.category,
            inputNames: (t.input || []).map((r) =>
                r.startsWith('^') ? r.slice(1) : r
            ),
            inputs: [],
            children: [],
            inputParams: {},
            attrParams: {},
            rawAttrs: t.attr,
            outputs: e.outputs,
        };
        return (
            e.inputs != null &&
                (s.inputParams = e.inputs.reduce(
                    (r, o) => (
                        (r[o.name] = {
                            type: o.type,
                            inputIndexStart: o.start,
                            inputIndexEnd: o.end,
                        }),
                        r
                    ),
                    {}
                )),
            e.attrs != null &&
                (s.attrParams = e.attrs.reduce((r, o) => {
                    const i = o.type;
                    let a;
                    switch (o.type) {
                        case 'string':
                            (a = zd(t.attr, o.tfName, o.defaultValue)),
                                a === void 0 &&
                                    o.tfDeprecatedName &&
                                    (a = zd(
                                        t.attr,
                                        o.tfDeprecatedName,
                                        o.defaultValue
                                    ));
                            break;
                        case 'string[]':
                            (a = Hd(t.attr, o.tfName, o.defaultValue)),
                                a === void 0 &&
                                    o.tfDeprecatedName &&
                                    (a = Hd(
                                        t.attr,
                                        o.tfDeprecatedName,
                                        o.defaultValue
                                    ));
                            break;
                        case 'number':
                            (a = Md(t.attr, o.tfName, o.defaultValue || 0)),
                                a === void 0 &&
                                    o.tfDeprecatedName &&
                                    (a = Md(
                                        t.attr,
                                        o.tfDeprecatedName,
                                        o.defaultValue
                                    ));
                            break;
                        case 'number[]':
                            (a = Gd(t.attr, o.tfName, o.defaultValue)),
                                a === void 0 &&
                                    o.tfDeprecatedName &&
                                    (a = Gd(
                                        t.attr,
                                        o.tfDeprecatedName,
                                        o.defaultValue
                                    ));
                            break;
                        case 'bool':
                            (a = Bd(t.attr, o.tfName, o.defaultValue)),
                                a === void 0 &&
                                    o.tfDeprecatedName &&
                                    (a = Bd(
                                        t.attr,
                                        o.tfDeprecatedName,
                                        o.defaultValue
                                    ));
                            break;
                        case 'bool[]':
                            (a = qd(t.attr, o.tfName, o.defaultValue)),
                                a === void 0 &&
                                    o.tfDeprecatedName &&
                                    (a = qd(
                                        t.attr,
                                        o.tfDeprecatedName,
                                        o.defaultValue
                                    ));
                            break;
                        case 'shape':
                            (a = Ud(t.attr, o.tfName, o.defaultValue)),
                                a === void 0 &&
                                    o.tfDeprecatedName &&
                                    (a = Ud(
                                        t.attr,
                                        o.tfDeprecatedName,
                                        o.defaultValue
                                    ));
                            break;
                        case 'shape[]':
                            (a = jd(t.attr, o.tfName, o.defaultValue)),
                                a === void 0 &&
                                    o.tfDeprecatedName &&
                                    (a = jd(
                                        t.attr,
                                        o.tfDeprecatedName,
                                        o.defaultValue
                                    ));
                            break;
                        case 'dtype':
                            (a = Vd(t.attr, o.tfName, o.defaultValue)),
                                a === void 0 &&
                                    o.tfDeprecatedName &&
                                    (a = Vd(
                                        t.attr,
                                        o.tfDeprecatedName,
                                        o.defaultValue
                                    ));
                            break;
                        case 'dtype[]':
                            (a = Wd(t.attr, o.tfName, o.defaultValue)),
                                a === void 0 &&
                                    o.tfDeprecatedName &&
                                    (a = Wd(
                                        t.attr,
                                        o.tfDeprecatedName,
                                        o.defaultValue
                                    ));
                            break;
                        case 'func':
                            (a = Ly(t.attr, o.tfName, o.defaultValue)),
                                a === void 0 &&
                                    o.tfDeprecatedName &&
                                    (a = Ly(
                                        t.attr,
                                        o.tfDeprecatedName,
                                        o.defaultValue
                                    ));
                            break;
                        case 'tensor':
                        case 'tensors':
                            break;
                        default:
                            throw new Error(
                                `Unsupported param type: ${o.type} for op: ${t.op}`
                            );
                    }
                    return (r[o.name] = { value: a, type: i }), r;
                }, {})),
            s
        );
    }
    mapFunction(t) {
        const e = t.nodeDef,
            s = [],
            r = [];
        let o = {};
        e != null &&
            (o = e.reduce(
                (h, d) => (
                    (h[d.name] = this.mapNode(d)),
                    d.op === 'Const' && r.push(h[d.name]),
                    h
                ),
                {}
            ));
        const i = [],
            a = [];
        t.signature.inputArg.forEach((h) => {
            const [d] = Ms(h.name),
                p = {
                    name: d,
                    op: 'Placeholder',
                    inputs: [],
                    inputNames: [],
                    category: 'graph',
                    inputParams: {},
                    attrParams: { dtype: { value: ig(h.type), type: 'dtype' } },
                    children: [],
                };
            (p.signatureKey = h.name), i.push(p), (o[d] = p);
        }),
            Object.keys(o).forEach((h) => {
                const d = o[h];
                d.inputNames.forEach((p, f) => {
                    const [m, , g] = Ms(p),
                        y = o[m];
                    if (y.outputs != null) {
                        const b = y.outputs.indexOf(g);
                        if (b !== -1) {
                            const w = `${m}:${b}`;
                            d.inputNames[f] = w;
                        }
                    }
                    d.inputs.push(y), y.children.push(d);
                });
            });
        const c = t.ret;
        t.signature.outputArg.forEach((h) => {
            const [d, p] = Ms(c[h.name]),
                f = o[d];
            f != null && ((f.defaultOutput = p), a.push(f));
        });
        const u = this.mapArgsToSignature(t);
        return {
            nodes: o,
            inputs: i,
            outputs: a,
            weights: r,
            placeholders: s,
            signature: u,
        };
    }
    mapArgsToSignature(t) {
        return {
            methodName: t.signature.name,
            inputs: t.signature.inputArg.reduce(
                (e, s) => ((e[s.name] = this.mapArgToTensorInfo(s)), e),
                {}
            ),
            outputs: t.signature.outputArg.reduce(
                (e, s) => ((e[s.name] = this.mapArgToTensorInfo(s, t.ret)), e),
                {}
            ),
        };
    }
    mapArgToTensorInfo(t, e) {
        let s = t.name;
        return e != null && (s = e[s]), { name: s, dtype: t.type };
    }
}
function V3(n) {
    const t = tt().global;
    if (typeof t.atob < 'u') return t.atob(n);
    if (typeof Buffer < 'u') return new Buffer(n, 'base64').toString();
    throw new Error(
        'Unable to decode base64 in this environment. Missing built-in atob() or Buffer()'
    );
}
function Fv(n, t) {
    const e = Array.isArray(n) ? String.fromCharCode.apply(null, n) : V3(n);
    return t ? e : e.toLowerCase();
}
function zd(n, t, e, s = !1) {
    const r = n[t];
    return r != null ? Fv(r.s, s) : e;
}
function Bd(n, t, e) {
    const s = n[t];
    return s ? s.b : e;
}
function Md(n, t, e) {
    const s = n[t] || {},
        r = s.i != null ? s.i : s.f != null ? s.f : e;
    return typeof r == 'number' ? r : parseInt(r, 10);
}
function ig(n) {
    switch ((typeof n == 'string' && (n = Bn[n]), n)) {
        case Bn.DT_FLOAT:
        case Bn.DT_HALF:
            return 'float32';
        case Bn.DT_INT32:
        case Bn.DT_INT64:
        case Bn.DT_INT8:
        case Bn.DT_UINT8:
            return 'int32';
        case Bn.DT_BOOL:
            return 'bool';
        case Bn.DT_DOUBLE:
            return 'float32';
        case Bn.DT_STRING:
            return 'string';
        default:
            return null;
    }
}
function Ly(n, t, e) {
    const s = n[t];
    return s && s.func ? s.func.name : e;
}
function Vd(n, t, e) {
    const s = n[t];
    return s && s.type ? ig(s.type) : e;
}
function Wd(n, t, e) {
    const s = n[t];
    return s && s.list && s.list.type ? s.list.type.map((r) => ig(r)) : e;
}
function Lv(n) {
    if (!n.unknownRank)
        return n.dim != null
            ? n.dim.map((t) =>
                  typeof t.size == 'number' ? t.size : parseInt(t.size, 10)
              )
            : [];
}
function Ud(n, t, e) {
    const s = n[t];
    return s && s.shape ? Lv(s.shape) : e;
}
function Gd(n, t, e) {
    const s = n[t];
    return s
        ? ((s.list.f && s.list.f.length ? s.list.f : s.list.i) || []).map((r) =>
              typeof r == 'number' ? r : parseInt(r, 10)
          )
        : e;
}
function Hd(n, t, e, s = !1) {
    const r = n[t];
    return r && r.list && r.list.s ? r.list.s.map((o) => Fv(o, s)) : e;
}
function jd(n, t, e) {
    const s = n[t];
    return s && s.list && s.list.shape ? s.list.shape.map((r) => Lv(r)) : e;
}
function qd(n, t, e) {
    const s = n[t];
    return s && s.list && s.list.b ? s.list.b : e;
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class W3 {
    constructor(t, e, s) {
        (this.node = t),
            (this.tensorMap = e),
            (this.context = s),
            (this.inputs = []),
            (this.attrs = {}),
            (this.inputs = t.inputNames.map((r) => this.getInput(r))),
            t.rawAttrs != null &&
                (this.attrs = Object.keys(t.rawAttrs).reduce(
                    (r, o) => ((r[o] = this.getAttr(o)), r),
                    {}
                ));
    }
    getInput(t) {
        return Be(t, this.tensorMap, this.context);
    }
    getAttr(t, e) {
        const s = this.node.rawAttrs[t];
        if (s.tensor != null) return Be(t, this.tensorMap, this.context);
        if (s.i != null || s.f != null) return Md(this.node.rawAttrs, t, e);
        if (s.s != null) return zd(this.node.rawAttrs, t, e);
        if (s.b != null) return Bd(this.node.rawAttrs, t, e);
        if (s.shape != null) return Ud(this.node.rawAttrs, t, e);
        if (s.type != null) return Vd(this.node.rawAttrs, t, e);
        if (s.list != null) {
            if (s.list.i != null || s.list.f != null)
                return Gd(this.node.rawAttrs, t, e);
            if (s.list.s != null) return Hd(this.node.rawAttrs, t, e);
            if (s.list.shape != null) return jd(this.node.rawAttrs, t, e);
            if (s.list.b != null) return qd(this.node.rawAttrs, t, e);
            if (s.list.type != null) return Wd(this.node.rawAttrs, t, e);
        }
        return e;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Ge = Object.freeze(
    Object.defineProperty(
        {
            __proto__: null,
            OP_SCOPE_SUFFIX: s0,
            abs: Ce,
            acos: x0,
            acosh: w0,
            add: ct,
            addN: i$,
            all: Sf,
            any: ac,
            argMax: Zo,
            argMin: v0,
            asin: k0,
            asinh: S0,
            atan: I0,
            atan2: C0,
            atanh: $0,
            avgPool: zu,
            avgPool3d: N0,
            basicLSTMCell: E$,
            batchNorm: el,
            batchNorm2d: T0,
            batchNorm3d: E0,
            batchNorm4d: _0,
            batchToSpaceND: Bu,
            bincount: A0,
            bitwiseAnd: z$,
            booleanMaskAsync: wE,
            broadcastArgs: M$,
            broadcastTo: Go,
            buffer: Pt,
            cast: bt,
            ceil: R0,
            clipByValue: kn,
            clone: Hs,
            complex: pr,
            concat: Ie,
            concat1d: D0,
            concat2d: O0,
            concat3d: F0,
            concat4d: L0,
            conv1d: Cf,
            conv2d: mr,
            conv2dTranspose: Nf,
            conv3d: P0,
            conv3dTranspose: B0,
            cos: Mu,
            cosh: Tf,
            cosineWindow: sm,
            cumprod: lc,
            cumsum: Ef,
            denseBincount: Id,
            depthToSpace: M0,
            depthwiseConv2d: nl,
            diag: c2,
            dilation2d: V0,
            div: Et,
            divNoNan: W0,
            dot: U0,
            dropout: yx,
            einsum: Po,
            elu: sl,
            enclosingPowerOfTwo: bx,
            ensureShape: x2,
            equal: us,
            erf: G0,
            euclideanNorm: q0,
            exp: Sn,
            expandDims: Qe,
            expm1: K0,
            eye: Af,
            fft: eh,
            fill: fi,
            floor: ol,
            floorDiv: kf,
            fused: WE,
            gather: il,
            gatherND: _E,
            greater: Tn,
            greaterEqual: Er,
            ifft: Ki,
            imag: Vu,
            image: as,
            inTopKAsync: OE,
            irfft: Zf,
            isFinite: X0,
            isInf: Y0,
            isNaN: Z0,
            leakyRelu: Wu,
            less: Hi,
            lessEqual: yo,
            linalg: $x,
            linspace: H2,
            localResponseNormalization: J0,
            log: Dn,
            log1p: Uu,
            logSigmoid: Q0,
            logSoftmax: Rf,
            logSumExp: Gu,
            logicalAnd: Es,
            logicalNot: Hu,
            logicalOr: Df,
            logicalXor: tx,
            losses: xA,
            lowerBound: aN,
            matMul: Wt,
            max: Yn,
            maxPool: ju,
            maxPool3d: ex,
            maxPoolWithArgmax: hN,
            maximum: Js,
            mean: ge,
            meshgrid: fN,
            min: Gi,
            minimum: ao,
            mirrorPad: nx,
            mod: sx,
            moments: qu,
            movingAverage: SE,
            mul: U,
            multiRNNCell: wN,
            multinomial: kN,
            neg: le,
            norm: rl,
            notEqual: ti,
            oneHot: Ku,
            ones: xn,
            onesLike: On,
            op: B,
            outerProduct: NN,
            pad: _r,
            pad1d: _N,
            pad2d: RN,
            pad3d: ON,
            pad4d: LN,
            pool: rx,
            pow: gr,
            prelu: Yu,
            print: y0,
            prod: ox,
            raggedGather: GN,
            raggedRange: jN,
            raggedTensorToTensor: KN,
            rand: YN,
            randomGamma: gT,
            randomNormal: Wf,
            randomStandardNormal: xT,
            randomUniform: xo,
            randomUniformInt: kT,
            range: ei,
            real: ji,
            reciprocal: ax,
            relu: Ds,
            relu6: Uf,
            reshape: j,
            reverse: Jn,
            reverse1d: ET,
            reverse2d: AT,
            reverse3d: DT,
            reverse4d: FT,
            rfft: nh,
            round: Gf,
            rsqrt: Hf,
            scalar: At,
            scatterND: CE,
            searchSorted: Of,
            selu: jf,
            separableConv2d: qf,
            setdiff1dAsync: VT,
            sigmoid: Ss,
            sign: lx,
            signal: bA,
            sin: Kf,
            sinh: Xf,
            slice: Gt,
            slice1d: Ju,
            slice2d: Yf,
            slice3d: Qu,
            slice4d: qi,
            softmax: th,
            softplus: mi,
            spaceToBatchND: Xu,
            sparse: wA,
            sparseToDense: TE,
            spectral: yA,
            split: wn,
            sqrt: Xe,
            square: te,
            squaredDifference: Jf,
            squeeze: wo,
            stack: un,
            step: gi,
            stridedSlice: cx,
            string: vA,
            sub: kt,
            sum: St,
            tan: ux,
            tanh: Jo,
            tensor: ls,
            tensor1d: je,
            tensor2d: Mi,
            tensor3d: hx,
            tensor4d: aE,
            tensor5d: lE,
            tensor6d: cE,
            tensorScatterUpdate: hE,
            tile: jn,
            topk: px,
            transpose: Ht,
            truncatedNormal: tm,
            unique: fx,
            unsortedSegmentSum: em,
            unstack: Qn,
            upperBound: yE,
            variable: mx,
            where: qe,
            whereAsync: gx,
            zeros: Se,
            zerosLike: jt,
        },
        Symbol.toStringTag,
        { value: 'Module' }
    )
);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const U3 = (n, t, e, s = Ge) => {
    switch (n.op) {
        case 'BiasAdd':
        case 'AddV2':
        case 'Add':
            return [s.add(k('a', n, t, e), k('b', n, t, e))];
        case 'AddN':
            return [s.addN(k('tensors', n, t, e))];
        case 'FloorMod':
        case 'Mod':
            return [s.mod(k('a', n, t, e), k('b', n, t, e))];
        case 'Mul':
            return [s.mul(k('a', n, t, e), k('b', n, t, e))];
        case 'RealDiv':
        case 'Div':
            return [s.div(k('a', n, t, e), k('b', n, t, e))];
        case 'DivNoNan':
            return [s.divNoNan(k('a', n, t, e), k('b', n, t, e))];
        case 'FloorDiv':
            return [s.floorDiv(k('a', n, t, e), k('b', n, t, e))];
        case 'Sub':
            return [s.sub(k('a', n, t, e), k('b', n, t, e))];
        case 'Minimum':
            return [s.minimum(k('a', n, t, e), k('b', n, t, e))];
        case 'Maximum':
            return [s.maximum(k('a', n, t, e), k('b', n, t, e))];
        case 'Pow':
            return [s.pow(k('a', n, t, e), k('b', n, t, e))];
        case 'SquaredDifference':
            return [s.squaredDifference(k('a', n, t, e), k('b', n, t, e))];
        default:
            throw TypeError(`Node type ${n.op} is not implemented`);
    }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const G3 = (n, t, e, s = Ge) => {
    switch (n.op) {
        case 'Abs':
        case 'ComplexAbs':
            return [s.abs(k('x', n, t, e))];
        case 'Acos':
            return [s.acos(k('x', n, t, e))];
        case 'Acosh':
            return [s.acosh(k('x', n, t, e))];
        case 'Asin':
            return [s.asin(k('x', n, t, e))];
        case 'Asinh':
            return [s.asinh(k('x', n, t, e))];
        case 'Atan':
            return [s.atan(k('x', n, t, e))];
        case 'Atan2':
            return [s.atan2(k('x', n, t, e), k('y', n, t, e))];
        case 'Atanh':
            return [s.atanh(k('x', n, t, e))];
        case 'Ceil':
            return [s.ceil(k('x', n, t, e))];
        case 'Complex':
            return [s.complex(k('real', n, t, e), k('imag', n, t, e))];
        case 'Cos':
            return [s.cos(k('x', n, t, e))];
        case 'Cosh':
            return [s.cosh(k('x', n, t, e))];
        case 'Elu':
            return [s.elu(k('x', n, t, e))];
        case 'Erf':
            return [s.erf(k('x', n, t, e))];
        case 'Exp':
            return [s.exp(k('x', n, t, e))];
        case 'Expm1':
            return [s.expm1(k('x', n, t, e))];
        case 'Floor':
            return [s.floor(k('x', n, t, e))];
        case 'Log':
            return [s.log(k('x', n, t, e))];
        case 'Log1p':
            return [s.log1p(k('x', n, t, e))];
        case 'Imag':
            return [s.imag(k('x', n, t, e))];
        case 'Neg':
            return [s.neg(k('x', n, t, e))];
        case 'Reciprocal':
            return [s.reciprocal(k('x', n, t, e))];
        case 'Real':
            return [s.real(k('x', n, t, e))];
        case 'Relu':
            return [s.relu(k('x', n, t, e))];
        case 'Round':
            return [s.round(k('x', n, t, e))];
        case 'Selu':
            return [s.selu(k('x', n, t, e))];
        case 'Sigmoid':
            return [s.sigmoid(k('x', n, t, e))];
        case 'Sin':
            return [s.sin(k('x', n, t, e))];
        case 'Sign':
            return [s.sign(k('x', n, t, e))];
        case 'Sinh':
            return [s.sinh(k('x', n, t, e))];
        case 'Softplus':
            return [s.softplus(k('x', n, t, e))];
        case 'Sqrt':
            return [s.sqrt(k('x', n, t, e))];
        case 'Square':
            return [s.square(k('x', n, t, e))];
        case 'Tanh':
            return [s.tanh(k('x', n, t, e))];
        case 'Tan':
            return [s.tan(k('x', n, t, e))];
        case 'ClipByValue':
            return [
                s.clipByValue(
                    k('x', n, t, e),
                    k('clipValueMin', n, t, e),
                    k('clipValueMax', n, t, e)
                ),
            ];
        case 'Relu6':
            return [s.relu6(k('x', n, t, e))];
        case 'Rsqrt':
            return [s.rsqrt(Be(n.inputNames[0], t, e))];
        case 'LeakyRelu':
            return [s.leakyRelu(k('x', n, t, e), k('alpha', n, t, e))];
        case 'Prelu':
            return [s.prelu(k('x', n, t, e), k('alpha', n, t, e))];
        case 'IsNan':
            return [s.isNaN(Be(n.inputNames[0], t, e))];
        case 'IsInf':
            return [s.isInf(Be(n.inputNames[0], t, e))];
        case 'IsFinite':
            return [s.isFinite(Be(n.inputNames[0], t, e))];
        default:
            throw TypeError(`Node type ${n.op} is not implemented`);
    }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Vn(n, t, e = '') {
    if (!(typeof n == 'number' || typeof t == 'number')) {
        _(n.length === t.length, () => e + ` Shapes ${n} and ${t} must match`);
        for (let s = 0; s < n.length; s++) {
            const r = n[s],
                o = t[s];
            _(
                r < 0 || o < 0 || r === o,
                () => e + ` Shapes ${n} and ${t} must match`
            );
        }
    }
}
function Py(n) {
    return !(typeof n == 'number' || n.some((t) => t < 0));
}
function Di(n, t, e) {
    let s = Kd(n, e);
    const r = !Py(s);
    if (r && t.length === 0)
        throw new Error(
            `Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`
        );
    if (
        (r &&
            t.forEach((o) => {
                s = Kd(o.shape, s);
            }),
        !Py(s))
    )
        throw new Error(`Non-fully-defined elementShape: ${s}`);
    return s;
}
function Kd(n, t) {
    if (typeof n == 'number') return t;
    if (typeof t == 'number') return n;
    if (n.length !== t.length)
        throw new Error(`Incompatible ranks during merge: ${n} vs. ${t}`);
    const e = [];
    for (let s = 0; s < n.length; ++s) {
        const r = n[s],
            o = t[s];
        if (r >= 0 && o >= 0 && r !== o)
            throw new Error(`Incompatible shape during merge: ${n} vs. ${t}`);
        e[s] = r >= 0 ? r : o;
    }
    return e;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class H3 {
    constructor(t, e, s, r, o, i, a) {
        (this.name = t),
            (this.dtype = e),
            (this.maxSize = s),
            (this.elementShape = r),
            (this.identicalElementShapes = o),
            (this.dynamicSize = i),
            (this.clearAfterRead = a),
            (this.tensors = []),
            (this.closed_ = !1),
            (this.idTensor = At(0)),
            Oe(this.idTensor);
    }
    get id() {
        return this.idTensor.id;
    }
    get closed() {
        return this.closed_;
    }
    clearAndClose(t) {
        this.tensors.forEach((e) => {
            (t == null || !t.has(e.tensor.id)) && e.tensor.dispose();
        }),
            (this.tensors = []),
            (this.closed_ = !0),
            this.idTensor.dispose();
    }
    size() {
        return this.tensors.length;
    }
    read(t) {
        if (this.closed_)
            throw new Error(
                `TensorArray ${this.name} has already been closed.`
            );
        if (t < 0 || t >= this.size())
            throw new Error(
                `Tried to read from index ${t}, but array size is: ${this.size()}`
            );
        const e = this.tensors[t];
        if (e.cleared)
            throw new Error(
                `TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`
            );
        return this.clearAfterRead && (e.cleared = !0), (e.read = !0), e.tensor;
    }
    readMany(t) {
        return t.map((e) => this.read(e));
    }
    write(t, e) {
        if (this.closed_)
            throw new Error(
                `TensorArray ${this.name} has already been closed.`
            );
        if (t < 0 || (!this.dynamicSize && t >= this.maxSize))
            throw new Error(
                `Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`
            );
        const s = this.tensors[t] || {};
        if (e.dtype !== this.dtype)
            throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},
          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);
        if (
            (this.size() === 0 &&
                (this.elementShape == null || this.elementShape.length === 0) &&
                (this.elementShape = e.shape),
            Vn(
                this.elementShape,
                e.shape,
                `TensorArray ${this.name}: Could not write to TensorArray index ${t}.`
            ),
            s.read)
        )
            throw new Error(
                `TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`
            );
        if (s.written)
            throw new Error(
                `TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`
            );
        (s.tensor = e), Oe(e), (s.written = !0), (this.tensors[t] = s);
    }
    writeMany(t, e) {
        if (t.length !== e.length)
            throw new Error(
                `TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`
            );
        t.forEach((s, r) => this.write(s, e[r]));
    }
    gather(t, e) {
        if (e && e !== this.dtype)
            throw new Error(
                `TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`
            );
        if (t) t = t.slice(0, this.size());
        else {
            t = [];
            for (let r = 0; r < this.size(); r++) t.push(r);
        }
        if (t.length === 0) return ls([], [0].concat(this.elementShape));
        const s = this.readMany(t);
        return (
            Vn(this.elementShape, s[0].shape, 'TensorArray shape mismatch: '),
            un(s, 0)
        );
    }
    concat(t) {
        if (t && t !== this.dtype)
            throw new Error(
                `TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`
            );
        if (this.size() === 0) return ls([], [0].concat(this.elementShape));
        const e = [];
        for (let r = 0; r < this.size(); r++) e.push(r);
        const s = this.readMany(e);
        return (
            Vn(
                this.elementShape,
                s[0].shape,
                `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${s[0].shape})`
            ),
            Ie(s, 0)
        );
    }
    scatter(t, e) {
        if (e.dtype !== this.dtype)
            throw new Error(
                `TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`
            );
        if (t.length !== e.shape[0])
            throw new Error(
                `Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`
            );
        const s = Math.max(...t);
        if (!this.dynamicSize && s >= this.maxSize)
            throw new Error(
                `Max index must be < array size (${s}  vs. ${this.maxSize})`
            );
        this.writeMany(t, Qn(e, 0));
    }
    split(t, e) {
        if (e.dtype !== this.dtype)
            throw new Error(
                `TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`
            );
        let s = 0;
        const r = t.map((l) => ((s += l), s));
        if (s !== e.shape[0])
            throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${s}, and tensor's shape is: ${e.shape}`);
        if (!this.dynamicSize && t.length !== this.maxSize)
            throw new Error(
                `TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`
            );
        const o = s === 0 ? 0 : e.size / s,
            i = [];
        Y(() => {
            e = j(e, [1, s, o]);
            for (let l = 0; l < t.length; ++l) {
                const u = [0, l === 0 ? 0 : r[l - 1], 0],
                    h = [1, t[l], o];
                i[l] = j(Gt(e, u, h), this.elementShape);
            }
            return i;
        });
        const a = [];
        for (let l = 0; l < t.length; l++) a[l] = l;
        this.writeMany(a, i);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class uo {
    get id() {
        return this.idTensor.id;
    }
    constructor(t, e, s, r = -1) {
        (this.tensors = t),
            (this.elementShape = e),
            (this.elementDtype = s),
            t != null &&
                t.forEach((o) => {
                    if (s !== o.dtype)
                        throw new Error(
                            `Invalid data types; op elements ${s}, but list elements ${o.dtype}`
                        );
                    Vn(e, o.shape, 'TensorList shape mismatch: '), Oe(o);
                }),
            (this.idTensor = At(0)),
            (this.maxNumElements = r),
            Oe(this.idTensor);
    }
    copy() {
        return new uo([...this.tensors], this.elementShape, this.elementDtype);
    }
    clearAndClose(t) {
        this.tensors.forEach((e) => {
            (t == null || !t.has(e.id)) && e.dispose();
        }),
            (this.tensors.length = 0),
            this.idTensor.dispose();
    }
    size() {
        return this.tensors.length;
    }
    stack(t, e, s = -1) {
        if (e !== this.elementDtype)
            throw new Error(
                `Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`
            );
        if (s !== -1 && this.tensors.length !== s)
            throw new Error(
                `Operation expected a list with ${s} elements but got a list with ${this.tensors.length} elements.`
            );
        Vn(t, this.elementShape, 'TensorList shape mismatch: ');
        const r = Di(this.elementShape, this.tensors, t);
        return Y(() => {
            const o = this.tensors.map((i) => j(i, r));
            return un(o, 0);
        });
    }
    popBack(t, e) {
        if (e !== this.elementDtype)
            throw new Error(
                `Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`
            );
        if (this.size() === 0)
            throw new Error('Trying to pop from an empty list.');
        const s = Di(this.elementShape, this.tensors, t),
            r = this.tensors.pop();
        return (
            (r.kept = !1),
            Vn(r.shape, t, 'TensorList shape mismatch: '),
            j(r, s)
        );
    }
    pushBack(t) {
        if (t.dtype !== this.elementDtype)
            throw new Error(
                `Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`
            );
        if (
            (Vn(t.shape, this.elementShape, 'TensorList shape mismatch: '),
            this.maxNumElements === this.size())
        )
            throw new Error('Trying to push element into a full list.');
        Oe(t), this.tensors.push(t);
    }
    resize(t) {
        if (t < 0)
            throw new Error(
                `TensorListResize expects size to be non-negative. Got: ${t}`
            );
        if (this.maxNumElements !== -1 && t > this.maxNumElements)
            throw new Error(
                `TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`
            );
        const e = new uo(
            [],
            this.elementShape,
            this.elementDtype,
            this.maxNumElements
        );
        e.tensors.length = t;
        for (let s = 0; s < Math.min(this.tensors.length, t); ++s)
            e.tensors[s] = this.tensors[s];
        return e;
    }
    getItem(t, e, s) {
        if (s !== this.elementDtype)
            throw new Error(
                `Invalid data types; op elements ${s}, but list elements ${this.elementDtype}`
            );
        if (t < 0 || t > this.tensors.length)
            throw new Error(
                `Trying to access element ${t} in a list with ${this.tensors.length} elements.`
            );
        if (this.tensors[t] == null)
            throw new Error(`element at index ${t} is null.`);
        Vn(this.tensors[t].shape, e, 'TensorList shape mismatch: ');
        const r = Di(this.elementShape, this.tensors, e);
        return j(this.tensors[t], r);
    }
    setItem(t, e) {
        if (e.dtype !== this.elementDtype)
            throw new Error(
                `Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`
            );
        if (t < 0 || (this.maxNumElements !== -1 && t >= this.maxNumElements))
            throw new Error(
                `Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`
            );
        Vn(this.elementShape, e.shape, 'TensorList shape mismatch: '),
            Oe(e),
            this.tensors[t] != null && (this.tensors[t].kept = !1),
            (this.tensors[t] = e);
    }
    gather(t, e, s) {
        if (e !== this.elementDtype)
            throw new Error(
                `Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`
            );
        Vn(this.elementShape, s, 'TensorList shape mismatch: '),
            (t = t.slice(0, this.size()));
        const r = Di(this.elementShape, this.tensors, s);
        return t.length === 0
            ? ls([], [0].concat(r))
            : Y(() => {
                  const o = t.map((i) => j(this.tensors[i], r));
                  return un(o, 0);
              });
    }
    concat(t, e) {
        if (t && t !== this.elementDtype)
            throw new Error(
                `TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`
            );
        Vn(this.elementShape, e, 'TensorList shape mismatch: ');
        const s = Di(this.elementShape, this.tensors, e);
        return this.size() === 0
            ? ls([], [0].concat(s))
            : Y(() => {
                  const r = this.tensors.map((o) => j(o, s));
                  return Ie(r, 0);
              });
    }
}
function j3(n, t, e) {
    const s = n.dtype;
    if (n.shape.length < 1)
        throw new Error(
            `Tensor must be at least a vector, but saw shape: ${n.shape}`
        );
    if (n.dtype !== e)
        throw new Error(
            `Invalid data types; op elements ${n.dtype}, but list elements ${e}`
        );
    const r = n.shape.slice(1);
    Vn(r, t, 'TensorList shape mismatch: ');
    const o = Qn(n);
    return new uo(o, t, s);
}
function q3(n, t, e, s) {
    return new uo([], n, t, s);
}
function K3(n, t, e, s) {
    if (t.length !== n.shape[0])
        throw new Error(
            `Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${n.shape[0]}`
        );
    const r = Math.max(...t);
    if (s != null && s !== -1 && r >= s)
        throw new Error(`Max index must be < array size (${r}  vs. ${s})`);
    const o = new uo([], e, n.dtype, s),
        i = Qn(n, 0);
    return (
        t.forEach((a, l) => {
            o.setItem(a, i[l]);
        }),
        o
    );
}
function X3(n, t, e) {
    let s = 0;
    const r = t.map((u) => ((s += u), s));
    if (s !== n.shape[0])
        throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${s}, and tensor's shape is: ${n.shape}`);
    const o = n.shape.slice(1),
        i = Kd(o, e),
        a = s === 0 ? 0 : n.size / s,
        l = Y(() => {
            const u = [];
            n = j(n, [1, s, a]);
            for (let h = 0; h < t.length; ++h) {
                const p = [0, h === 0 ? 0 : r[h - 1], 0],
                    f = [1, t[h], a];
                u[h] = j(Gt(n, p, f), i);
            }
            return n.dispose(), u;
        }),
        c = new uo([], e, n.dtype, t.length);
    for (let u = 0; u < l.length; u++) c.setItem(u, l[u]);
    return c;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Y3 = async (n, t, e) => {
    switch (n.op) {
        case 'If':
        case 'StatelessIf': {
            const s = k('thenBranch', n, t, e),
                r = k('elseBranch', n, t, e),
                o = k('cond', n, t, e),
                i = k('args', n, t, e);
            return (await o.data())[0]
                ? e.functionMap[s].executeFunctionAsync(
                      i,
                      e.tensorArrayMap,
                      e.tensorListMap
                  )
                : e.functionMap[r].executeFunctionAsync(
                      i,
                      e.tensorArrayMap,
                      e.tensorListMap
                  );
        }
        case 'While':
        case 'StatelessWhile': {
            const s = k('body', n, t, e),
                r = k('cond', n, t, e),
                o = k('args', n, t, e),
                i = await e.functionMap[r].executeFunctionAsync(
                    o,
                    e.tensorArrayMap,
                    e.tensorListMap
                ),
                a = o.map((u) => u.id);
            let l = await i[0].data();
            i.forEach((u) => {
                !u.kept && a.indexOf(u.id) === -1 && u.dispose();
            });
            let c = o;
            for (; l[0]; ) {
                const u = c;
                c = await e.functionMap[s].executeFunctionAsync(
                    c,
                    e.tensorArrayMap,
                    e.tensorListMap
                );
                const h = c.map((p) => p.id);
                u.forEach((p) => {
                    !p.kept &&
                        a.indexOf(p.id) === -1 &&
                        h.indexOf(p.id) === -1 &&
                        p.dispose();
                });
                const d = await e.functionMap[r].executeFunctionAsync(
                    c,
                    e.tensorArrayMap,
                    e.tensorListMap
                );
                (l = await d[0].data()),
                    d.forEach((p) => {
                        !p.kept &&
                            a.indexOf(p.id) === -1 &&
                            h.indexOf(p.id) === -1 &&
                            p.dispose();
                    });
            }
            return c;
        }
        case 'LoopCond': {
            const s = k('pred', n, t, e);
            return [Vs(s)];
        }
        case 'Switch': {
            const s = k('pred', n, t, e);
            let r = k('data', n, t, e);
            return (
                r.kept || (r = Vs(r)),
                (await s.data())[0] ? [void 0, r] : [r, void 0]
            );
        }
        case 'Merge': {
            const s = n.inputNames.find((r) => Be(r, t, e) !== void 0);
            if (s) {
                const r = Be(s, t, e);
                return [Vs(r)];
            }
            return;
        }
        case 'Enter': {
            const s = k('frameName', n, t, e),
                r = k('tensor', n, t, e);
            return e.enterFrame(s), [Vs(r)];
        }
        case 'Exit': {
            const s = k('tensor', n, t, e);
            return e.exitFrame(), [Vs(s)];
        }
        case 'NextIteration': {
            const s = k('tensor', n, t, e);
            return e.nextIteration(), [Vs(s)];
        }
        case 'TensorArrayV3': {
            const s = k('size', n, t, e),
                r = k('dtype', n, t, e),
                o = k('elementShape', n, t, e),
                i = k('dynamicSize', n, t, e),
                a = k('clearAfterRead', n, t, e),
                l = k('identicalElementShapes', n, t, e),
                c = k('name', n, t, e),
                u = new H3(c, r, s, o, l, i, a);
            return e.addTensorArray(u), [u.idTensor, At(1)];
        }
        case 'TensorArrayWriteV3': {
            const s = k('tensorArrayId', n, t, e),
                r = k('index', n, t, e),
                o = k('tensor', n, t, e),
                i = e.getTensorArray(s.id);
            return i.write(r, o), [i.idTensor];
        }
        case 'TensorArrayReadV3': {
            const s = k('tensorArrayId', n, t, e),
                r = k('index', n, t, e);
            return [e.getTensorArray(s.id).read(r)];
        }
        case 'TensorArrayGatherV3': {
            const s = k('tensorArrayId', n, t, e),
                r = k('indices', n, t, e),
                o = k('dtype', n, t, e);
            return [e.getTensorArray(s.id).gather(r, o)];
        }
        case 'TensorArrayScatterV3': {
            const s = k('tensorArrayId', n, t, e),
                r = k('indices', n, t, e),
                o = k('tensor', n, t, e),
                i = e.getTensorArray(s.id);
            return i.scatter(r, o), [i.idTensor];
        }
        case 'TensorArrayConcatV3': {
            const s = k('tensorArrayId', n, t, e),
                r = e.getTensorArray(s.id),
                o = k('dtype', n, t, e);
            return [r.concat(o)];
        }
        case 'TensorArraySplitV3': {
            const s = k('tensorArrayId', n, t, e),
                r = k('tensor', n, t, e),
                o = k('lengths', n, t, e),
                i = e.getTensorArray(s.id);
            return i.split(o, r), [i.idTensor];
        }
        case 'TensorArraySizeV3': {
            const s = k('tensorArrayId', n, t, e),
                r = e.getTensorArray(s.id);
            return [At(r.size(), 'int32')];
        }
        case 'TensorArrayCloseV3': {
            const s = k('tensorArrayId', n, t, e),
                r = e.getTensorArray(s.id);
            return r.clearAndClose(), [r.idTensor];
        }
        case 'TensorListSetItem': {
            const s = k('tensorListId', n, t, e),
                r = k('index', n, t, e),
                o = k('tensor', n, t, e),
                i = e.getTensorList(s.id);
            return i.setItem(r, o), [i.idTensor];
        }
        case 'TensorListGetItem': {
            const s = k('tensorListId', n, t, e),
                r = k('index', n, t, e),
                o = k('elementShape', n, t, e),
                i = k('elementDType', n, t, e);
            return [e.getTensorList(s.id).getItem(r, o, i)];
        }
        case 'TensorListScatterV2':
        case 'TensorListScatter': {
            const s = k('indices', n, t, e),
                r = k('tensor', n, t, e),
                o = k('elementShape', n, t, e),
                i = k('numElements', n, t, e),
                a = K3(r, s, o, i);
            return e.addTensorList(a), [a.idTensor];
        }
        case 'TensorListReserve':
        case 'EmptyTensorList': {
            const s = k('elementShape', n, t, e),
                r = k('elementDType', n, t, e);
            let o;
            n.op === 'TensorListReserve'
                ? (o = 'numElements')
                : (o = 'maxNumElements');
            const i = k(o, n, t, e),
                a = n.op === 'TensorListReserve' ? -1 : i,
                l = q3(s, r, i, a);
            return e.addTensorList(l), [l.idTensor];
        }
        case 'TensorListGather': {
            const s = k('tensorListId', n, t, e),
                r = k('indices', n, t, e),
                o = k('elementShape', n, t, e),
                i = k('elementDType', n, t, e);
            return [e.getTensorList(s.id).gather(r, i, o)];
        }
        case 'TensorListStack': {
            const s = k('tensorListId', n, t, e),
                r = k('elementShape', n, t, e),
                o = k('elementDType', n, t, e),
                i = k('numElements', n, t, e);
            return [e.getTensorList(s.id).stack(r, o, i)];
        }
        case 'TensorListFromTensor': {
            const s = k('tensor', n, t, e),
                r = k('elementShape', n, t, e),
                o = k('elementDType', n, t, e),
                i = j3(s, r, o);
            return e.addTensorList(i), [i.idTensor];
        }
        case 'TensorListConcat':
        case 'TensorListConcatV2': {
            const s = k('tensorListId', n, t, e),
                r = e.getTensorList(s.id),
                o = k('dtype', n, t, e),
                i = k('elementShape', n, t, e);
            return [r.concat(o, i)];
        }
        case 'TensorListPushBack': {
            const s = k('tensorListId', n, t, e),
                r = k('tensor', n, t, e),
                o = e.getTensorList(s.id);
            return o.pushBack(r), [o.idTensor];
        }
        case 'TensorListPopBack': {
            const s = k('tensorListId', n, t, e),
                r = k('elementShape', n, t, e),
                o = k('elementDType', n, t, e);
            return [e.getTensorList(s.id).popBack(r, o)];
        }
        case 'TensorListSplit': {
            const s = k('tensor', n, t, e),
                r = k('elementShape', n, t, e),
                o = k('lengths', n, t, e),
                i = X3(s, o, r);
            return e.addTensorList(i), [i.idTensor];
        }
        case 'TensorListLength': {
            const s = k('tensorListId', n, t, e),
                r = e.getTensorList(s.id);
            return [At(r.size(), 'int32')];
        }
        case 'TensorListResize': {
            const s = k('tensorListId', n, t, e),
                r = k('size', n, t, e),
                i = e.getTensorList(s.id).resize(r);
            return e.addTensorList(i), [i.idTensor];
        }
        default:
            throw TypeError(`Node type ${n.op} is not implemented`);
    }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function zy(n, t, e) {
    const [s, r] = k('fusedOps', n, t, e),
        o = s === 'biasadd',
        i = !o,
        a = r === 'prelu',
        l = s === 'fusedbatchnorm',
        c = k('numArgs', n, t, e);
    if (o) {
        if (a && c !== 2)
            throw new Error(
                'FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.'
            );
        if (!a && o && c !== 1)
            throw new Error(
                'FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.'
            );
    }
    if (l)
        throw new Error(
            'FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported'
        );
    const u = k('strides', n, t, e),
        h = Hl(n, t, e),
        d = k('dataFormat', n, t, e).toUpperCase(),
        p = k('dilations', n, t, e);
    let [f, m] = k('args', n, t, e);
    i && ((m = f), (f = void 0));
    const g = k('leakyreluAlpha', n, t, e);
    return {
        stride: u,
        pad: h,
        dataFormat: d,
        dilations: p,
        biasArg: f,
        preluArg: m,
        activationFunc: r,
        leakyreluAlpha: g,
    };
}
const Z3 = (n, t, e, s = Ge) => {
    switch (n.op) {
        case 'Conv1D': {
            const r = k('stride', n, t, e),
                o = k('pad', n, t, e),
                i = k('dataFormat', n, t, e).toUpperCase(),
                a = k('dilation', n, t, e);
            return [
                s.conv1d(k('x', n, t, e), k('filter', n, t, e), r, o, i, a),
            ];
        }
        case 'Conv2D': {
            const r = k('strides', n, t, e),
                o = Hl(n, t, e),
                i = k('dataFormat', n, t, e).toUpperCase(),
                a = k('dilations', n, t, e);
            return [
                s.conv2d(
                    k('x', n, t, e),
                    k('filter', n, t, e),
                    [r[1], r[2]],
                    o,
                    i,
                    [a[1], a[2]]
                ),
            ];
        }
        case '_FusedConv2D': {
            const {
                stride: r,
                pad: o,
                dataFormat: i,
                dilations: a,
                biasArg: l,
                preluArg: c,
                activationFunc: u,
                leakyreluAlpha: h,
            } = zy(n, t, e);
            return [
                s.fused.conv2d({
                    x: k('x', n, t, e),
                    filter: k('filter', n, t, e),
                    strides: [r[1], r[2]],
                    pad: o,
                    dataFormat: i,
                    dilations: [a[1], a[2]],
                    bias: l,
                    activation: u,
                    preluActivationWeights: c,
                    leakyreluAlpha: h,
                }),
            ];
        }
        case 'FusedDepthwiseConv2dNative': {
            const {
                stride: r,
                pad: o,
                dataFormat: i,
                dilations: a,
                biasArg: l,
                preluArg: c,
                activationFunc: u,
                leakyreluAlpha: h,
            } = zy(n, t, e);
            return [
                s.fused.depthwiseConv2d({
                    x: k('x', n, t, e),
                    filter: k('filter', n, t, e),
                    strides: [r[1], r[2]],
                    pad: o,
                    dataFormat: i,
                    dilations: [a[1], a[2]],
                    bias: l,
                    activation: u,
                    preluActivationWeights: c,
                    leakyreluAlpha: h,
                }),
            ];
        }
        case 'Conv2DBackpropInput':
        case 'Conv2dTranspose': {
            const r = k('outputShape', n, t, e),
                o = k('strides', n, t, e),
                i = Hl(n, t, e);
            return [
                s.conv2dTranspose(
                    k('x', n, t, e),
                    k('filter', n, t, e),
                    r,
                    [o[1], o[2]],
                    i
                ),
            ];
        }
        case 'DepthwiseConv2dNative':
        case 'DepthwiseConv2d': {
            const r = k('strides', n, t, e),
                o = Hl(n, t, e),
                i = k('dilations', n, t, e),
                a = k('dataFormat', n, t, e).toUpperCase();
            return [
                s.depthwiseConv2d(
                    k('input', n, t, e),
                    k('filter', n, t, e),
                    [r[1], r[2]],
                    o,
                    a,
                    [i[1], i[2]]
                ),
            ];
        }
        case 'Conv3D': {
            const r = k('strides', n, t, e),
                o = k('pad', n, t, e),
                i = k('dataFormat', n, t, e).toUpperCase(),
                a = k('dilations', n, t, e);
            return [
                s.conv3d(
                    k('x', n, t, e),
                    k('filter', n, t, e),
                    [r[1], r[2], r[3]],
                    o,
                    i,
                    [a[1], a[2], a[3]]
                ),
            ];
        }
        case 'AvgPool': {
            const r = k('strides', n, t, e),
                o = k('pad', n, t, e),
                i = k('kernelSize', n, t, e);
            return [s.avgPool(k('x', n, t, e), [i[1], i[2]], [r[1], r[2]], o)];
        }
        case 'MaxPool': {
            const r = k('strides', n, t, e),
                o = k('pad', n, t, e),
                i = k('kernelSize', n, t, e);
            return [s.maxPool(k('x', n, t, e), [i[1], i[2]], [r[1], r[2]], o)];
        }
        case 'MaxPoolWithArgmax': {
            const r = k('strides', n, t, e),
                o = k('pad', n, t, e),
                i = k('kernelSize', n, t, e),
                a = k('includeBatchInIndex', n, t, e),
                { result: l, indexes: c } = s.maxPoolWithArgmax(
                    k('x', n, t, e),
                    [i[1], i[2]],
                    [r[1], r[2]],
                    o,
                    a
                );
            return [l, c];
        }
        case 'AvgPool3D': {
            const r = k('strides', n, t, e),
                o = k('pad', n, t, e),
                i = k('kernelSize', n, t, e);
            return [
                s.avgPool3d(
                    k('x', n, t, e),
                    [i[1], i[2], i[3]],
                    [r[1], r[2], r[3]],
                    o
                ),
            ];
        }
        case 'MaxPool3D': {
            const r = k('strides', n, t, e),
                o = k('pad', n, t, e),
                i = k('kernelSize', n, t, e);
            return [
                s.maxPool3d(
                    k('x', n, t, e),
                    [i[1], i[2], i[3]],
                    [r[1], r[2], r[3]],
                    o
                ),
            ];
        }
        case 'Dilation2D': {
            const r = k('strides', n, t, e),
                o = k('pad', n, t, e),
                i = k('dilations', n, t, e),
                a = r[1],
                l = r[2],
                c = i[1],
                u = i[2];
            return [
                s.dilation2d(
                    k('x', n, t, e),
                    k('filter', n, t, e),
                    [a, l],
                    o,
                    [c, u],
                    'NHWC'
                ),
            ];
        }
        default:
            throw TypeError(`Node type ${n.op} is not implemented`);
    }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const J3 = (n, t, e, s = Ge) => {
    switch (n.op) {
        case 'Fill': {
            const r = k('shape', n, t, e),
                o = k('dtype', n, t, e),
                i = k('value', n, t, e);
            return [s.fill(r, i, o)];
        }
        case 'LinSpace': {
            const r = k('start', n, t, e),
                o = k('stop', n, t, e),
                i = k('num', n, t, e);
            return [s.linspace(r, o, i)];
        }
        case 'Multinomial': {
            const r = k('logits', n, t, e),
                o = k('numSamples', n, t, e),
                i = k('seed', n, t, e);
            return [s.multinomial(r, o, i)];
        }
        case 'OneHot': {
            const r = k('indices', n, t, e),
                o = k('depth', n, t, e),
                i = k('onValue', n, t, e),
                a = k('offValue', n, t, e),
                l = k('dtype', n, t, e);
            return [s.oneHot(r, o, i, a, l)];
        }
        case 'Ones':
            return [s.ones(k('shape', n, t, e), k('dtype', n, t, e))];
        case 'OnesLike':
            return [s.onesLike(k('x', n, t, e))];
        case 'RandomStandardNormal':
            return [
                s.randomStandardNormal(
                    k('shape', n, t, e),
                    k('dtype', n, t, e),
                    k('seed', n, t, e)
                ),
            ];
        case 'RandomUniform':
            return [
                s.randomUniform(
                    k('shape', n, t, e),
                    k('minval', n, t, e),
                    k('maxval', n, t, e),
                    k('dtype', n, t, e)
                ),
            ];
        case 'RandomUniformInt':
            return [
                s.randomUniformInt(
                    k('shape', n, t, e),
                    k('minval', n, t, e),
                    k('maxval', n, t, e),
                    k('seed', n, t, e)
                ),
            ];
        case 'Range': {
            const r = k('start', n, t, e),
                o = k('stop', n, t, e),
                i = k('step', n, t, e);
            return [s.range(r, o, i, k('dtype', n, t, e))];
        }
        case 'TruncatedNormal': {
            const r = k('shape', n, t, e),
                o = k('mean', n, t, e),
                i = k('stdDev', n, t, e),
                a = k('seed', n, t, e);
            return [s.truncatedNormal(r, o, i, k('dtype', n, t, e), a)];
        }
        case 'Zeros':
            return [s.zeros(k('shape', n, t, e), k('dtype', n, t, e))];
        case 'ZerosLike':
            return [s.zerosLike(k('x', n, t, e))];
        default:
            throw TypeError(`Node type ${n.op} is not implemented`);
    }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function jh(n, t, e) {
    const s = k('boxes', n, t, e),
        r = k('scores', n, t, e),
        o = k('maxOutputSize', n, t, e),
        i = k('iouThreshold', n, t, e),
        a = k('scoreThreshold', n, t, e),
        l = k('softNmsSigma', n, t, e);
    return {
        boxes: s,
        scores: r,
        maxOutputSize: o,
        iouThreshold: i,
        scoreThreshold: a,
        softNmsSigma: l,
    };
}
const Q3 = async (n, t, e, s, r = Ge) => {
    switch (n.op) {
        case 'NonMaxSuppressionV5': {
            const {
                    boxes: o,
                    scores: i,
                    maxOutputSize: a,
                    iouThreshold: l,
                    scoreThreshold: c,
                    softNmsSigma: u,
                } = jh(n, t, e),
                h = await r.image.nonMaxSuppressionWithScoreAsync(
                    o,
                    i,
                    a,
                    l,
                    c,
                    u
                );
            return [h.selectedIndices, h.selectedScores];
        }
        case 'NonMaxSuppressionV4': {
            const {
                    boxes: o,
                    scores: i,
                    maxOutputSize: a,
                    iouThreshold: l,
                    scoreThreshold: c,
                } = jh(n, t, e),
                u = k('padToMaxOutputSize', n, t, e),
                h = await r.image.nonMaxSuppressionPaddedAsync(
                    o,
                    i,
                    a,
                    l,
                    c,
                    u
                );
            return [h.selectedIndices, h.validOutputs];
        }
        case 'NonMaxSuppressionV3':
        case 'NonMaxSuppressionV2': {
            const {
                boxes: o,
                scores: i,
                maxOutputSize: a,
                iouThreshold: l,
                scoreThreshold: c,
            } = jh(n, t, e);
            return [await r.image.nonMaxSuppressionAsync(o, i, a, l, c)];
        }
        case 'Where': {
            const o = r.cast(k('condition', n, t, e), 'bool'),
                i = [await r.whereAsync(o)];
            return o.dispose(), i;
        }
        case 'ListDiff':
            return r.setdiff1dAsync(k('x', n, t, e), k('y', n, t, e));
        default:
            throw TypeError(`Node type ${n.op} is not implemented`);
    }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const tL = (n, t, e, s = Ge) => {
    switch (n.op) {
        case 'LowerBound': {
            const r = k('sortedSequence', n, t, e),
                o = k('values', n, t, e);
            return [s.lowerBound(r, o)];
        }
        case 'TopKV2': {
            const r = k('x', n, t, e),
                o = k('k', n, t, e),
                i = k('sorted', n, t, e),
                a = s.topk(r, o, i);
            return [a.values, a.indices];
        }
        case 'UpperBound': {
            const r = k('sortedSequence', n, t, e),
                o = k('values', n, t, e);
            return [s.upperBound(r, o)];
        }
        case 'Unique': {
            const r = k('x', n, t, e),
                o = s.unique(r);
            return [o.values, o.indices];
        }
        case 'UniqueV2': {
            const r = k('x', n, t, e),
                o = k('axis', n, t, e),
                i = s.unique(r, o);
            return [i.values, i.indices];
        }
        default:
            throw TypeError(`Node type ${n.op} is not implemented`);
    }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const eL = (n, t, e, s = Ge) => {
    switch (n.op) {
        case 'Const':
            return t[n.name];
        case 'PlaceholderWithDefault':
            const r = k('default', n, t, e);
            return [Be(n.name, t, e) || r];
        case 'Placeholder':
            return [Be(n.name, t, e)];
        case 'Identity':
        case 'StopGradient':
        case 'FakeQuantWithMinMaxVars': {
            const u = k('x', n, t, e);
            return [Vs(u)];
        }
        case 'IdentityN':
            return k('x', n, t, e).map((u) => Vs(u));
        case 'Snapshot':
            const o = k('x', n, t, e);
            return [Vs(o)];
        case 'Shape':
            return [s.tensor1d(k('x', n, t, e).shape, 'int32')];
        case 'ShapeN':
            return k('x', n, t, e).map((u) => s.tensor1d(u.shape));
        case 'Size':
            return [s.scalar(k('x', n, t, e).size, 'int32')];
        case 'Rank':
            return [s.scalar(k('x', n, t, e).rank, 'int32')];
        case 'NoOp':
            return [s.scalar(1)];
        case 'Print':
            const i = k('x', n, t, e),
                a = k('data', n, t, e),
                l = k('message', n, t, e),
                c = k('summarize', n, t, e);
            console.warn(
                'The graph has a tf.print() operation,usually used for debugging, which slows down performance.'
            ),
                console.log(l);
            for (let u = 0; u < a.length; u++)
                console.log(
                    Array.prototype.slice.call(a[u].dataSync()).slice(0, c)
                );
            return [i];
        default:
            throw TypeError(`Node type ${n.op} is not implemented`);
    }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class nL {
    get id() {
        return this.handle.id;
    }
    constructor(t, e) {
        (this.keyDType = t),
            (this.valueDType = e),
            (this.handle = At(0)),
            (this.tensorMap = new Map()),
            Oe(this.handle);
    }
    clearAndClose() {
        this.tensorMap.forEach((t) => t.dispose()),
            this.tensorMap.clear(),
            this.handle.dispose();
    }
    size() {
        return this.tensorMap.size;
    }
    tensorSize() {
        return At(this.size(), 'int32');
    }
    async import(t, e) {
        this.checkKeyAndValueTensor(t, e);
        const s = await t.data();
        return (
            this.tensorMap.forEach((r) => r.dispose()),
            this.tensorMap.clear(),
            Y(() => {
                const r = Qn(e),
                    o = s.length,
                    i = r.length;
                _(
                    o === i,
                    () =>
                        `The number of elements doesn't match, keys has ${o} elements, the values has ${i} elements.`
                );
                for (let a = 0; a < o; a++) {
                    const l = s[a],
                        c = r[a];
                    Oe(c), this.tensorMap.set(l, c);
                }
                return this.handle;
            })
        );
    }
    async find(t, e) {
        this.checkKeyAndValueTensor(t, e);
        const s = await t.data();
        return Y(() => {
            const r = [];
            for (let o = 0; o < s.length; o++) {
                const i = s[o],
                    a = this.findWithDefault(i, e);
                r.push(a);
            }
            return un(r);
        });
    }
    findWithDefault(t, e) {
        const s = this.tensorMap.get(t);
        return s ?? e;
    }
    checkKeyAndValueTensor(t, e) {
        if (t.dtype !== this.keyDType)
            throw new Error(
                `Expect key dtype ${this.keyDType}, but got ${t.dtype}`
            );
        if (e.dtype !== this.valueDType)
            throw new Error(
                `Expect value dtype ${this.valueDType}, but got ${e.dtype}`
            );
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const sL = async (n, t, e, s) => {
    switch (n.op) {
        case 'HashTable':
        case 'HashTableV2': {
            const r = s.getHashTableHandleByName(n.name);
            if (r != null) return [r];
            {
                const o = k('keyDType', n, t, e),
                    i = k('valueDType', n, t, e),
                    a = new nL(o, i);
                return s.addHashTable(n.name, a), [a.handle];
            }
        }
        case 'InitializeTable':
        case 'InitializeTableV2':
        case 'LookupTableImport':
        case 'LookupTableImportV2': {
            const r = k('tableHandle', n, t, e, s),
                o = k('keys', n, t, e),
                i = k('values', n, t, e);
            return [await s.getHashTableById(r.id).import(o, i)];
        }
        case 'LookupTableFind':
        case 'LookupTableFindV2': {
            const r = k('tableHandle', n, t, e, s),
                o = k('keys', n, t, e),
                i = k('defaultValue', n, t, e);
            return [await s.getHashTableById(r.id).find(o, i)];
        }
        case 'LookupTableSize':
        case 'LookupTableSizeV2': {
            const r = k('tableHandle', n, t, e, s);
            return [s.getHashTableById(r.id).tensorSize()];
        }
        default:
            throw TypeError(`Node type ${n.op} is not implemented`);
    }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const rL = (n, t, e, s = Ge) => {
    switch (n.op) {
        case 'ResizeBilinear': {
            const r = k('images', n, t, e),
                o = k('size', n, t, e),
                i = k('alignCorners', n, t, e),
                a = k('halfPixelCenters', n, t, e);
            return [s.image.resizeBilinear(r, [o[0], o[1]], i, a)];
        }
        case 'ResizeNearestNeighbor': {
            const r = k('images', n, t, e),
                o = k('size', n, t, e),
                i = k('alignCorners', n, t, e),
                a = k('halfPixelCenters', n, t, e);
            return [s.image.resizeNearestNeighbor(r, [o[0], o[1]], i, a)];
        }
        case 'CropAndResize': {
            const r = k('image', n, t, e),
                o = k('boxes', n, t, e),
                i = k('boxInd', n, t, e),
                a = k('cropSize', n, t, e),
                l = k('method', n, t, e),
                c = k('extrapolationValue', n, t, e);
            return [s.image.cropAndResize(r, o, i, a, l, c)];
        }
        case 'ImageProjectiveTransformV3': {
            const r = k('images', n, t, e),
                o = k('transforms', n, t, e),
                i = k('outputShape', n, t, e),
                a = k('fillValue', n, t, e),
                l = k('interpolation', n, t, e),
                c = k('fillMode', n, t, e);
            return [
                s.image.transform(r, o, l.toLowerCase(), c.toLowerCase(), a, i),
            ];
        }
        default:
            throw TypeError(`Node type ${n.op} is not implemented`);
    }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const oL = (n, t, e, s = Ge) => {
    switch (n.op) {
        case 'Equal':
            return [s.equal(k('a', n, t, e), k('b', n, t, e))];
        case 'NotEqual':
            return [s.notEqual(k('a', n, t, e), k('b', n, t, e))];
        case 'Greater':
            return [s.greater(k('a', n, t, e), k('b', n, t, e))];
        case 'GreaterEqual':
            return [s.greaterEqual(k('a', n, t, e), k('b', n, t, e))];
        case 'Less':
            return [s.less(k('a', n, t, e), k('b', n, t, e))];
        case 'LessEqual':
            return [s.lessEqual(k('a', n, t, e), k('b', n, t, e))];
        case 'LogicalAnd':
            return [s.logicalAnd(k('a', n, t, e), k('b', n, t, e))];
        case 'LogicalNot':
            return [s.logicalNot(k('a', n, t, e))];
        case 'LogicalOr':
            return [s.logicalOr(k('a', n, t, e), k('b', n, t, e))];
        case 'Select':
        case 'SelectV2':
            return [
                s.where(
                    k('condition', n, t, e),
                    k('a', n, t, e),
                    k('b', n, t, e)
                ),
            ];
        case 'BitwiseAnd':
            return [s.bitwiseAnd(k('a', n, t, e), k('b', n, t, e))];
        default:
            throw TypeError(`Node type ${n.op} is not implemented`);
    }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const iL = (n, t, e, s = Ge) => {
    switch (n.op) {
        case 'BatchMatMul':
        case 'BatchMatMulV2':
        case 'MatMul':
            return [
                s.matMul(
                    k('a', n, t, e),
                    k('b', n, t, e),
                    k('transposeA', n, t, e),
                    k('transposeB', n, t, e)
                ),
            ];
        case 'Einsum':
            return [s.einsum(k('equation', n, t, e), ...k('tensors', n, t, e))];
        case 'Transpose':
            return [s.transpose(k('x', n, t, e), k('perm', n, t, e))];
        case '_FusedMatMul':
            const [r, o] = k('fusedOps', n, t, e),
                i = r === 'biasadd',
                a = o === 'prelu',
                l = k('numArgs', n, t, e),
                c = k('leakyreluAlpha', n, t, e);
            if (i) {
                if (a && l !== 2)
                    throw new Error(
                        'Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.'
                    );
                if (!a && l !== 1)
                    throw new Error(
                        'Fused MatMul with BiasAdd must have one extra argument: bias.'
                    );
            }
            const [u, h] = k('args', n, t, e);
            return [
                s.fused.matMul({
                    a: k('a', n, t, e),
                    b: k('b', n, t, e),
                    transposeA: k('transposeA', n, t, e),
                    transposeB: k('transposeB', n, t, e),
                    bias: u,
                    activation: o,
                    preluActivationWeights: h,
                    leakyreluAlpha: c,
                }),
            ];
        case 'MatrixBandPart':
            return [
                s.linalg.bandPart(
                    k('a', n, t, e),
                    k('numLower', n, t, e),
                    k('numUpper', n, t, e)
                ),
            ];
        default:
            throw TypeError(`Node type ${n.op} is not implemented`);
    }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const aL = (n, t, e, s = Ge) => {
    switch (n.op) {
        case 'EuclideanNorm':
            return [
                s.euclideanNorm(
                    k('x', n, t, e),
                    k('axis', n, t, e),
                    k('keepDims', n, t, e)
                ),
            ];
        case 'FusedBatchNorm':
        case 'FusedBatchNormV2':
            return [
                s.batchNorm(
                    k('x', n, t, e),
                    k('mean', n, t, e),
                    k('variance', n, t, e),
                    k('offset', n, t, e),
                    k('scale', n, t, e),
                    k('epsilon', n, t, e)
                ),
            ];
        case 'FusedBatchNormV3':
            return [
                s.batchNorm(
                    k('x', n, t, e),
                    k('mean', n, t, e),
                    k('variance', n, t, e),
                    k('offset', n, t, e),
                    k('scale', n, t, e),
                    k('epsilon', n, t, e)
                ),
            ];
        case 'LRN':
            return [
                s.localResponseNormalization(
                    k('x', n, t, e),
                    k('radius', n, t, e),
                    k('bias', n, t, e),
                    k('alpha', n, t, e),
                    k('beta', n, t, e)
                ),
            ];
        case 'Softmax':
            return [s.softmax(k('x', n, t, e))];
        case 'LogSoftmax':
            return [s.logSoftmax(k('x', n, t, e))];
        default:
            throw TypeError(`Node type ${n.op} is not implemented`);
    }
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const lL = (n, t, e, s = Ge) => {
    switch (n.op) {
        case 'RaggedGather': {
            const { outputNestedSplits: r, outputDenseValues: o } =
                s.raggedGather(
                    k('paramsNestedSplits', n, t, e),
                    k('paramsDenseValues', n, t, e),
                    k('indices', n, t, e),
                    k('outputRaggedRank', n, t, e)
                );
            return r.concat(o);
        }
        case 'RaggedRange': {
            const { rtNestedSplits: r, rtDenseValues: o } = s.raggedRange(
                k('starts', n, t, e),
                k('limits', n, t, e),
                k('splits', n, t, e)
            );
            return [r, o];
        }
        case 'RaggedTensorToTensor':
            return [
                s.raggedTensorToTensor(
                    k('shape', n, t, e),
                    k('values', n, t, e),
                    k('defaultValue', n, t, e),
                    k('rowPartitionTensors', n, t, e),
                    k('rowPartitionTypes', n, t, e)
                ),
            ];
        default:
            throw TypeError(`Node type ${n.op} is not implemented`);
    }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const cL = (n, t, e, s = Ge) => {
    switch (n.op) {
        case 'Max': {
            const a = k('axis', n, t, e),
                l = k('keepDims', n, t, e);
            return [s.max(k('x', n, t, e), a, l)];
        }
        case 'Mean': {
            const a = k('axis', n, t, e),
                l = k('keepDims', n, t, e);
            return [s.mean(k('x', n, t, e), a, l)];
        }
        case 'Min': {
            const a = k('axis', n, t, e),
                l = k('keepDims', n, t, e);
            return [s.min(k('x', n, t, e), a, l)];
        }
        case 'Sum': {
            const a = k('axis', n, t, e),
                l = k('keepDims', n, t, e);
            return [s.sum(k('x', n, t, e), a, l)];
        }
        case 'All': {
            const a = k('axis', n, t, e),
                l = k('keepDims', n, t, e);
            return [s.all(k('x', n, t, e), a, l)];
        }
        case 'Any': {
            const a = k('axis', n, t, e),
                l = k('keepDims', n, t, e);
            return [s.any(k('x', n, t, e), a, l)];
        }
        case 'ArgMax': {
            const a = k('axis', n, t, e);
            return [s.argMax(k('x', n, t, e), a)];
        }
        case 'ArgMin': {
            const a = k('axis', n, t, e);
            return [s.argMin(k('x', n, t, e), a)];
        }
        case 'Prod': {
            const a = k('axis', n, t, e),
                l = k('keepDims', n, t, e);
            return [s.prod(k('x', n, t, e), a, l)];
        }
        case 'Cumprod': {
            const a = k('axis', n, t, e),
                l = k('exclusive', n, t, e),
                c = k('reverse', n, t, e);
            return [s.cumprod(k('x', n, t, e), a, l, c)];
        }
        case 'Cumsum': {
            const a = k('axis', n, t, e),
                l = k('exclusive', n, t, e),
                c = k('reverse', n, t, e);
            return [s.cumsum(k('x', n, t, e), a, l, c)];
        }
        case 'Bincount':
            const r = k('x', n, t, e),
                o = k('weights', n, t, e),
                i = k('size', n, t, e);
            return [s.bincount(r, o, i)];
        case 'DenseBincount': {
            const a = k('x', n, t, e),
                l = k('weights', n, t, e),
                c = k('size', n, t, e),
                u = k('binaryOutput', n, t, e);
            return [s.denseBincount(a, l, c, u)];
        }
        default:
            throw TypeError(`Node type ${n.op} is not implemented`);
    }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const uL = (n, t, e, s = Ge) => {
    switch (n.op) {
        case 'ConcatV2':
        case 'Concat': {
            const r = k('n', n, t, e),
                o = k('axis', n, t, e);
            let i = k('tensors', n, t, e);
            return (i = i.slice(0, r)), [s.concat(i, o)];
        }
        case 'Gather': {
            const r = k('x', n, t, e),
                o = k('indices', n, t, e);
            return [s.gather(r, s.cast(o, 'int32'), 0)];
        }
        case 'GatherV2': {
            const r = k('axis', n, t, e),
                o = k('batchDims', n, t, e),
                i = k('x', n, t, e),
                a = k('indices', n, t, e);
            return [s.gather(i, s.cast(a, 'int32'), r, o)];
        }
        case 'Reverse': {
            const r = k('dims', n, t, e),
                o = [];
            for (let a = 0; a < r.length; a++) r[a] && o.push(a);
            const i = k('x', n, t, e);
            return [s.reverse(i, o)];
        }
        case 'ReverseV2': {
            const r = k('axis', n, t, e),
                o = k('x', n, t, e);
            return [s.reverse(o, r)];
        }
        case 'Slice': {
            const r = k('begin', n, t, e),
                o = k('size', n, t, e);
            return [s.slice(k('x', n, t, e), r, o)];
        }
        case 'StridedSlice': {
            const r = k('begin', n, t, e),
                o = k('end', n, t, e),
                i = k('strides', n, t, e),
                a = k('beginMask', n, t, e),
                l = k('endMask', n, t, e),
                c = k('ellipsisMask', n, t, e),
                u = k('newAxisMask', n, t, e),
                h = k('shrinkAxisMask', n, t, e),
                d = k('x', n, t, e);
            return [s.stridedSlice(d, r, o, i, a, l, c, u, h)];
        }
        case 'Pack':
            return Y(() => {
                const r = k('axis', n, t, e),
                    o = k('tensors', n, t, e),
                    i = o[0].shape,
                    a = s.squeeze(o[0]).shape,
                    l = o.map((c) => {
                        const u = Ut(c.shape, i);
                        if (!u && !Ut(s.squeeze(c).shape, a))
                            throw new Error(
                                'the input tensors shape does not match'
                            );
                        return u ? c : s.reshape(c, i);
                    });
                return [s.stack(l, r)];
            });
        case 'Unpack': {
            const r = k('axis', n, t, e),
                o = k('tensor', n, t, e);
            return s.unstack(o, r);
        }
        case 'Tile': {
            const r = k('reps', n, t, e);
            return [s.tile(k('x', n, t, e), r)];
        }
        case 'Split':
        case 'SplitV': {
            const r = k('axis', n, t, e),
                o = k('numOrSizeSplits', n, t, e),
                i = k('x', n, t, e);
            return s.split(i, o, r);
        }
        case 'ScatterNd': {
            const r = k('indices', n, t, e),
                o = k('values', n, t, e),
                i = k('shape', n, t, e);
            return [s.scatterND(r, o, i)];
        }
        case 'GatherNd': {
            const r = k('x', n, t, e),
                o = k('indices', n, t, e);
            return [s.gatherND(r, o)];
        }
        case 'SparseToDense': {
            const r = k('sparseIndices', n, t, e),
                o = k('outputShape', n, t, e),
                i = k('sparseValues', n, t, e),
                a = k('defaultValue', n, t, e);
            return [
                s.sparseToDense(
                    r,
                    i,
                    o,
                    i.dtype === a.dtype ? a : s.cast(a, i.dtype)
                ),
            ];
        }
        case 'TensorScatterUpdate': {
            const r = k('indices', n, t, e),
                o = k('values', n, t, e),
                i = k('tensor', n, t, e);
            return [s.tensorScatterUpdate(i, r, o)];
        }
        default:
            throw TypeError(`Node type ${n.op} is not implemented`);
    }
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const hL = (n, t, e, s = Ge) => {
    switch (n.op) {
        case 'SparseFillEmptyRows': {
            const {
                outputIndices: r,
                outputValues: o,
                emptyRowIndicator: i,
                reverseIndexMap: a,
            } = s.sparse.sparseFillEmptyRows(
                k('indices', n, t, e),
                k('values', n, t, e),
                k('denseShape', n, t, e),
                k('defaultValue', n, t, e)
            );
            return [r, o, i, a];
        }
        case 'SparseReshape': {
            const { outputIndices: r, outputShape: o } = s.sparse.sparseReshape(
                k('inputIndices', n, t, e),
                k('inputShape', n, t, e),
                k('newShape', n, t, e)
            );
            return [r, o];
        }
        case 'SparseSegmentMean':
            return [
                s.sparse.sparseSegmentMean(
                    k('data', n, t, e),
                    k('indices', n, t, e),
                    k('segmentIds', n, t, e)
                ),
            ];
        case 'SparseSegmentSum':
            return [
                s.sparse.sparseSegmentSum(
                    k('data', n, t, e),
                    k('indices', n, t, e),
                    k('segmentIds', n, t, e)
                ),
            ];
        default:
            throw TypeError(`Node type ${n.op} is not implemented`);
    }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const dL = (n, t, e, s = Ge) => {
    switch (n.op) {
        case 'FFT':
            return [s.fft(k('x', n, t, e))];
        case 'IFFT':
            return [s.ifft(k('x', n, t, e))];
        case 'RFFT':
            return [s.rfft(k('x', n, t, e))];
        case 'IRFFT':
            return [s.irfft(k('x', n, t, e))];
        default:
            throw TypeError(`Node type ${n.op} is not implemented`);
    }
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const pL = (n, t, e, s = Ge) => {
    switch (n.op) {
        case 'StaticRegexReplace':
            return [
                s.string.staticRegexReplace(
                    k('input', n, t, e),
                    k('pattern', n, t, e),
                    k('rewrite', n, t, e),
                    k('replaceGlobal', n, t, e)
                ),
            ];
        case 'StringNGrams': {
            const { nGrams: r, nGramsSplits: o } = s.string.stringNGrams(
                k('data', n, t, e),
                k('dataSplits', n, t, e),
                k('separator', n, t, e),
                k('nGramWidths', n, t, e),
                k('leftPad', n, t, e),
                k('rightPad', n, t, e),
                k('padWidth', n, t, e),
                k('preserveShortSequences', n, t, e)
            );
            return [r, o];
        }
        case 'StringSplit': {
            const {
                indices: r,
                values: o,
                shape: i,
            } = s.string.stringSplit(
                k('input', n, t, e),
                k('delimiter', n, t, e),
                k('skipEmpty', n, t, e)
            );
            return [r, o, i];
        }
        case 'StringToHashBucketFast':
            return [
                s.string.stringToHashBucketFast(
                    k('input', n, t, e),
                    k('numBuckets', n, t, e)
                ),
            ];
        default:
            throw TypeError(`Node type ${n.op} is not implemented`);
    }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const fL = (n, t, e, s = Ge) => {
    switch (n.op) {
        case 'Cast':
            return [s.cast(k('x', n, t, e), k('dtype', n, t, e))];
        case 'ExpandDims': {
            const r = k('axis', n, t, e);
            return [s.expandDims(k('x', n, t, e), r)];
        }
        case 'Squeeze': {
            const r = k('axis', n, t, e);
            return [s.squeeze(k('x', n, t, e), r)];
        }
        case 'Reshape':
            return [s.reshape(k('x', n, t, e), k('shape', n, t, e))];
        case 'EnsureShape':
            return [s.ensureShape(k('x', n, t, e), k('shape', n, t, e))];
        case 'MirrorPad':
            return [
                s.mirrorPad(
                    k('x', n, t, e),
                    k('padding', n, t, e),
                    k('mode', n, t, e)
                ),
            ];
        case 'PadV2':
        case 'Pad':
            return [
                s.pad(
                    k('x', n, t, e),
                    k('padding', n, t, e),
                    k('constantValue', n, t, e)
                ),
            ];
        case 'SpaceToBatchND': {
            const r = k('blockShape', n, t, e),
                o = k('paddings', n, t, e);
            return [s.spaceToBatchND(k('x', n, t, e), r, o)];
        }
        case 'BatchToSpaceND': {
            const r = k('blockShape', n, t, e),
                o = k('crops', n, t, e);
            return [s.batchToSpaceND(k('x', n, t, e), r, o)];
        }
        case 'DepthToSpace': {
            const r = k('blockSize', n, t, e),
                o = k('dataFormat', n, t, e).toUpperCase();
            return [s.depthToSpace(k('x', n, t, e), r, o)];
        }
        case 'BroadcastTo':
            return [s.broadcastTo(k('x', n, t, e), k('shape', n, t, e))];
        case 'BroadcastArgs':
            return [s.broadcastArgs(k('s0', n, t, e), k('s1', n, t, e))];
        default:
            throw TypeError(`Node type ${n.op} is not implemented`);
    }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function By(n, t, e, s, r = Y) {
    const o = ((i, a, l) => {
        switch (i.category) {
            case 'arithmetic':
                return r(() => U3(i, a, l));
            case 'basic_math':
                return r(() => G3(i, a, l));
            case 'control':
                return Y3(i, a, l);
            case 'convolution':
                return r(() => Z3(i, a, l));
            case 'creation':
                return r(() => J3(i, a, l));
            case 'dynamic':
                return Q3(i, a, l);
            case 'evaluation':
                return r(() => tL(i, a, l));
            case 'image':
                return r(() => rL(i, a, l));
            case 'graph':
                return r(() => eL(i, a, l));
            case 'logical':
                return r(() => oL(i, a, l));
            case 'matrices':
                return r(() => iL(i, a, l));
            case 'normalization':
                return r(() => aL(i, a, l));
            case 'ragged':
                return r(() => lL(i, a, l));
            case 'reduction':
                return r(() => cL(i, a, l));
            case 'slice_join':
                return r(() => uL(i, a, l));
            case 'sparse':
                return r(() => hL(i, a, l));
            case 'spectral':
                return r(() => dL(i, a, l));
            case 'string':
                return r(() => pL(i, a, l));
            case 'transformation':
                return r(() => fL(i, a, l));
            case 'hash_table':
                return sL(i, a, l, s);
            case 'custom':
                const c = Ov(i.op);
                if (c && c.customExecutor)
                    return c.customExecutor(new W3(i, a, l));
                throw TypeError(`Custom op ${i.op} is not registered.`);
            default:
                throw TypeError(
                    `Unknown op '${i.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`
                );
        }
    })(n, t, e);
    return no(o) ? o.then((i) => [].concat(i)) : [].concat(o);
}
class My {
    constructor(t = {}, e = {}, s = {}, r = {}, o) {
        (this.weightMap = t),
            (this.tensorArrayMap = e),
            (this.tensorListMap = s),
            (this.functionMap = r),
            (this.parseNodeNameCache = o),
            (this.rootContext = { id: 0, frameName: '', iterationId: 0 }),
            (this.contexts = [this.rootContext]),
            (this.lastId = 0),
            this.generateCurrentContextIds();
    }
    newFrame(t, e) {
        return { id: t, frameName: e, iterationId: 0 };
    }
    set currentContext(t) {
        this.contexts !== t &&
            ((this.contexts = t), this.generateCurrentContextIds());
    }
    get currentContext() {
        return this.contexts;
    }
    get currentContextId() {
        return this._currentContextIds[0];
    }
    get currentContextIds() {
        return this._currentContextIds;
    }
    generateCurrentContextIds() {
        const t = [];
        for (let e = 0; e < this.contexts.length - 1; e++) {
            const s = this.contexts.slice(0, this.contexts.length - e);
            t.push(this.contextIdforContexts(s));
        }
        t.push(''), (this._currentContextIds = t);
    }
    contextIdforContexts(t) {
        return t
            ? t
                  .map((e) =>
                      e.id === 0 && e.iterationId === 0
                          ? ''
                          : `${e.frameName}-${e.iterationId}`
                  )
                  .join('/')
            : '';
    }
    enterFrame(t) {
        this.contexts &&
            (this.lastId++,
            (this.contexts = this.contexts.slice()),
            this.contexts.push(this.newFrame(this.lastId, t)),
            this._currentContextIds.unshift(
                this.contextIdforContexts(this.contexts)
            ));
    }
    exitFrame() {
        if (this.contexts && this.contexts.length > 1)
            (this.contexts = this.contexts.slice()),
                this.contexts.splice(-1),
                this.currentContextIds.shift();
        else throw new Error('Cannot exit frame, the context is empty');
    }
    nextIteration() {
        if (this.contexts && this.contexts.length > 0) {
            (this.contexts = this.contexts.slice()), this.lastId++;
            const t = Object.assign(
                {},
                this.contexts[this.contexts.length - 1]
            );
            (t.iterationId += 1),
                (t.id = this.lastId),
                this.contexts.splice(-1, 1, t),
                this._currentContextIds.splice(
                    0,
                    1,
                    this.contextIdforContexts(this.contexts)
                );
        } else
            throw new Error(
                'Cannot increase frame iteration, the context is empty'
            );
    }
    getWeight(t) {
        return this.weightMap[t];
    }
    addTensorArray(t) {
        this.tensorArrayMap[t.id] = t;
    }
    getTensorArray(t) {
        return this.tensorArrayMap[t];
    }
    addTensorList(t) {
        this.tensorListMap[t.id] = t;
    }
    getTensorList(t) {
        return this.tensorListMap[t];
    }
    dispose(t) {
        for (const e in this.tensorArrayMap)
            this.tensorArrayMap[e].clearAndClose(t);
        for (const e in this.tensorListMap)
            this.tensorListMap[e].clearAndClose(t);
    }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Vy(n, t, e, s) {
    const r = new Set(),
        o = [];
    let i = null,
        a = null;
    const l = new Set(),
        c = new Set(Object.keys(n).map((d) => mn(d)[0]));
    s = s || [];
    const u = new Set(s.map((d) => mn(d.name)[0])),
        h = [...t];
    for (; h.length > 0; ) {
        const d = h.pop();
        if (
            ((Gr(d) || kL(d) || SL(d)) &&
                i == null &&
                ((i = d),
                (a = i.children.map((p) => p.name).filter((p) => r.has(p)))),
            r.add(d.name),
            e[d.name] == null && !c.has(d.name) && !u.has(d.name))
        ) {
            if (d.inputs.length === 0) {
                o.push(d.name);
                continue;
            }
            d.inputs.forEach((p) => {
                l.has(p.name) || (l.add(p.name), h.push(p));
            });
        }
    }
    return {
        inputs: n,
        outputs: t,
        usedNodes: r,
        missingInputs: o,
        dynamicNode: i,
        syncInputs: a,
    };
}
function mL(n, t) {
    const { usedNodes: e, inputs: s } = t,
        r = Object.keys(s)
            .map((g) => mn(g)[0])
            .map((g) => n.nodes[g]),
        o = n.initNodes || [],
        i = (g) => e.has(typeof g == 'string' ? g : g.name);
    function a(g) {
        return [...new Map(g.map((y) => [y.name, y])).values()];
    }
    const l = a([...r, ...n.weights, ...o]).filter(i),
        c = a([...l, ...Object.values(n.nodes)]).filter(i),
        u = new Map(c.map((g) => [g.name, g])),
        h = {};
    for (const g of c) {
        h[g.name] = h[g.name] || 0;
        for (const y of g.children)
            i(y) || (h[y.name] = Number.POSITIVE_INFINITY),
                (h[y.name] = (h[y.name] || 0) + 1);
    }
    const d = Object.entries(h)
            .filter(([, g]) => g === 0)
            .map(([g]) => g),
        p = [...d];
    for (; d.length > 0; ) {
        const g = d.pop(),
            y = u.get(g);
        for (const b of y.children.filter(i))
            --h[b.name] === 0 && (p.push(b.name), d.push(b.name));
    }
    const f = p.map((g) => u.get(g)),
        m = gL(f, l);
    return yL(m, l), m;
}
function gL(n, t) {
    const e = new Map(n.map((i) => [i.name, i])),
        s = t.map((i) => i.name),
        r = new Set(s);
    for (; s.length > 0; ) {
        const i = s.pop(),
            a = e.get(i);
        for (const l of a.children)
            !e.has(l.name) || r.has(l.name) || (r.add(l.name), s.push(l.name));
    }
    return n.filter((i) => r.has(i.name));
}
class Al extends Error {
    constructor(t) {
        super(`NodesExecutionOrderError: ${t}`);
    }
}
function yL(n, t) {
    const e = new Map(n.map((a, l) => [a.name, l])),
        s = new Set(t.map((a) => a.name)),
        r = (a) => s.has(typeof a == 'string' ? a : a.name),
        o = new Set(n.map((a) => a.name)),
        i = (a) => o.has(typeof a == 'string' ? a : a.name);
    for (const a of n) {
        for (const l of a.children.filter(i)) {
            if (!e.has(l.name))
                throw new Al(
                    `Child ${l.name} of node ${a.name} is unreachable.`
                );
            if (e.get(a.name) > e.get(l.name))
                throw new Al(
                    `Node ${a.name} is scheduled to run after its child ${l.name}.`
                );
        }
        if (!r(a))
            for (const l of a.inputs) {
                if (!e.has(l.name))
                    throw new Al(
                        `Input ${l.name} of node ${a.name} is unreachable.`
                    );
                if (e.get(l.name) > e.get(a.name))
                    throw new Al(
                        `Node ${a.name} is scheduled to run before its input ${l.name}.`
                    );
            }
    }
}
function bL(n) {
    const t = new Map(n.map((a, l) => [a.name, l])),
        e = Number.MAX_SAFE_INTEGER,
        s = n.map((a, l) => (Gr(a) ? e : l)),
        r = (a) => {
            const l = s[t.get(a.name)];
            return l ?? -1;
        },
        o = n.map((a, l) =>
            a.children.map(r).reduce((c, u) => Math.max(c, u), s[l])
        ),
        i = new Map();
    for (let a = 0; a < n.length; ++a) {
        const l = o[a];
        if (l === e) continue;
        const c = n[a],
            u = n[l];
        i.has(u.name) || i.set(u.name, []), i.get(u.name).push(c);
    }
    return i;
}
const xL = new Set([
        'Switch',
        'Merge',
        'Enter',
        'Exit',
        'NextIteration',
        'StatelessIf',
        'StatelessWhile',
        'if',
        'While',
    ]),
    wL = new Set([
        'NonMaxSuppressionV2',
        'NonMaxSuppressionV3',
        'NonMaxSuppressionV5',
        'Where',
    ]),
    vL = new Set([
        'HashTable',
        'HashTableV2',
        'LookupTableImport',
        'LookupTableImportV2',
        'LookupTableFind',
        'LookupTableFindV2',
        'LookupTableSize',
        'LookupTableSizeV2',
    ]);
function Gr(n) {
    return xL.has(n.op);
}
function kL(n) {
    return wL.has(n.op);
}
function SL(n) {
    return vL.has(n.op);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class wc {
    get weightIds() {
        return this.parent ? this.parent.weightIds : this._weightIds;
    }
    get functionExecutorMap() {
        return this.parent
            ? this.parent.functionExecutorMap
            : this._functionExecutorMap;
    }
    get weightMap() {
        return this.parent ? this.parent.weightMap : this._weightMap;
    }
    set weightMap(t) {
        const e = Object.keys(t).map((s) => t[s].map((r) => r.id));
        (this._weightIds = [].concat(...e)), (this._weightMap = t);
    }
    set resourceManager(t) {
        this._resourceManager = t;
    }
    get inputs() {
        return this._inputs.map((t) => ({
            name: t.name,
            shape: t.attrParams.shape ? t.attrParams.shape.value : void 0,
            dtype: t.attrParams.dtype ? t.attrParams.dtype.value : void 0,
        }));
    }
    get outputs() {
        return this._outputs.map((t) => ({
            name: t.name,
            shape: t.attrParams.shape ? t.attrParams.shape.value : void 0,
            dtype: t.attrParams.dtype ? t.attrParams.dtype.value : void 0,
        }));
    }
    get inputNodes() {
        return this._inputs.map((t) => t.signatureKey || t.name);
    }
    get outputNodes() {
        return this._outputs.map((t) => {
            const e = t.signatureKey || t.name;
            return t.defaultOutput ? `${e}:${t.defaultOutput}` : e;
        });
    }
    get functions() {
        return Object.keys(this._functions).reduce(
            (t, e) => ((t[e] = this._functions[e].signature), t),
            {}
        );
    }
    constructor(t, e) {
        (this.graph = t),
            (this.parent = e),
            (this.compiledMap = new Map()),
            (this.parseNodeNameCache = new Map()),
            (this._weightMap = {}),
            (this.SEPARATOR = ','),
            (this._functions = {}),
            (this._functionExecutorMap = {}),
            (this.keepIntermediateTensors = !1),
            (this._outputs = t.outputs),
            (this._inputs = t.inputs),
            (this._initNodes = t.initNodes),
            (this._signature = t.signature),
            (this._functions = t.functions),
            t.functions != null &&
                Object.keys(t.functions).forEach((s) => {
                    this._functionExecutorMap[s] = new wc(t.functions[s], this);
                });
    }
    getCompilationKey(t, e) {
        const s = t.map((o) => o.name).sort(),
            r = e.map((o) => o.name).sort();
        return s.join(this.SEPARATOR) + '--' + r.join(this.SEPARATOR);
    }
    compile(t, e) {
        const s = Vy(t, e, this.weightMap, this._initNodes),
            { missingInputs: r, dynamicNode: o, syncInputs: i } = s;
        if (o != null)
            throw new Error(
                `This execution contains the node '${o.name}', which has the dynamic op '${o.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${i}]`
            );
        if (r.length > 0) {
            const c = e.map((h) => h.name),
                u = Object.keys(t);
            throw new Error(
                `Cannot compute the outputs [${c}] from the provided inputs [${u}]. Missing the following inputs: [${r}]`
            );
        }
        const a = mL(this.graph, s),
            l = bL(a);
        return { orderedNodes: a, nodeLiveUntilMap: l };
    }
    cloneAndKeepTensor(t) {
        if (t == null) return null;
        const e = t.clone();
        return Oe(e), e;
    }
    cloneTensorList(t) {
        return t ? t.map((s) => this.cloneAndKeepTensor(s)) : null;
    }
    cloneTensorMap(t) {
        return Object.fromEntries(
            Object.entries(t).map(([e, s]) => [e, this.cloneTensorList(s)])
        );
    }
    execute(t, e) {
        this.disposeIntermediateTensors(), (t = this.mapInputs(t));
        const s = Object.keys(t).sort();
        this.checkInputs(t),
            this.checkInputShapeAndType(t),
            (e = this.mapOutputs(e)),
            this.checkOutputs(e);
        const r = s.map((d) => this.graph.nodes[mn(d)[0]]),
            o = e.map((d) => mn(d)[0]),
            i = new Set(o);
        let a = o.map((d) => this.graph.nodes[d]);
        a.length === 0 && (a = this._outputs);
        const l = this.getCompilationKey(r, a);
        let c = this.compiledMap.get(l);
        c == null && ((c = this.compile(t, a)), this.compiledMap.set(l, c));
        try {
            this.keepIntermediateTensors = tt().getBool(
                'KEEP_INTERMEDIATE_TENSORS'
            );
        } catch (d) {
            (this.keepIntermediateTensors = !1), console.warn(d.message);
        }
        const u = {},
            h = {};
        return Y(() => {
            const d = new My(
                    this.weightMap,
                    u,
                    h,
                    this.functionExecutorMap,
                    this.parseNodeNameCache
                ),
                p = Object.assign({}, this.weightMap);
            this.keepIntermediateTensors &&
                (this.clonedTensorsMap = this.cloneTensorMap(this.weightMap)),
                Object.keys(t).forEach((y) => {
                    const [b, w] = mn(y, d),
                        x = [];
                    (x[w] = t[y]),
                        (p[b] = x),
                        this.keepIntermediateTensors &&
                            (this.clonedTensorsMap[b] =
                                this.cloneTensorList(x));
                });
            const f = this.getFrozenTensorIds(p),
                { orderedNodes: m, nodeLiveUntilMap: g } = c;
            for (const y of m) {
                if (p[y.name]) continue;
                const b = By(y, p, d, this._resourceManager);
                if (no(b))
                    throw new Error(
                        `The execution of the op '${y.op}' returned a promise. Please use model.executeAsync() instead.`
                    );
                (p[y.name] = b),
                    this.keepIntermediateTensors &&
                        (this.clonedTensorsMap[y.name] =
                            this.cloneTensorList(b)),
                    this.checkTensorForDisposalWithNodeLiveUntilInfo(
                        y,
                        p,
                        d,
                        f,
                        i,
                        g.get(y.name)
                    );
            }
            return (
                this.parent == null && d.dispose(f), e.map((y) => Be(y, p, d))
            );
        });
    }
    getFrozenTensorIds(t) {
        const e = [].concat.apply(
            [],
            Object.keys(t)
                .map((s) => t[s])
                .map((s) => s.map((r) => r.id))
        );
        return new Set(e);
    }
    checkTensorForDisposal(t, e, s, r, o, i, a) {
        if (!(Gr(e) || i.has(t))) {
            for (const l of s[t])
                l != null && (a[l.id] = (a[l.id] || 0) + e.children.length);
            for (const l of e.inputs) {
                if (Gr(l)) continue;
                const c = Oy(l.name, s, r);
                if (c != null)
                    for (const u of c) {
                        if (!u || u.kept || o.has(u.id)) continue;
                        const h = a[u.id];
                        h === 1
                            ? (u.dispose(), delete a[u.id])
                            : h != null && a[u.id]--;
                    }
            }
        }
    }
    checkTensorForDisposalWithNodeLiveUntilInfo(t, e, s, r, o, i) {
        function a(l) {
            return Gr(l) || o.has(l.name);
        }
        if (!(Gr(t) || i == null))
            for (const l of i) {
                if (a(l)) continue;
                const c = Oy(l.name, e, s);
                for (const u of c) !u || u.kept || r.has(u.id) || u.dispose();
            }
    }
    async executeAsync(t, e) {
        return this._executeAsync(t, e);
    }
    disposeIntermediateTensors() {
        this.clonedTensorsMap &&
            (Object.values(this.clonedTensorsMap).forEach((t) => {
                for (const e of t) e && !e.isDisposed && e.dispose();
            }),
            (this.clonedTensorsMap = null));
    }
    getIntermediateTensors() {
        return this.clonedTensorsMap;
    }
    async _executeAsync(t, e, s = !1, r = {}, o = {}) {
        this.disposeIntermediateTensors(),
            s ||
                ((t = this.mapInputs(t)),
                this.checkInputs(t),
                this.checkInputShapeAndType(t),
                (e = this.mapOutputs(e)),
                this.checkOutputs(e));
        try {
            this.keepIntermediateTensors = tt().getBool(
                'KEEP_INTERMEDIATE_TENSORS'
            );
        } catch (d) {
            (this.keepIntermediateTensors = !1), console.warn(d.message);
        }
        const i = new My(
            this.weightMap,
            r,
            o,
            this.functionExecutorMap,
            this.parseNodeNameCache
        );
        this.keepIntermediateTensors &&
            (this.clonedTensorsMap = this.cloneTensorMap(this.weightMap));
        const a = await this.executeWithControlFlow(t, i, e, s),
            l = e.map((d) => Be(d, a, i)),
            c = l.map((d) => d.id),
            u = Object.keys(t).map((d) => t[d].id),
            h = new Set([...c, ...u, ...this.weightIds]);
        return (
            Object.values(a).forEach((d) => {
                d.forEach((p) => {
                    p && !p.isDisposed && !h.has(p.id) && p.dispose();
                });
            }),
            this.parent == null && i.dispose(h),
            l
        );
    }
    async executeFunctionAsync(t, e, s) {
        const r = t.reduce((o, i, a) => ((o[this.inputs[a].name] = i), o), {});
        return this._executeAsync(r, this.outputNodes, !0, e, s);
    }
    async executeWithControlFlow(t, e, s, r) {
        const o = Object.keys(t),
            i = o.map((x) => this.graph.nodes[mn(x)[0]]),
            a = s.map((x) => mn(x)[0]),
            l = new Set(a);
        let c = a.map((x) => this.graph.nodes[x]);
        c.length === 0 && (c = this._outputs);
        const {
                usedNodes: u,
                missingInputs: h,
                dynamicNode: d,
                syncInputs: p,
            } = Vy(t, c, this.weightMap, this._initNodes),
            f = [...i, ...this.graph.weights, ...(this._initNodes || [])].map(
                (x) => ({ node: x, contexts: e.currentContext })
            ),
            m = Object.assign({}, this.weightMap);
        Object.keys(t).forEach((x) => {
            const [v, C] = mn(x),
                $ = [];
            ($[C] = t[x]), (m[v] = $);
        });
        const g = {},
            y = this.getFrozenTensorIds(m),
            b = {};
        for (; f.length > 0; ) {
            const x = this.processStack(i, f, e, m, b, y, l, g, u);
            await Promise.all(x);
        }
        d == null &&
            !r &&
            console.warn(
                'This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.'
            );
        const w = c
            .filter((x) => !Gr(x) && !Be(x.name, m, e))
            .map((x) => x.name);
        if (w.length > 0) {
            let x = '';
            throw (
                (d != null &&
                    (x = `Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${p}]`),
                new Error(
                    `Cannot compute the outputs [${w}] from the provided inputs [${o}]. Consider providing the following inputs: [${h}]. ${x}`
                ))
            );
        }
        return m;
    }
    processStack(t, e, s, r, o, i, a, l, c) {
        const u = [];
        for (; e.length > 0; ) {
            const h = e.pop();
            s.currentContext = h.contexts;
            let d = '';
            if (
                (h.node.op === 'Enter' &&
                    k('isConstant', h.node, r, s) &&
                    ([d] = Ms(h.node.name, s)),
                r[h.node.name] == null)
            ) {
                const p = By(h.node, r, s, this._resourceManager);
                d || ([d] = Ms(h.node.name, s));
                const f = s.currentContext;
                no(p)
                    ? u.push(
                          p.then(
                              (m) => (
                                  (r[d] = m),
                                  this.keepIntermediateTensors &&
                                      (this.clonedTensorsMap[d] =
                                          this.cloneTensorList(m)),
                                  (s.currentContext = f),
                                  this.checkTensorForDisposal(
                                      d,
                                      h.node,
                                      r,
                                      s,
                                      i,
                                      a,
                                      l
                                  ),
                                  this.processChildNodes(h.node, e, s, r, o, c),
                                  m
                              )
                          )
                      )
                    : ((r[d] = p),
                      this.keepIntermediateTensors &&
                          (this.clonedTensorsMap[d] = this.cloneTensorList(p)),
                      this.checkTensorForDisposal(d, h.node, r, s, i, a, l),
                      this.processChildNodes(h.node, e, s, r, o, c));
            } else this.processChildNodes(h.node, e, s, r, o, c);
        }
        return u;
    }
    processChildNodes(t, e, s, r, o, i) {
        t.children.forEach((a) => {
            const [l] = Ms(a.name, s);
            o[l] ||
                !i.has(a.name) ||
                (a.op === 'Merge'
                    ? a.inputNames.some((c) => !!Be(c, r, s)) &&
                      ((o[l] = !0),
                      e.push({ contexts: s.currentContext, node: a }))
                    : a.inputNames.every((c) => !!Be(c, r, s)) &&
                      ((o[l] = !0),
                      e.push({ contexts: s.currentContext, node: a })));
        });
    }
    dispose() {
        Object.keys(this.weightMap).forEach((t) =>
            this.weightMap[t].forEach((e) => e.dispose())
        );
    }
    checkInputShapeAndType(t) {
        Object.keys(t).forEach((e) => {
            const s = t[e],
                [r] = mn(e),
                o = this.graph.nodes[r];
            if (o.attrParams.shape && o.attrParams.shape.value) {
                const i = o.attrParams.shape.value,
                    a =
                        i.length === s.shape.length &&
                        s.shape.every((l, c) => i[c] === -1 || i[c] === l);
                _(
                    a,
                    () =>
                        `The shape of dict['${o.name}'] provided in model.execute(dict) must be [${i}], but was [${s.shape}]`
                );
            }
            o.attrParams.dtype &&
                o.attrParams.dtype.value &&
                _(
                    s.dtype === o.attrParams.dtype.value,
                    () =>
                        `The dtype of dict['${o.name}'] provided in model.execute(dict) must be ${o.attrParams.dtype.value}, but was ${s.dtype}`
                );
        });
    }
    mapInputs(t) {
        var e, s;
        const r = {};
        for (const o in t) {
            const i =
                (s =
                    (e = this._signature) === null || e === void 0
                        ? void 0
                        : e.inputs) === null || s === void 0
                    ? void 0
                    : s[o];
            i != null ? (r[i.name] = t[o]) : (r[o] = t[o]);
        }
        return r;
    }
    checkInputs(t) {
        const e = Object.keys(t).filter((s) => {
            const [r] = mn(s);
            return this.graph.nodes[r] == null;
        });
        if (e.length > 0)
            throw new Error(
                `The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`
            );
    }
    mapOutputs(t) {
        return t.map((e) => {
            var s, r;
            const o =
                (r =
                    (s = this._signature) === null || s === void 0
                        ? void 0
                        : s.outputs) === null || r === void 0
                    ? void 0
                    : r[e];
            return o != null ? o.name : e;
        }, {});
    }
    checkOutputs(t) {
        t.forEach((e) => {
            const [s] = mn(e);
            if (!this.graph.nodes[s])
                throw new Error(`The output '${e}' is not found in the graph`);
        });
    }
}
class IL {
    constructor(t = {}, e = {}) {
        (this.hashTableNameToHandle = t), (this.hashTableMap = e);
    }
    addHashTable(t, e) {
        (this.hashTableNameToHandle[t] = e.handle),
            (this.hashTableMap[e.id] = e);
    }
    getHashTableHandleByName(t) {
        return this.hashTableNameToHandle[t];
    }
    getHashTableById(t) {
        return this.hashTableMap[t];
    }
    dispose() {
        for (const t in this.hashTableMap)
            this.hashTableMap[t].clearAndClose(), delete this.hashTableMap[t];
        for (const t in this.hashTableNameToHandle)
            this.hashTableNameToHandle[t].dispose(),
                delete this.hashTableNameToHandle[t];
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const CL = '?tfjs-format=file',
    $L = 'model.json';
class NL {
    get modelVersion() {
        return this.version;
    }
    get inputNodes() {
        return this.executor.inputNodes;
    }
    get outputNodes() {
        return this.executor.outputNodes;
    }
    get inputs() {
        return this.executor.inputs;
    }
    get outputs() {
        return this.executor.outputs;
    }
    get weights() {
        return this.executor.weightMap;
    }
    get metadata() {
        return this.artifacts.userDefinedMetadata;
    }
    get modelSignature() {
        return this.signature;
    }
    get modelStructuredOutputKeys() {
        return this.structuredOutputKeys;
    }
    constructor(t, e = {}, s = Mx) {
        (this.modelUrl = t),
            (this.loadOptions = e),
            (this.version = 'n/a'),
            (this.io = s),
            e == null && (this.loadOptions = {}),
            (this.resourceManager = new IL());
    }
    findIOHandler() {
        const t = this.modelUrl;
        if (t.load != null) this.handler = t;
        else if (this.loadOptions.requestInit != null)
            this.handler = this.io.browserHTTPRequest(t, this.loadOptions);
        else {
            const e = this.io.getLoadHandlers(t, this.loadOptions);
            if (e.length === 0)
                e.push(this.io.browserHTTPRequest(t, this.loadOptions));
            else if (e.length > 1)
                throw new Error(
                    `Found more than one (${
                        e.length
                    }) load handlers for URL '${[t]}'`
                );
            this.handler = e[0];
        }
    }
    load() {
        if ((this.findIOHandler(), this.handler.load == null))
            throw new Error(
                'Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.'
            );
        const t = this.handler.load();
        return no(t) ? t.then((e) => this.loadSync(e)) : this.loadSync(t);
    }
    loadSync(t) {
        this.artifacts = t;
        const e = this.artifacts.modelTopology;
        let s = this.artifacts.signature;
        if (this.artifacts.userDefinedMetadata != null) {
            const o = this.artifacts.userDefinedMetadata;
            o.signature != null && (s = o.signature),
                o.structuredOutputKeys != null &&
                    (this.structuredOutputKeys = o.structuredOutputKeys);
        }
        (this.signature = s),
            (this.version = `${e.versions.producer}.${e.versions.minConsumer}`);
        const r = this.io.decodeWeights(
            this.artifacts.weightData,
            this.artifacts.weightSpecs
        );
        if (
            ((this.executor = new wc(
                Fy.Instance.transformGraph(e, this.signature)
            )),
            (this.executor.weightMap = this.convertTensorMapToTensorsMap(r)),
            (this.executor.resourceManager = this.resourceManager),
            t.modelInitializer != null && t.modelInitializer.node != null)
        ) {
            const o = Fy.Instance.transformGraph(t.modelInitializer);
            (this.initializer = new wc(o)),
                (this.initializer.weightMap = this.executor.weightMap),
                (this.initializer.resourceManager = this.resourceManager),
                (this.initializerSignature = t.initializerSignature);
        }
        return !0;
    }
    async save(t, e) {
        if (typeof t == 'string') {
            const s = this.io.getSaveHandlers(t);
            if (s.length === 0)
                throw new Error(`Cannot find any save handlers for URL '${t}'`);
            if (s.length > 1)
                throw new Error(
                    `Found more than one (${s.length}) save handlers for URL '${t}'`
                );
            t = s[0];
        }
        if (t.save == null)
            throw new Error(
                'GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.'
            );
        return t.save(this.artifacts);
    }
    addStructuredOutputNames(t) {
        if (this.structuredOutputKeys) {
            const e = t instanceof ce ? [t] : t,
                s = {};
            return (
                e.forEach((r, o) => (s[this.structuredOutputKeys[o]] = r)), s
            );
        }
        return t;
    }
    predict(t, e) {
        const s = this.execute(t, this.outputNodes);
        return this.addStructuredOutputNames(s);
    }
    async predictAsync(t, e) {
        const s = await this.executeAsync(t, this.outputNodes);
        return this.addStructuredOutputNames(s);
    }
    normalizeInputs(t) {
        var e;
        if (!(t instanceof ce) && !Array.isArray(t)) {
            const o =
                (e = this.signature) === null || e === void 0
                    ? void 0
                    : e.inputs;
            if (o != null)
                for (const i in o) {
                    const a = o[i];
                    a.resourceId != null &&
                        (t[i] = this.resourceIdToCapturedInput[a.resourceId]);
                }
            return t;
        }
        t = Array.isArray(t) ? t : [t];
        const s = Object.keys(this.resourceIdToCapturedInput).length;
        if (t.length + s !== this.inputNodes.length)
            throw new Error(
                `Input tensor count mismatch, the graph model has ${
                    this.inputNodes.length - s
                } non-resource placeholders, while there are ${
                    t.length
                } input tensors provided.`
            );
        let r = 0;
        return this.inputNodes.reduce((o, i) => {
            var a, l, c;
            const u =
                (c =
                    (l =
                        (a = this.signature) === null || a === void 0
                            ? void 0
                            : a.inputs) === null || l === void 0
                        ? void 0
                        : l[i]) === null || c === void 0
                    ? void 0
                    : c.resourceId;
            return (
                u != null
                    ? (o[i] = this.resourceIdToCapturedInput[u])
                    : (o[i] = t[r++]),
                o
            );
        }, {});
    }
    normalizeOutputs(t) {
        return (t = t || this.outputNodes), Array.isArray(t) ? t : [t];
    }
    executeInitializerGraph() {
        return this.initializer == null
            ? []
            : this.initializerSignature == null
            ? this.initializer.execute({}, [])
            : this.initializer.execute(
                  {},
                  Object.keys(this.initializerSignature.outputs)
              );
    }
    async executeInitializerGraphAsync() {
        return this.initializer == null
            ? []
            : this.initializerSignature == null
            ? this.initializer.executeAsync({}, [])
            : this.initializer.executeAsync(
                  {},
                  Object.keys(this.initializerSignature.outputs)
              );
    }
    setResourceIdToCapturedInput(t) {
        if (
            ((this.resourceIdToCapturedInput = {}), this.initializerSignature)
        ) {
            const e = this.initializerSignature.outputs,
                s = Object.keys(e);
            for (let r = 0; r < s.length; r++) {
                const o = s[r],
                    i = e[o];
                this.resourceIdToCapturedInput[i.resourceId] = t[r];
            }
        }
    }
    execute(t, e) {
        this.resourceIdToCapturedInput == null &&
            this.setResourceIdToCapturedInput(this.executeInitializerGraph()),
            (t = this.normalizeInputs(t)),
            (e = this.normalizeOutputs(e));
        const s = this.executor.execute(t, e);
        return s.length > 1 ? s : s[0];
    }
    async executeAsync(t, e) {
        this.resourceIdToCapturedInput == null &&
            this.setResourceIdToCapturedInput(
                await this.executeInitializerGraphAsync()
            ),
            (t = this.normalizeInputs(t)),
            (e = this.normalizeOutputs(e));
        const s = await this.executor.executeAsync(t, e);
        return s.length > 1 ? s : s[0];
    }
    getIntermediateTensors() {
        return this.executor.getIntermediateTensors();
    }
    disposeIntermediateTensors() {
        this.executor.disposeIntermediateTensors();
    }
    convertTensorMapToTensorsMap(t) {
        return Object.keys(t).reduce((e, s) => ((e[s] = [t[s]]), e), {});
    }
    dispose() {
        this.executor.dispose(),
            this.initializer &&
                (this.initializer.dispose(),
                this.resourceIdToCapturedInput &&
                    Lt(this.resourceIdToCapturedInput)),
            this.resourceManager.dispose();
    }
}
async function TL(n, t = {}, e = Mx) {
    if (n == null)
        throw new Error(
            'modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model'
        );
    t == null && (t = {}), t.fromTFHub && typeof n == 'string' && (n = EL(n));
    const s = new NL(n, t, e);
    return await s.load(), s;
}
function EL(n) {
    return n.endsWith('/') || (n = n + '/'), `${n}${$L}${CL}`;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */ var Wy;
(function (n) {
    (n[(n.FAIL = 0)] = 'FAIL'),
        (n[(n.SHORTEST = 1)] = 'SHORTEST'),
        (n[(n.LONGEST = 2)] = 'LONGEST');
})(Wy || (Wy = {}));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function It(n, t) {
    Array.isArray(n) || (n = [n]),
        n.forEach((e) => {
            e != null &&
                _(
                    e.dtype !== 'complex64',
                    () =>
                        `${t} does not support complex64 tensors in the CPU backend.`
                );
        });
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const _L = nm;
class vh extends ap {
    nextDataId() {
        return vh.nextDataId++;
    }
    constructor() {
        super(),
            (this.blockSize = 48),
            (this.firstUse = !0),
            (this.data = new _b(this, ys()));
    }
    write(t, e, s) {
        this.firstUse &&
            ((this.firstUse = !1),
            tt().get('IS_NODE') &&
                En(`
============================
Hi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. 
============================`));
        const r = { id: this.nextDataId() };
        return this.data.set(r, { values: t, dtype: s, refCount: 1 }), r;
    }
    makeTensorInfo(t, e, s) {
        let r;
        if (e === 'string' && s != null && s.length > 0 && sa(s[0])) {
            const o = s.map((i) => lr(i));
            r = this.write(o, t, e);
        } else r = this.write(s, t, e);
        return { dataId: r, shape: t, dtype: e };
    }
    refCount(t) {
        return this.data.has(t) ? this.data.get(t).refCount : 0;
    }
    incRef(t) {
        const e = this.data.get(t);
        e.refCount++;
    }
    decRef(t) {
        if (this.data.has(t)) {
            const e = this.data.get(t);
            e.refCount--;
        }
    }
    move(t, e, s, r, o) {
        this.data.set(t, { values: e, dtype: r, refCount: o });
    }
    numDataIds() {
        return this.data.numDataIds();
    }
    async read(t) {
        return this.readSync(t);
    }
    readSync(t) {
        const { dtype: e, complexTensorInfos: s } = this.data.get(t);
        if (e === 'complex64') {
            const r = this.readSync(s.real.dataId),
                o = this.readSync(s.imag.dataId);
            return Ks(r, o);
        }
        return PI(this.data.get(t).values, e);
    }
    bufferSync(t) {
        const e = this.readSync(t.dataId);
        if (t.dtype === 'string')
            try {
                const s = e.map((r) => dr(r));
                return Pt(t.shape, t.dtype, s);
            } catch {
                throw new Error(
                    'Failed to decode encoded string bytes into utf-8'
                );
            }
        return Pt(t.shape, t.dtype, e);
    }
    makeOutput(t, e, s) {
        return ys().makeTensorFromTensorInfo(
            this.makeTensorInfo(e, s, t),
            this
        );
    }
    disposeData(t, e = !1) {
        if (this.data.has(t)) {
            if (
                (this.data.get(t).refCount--,
                !e && this.data.get(t).refCount > 0)
            )
                return !1;
            const { complexTensorInfos: s } = this.data.get(t);
            s != null &&
                (this.disposeData(s.real.dataId, !0),
                this.disposeData(s.imag.dataId, !0)),
                this.data.delete(t);
        }
        return !0;
    }
    disposeIntermediateTensorInfo(t) {
        this.disposeData(t.dataId);
    }
    async time(t) {
        const e = on();
        return t(), { kernelMs: on() - e };
    }
    memory() {
        return {
            unreliable: !0,
            reasons: [
                'The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less.',
            ],
        };
    }
    where(t) {
        It([t], 'where');
        const e = this.readSync(t.dataId);
        return _L(t.shape, e);
    }
    dispose() {}
    floatPrecision() {
        return 32;
    }
    epsilon() {
        return super.epsilon();
    }
}
vh.nextDataId = 0;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Pv(n) {
    const t = new Float32Array(n.length);
    for (let e = 0; e < n.length; ++e) t[e] = Math.abs(n[e]);
    return t;
}
const AL = (n) => {
        const { x: t } = n.inputs,
            e = n.backend;
        It(t, 'abs');
        let s = new Float32Array(rt(t.shape));
        const r = e.data.get(t.dataId).values;
        return (s = Pv(r)), e.makeOutput(s, t.shape, t.dtype);
    },
    RL = { kernelName: Oc, backendName: 'cpu', kernelFunc: AL };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function ke(n) {
    return (t, e, s, r, o) => {
        const i = Dt(t, e),
            a = i.length,
            l = _t(i),
            c = rt(i),
            u = Ve(o, c),
            h = t.length,
            d = e.length,
            p = _t(t),
            f = _t(e),
            m = Qo(t, i),
            g = Qo(e, i);
        if (m.length + g.length === 0)
            for (let y = 0; y < u.length; ++y)
                u[y] = n(s[y % s.length], r[y % r.length]);
        else
            for (let y = 0; y < u.length; ++y) {
                const b = di(y, a, l),
                    w = b.slice(-h);
                m.forEach(($) => (w[$] = 0));
                const x = ks(w, h, p),
                    v = b.slice(-d);
                g.forEach(($) => (v[$] = 0));
                const C = ks(v, d, f);
                u[y] = n(s[x], r[C]);
            }
        return [u, i];
    };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function yn(n) {
    const { inputs: t, backend: e } = n,
        { real: s, imag: r } = t,
        o = e.data.get(s.dataId).values,
        i = e.data.get(r.dataId).values,
        a = e.makeTensorInfo(s.shape, 'complex64'),
        l = e.data.get(a.dataId);
    return (
        (l.complexTensorInfos = {
            real: e.makeTensorInfo(s.shape, 'float32', o),
            imag: e.makeTensorInfo(r.shape, 'float32', i),
        }),
        a
    );
}
const DL = { kernelName: yp, backendName: 'cpu', kernelFunc: yn };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function vc(n, t, e = 'float32') {
    if (e === 'complex64') {
        const r = vc(n, t, 'float32'),
            o = vc(n, t, 'float32');
        return yn({ inputs: { real: r, imag: o }, backend: n });
    }
    const s = Ke(rt(t), e);
    return n.makeTensorInfo(t, e, s);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function As(n) {
    const { inputs: t, backend: e } = n,
        { x: s } = t;
    return (
        e.incRef(s.dataId), { dataId: s.dataId, shape: s.shape, dtype: s.dtype }
    );
}
const OL = { kernelName: Ia, backendName: 'cpu', kernelFunc: As };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function ho(n) {
    const { inputs: t, backend: e } = n,
        { input: s } = t,
        r = e.data.get(s.dataId).complexTensorInfos.real,
        o = e.data.get(r.dataId).values;
    return e.makeTensorInfo(r.shape, r.dtype, o);
}
const FL = { kernelName: Xp, backendName: 'cpu', kernelFunc: ho };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function zv(n, t, e, s) {
    if (s === 'int32') {
        const r = Int32Array.from(n);
        return [t, 'int32', r];
    }
    if (s === 'bool') {
        const r = go([0], e),
            [o, i] = ke((a, l) => (a !== l ? 1 : 0))(t, [], n, r, 'bool');
        return [i, 'bool', o];
    }
    throw new Error(`Error in Cast: failed to cast ${e} to ${s}`);
}
function vr(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { dtype: o } = s;
    if (o === 'complex64') {
        if (r.dtype === 'complex64')
            return As({ inputs: { x: r }, backend: e });
        const u = vc(e, r.shape, r.dtype),
            h = vr({
                inputs: { x: r },
                backend: e,
                attrs: { dtype: 'float32' },
            }),
            d = yn({ inputs: { real: h, imag: u }, backend: e });
        return (
            e.disposeIntermediateTensorInfo(u),
            e.disposeIntermediateTensorInfo(h),
            d
        );
    }
    if (r.dtype === 'complex64') {
        const u = ho({ inputs: { input: r }, backend: e }),
            h = vr({ inputs: { x: u }, backend: e, attrs: { dtype: o } });
        return e.disposeIntermediateTensorInfo(u), h;
    }
    if (!Rb(r.dtype, o)) {
        const u = As({ inputs: { x: r }, backend: e });
        return { dataId: u.dataId, shape: u.shape, dtype: o };
    }
    const i = e.data.get(r.dataId).values,
        [a, l, c] = zv(i, r.shape, r.dtype, o);
    return e.makeTensorInfo(a, l, c);
}
const LL = { kernelName: ha, backendName: 'cpu', kernelFunc: vr };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Re(n, t, e, s) {
    return e == null
        ? ({ inputs: r, backend: o }) => {
              const { a: i, b: a } = r,
                  l = o;
              It([i, a], n);
              const c = l.data.get(i.dataId).values,
                  u = l.data.get(a.dataId).values,
                  h = i.dtype === 'string' ? Xs(c) : c,
                  d = i.dtype === 'string' ? Xs(u) : u,
                  p = s || i.dtype,
                  [f, m] = t(i.shape, a.shape, h, d, p);
              return l.makeTensorInfo(m, p, f);
          }
        : ({ inputs: r, backend: o }) => {
              const { a: i, b: a } = r,
                  l = o;
              if (i.dtype === 'complex64' || a.dtype === 'complex64') {
                  const c = vr({
                          inputs: { x: i },
                          backend: l,
                          attrs: { dtype: 'complex64' },
                      }),
                      u = l.data.get(c.dataId),
                      h = u.complexTensorInfos.real,
                      d = u.complexTensorInfos.imag,
                      p = l.data.get(h.dataId).values,
                      f = l.data.get(d.dataId).values,
                      m = vr({
                          inputs: { x: a },
                          backend: l,
                          attrs: { dtype: 'complex64' },
                      }),
                      g = l.data.get(m.dataId),
                      y = g.complexTensorInfos.real,
                      b = g.complexTensorInfos.imag,
                      w = l.data.get(y.dataId).values,
                      x = l.data.get(b.dataId).values,
                      [v, C, $] = e(i.shape, a.shape, p, f, w, x),
                      T = l.makeTensorInfo($, 'float32', v),
                      N = l.makeTensorInfo($, 'float32', C),
                      R = yn({ inputs: { real: T, imag: N }, backend: l });
                  return (
                      l.disposeIntermediateTensorInfo(c),
                      l.disposeIntermediateTensorInfo(m),
                      l.disposeIntermediateTensorInfo(T),
                      l.disposeIntermediateTensorInfo(N),
                      R
                  );
              } else {
                  const c = l.data.get(i.dataId).values,
                      u = l.data.get(a.dataId).values,
                      h = s || i.dtype,
                      [d, p] = t(i.shape, a.shape, c, u, h);
                  return l.makeTensorInfo(p, h, d);
              }
          };
}
function ag(n) {
    return (t, e, s, r, o, i) => {
        const a = Dt(t, e),
            l = rt(a),
            c = a.length,
            u = _t(a),
            h = Ve('float32', l),
            d = Ve('float32', l),
            p = Qo(t, a),
            f = Qo(e, a),
            m = Ks(s, r),
            g = Ks(o, i),
            y = t.length,
            b = _t(t),
            w = e.length,
            x = _t(e);
        if (p.length + f.length === 0)
            for (let v = 0; v < h.length; v++) {
                const C = v % m.length,
                    $ = v % g.length,
                    T = n(m[C * 2], m[C * 2 + 1], g[$ * 2], g[$ * 2 + 1]);
                (h[v] = T.real), (d[v] = T.imag);
            }
        else
            for (let v = 0; v < h.length; v++) {
                const C = di(v, c, u),
                    $ = C.slice(-y);
                p.forEach((E) => ($[E] = 0));
                const T = ks($, y, b),
                    N = C.slice(-w);
                f.forEach((E) => (N[E] = 0));
                const R = ks(N, w, x),
                    P = n(m[T * 2], m[T * 2 + 1], g[R * 2], g[R * 2 + 1]);
                (h[v] = P.real), (d[v] = P.imag);
            }
        return [h, d, a];
    };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Bv = ke((n, t) => n + t),
    PL = ag((n, t, e, s) => ({ real: n + e, imag: t + s })),
    ri = Re(pi, Bv, PL),
    zL = { kernelName: pi, backendName: 'cpu', kernelFunc: ri };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function lg(n, t, e, s, r) {
    const o = rt(s),
        i = Ke(r, e);
    for (let a = 0; a < n.length; a++) {
        const l = n[a];
        if (l < 0) throw new Error('Input x must be non-negative!');
        l >= r || (o > 0 ? (i[l] += t[a]) : (i[l] += 1));
    }
    return i;
}
function Mv(n, t, e, s = !1) {
    const r = n.shape[0],
        o = n.shape[1],
        i = Pt([r, e], t.dtype);
    for (let a = 0; a < r; a++)
        for (let l = 0; l < o; l++) {
            const c = n.get(a, l);
            if (c < 0) throw new Error('Input x must be non-negative!');
            c >= e ||
                (s
                    ? i.set(1, a, c)
                    : t.size > 0
                    ? i.set(i.get(a, c) + t.get(a, l), a, c)
                    : i.set(i.get(a, c) + 1, a, c));
        }
    return i;
}
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Vv = ke((n, t) => n & t),
    BL = Re(Wc, Vv),
    ML = { kernelName: Wc, backendName: 'cpu', kernelFunc: BL };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Os(n) {
    return (t, e, s) => {
        const r = be(e, t.length);
        for (let o = 0; o < t.length; ++o) r[o] = n(t[o], s);
        return r;
    };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Yt(n, t, e) {
    const s = Os(t);
    return Dr(n, s, e);
}
function Dr(n, t, e) {
    return ({ inputs: s, attrs: r, backend: o }) => {
        const { x: i } = s;
        It(i, n);
        const a = o,
            l = a.data.get(i.dataId).values;
        let c;
        if (i.dtype === 'string') {
            if (!Array.isArray(l))
                throw new Error(
                    "String tensor's value was not an instance of Array"
                );
            c = Xs(l);
        } else c = l;
        const u = e || i.dtype,
            h = t(c, u, r);
        return a.makeTensorInfo(i.shape, u, h);
    };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Wv = Os((n) => Math.ceil(n)),
    VL = Dr(da, Wv),
    WL = { kernelName: da, backendName: 'cpu', kernelFunc: VL };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Uv(n, t, e, s) {
    const r = be(e, rt(t));
    if (s && e !== 'string') {
        let o = 0;
        n.forEach((i) => {
            const a = rt(i.shape);
            r.set(i.vals, o), (o += a);
        });
    } else {
        let o = 0;
        n.forEach((i) => {
            const a = e === 'string' ? Xs(i.vals) : i.vals;
            let l = 0;
            for (let c = 0; c < i.shape[0]; ++c) {
                const u = c * t[1] + o;
                for (let h = 0; h < i.shape[1]; ++h) r[u + h] = a[l++];
            }
            o += i.shape[1];
        });
    }
    return r;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Gv = ke((n, t) => (n === t ? 1 : 0)),
    Hv = Re(Zc, Gv, null, 'bool'),
    UL = { kernelName: Zc, backendName: 'cpu', kernelFunc: Hv };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const jv = Os((n) => Math.exp(n)),
    qv = Dr(xa, jv, 'float32'),
    GL = { kernelName: xa, backendName: 'cpu', kernelFunc: qv };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Kv = Os((n) => Math.expm1(n)),
    HL = Dr(wa, Kv),
    jL = { kernelName: wa, backendName: 'cpu', kernelFunc: HL };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Xv = Os((n) => Math.floor(n)),
    qL = Dr(va, Xv),
    KL = { kernelName: va, backendName: 'cpu', kernelFunc: qL };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Yv = ke((n, t) => Math.floor(n / t)),
    XL = Re(ka, Yv, null, 'int32'),
    YL = { kernelName: ka, backendName: 'cpu', kernelFunc: XL };
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Zv(n, t, e, s, r, o, i, a, l) {
    const c = Pt([s, o], e);
    for (let u = 0; u < s; u++) {
        const h = [];
        let d = 0;
        for (let p = 0; p < r; p++) {
            const f = n[u * r + p];
            (d += f * i[p]), h.push(f);
        }
        if (d < 0 || d >= l / o)
            throw new Error(`Invalid indices: ${h} does not index into ${a}`);
        for (let p = 0; p < o; p++)
            c.values[u * o + p] = t.get(...t.indexToLoc(d * o + p));
    }
    return c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Jv(n, t, e) {
    const s = Pt(e, n.dtype);
    for (let r = 0; r < s.size; ++r) {
        const i = s.indexToLoc(r).slice(),
            a = i[0],
            l = i[2],
            c = t.locToIndex([a, l]);
        i[2] = t.values[c];
        const u = n.locToIndex(i);
        0 <= u && u < n.values.length && (s.values[r] = n.values[u]);
    }
    return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Qv = ke((n, t) => (n > t ? 1 : 0)),
    ZL = Re(eu, Qv, null, 'bool'),
    JL = { kernelName: eu, backendName: 'cpu', kernelFunc: ZL };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const tk = ke((n, t) => (n >= t ? 1 : 0)),
    QL = Re(Sa, tk, null, 'bool'),
    tP = { kernelName: Sa, backendName: 'cpu', kernelFunc: QL };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const ek = ke((n, t) => (n < t ? 1 : 0)),
    eP = Re(su, ek, null, 'bool'),
    nP = { kernelName: su, backendName: 'cpu', kernelFunc: eP };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const nk = ke((n, t) => (n <= t ? 1 : 0)),
    sP = Re(ru, nk, null, 'bool'),
    rP = { kernelName: ru, backendName: 'cpu', kernelFunc: sP };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function sk(n, t, e) {
    const s = (t - n) / (e - 1),
        r = Ke(e, 'float32');
    r[0] = n;
    for (let o = 1; o < r.length; o++) r[o] = r[o - 1] + s;
    return r;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const rk = Os((n) => Math.log(n)),
    oP = Dr(Ta, rk),
    iP = { kernelName: Ta, backendName: 'cpu', kernelFunc: oP };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function ok(n, t, e, s) {
    const r = Ve(s, rt(e));
    for (let o = 0; o < r.length; ++o) {
        const i = o * t;
        let a = n[i];
        for (let l = 0; l < t; ++l) {
            const c = n[i + l];
            (Number.isNaN(c) || c > a) && (a = c);
        }
        r[o] = a;
    }
    return r;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const ik = ke((n, t) => Math.max(n, t)),
    aP = Re(_a, ik),
    lP = { kernelName: _a, backendName: 'cpu', kernelFunc: aP };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const ak = ke((n, t) => Math.min(n, t)),
    cP = Re(Aa, ak),
    uP = { kernelName: Aa, backendName: 'cpu', kernelFunc: cP };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const cg = ke((n, t) => n * t),
    hP = ag((n, t, e, s) => ({ real: n * e - t * s, imag: n * s + t * e })),
    kh = Re(Da, cg, hP),
    dP = { kernelName: Da, backendName: 'cpu', kernelFunc: kh };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function lk(n, t, e) {
    const s = Ir(-1, e);
    return cg([], t, s, n, e);
}
function pP(n) {
    const { inputs: t, backend: e } = n,
        { x: s } = t;
    It(s, 'neg');
    const r = e.data.get(s.dataId).values,
        [o, i] = lk(r, s.shape, s.dtype);
    return e.makeTensorInfo(i, s.dtype, o);
}
const fP = { kernelName: mu, backendName: 'cpu', kernelFunc: pP };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const ck = ke((n, t) => (n !== t ? 1 : 0)),
    mP = Re(gu, ck, null, 'bool'),
    gP = { kernelName: gu, backendName: 'cpu', kernelFunc: mP };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function ug(n, t, e, s, r) {
    const o = t.length,
        i = rt(t),
        a = _t(t),
        l = _t(r),
        c = Ve(e, rt(r));
    for (let u = 0; u < i; ++u) {
        const h = di(u, o, a),
            d = new Array(h.length);
        for (let f = 0; f < d.length; f++) d[f] = h[s[f]];
        const p = ks(d, o, l);
        c[p] = n[u];
    }
    return c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function hn(n) {
    const { inputs: t, attrs: e, backend: s } = n,
        { x: r } = t,
        { perm: o } = e;
    It(r, 'transpose');
    const i = r.shape.length,
        a = new Array(i);
    for (let h = 0; h < a.length; h++) a[h] = r.shape[o[h]];
    const l = s.data.get(r.dataId).values,
        c = ug(l, r.shape, r.dtype, o, a);
    return { dataId: s.write(c, a, r.dtype), shape: a, dtype: r.dtype };
}
const yP = { kernelName: Vo, backendName: 'cpu', kernelFunc: hn };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function uk(n, t, e, s) {
    const [r, o] = Pe(n, s),
        i = vn(t, 'int32'),
        a = Ke(rt(r), i),
        l = rt(o);
    for (let c = 0; c < a.length; ++c) {
        const u = c * l;
        let h = 1;
        for (let d = 0; d < l; ++d) h *= e[u + d];
        a[c] = h;
    }
    return { outVals: a, outShape: r, outDtype: i };
}
function bP(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { axis: o, keepDims: i } = s;
    It(r, 'prod');
    const a = r.shape.length,
        l = Bt(o, r.shape),
        c = me(l, a);
    let u = l,
        h = r;
    const d = [];
    c != null &&
        ((h = hn({ inputs: { x: r }, backend: e, attrs: { perm: c } })),
        d.push(h),
        (u = we(u.length, a)));
    const p = e.data.get(h.dataId).values,
        { outVals: f, outShape: m, outDtype: g } = uk(h.shape, h.dtype, p, u);
    let y = m;
    return (
        i && (y = xe(m, l)),
        d.forEach((b) => e.disposeIntermediateTensorInfo(b)),
        e.makeTensorInfo(y, g, f)
    );
}
const xP = { kernelName: ku, backendName: 'cpu', kernelFunc: bP };
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function wP(n, t, e) {
    n.forEach((s, r) => {
        if (s < 0 || s >= e) {
            const o = di(r, t.length, _t(t)).join(',');
            throw new Error(`indices[${o}] = ${s} is not in [0, ${e})`);
        }
    });
}
function vP(n, t) {
    for (let e = 0; e < n.length; ++e) {
        const s = n[e],
            r = e === n.length - 1 ? t : n[e + 1].length;
        if (s.length === 0) throw new Error('Ragged splits may not be empty');
        if (s[0] < 0) throw new Error('Ragged splits must be non-negative');
        if (s[s.length - 1] > r)
            throw new Error('Ragged splits must not point past values');
        for (let o = 1; o < s.length; ++o)
            if (s[o - 1] > s[o])
                throw new Error(
                    'Ragged splits must be sorted in ascending order'
                );
    }
}
function kP(n, t, e, s) {
    const r = [];
    let o = 0;
    const i = t.length - 1 + e.length,
        a = new Array(i).fill(null).map(() => [0]);
    vP(e, s);
    let l = 1;
    for (let c = 0; c < t.length - 1; ++c) {
        l *= t[c];
        const u = t[c + 1];
        for (let h = 1; h < l + 1; ++h) a[c].push(h * u);
    }
    for (let c = 0; c < n.length; ++c) {
        let u = n[c],
            h = n[c] + 1;
        for (let d = 0; d < e.length; ++d) {
            const p = e[d],
                f = d + t.length - 1;
            if (f >= 0) {
                const m = a[f],
                    g = m[m.length - 1] - p[u];
                for (let y = u; y < h; ++y) a[f].push(p[y + 1] + g);
            }
            (u = p[u]), (h = p[h]);
        }
        h !== u && (r.push([u, h]), (o += h - u));
    }
    return { outSplits: a, valueSlices: r, numValues: o };
}
function SP(n) {
    const t = [];
    for (let e = 0; e < n.length; ++e) {
        const s = n[e].length,
            r = be('int32', s);
        t.push(r), n[e].forEach((o, i) => (r[i] = o));
    }
    return t;
}
function Uy(n, t) {
    const e = n.slice(0, t);
    for (; e.length < t; ) e.push(1);
    for (let s = t; s < n.length; s++) e[t - 1] *= n[s];
    return e;
}
function IP(n, t, e, s, r, o) {
    const i = Uy(t, 2)[1],
        a = Uy(o, 2)[1];
    let l = 0;
    for (const c of e)
        for (let u = c[0]; u < c[1]; ++u) {
            for (let h = 0; h < s; ++h) r[l * a + h] = n[u * i + h];
            ++l;
        }
}
function CP(n, t, e, s, r) {
    const o = t.slice();
    o[0] = r;
    const i = be(e, rt(o)),
        a = n.length,
        l = a === 0 ? 0 : a / t[0];
    return IP(n, t, s, l, i, o), [i, o];
}
function hk(n, t, e, s, r, o, i, a) {
    if (n.length === 0) throw new Error('paramsNestedSplits must be non empty');
    if (t[0].length === 0) throw new Error('Split tensors must not be scalars');
    const l = t[0][0] - 1;
    if ((wP(o, i, l), s.length === 0))
        throw new Error('params.rank must be nonzero');
    const c = s[0],
        { outSplits: u, valueSlices: h, numValues: d } = kP(o, i, n, c),
        p = SP(u),
        f = CP(e, s, r, h, d);
    return [p, f[0], f[1]];
}
/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Gy = 2147483647;
function dk(n, t, e, s, r, o, i) {
    if (t.length > 1) throw new Error('starts must be a scalar or vector');
    if (r.length > 1) throw new Error('limits must be a scalar or vector');
    if (i.length > 1) throw new Error('deltas must be a scalar or vector');
    const a = t.length === 0,
        l = r.length === 0,
        c = i.length === 0,
        u = [];
    a || u.push(t[0]), l || u.push(r[0]), c || u.push(i[0]);
    for (let g = 1; g < u.length; ++g)
        if (u[g] !== u[g - 1])
            throw new Error(
                'starts, limits, and deltas must have the same shape'
            );
    const h = u.length === 0 ? 1 : u[0],
        d = be('int32', h + 1);
    d[0] = 0;
    for (let g = 0; g < h; ++g) {
        const y = a ? n[0] : n[g],
            b = l ? s[0] : s[g],
            w = c ? o[0] : o[g];
        if (w === 0) throw new Error('Requires delta != 0');
        let x;
        if ((w > 0 && b < y) || (w < 0 && b > y)) x = 0;
        else if (((x = Math.ceil(Math.abs((b - y) / w))), x > Gy))
            throw new Error(`Requires ((limit - start) / delta) <= ${Gy}`);
        d[g + 1] = d[g] + x;
    }
    const p = d[h],
        f = be(e, p);
    let m = 0;
    for (let g = 0; g < h; ++g) {
        const y = d[g + 1] - d[g];
        let b = a ? n[0] : n[g];
        const w = c ? o[0] : o[g];
        for (let x = 0; x < y; ++x) (f[m++] = b), (b += w);
    }
    return [d, f];
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var zn = is;
class kc {
    constructor(t, e, s, r, o, i, a, l, c, u) {
        (this.shape = t),
            (this.shapeShape = e),
            (this.values = s),
            (this.valuesShape = r),
            (this.valuesDType = o),
            (this.defaultValue = i),
            (this.defaultValueShape = a),
            (this.rowPartitionValues = l),
            (this.rowPartitionValuesShapes = c),
            (this.rowPartitionTypes = Zx(u)),
            (this.raggedRank = Jx(this.rowPartitionTypes));
    }
    getRowPartitionTypeByDimension(t) {
        return this.rowPartitionTypes[0] === zn.FIRST_DIM_SIZE
            ? this.rowPartitionTypes[t + 1]
            : this.rowPartitionTypes[t];
    }
    getRowPartitionTensor(t) {
        return this.rowPartitionTypes[0] === zn.FIRST_DIM_SIZE
            ? this.rowPartitionValues[t + 1]
            : this.rowPartitionValues[t];
    }
    getMaxWidth(t) {
        const e = this.getRowPartitionTensor(t - 1);
        switch (this.getRowPartitionTypeByDimension(t - 1)) {
            case zn.VALUE_ROWIDS:
                return kc.getMaxWidthValueRowID(e);
            case zn.ROW_SPLITS:
                return kc.getMaxWidthRowSplit(e);
            default:
                throw new Error(
                    `Cannot handle partition type ${
                        zn[this.getRowPartitionTypeByDimension(t - 1)]
                    }`
                );
        }
    }
    static getMaxWidthRowSplit(t) {
        const e = t.length;
        if (e === 0 || e === 1) return 0;
        let s = 0;
        for (let r = 0; r < e - 1; ++r) {
            const o = t[r + 1] - t[r];
            o > s && (s = o);
        }
        return s;
    }
    static getMaxWidthValueRowID(t) {
        const e = t.length;
        if (e === 0) return 0;
        let s = 0,
            r = t[0],
            o = 0;
        for (let i = 1; i < e; ++i) {
            const a = t[i];
            a !== r && ((r = a), (o = Math.max(i - s, o)), (s = i));
        }
        return Math.max(e - s, o);
    }
    tensorShapeFromTensor(t, e, s = !0) {
        if (e.length === 0) {
            if (t[0] === -1) return [];
            throw new Error(
                'The only valid scalar shape tensor is the fully unknown shape specified as -1.'
            );
        }
        return jy(t, s);
    }
    calculateOutputSize(t) {
        const e = this.valuesShape,
            s = this.defaultValueShape;
        Qx(s, e);
        const r = this.tensorShapeFromTensor(this.shape, this.shapeShape),
            i = Yx(this.raggedRank, r, e);
        i[0] < 0 && (i[0] = t);
        for (let a = 1; a <= this.raggedRank; ++a)
            i[a] < 0 && (i[a] = this.getMaxWidth(a));
        return i;
    }
    calculateFirstParentOutputIndex(t, e, s) {
        const r = Math.min(t, s),
            o = [];
        let i = 0;
        for (let a = 0; a < r; ++a, i += e) o.push(i);
        for (let a = r; a < t; ++a) o.push(-1);
        return (
            _(
                o.length === t,
                () => 'Final length of result must be equal to firstDimension.'
            ),
            o
        );
    }
    calculateOutputIndexRowSplit(t, e, s, r) {
        const o = t.length,
            i = [];
        for (let a = 0; a < o - 1; ++a) {
            const l = t[a + 1] - t[a];
            let c = Math.min(r, l),
                u = e[a];
            u === -1 && (c = 0);
            for (let h = 0; h < c; ++h) i.push(u), (u += s);
            for (let h = 0; h < l - c; ++h) i.push(-1);
        }
        if (o > 0 && i.length !== t[o - 1])
            throw new Error('Invalid row split size.');
        return i;
    }
    calculateOutputIndexValueRowID(t, e, s, r) {
        const o = t.length,
            i = [];
        if (o === 0) return [];
        let a = 0,
            l = t[0];
        if (l >= e.length)
            throw new Error(
                `Got currentValueRowId=${l}, which is not less than ${e.length}`
            );
        let c = e[l];
        i.push(c);
        for (let u = 1; u < o; ++u) {
            const h = t[u];
            if (h === l) c >= 0 && (++a, a < r ? (c += s) : (c = -1));
            else {
                if (((a = 0), (l = h), h >= e.length))
                    throw new Error(
                        `Got nextValueRowId=${h} which is not less than ${e.length}`
                    );
                c = e[h];
            }
            i.push(c);
        }
        if (i.length !== t.length) throw new Error('Invalid row ids.');
        return i;
    }
    calculateOutputIndex(t, e, s, r) {
        const o = this.getRowPartitionTensor(t),
            i = this.getRowPartitionTypeByDimension(t);
        switch (i) {
            case zn.VALUE_ROWIDS:
                return this.calculateOutputIndexValueRowID(o, e, s, r);
            case zn.ROW_SPLITS:
                if (o.length - 1 > e.length)
                    throw new Error(
                        `Row partition size is greater than output size: ${
                            o.length - 1
                        } > ${e.length}`
                    );
                return this.calculateOutputIndexRowSplit(o, e, s, r);
            default:
                throw new Error(`Unsupported partition type: ${zn[i]}`);
        }
    }
    getFirstDimensionSize() {
        const t = this.rowPartitionValues[0];
        if (this.rowPartitionTypes.length === 0)
            throw new Error('No row_partition_types given.');
        const e = this.rowPartitionTypes[0];
        switch (e) {
            case zn.FIRST_DIM_SIZE:
                return t[0];
            case zn.VALUE_ROWIDS:
                throw new Error(
                    'Cannot handle VALUE_ROWIDS in first dimension.'
                );
            case zn.ROW_SPLITS:
                return this.rowPartitionValuesShapes[0][0] - 1;
            default:
                throw new Error(`Cannot handle type ${zn[e]}`);
        }
    }
    compute() {
        if (this.rowPartitionValues[0].length <= 0)
            throw new Error(
                'Invalid first partition input. Tensor requires at least one element.'
            );
        const e = this.getFirstDimensionSize(),
            s = this.calculateOutputSize(e),
            r = new Array(this.raggedRank + 1);
        r[r.length - 1] = 1;
        for (let l = r.length - 2; l >= 0; --l) r[l] = r[l + 1] * s[l + 1];
        const o = jy(s, !1),
            i = be(this.valuesDType, rt(o));
        if (r[0] * s[0] > 0) {
            let l = this.calculateFirstParentOutputIndex(e, r[0], s[0]);
            for (let c = 1; c <= this.raggedRank; ++c)
                l = this.calculateOutputIndex(c - 1, l, r[c], s[c]);
            this.setOutput(this.raggedRank, l, i, o);
        }
        return [o, i];
    }
    setOutput(t, e, s, r) {
        if (s.length === 0) return;
        const o = this.values,
            i = s;
        let a = r.slice();
        a = a.slice(t + 1);
        const l = rt(a),
            c = e.length;
        let u = this.defaultValue;
        if (u.length !== l && u.length !== 1) {
            const f = this.defaultValueShape;
            Y(() => {
                const m = j(u, f);
                u = Go(m, a).dataSync();
            });
        }
        let h = 0,
            d = 0,
            p = 0;
        for (let f = 0; f <= c; ++f) {
            let m = f < c ? e[f] : -1;
            if (m === p) {
                ++p;
                continue;
            }
            if (d < p) {
                const g = o.subarray(h * l),
                    y = i.subarray(d * l),
                    b = (p - d) * l;
                Hy(y, g, b);
            }
            if (f >= c) {
                const g = s.length;
                m = Math.floor(g / l);
            }
            if (m > p)
                if (this.defaultValue.length === 1)
                    i.subarray(p * l, m * l).fill(this.defaultValue[0]),
                        (p = m);
                else
                    for (; m > p; ) {
                        const g = i.slice(p * l);
                        Hy(g, u, l), ++p;
                    }
            m < 0 ? ((h = f + 1), (d = p)) : ((h = f), (d = p), (p = d + 1));
        }
    }
}
function Hy(n, t, e) {
    for (let s = 0; s < e; s++) n[s] = t[s];
}
function jy(n, t) {
    const e = [];
    for (let s of n) {
        if (s < 0) {
            if (!t) throw new Error(`Dimension ${s} must be >= 0`);
            if (s < -1) throw new Error(`Dimension ${s} must be >= -1`);
            s = -1;
        }
        e.push(s);
    }
    return e;
}
function pk(n, t, e, s, r, o, i, a, l, c) {
    return new kc(n, t, e, s, r, o, i, a, l, c).compute();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function fk(n, t, e, s) {
    const r = n === t,
        o = n < t && e < 0,
        i = t < n && e > 1;
    if (r || o || i) return Ke(0, s);
    const a = Math.abs(Math.ceil((t - n) / e)),
        l = Ke(a, s);
    t < n && e === 1 && (e = -1), (l[0] = n);
    for (let c = 1; c < l.length; c++) l[c] = l[c - 1] + e;
    return l;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const mk = Os((n) => 1 / Math.sqrt(n)),
    $P = Dr(Ba, mk),
    NP = { kernelName: Ba, backendName: 'cpu', kernelFunc: $P };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Kr(n, t, e, s, r, o, i, a, l, c) {
    const u = [s / r, r],
        h = n.values,
        d = t.values;
    if (s === 0) return Pt(e, t.dtype);
    const p = l instanceof Te ? l : Pt(u, t.dtype);
    typeof l == 'string' || typeof l == 'number'
        ? p.values.fill(l)
        : typeof l == 'boolean' && p.values.fill(+l);
    for (let f = 0; f < o; f++) {
        const m = [];
        let g = 0;
        for (let y = 0; y < i; y++) {
            const b = h[f * i + y];
            m.push(b), (g += b * a[y]);
        }
        if (g < 0 || g >= s / r)
            throw new Error(`Invalid indices: ${m} does not index into ${e}`);
        for (let y = 0; y < r; y++)
            c
                ? (p.values[g * r + y] += d[f * r + y])
                : (p.values[g * r + y] = t.rank === 0 ? d[0] : d[f * r + y]);
    }
    return p;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const TP = Os((n) => 1 / (1 + Math.exp(-n))),
    gk = Yt(Ga, (n) => 1 / (1 + Math.exp(-n))),
    EP = { kernelName: Ga, backendName: 'cpu', kernelFunc: gk };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function yk(n, t, e, s, r) {
    const o = mm(s, t, e),
        i = rt(e),
        a = _t(s);
    if (o) {
        const h = gm(t, a);
        return r === 'string' ? n.slice(h, h + i) : n.subarray(h, h + i);
    }
    const l = r === 'string' ? Xs(n) : n,
        c = Pt(s, r, l),
        u = Pt(e, r);
    for (let h = 0; h < u.size; ++h) {
        const d = u.indexToLoc(h),
            p = d.map((f, m) => f + t[m]);
        u.set(c.get(...p), ...d);
    }
    return r === 'string' ? x1(u.values) : u.values;
}
function po(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { begin: o, size: i } = s;
    It(r, 'slice');
    const [a, l] = ah(r, o, i);
    pm(r, a, l);
    const c = e.data.get(r.dataId).values,
        u = yk(c, a, l, r.shape, r.dtype);
    return e.makeTensorInfo(l, r.dtype, u);
}
const _P = { kernelName: Tu, backendName: 'cpu', kernelFunc: po };
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function bk(n, t, e, s, r, o, i) {
    const a = t[0],
        l = o[0],
        c = new Array(l),
        u = new Array(a),
        h = t[1];
    if (l === 0) {
        if (a !== 0) throw new Error(i1(a));
        const g = be(e, 0),
            y = be(r, 0);
        return [g, [0, h], y, c, u];
    }
    let d = !0,
        p = 0;
    const f = new Array(l).fill(0);
    for (let g = 0; g < a; ++g) {
        const y = n[g * h];
        if (y < 0) throw new Error(a1(g, y));
        if (y >= l) throw new Error(l1(g, y, l));
        ++f[y], (d = d && y >= p), (p = y);
    }
    let m = !0;
    for (let g = 0; g < l; ++g) {
        const y = f[g] === 0;
        (c[g] = y),
            (m = m && !y),
            (f[g] = Math.max(f[g], 1)),
            g > 0 && (f[g] += f[g - 1]);
    }
    if (m && d) {
        const g = n,
            y = s;
        for (let b = 0; b < a; ++b) u[b] = b;
        return [g, [a, h], y, c, u];
    } else {
        const g = f[l - 1],
            y = be(e, g * h),
            b = be(r, g),
            w = new Array(l).fill(0);
        for (let x = 0; x < a; ++x) {
            const v = n[x * h],
                C = w[v],
                $ = (v === 0 ? 0 : f[v - 1]) + C;
            w[v]++;
            for (let T = 0; T < h; ++T) y[$ * h + T] = n[x * h + T];
            (b[$] = s[x]), (u[x] = $);
        }
        for (let x = 0; x < l; ++x)
            if (w[x] === 0) {
                const C = x === 0 ? 0 : f[x - 1];
                y[C * h + 0] = x;
                for (let $ = 1; $ < h; ++$) y[C * h + $] = 0;
                b[C] = i;
            }
        return [y, [g, h], b, c, u];
    }
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function xk(n, t, e, s, r) {
    const o = rt(s),
        i = t[0],
        a = r.length,
        l = [];
    let c = 1,
        u = -1;
    for (let g = 0; g < a; ++g) {
        const y = r[g];
        if (y === -1) {
            if (u !== -1) throw new Error(c1(u, g));
            (u = g), l.push(1);
        } else {
            if (y < 0) throw new Error(u1(g, y));
            (c *= y), l.push(y);
        }
    }
    if (u !== -1) {
        if (c <= 0) throw new Error(h1());
        const g = Math.trunc(o / c);
        if (c * g !== o) throw new Error(d1(s, l));
        l[u] = g;
    }
    if (rt(l) !== o) throw new Error(p1(s, l));
    const d = s.length,
        p = [];
    if (d > 0) {
        p[d - 1] = 1;
        for (let g = d - 2; g >= 0; --g) p[g] = p[g + 1] * s[g + 1];
    }
    const f = [];
    if (a > 0) {
        f[a - 1] = 1;
        for (let g = a - 2; g >= 0; --g) f[g] = f[g + 1] * l[g + 1];
    }
    const m = be(e, i * a);
    for (let g = 0; g < i; ++g) {
        let y = 0;
        for (let b = 0; b < d; ++b) y += n[g * d + b] * p[b];
        for (let b = 0; b < a; ++b)
            (m[g * a + b] = Math.trunc(y / f[b])), (y %= f[b]);
    }
    return [m, [i, a], l];
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function hg(n, t, e, s, r, o = !1, i = 0) {
    const a = s.length,
        l = [t[0], n.length / t[0]],
        c = l[1],
        h = a > 0 ? r[a - 1] + 1 : 0;
    if (h < 0) throw new Error(Td());
    const d = t.slice();
    d[0] = h;
    const p = d.reduce((w, x) => w * x, 1),
        f = be(e, p);
    if (a === 0) return h > 0 && f.fill(i), [f, d];
    if (h <= 0) throw new Error(Td());
    let m = 0,
        g = 1,
        y = 0,
        b = r[m];
    for (;;) {
        let w = 0;
        if (g < a) {
            if (((w = r[g]), b === w)) {
                ++g;
                continue;
            }
            if (b >= w) throw new Error(f1());
        }
        if (b < 0 || b >= h) throw new Error(m1(b, h));
        b > y && f.fill(i, y * c, b * c);
        for (let x = m; x < g; ++x) {
            const v = s[x];
            if (v < 0 || v >= l[0]) throw new Error(g1(x, s[x], l[0]));
            for (let C = 0; C < c; C++) f[b * c + C] += n[v * c + C];
        }
        if (o) for (let x = 0; x < c; x++) f[b * c + x] /= g - m;
        if (((m = g), ++g, (y = b + 1), (b = w), g > a)) break;
    }
    return y < h && f.fill(i, y * c, h * c), [f, d];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const AP = Os((n) => Math.sqrt(n)),
    RP = Yt(ja, (n) => Math.sqrt(n)),
    DP = { kernelName: ja, backendName: 'cpu', kernelFunc: RP };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const wk = ke((n, t) => {
        const e = n - t;
        return e * e;
    }),
    OP = Re(qa, wk),
    FP = { kernelName: qa, backendName: 'cpu', kernelFunc: OP };
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const vk = Os((n, t) => {
        const { pattern: e, replaceGlobal: s, rewrite: r } = t;
        return n.replace(new RegExp(e, s ? 'g' : ''), r);
    }),
    LP = Dr(Du, vk),
    PP = { kernelName: Du, backendName: 'cpu', kernelFunc: LP };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function kk(n, t, e, s) {
    const r = Pt(n, t.dtype);
    for (let o = 0; o < r.size; o++) {
        const i = r.indexToLoc(o),
            a = new Array(i.length);
        for (let l = 0; l < a.length; l++) a[l] = i[l] * e[l] + s[l];
        r.set(t.get(...a), ...i);
    }
    return r;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class zP {
    constructor(t, e, s, r, o, i) {
        (this.separator = lr(t)),
            (this.nGramWidths = e),
            (this.leftPad = lr(s)),
            (this.rightPad = lr(r)),
            (this.padWidth = o),
            (this.preserveShort = i);
    }
    getPadWidth(t) {
        return Math.min(this.padWidth < 0 ? t - 1 : this.padWidth, t - 1);
    }
    getNumNGrams(t, e) {
        const s = this.getPadWidth(e);
        return Math.max(0, t + 2 * s - e + 1);
    }
    createNGrams(t, e, s, r, o, i) {
        for (let a = 0; a < o; ++a) {
            const l = this.getPadWidth(i),
                c = Math.max(0, l - a),
                u = Math.max(0, l - (o - (a + 1))),
                h = i - (c + u),
                d = e + (c > 0 ? 0 : a - l);
            let p = 0;
            p += c * this.leftPad.length;
            for (let b = 0; b < h; ++b) p += t[d + b].length;
            p += u * this.rightPad.length;
            const f = c + u + h - 1;
            (p += f * this.separator.length), (s[r + a] = new Uint8Array(p));
            const m = s[r + a];
            let g = 0;
            const y = (b) => b.forEach((w) => (m[g++] = w));
            for (let b = 0; b < c; ++b) y(this.leftPad), y(this.separator);
            for (let b = 0; b < h - 1; ++b) y(t[d + b]), y(this.separator);
            if (h > 0) {
                y(t[d + h - 1]);
                for (let b = 0; b < u; ++b) y(this.separator), y(this.rightPad);
            } else {
                for (let b = 0; b < u - 1; ++b)
                    y(this.rightPad), y(this.separator);
                y(this.rightPad);
            }
        }
    }
    compute(t, e) {
        const s = t.length,
            r = e.length;
        if (r > 0) {
            let l = e[0];
            if (l !== 0)
                throw new Error(`First split value must be 0, got ${l}`);
            for (let c = 1; c < r; ++c) {
                let u = e[c] >= l;
                if (((u = u && e[c] <= s), !u))
                    throw new Error(
                        `Invalid split value ${e[c]}, must be in [${l}, ${s}]`
                    );
                l = e[c];
            }
            if (l !== s)
                throw new Error(
                    `Last split value must be data size. Expected ${s}, got ${l}`
                );
        }
        const o = r - 1,
            i = be('int32', r);
        if (s === 0 || r === 0) {
            const l = new Array(s);
            for (let c = 0; c <= o; ++c) i[c] = 0;
            return [l, i];
        }
        i[0] = 0;
        for (let l = 1; l <= o; ++l) {
            const c = e[l] - e[l - 1];
            let u = 0;
            this.nGramWidths.forEach((h) => {
                u += this.getNumNGrams(c, h);
            }),
                this.preserveShort && c > 0 && u === 0 && (u = 1),
                (i[l] = i[l - 1] + u);
        }
        const a = new Array(i[o]);
        for (let l = 0; l < o; ++l) {
            const c = e[l];
            let u = i[l];
            if (
                (this.nGramWidths.forEach((h) => {
                    const d = e[l + 1] - e[l],
                        p = this.getNumNGrams(d, h);
                    this.createNGrams(t, c, a, u, p, h), (u += p);
                }),
                this.preserveShort && u === i[l])
            ) {
                const h = e[l + 1] - e[l];
                if (h === 0) continue;
                const d = h + 2 * this.padWidth,
                    p = 1;
                this.createNGrams(t, c, a, u, p, d);
            }
        }
        return [a, i];
    }
}
function Sk(n, t, e, s, r, o, i, a) {
    return new zP(e, s, r, o, i, a).compute(n, t);
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function BP(n, t, e, s) {
    if (!n.length) return;
    if (t.length === 0) {
        for (let o = 0; o < n.length; ++o) s.push(n.subarray(o, o + 1));
        return;
    }
    if (t.length === 1) {
        const o = t[0];
        let i = n.indexOf(o);
        for (; i !== -1; ) {
            const a = n.subarray(0, i);
            (!e || a.length !== 0) && s.push(a),
                (n = n.subarray(i + 1)),
                (i = n.indexOf(o));
        }
        (!e || n.length !== 0) && s.push(n);
        return;
    }
    let r = 0;
    for (let o = 0; o < n.length + 1; o++)
        if (o === n.length || t.indexOf(n[o]) !== -1) {
            const i = n.subarray(r, o);
            (!e || i.length !== 0) && s.push(i), (r = o + 1);
        }
}
function Ik(n, t, e) {
    const s = n.length,
        r = [];
    let o = 0,
        i = 0;
    const a = new Array(s);
    for (let d = 0; d < s; ++d) {
        const p = r.length;
        BP(n[d], t, e, r);
        const f = r.length - p;
        (a[d] = f), (o += f), (i = Math.max(i, f));
    }
    const l = be('int32', o * 2),
        c = new Array(o),
        u = [s, i];
    let h = 0;
    for (let d = 0; d < s; ++d)
        for (let p = 0; p < a[d]; ++p)
            (l[h * 2] = d), (l[h * 2 + 1] = p), (c[h] = r[h]), ++h;
    return [l, c, u];
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Ck(n, t) {
    const e = be('int32', n.length);
    for (let s = 0; s < n.length; ++s)
        e[s] = nC(n[s]).modulo(t).getLowBitsUnsigned();
    return e;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const $k = ke((n, t) => n - t),
    MP = ag((n, t, e, s) => ({ real: n - e, imag: t - s })),
    dg = Re(Ka, $k, MP),
    VP = { kernelName: Ka, backendName: 'cpu', kernelFunc: dg };
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Nk(n, t) {
    const e = new Array(n.rank);
    for (let r = 0; r < e.length; r++) e[r] = n.shape[r] * t[r];
    const s = Pt(e, n.dtype);
    for (let r = 0; r < s.values.length; ++r) {
        const o = s.indexToLoc(r),
            i = new Array(n.rank);
        for (let l = 0; l < i.length; l++) i[l] = o[l] % n.shape[l];
        const a = n.locToIndex(i);
        s.values[r] = n.values[a];
    }
    return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Pi = (n, t) => {
    const e = t.value - n.value;
    return e === 0 ? n.index - t.index : e;
};
function Tk(n, t, e = 0, s = n.length - 1) {
    for (; s > e; ) {
        if (s - e > 600) {
            const a = s - e + 1,
                l = t - e + 1,
                c = Math.log(a),
                u = 0.5 * Math.exp((2 * c) / 3),
                h =
                    0.5 *
                    Math.sqrt((c * u * (a - u)) / a) *
                    Math.sign(l - a / 2),
                d = Math.max(e, Math.floor(t - (l * u) / a + h)),
                p = Math.min(s, Math.floor(t + ((a - l) * u) / a + h));
            Tk(n, t, d, p);
        }
        const r = n[t];
        let o = e,
            i = s;
        for (sr(n, e, t), Pi(n[s], r) > 0 && sr(n, e, s); o < i; ) {
            for (sr(n, o, i), o++, i--; Pi(n[o], r) < 0; ) o = o + 1;
            for (; Pi(n[i], r) > 0; ) i = i - 1;
        }
        Pi(n[e], r) === 0 ? sr(n, e, i) : ((i = i + 1), sr(n, i, s)),
            i <= t && (e = i + 1),
            t <= i && (s = i - 1);
    }
}
function Ek(n, t, e, s, r) {
    const o = t[t.length - 1],
        [i, a] = [n.length / o, o],
        l = Ve(e, i * s),
        c = Ve('int32', i * s);
    for (let h = 0; h < i; h++) {
        const d = h * a,
            p = n.subarray(d, d + a);
        let f = new Array(p.length);
        p.forEach((b, w) => (f[w] = { value: b, index: w })),
            s < f.length && (Tk(f, s), (f = f.slice(0, s))),
            r && f.sort(Pi);
        const m = h * s,
            g = l.subarray(m, m + s),
            y = c.subarray(m, m + s);
        for (let b = 0; b < s; b++) (g[b] = f[b].value), (y[b] = f[b].index);
    }
    const u = t.slice();
    return (u[u.length - 1] = s), [Pt(u, e, l), Pt(u, 'int32', c)];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function _k(n, t, e, s) {
    const r = Bt(t, e)[0],
        o = [1, e[0], 1];
    for (let f = 0; f < r; f++) o[0] *= e[f];
    o[1] = e[r];
    for (let f = r + 1; f < e.length; f++) o[2] *= e[f];
    const i = new Map(),
        a = new Int32Array(e[r]),
        l = new Te(o, s, n),
        c = [],
        u = o[0] === 1 && o[2] === 1;
    for (let f = 0; f < e[r]; f++) {
        let m;
        if (u) m = n[f].toString();
        else {
            const y = [];
            for (let b = 0; b < o[0]; b++)
                for (let w = 0; w < o[2]; w++) y.push(l.get(b, f, w));
            m = y.join(',');
        }
        const g = i.get(m);
        if (g != null) a[f] = g;
        else {
            const y = i.size;
            i.set(m, y), (a[f] = y), c.push(f);
        }
    }
    const h = o.slice();
    h[1] = i.size;
    const d = new Te(h, s);
    c.forEach((f, m) => {
        for (let g = 0; g < o[0]; g++)
            for (let y = 0; y < o[2]; y++) d.set(l.get(g, f, y), g, m, y);
    });
    const p = e.slice();
    return (
        (p[r] = h[1]), { outputValues: d.values, outputShape: p, indices: a }
    );
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const WP = Object.freeze(
    Object.defineProperty(
        {
            __proto__: null,
            addImpl: Bv,
            bincountImpl: lg,
            bincountReduceImpl: Mv,
            bitwiseAndImpl: Vv,
            castImpl: zv,
            ceilImpl: Wv,
            concatImpl: Uv,
            equalImpl: Gv,
            expImpl: jv,
            expm1Impl: Kv,
            floorDivImpl: Yv,
            floorImpl: Xv,
            gatherNdImpl: Zv,
            gatherV2Impl: Jv,
            greaterEqualImpl: tk,
            greaterImpl: Qv,
            lessEqualImpl: nk,
            lessImpl: ek,
            linSpaceImpl: sk,
            logImpl: rk,
            maxImpl: ok,
            maximumImpl: ik,
            minimumImpl: ak,
            multiplyImpl: cg,
            negImpl: lk,
            notEqualImpl: ck,
            prodImpl: uk,
            raggedGatherImpl: hk,
            raggedRangeImpl: dk,
            raggedTensorToTensorImpl: pk,
            rangeImpl: fk,
            rsqrtImpl: mk,
            scatterImpl: Kr,
            sigmoidImpl: TP,
            simpleAbsImpl: Pv,
            sliceImpl: yk,
            sparseFillEmptyRowsImpl: bk,
            sparseReshapeImpl: xk,
            sparseSegmentReductionImpl: hg,
            sqrtImpl: AP,
            squaredDifferenceImpl: wk,
            staticRegexReplaceImpl: vk,
            stridedSliceImpl: kk,
            stringNGramsImpl: Sk,
            stringSplitImpl: Ik,
            stringToHashBucketFastImpl: Ck,
            subImpl: $k,
            tileImpl: Nk,
            topKImpl: Ek,
            transposeImpl: ug,
            uniqueImpl: _k,
        },
        Symbol.toStringTag,
        { value: 'Module' }
    )
);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ b0('cpu', () => new vh(), 1);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Ak = Yt(ya, (n) => (n >= 0 ? n : Math.exp(n) - 1)),
    UP = { kernelName: ya, backendName: 'cpu', kernelFunc: Ak };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Rk(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { alpha: o } = s;
    It([r], 'leakyRelu');
    const i = rt(r.shape),
        a = e.data.get(r.dataId).values,
        l = Ve('float32', i);
    for (let c = 0; c < a.length; c++) l[c] = a[c] < 0 ? o * a[c] : a[c];
    return e.makeTensorInfo(r.shape, 'float32', l);
}
const GP = { kernelName: nu, backendName: 'cpu', kernelFunc: Rk };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const HP = ke((n, t) => (n < 0 ? t * n : n));
function Dk(n) {
    const { inputs: t, backend: e } = n,
        { x: s, alpha: r } = t;
    It([s, r], 'prelu');
    const o = e.data.get(s.dataId).values,
        i = e.data.get(r.dataId).values,
        [a, l] = HP(s.shape, r.shape, o, i, 'float32');
    return e.makeTensorInfo(l, 'float32', a);
}
const jP = { kernelName: vu, backendName: 'cpu', kernelFunc: Dk };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Ok = Yt(La, (n) => Math.max(0, n)),
    qP = { kernelName: La, backendName: 'cpu', kernelFunc: Ok };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Fk = Yt(Pa, (n) => Math.min(Math.max(0, n), 6)),
    KP = { kernelName: Pa, backendName: 'cpu', kernelFunc: Fk };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Sc(n, t, e, s, r) {
    if (e === 'linear') return As({ inputs: { x: t }, backend: n });
    if (e === 'relu') return Ok({ inputs: { x: t }, backend: n });
    if (e === 'elu') return Ak({ inputs: { x: t }, backend: n });
    if (e === 'relu6') return Fk({ inputs: { x: t }, backend: n });
    if (e === 'prelu') return Dk({ inputs: { x: t, alpha: s }, backend: n });
    if (e === 'leakyrelu')
        return Rk({ inputs: { x: t }, backend: n, attrs: { alpha: r } });
    if (e === 'sigmoid') return gk({ inputs: { x: t }, backend: n });
    throw new Error(
        `Activation ${e} has not been implemented for the CPU backend.`
    );
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function re(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { shape: o } = s,
        i = rt(r.shape),
        a = Ab(o, i),
        l = rt(a);
    _(
        i === l,
        () =>
            `The new shape (${a}) has ${l} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`
    ),
        e.incRef(r.dataId);
    const c = e.data.get(r.dataId);
    if (c.complexTensorInfos != null) {
        const u = c.complexTensorInfos.real,
            h = c.complexTensorInfos.imag;
        (u.shape = a), (h.shape = a);
    }
    return { dataId: r.dataId, shape: a, dtype: r.dtype };
}
const XP = { kernelName: Su, backendName: 'cpu', kernelFunc: re };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Lk(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { a: r, b: o } = t,
        { transposeA: i, transposeB: a } = s;
    It([r, o], 'matMul');
    const l = r.shape.length,
        c = o.shape.length,
        u = i ? r.shape[l - 2] : r.shape[l - 1],
        h = a ? o.shape[c - 1] : o.shape[c - 2],
        d = i ? r.shape[l - 1] : r.shape[l - 2],
        p = a ? o.shape[c - 2] : o.shape[c - 1],
        f = r.shape.slice(0, -2),
        m = o.shape.slice(0, -2),
        g = rt(f),
        y = rt(m),
        w = Dt(r.shape.slice(0, -2), o.shape.slice(0, -2)).concat([d, p]);
    _(
        u === h,
        () =>
            `Error in matMul: inner shapes (${u}) and (${h}) of Tensors with shapes ${r.shape} and ${o.shape} and transposeA=${i} and transposeB=${a} must match.`
    );
    const x = i ? [g, u, d] : [g, d, u],
        v = a ? [y, p, h] : [y, h, p],
        C = re({ inputs: { x: r }, backend: e, attrs: { shape: x } }),
        $ = re({ inputs: { x: o }, backend: e, attrs: { shape: v } }),
        T = i ? C.shape[1] : C.shape[2],
        N = i ? C.shape[2] : C.shape[1],
        R = a ? $.shape[1] : $.shape[2],
        P = Math.max(g, y),
        E = e.data.get(C.dataId).values,
        O = e.data.get($.dataId).values,
        S = _t(C.shape),
        L = _t($.shape),
        [q, W, X] = i ? [S[0], 1, S[1]] : [S[0], S[1], 1],
        [G, et, z] = a ? [1, L[1], L[0]] : [L[1], 1, L[0]],
        M = N * R,
        st = Pt([P, N, R], C.dtype),
        nt = st.values,
        J = e.blockSize;
    for (let pt = 0; pt < P; pt++) {
        const wt = pt % g,
            ft = pt % y;
        for (let mt = 0; mt < N; mt += J) {
            const Nt = Math.min(mt + J, N);
            for (let $t = 0; $t < R; $t += J) {
                const zt = Math.min($t + J, R);
                for (let Vt = 0; Vt < T; Vt += J) {
                    const I = Math.min(Vt + J, T);
                    for (let ot = mt; ot < Nt; ot++)
                        for (let Q = $t; Q < zt; Q++) {
                            let F = 0;
                            for (let D = Vt; D < I; D++) {
                                const K = E[wt * q + ot * W + D * X],
                                    at = O[D * G + Q * et + ft * z];
                                F += K * at;
                            }
                            nt[pt * M + (ot * R + Q)] += F;
                        }
                }
            }
        }
    }
    return (
        e.disposeIntermediateTensorInfo(C),
        e.disposeIntermediateTensorInfo($),
        e.makeTensorInfo(w, st.dtype, st.values)
    );
}
const YP = { kernelName: Mc, backendName: 'cpu', kernelFunc: Lk };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function ZP(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { a: r, b: o, bias: i, preluActivationWeights: a } = t,
        { transposeA: l, transposeB: c, activation: u, leakyreluAlpha: h } = s;
    let d, p, f;
    const m = [];
    (d = Lk({
        inputs: { a: r, b: o },
        attrs: { transposeA: l, transposeB: c },
        backend: e,
    })),
        i &&
            ((p = ri({ inputs: { a: d, b: i }, backend: e })),
            m.push(d),
            (d = p)),
        u && ((f = Sc(e, d, u, a, h)), m.push(d), (d = f));
    for (const y of m) e.disposeIntermediateTensorInfo(y);
    return d;
}
const JP = { kernelName: Ql, backendName: 'cpu', kernelFunc: ZP };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const QP = Yt(ra, (n) => Math.acos(n)),
    tz = { kernelName: ra, backendName: 'cpu', kernelFunc: QP };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const ez = Yt(oa, (n) => Math.acosh(n)),
    nz = { kernelName: oa, backendName: 'cpu', kernelFunc: ez };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function sz(n) {
    const { inputs: t, backend: e } = n,
        s = t;
    It(t, 'addN');
    const r = s.map((a) => e.data.get(a.dataId).values),
        o = Pt(s[0].shape, s[0].dtype),
        i = o.values;
    for (let a = 0; a < s.length; a++) {
        const l = r[a];
        for (let c = 0; c < i.length; c++) i[c] += l[c];
    }
    return e.makeTensorInfo(o.shape, o.dtype, o.values);
}
const rz = { kernelName: Fc, backendName: 'cpu', kernelFunc: sz };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function oz(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { axis: o, keepDims: i } = s;
    It(r, 'all');
    const a = Bt(o, r.shape);
    let l = a;
    const c = me(l, r.shape.length);
    let u = r;
    c != null &&
        ((u = hn({ inputs: { x: r }, backend: e, attrs: { perm: c } })),
        (l = we(l.length, r.shape.length))),
        Ue('all', l, u.shape.length);
    const [h, d] = Pe(u.shape, l),
        p = rt(d),
        f = Ke(rt(h), u.dtype),
        m = e.data.get(u.dataId).values;
    for (let y = 0; y < f.length; ++y) {
        const b = y * p;
        let w = m[b];
        for (let x = 0; x < p; ++x) {
            const v = m[b + x];
            w = w && v;
        }
        f[y] = w;
    }
    c != null && e.disposeIntermediateTensorInfo(u);
    const g = e.makeTensorInfo(h, u.dtype, f);
    if (i) {
        const y = xe(h, a),
            b = re({ inputs: { x: g }, backend: e, attrs: { shape: y } });
        return e.disposeIntermediateTensorInfo(g), b;
    }
    return g;
}
const iz = { kernelName: hp, backendName: 'cpu', kernelFunc: oz };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function az(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { axis: o, keepDims: i } = s;
    It(r, 'any');
    const a = Bt(o, r.shape);
    let l = a;
    const c = me(l, r.shape.length);
    let u = r;
    c != null &&
        ((u = hn({ inputs: { x: r }, backend: e, attrs: { perm: c } })),
        (l = we(l.length, r.shape.length))),
        Ue('any', l, u.shape.length);
    const [h, d] = Pe(u.shape, l),
        p = rt(d),
        f = Ke(rt(h), u.dtype),
        m = e.data.get(u.dataId).values;
    for (let y = 0; y < f.length; ++y) {
        const b = y * p;
        let w = m[b];
        for (let x = 0; x < p; ++x) {
            const v = m[b + x];
            w = w || v;
        }
        f[y] = w;
    }
    c != null && e.disposeIntermediateTensorInfo(u);
    const g = e.makeTensorInfo(h, u.dtype, f);
    if (i) {
        const y = xe(h, a),
            b = re({ inputs: { x: g }, backend: e, attrs: { shape: y } });
        return e.disposeIntermediateTensorInfo(g), b;
    }
    return g;
}
const lz = { kernelName: dp, backendName: 'cpu', kernelFunc: az };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function cz(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { axis: o } = s;
    It(r, 'argMax');
    let i = Bt(o, r.shape);
    const a = me(i, r.shape.length);
    let l = r;
    const c = [];
    a != null &&
        ((l = hn({ inputs: { x: r }, backend: e, attrs: { perm: a } })),
        c.push(l),
        (i = we(i.length, l.shape.length))),
        (i = [i[0]]),
        Ue('argMax', i, l.shape.length);
    const [u, h] = Pe(l.shape, i),
        d = rt(u),
        p = Ke(d, 'int32'),
        f = rt(h),
        m = e.data.get(l.dataId).values;
    for (let g = 0; g < p.length; ++g) {
        const y = g * f;
        let b = m[y],
            w = 0;
        for (let x = 0; x < f; ++x) {
            const v = m[y + x];
            v > b && ((b = v), (w = x));
        }
        p[g] = w;
    }
    return (
        c.forEach((g) => e.disposeIntermediateTensorInfo(g)),
        e.makeTensorInfo(u, 'int32', p)
    );
}
const uz = { kernelName: Lc, backendName: 'cpu', kernelFunc: cz };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function hz(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { axis: o } = s;
    It(r, 'argMin');
    let i = Bt(o, r.shape);
    const a = me(i, r.shape.length);
    let l = r;
    const c = [];
    a != null &&
        ((l = hn({ inputs: { x: r }, backend: e, attrs: { perm: a } })),
        c.push(l),
        (i = we(i.length, l.shape.length))),
        (i = [i[0]]),
        Ue('argMin', i, l.shape.length);
    const [u, h] = Pe(l.shape, i),
        d = rt(u),
        p = Ke(d, 'int32'),
        f = rt(h),
        m = e.data.get(l.dataId).values;
    for (let g = 0; g < p.length; ++g) {
        const y = g * f;
        let b = m[y],
            w = 0;
        for (let x = 0; x < f; ++x) {
            const v = m[y + x];
            v < b && ((b = v), (w = x));
        }
        p[g] = w;
    }
    return (
        c.forEach((g) => e.disposeIntermediateTensorInfo(g)),
        e.makeTensorInfo(u, 'int32', p)
    );
}
const dz = { kernelName: Pc, backendName: 'cpu', kernelFunc: hz };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const pz = Yt(ia, (n) => Math.asin(n)),
    fz = { kernelName: ia, backendName: 'cpu', kernelFunc: pz };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const mz = Yt(aa, (n) => Math.asinh(n)),
    gz = { kernelName: aa, backendName: 'cpu', kernelFunc: mz };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const yz = Yt(la, (n) => Math.atan(n)),
    bz = { kernelName: la, backendName: 'cpu', kernelFunc: yz };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const xz = ke((n, t) => Math.atan2(n, t)),
    wz = Re(ua, xz),
    vz = { kernelName: ua, backendName: 'cpu', kernelFunc: wz };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const kz = Yt(ca, (n) => Math.atanh(n)),
    Sz = { kernelName: ca, backendName: 'cpu', kernelFunc: kz };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function pg(n, t, e, s, r, o) {
    const i = r.strideHeight,
        a = r.strideWidth,
        l = r.dilationHeight,
        c = r.dilationWidth,
        u = r.effectiveFilterHeight,
        h = r.effectiveFilterWidth,
        d = r.padInfo.top,
        p = r.padInfo.left,
        f = o === 'max' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
        m = Pt(r.outShape, e),
        g = m.values,
        y = r.outShape[1] * r.outShape[2] * r.outShape[3],
        b = r.outShape[2] * r.outShape[3],
        w = r.outShape[3];
    for (let x = 0; x < r.batchSize; ++x) {
        const v = x * y,
            C = x * s[0];
        for (let $ = 0; $ < r.inChannels; ++$)
            for (let T = 0; T < r.outHeight; ++T) {
                const N = T * i - d,
                    R = Math.max(0, N),
                    P = Math.min(r.inHeight, u + N),
                    E = v + T * b;
                for (let O = 0; O < r.outWidth; ++O) {
                    const S = O * a - p,
                        L = Math.max(0, S),
                        q = Math.min(r.inWidth, h + S);
                    let W = f,
                        X = 0,
                        G = 0;
                    for (let z = R; z < P; z += l) {
                        const M = C + z * s[1];
                        for (let st = L; st < q; st += c) {
                            const nt = M + st * s[2],
                                J = n[nt + $];
                            o === 'max' && J > W
                                ? (W = J)
                                : o === 'avg' && ((X += J), G++);
                        }
                        if (isNaN(W)) break;
                    }
                    const et = E + O * w + $;
                    g[et] = o === 'avg' ? X / G : W;
                }
            }
    }
    return m;
}
function Pk(n, t, e, s, r = !1, o = !1) {
    const i = Pt(s.outShape, 'int32'),
        a = s.strideHeight,
        l = s.strideWidth,
        c = s.dilationHeight,
        u = s.dilationWidth,
        h = s.effectiveFilterHeight,
        d = s.effectiveFilterWidth,
        p = s.padInfo.top,
        f = s.padInfo.left,
        m = Pt(t, e, n);
    for (let g = 0; g < s.batchSize; ++g)
        for (let y = 0; y < s.inChannels; ++y)
            for (let b = 0; b < s.outHeight; ++b) {
                const w = b * a - p;
                let x = w;
                for (; x < 0; ) x += c;
                const v = Math.min(s.inHeight, h + w);
                for (let C = 0; C < s.outWidth; ++C) {
                    const $ = C * l - f;
                    let T = $;
                    for (; T < 0; ) T += u;
                    const N = Math.min(s.inWidth, d + $);
                    let R = Number.NEGATIVE_INFINITY,
                        P = -1;
                    for (let E = x; E < v; E += c) {
                        const O = E - w;
                        for (let S = T; S < N; S += u) {
                            const L = S - $,
                                q = m.get(g, E, S, y);
                            q > R &&
                                ((R = q),
                                r
                                    ? (P = o
                                          ? ((g * s.inHeight + E) * s.inWidth +
                                                S) *
                                                s.inChannels +
                                            y
                                          : (E * s.inWidth + S) * s.inChannels +
                                            y)
                                    : (P = O * d + L));
                        }
                    }
                    i.set(P, g, b, C, y);
                }
            }
    return i;
}
function zk(n, t, e, s, r, o) {
    const i = r.strideDepth,
        a = r.strideHeight,
        l = r.strideWidth,
        c = r.dilationDepth,
        u = r.dilationHeight,
        h = r.dilationWidth,
        d = r.effectiveFilterDepth,
        p = r.effectiveFilterHeight,
        f = r.effectiveFilterWidth,
        m = r.padInfo.front,
        g = r.padInfo.top,
        y = r.padInfo.left,
        b = o === 'max' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
        w = Pt(r.outShape, e),
        x = w.values,
        v = r.outShape[1] * r.outShape[2] * r.outShape[3] * r.outShape[4],
        C = r.outShape[2] * r.outShape[3] * r.outShape[4],
        $ = r.outShape[3] * r.outShape[4],
        T = r.outShape[4];
    for (let N = 0; N < r.batchSize; ++N) {
        const R = N * v,
            P = N * s[0];
        for (let E = 0; E < r.inChannels; ++E)
            for (let O = 0; O < r.outDepth; ++O) {
                const S = O * i - m;
                let L = S;
                for (; L < 0; ) L += c;
                const q = Math.min(r.inDepth, d + S),
                    W = R + O * C;
                for (let X = 0; X < r.outHeight; ++X) {
                    const G = X * a - g;
                    let et = G;
                    for (; et < 0; ) et += u;
                    const z = Math.min(r.inHeight, p + G),
                        M = W + X * $;
                    for (let st = 0; st < r.outWidth; ++st) {
                        const nt = st * l - y;
                        let J = nt;
                        for (; J < 0; ) J += h;
                        const pt = Math.min(r.inWidth, f + nt),
                            wt = M + st * T;
                        let ft = b,
                            mt = 0,
                            Nt = 0;
                        for (let zt = L; zt < q; zt += c) {
                            const Vt = P + zt * s[1];
                            for (let I = et; I < z; I += u) {
                                const ot = Vt + I * s[2];
                                for (let Q = J; Q < pt; Q += h) {
                                    const F = ot + Q * s[3],
                                        D = n[F + E];
                                    if (
                                        (o === 'max' && D > ft
                                            ? (ft = D)
                                            : o === 'avg' && ((mt += D), Nt++),
                                        isNaN(ft))
                                    )
                                        break;
                                }
                                if (isNaN(ft)) break;
                            }
                            if (isNaN(ft)) break;
                        }
                        const $t = wt + E;
                        x[$t] = o === 'avg' ? mt / Math.max(Nt, 1) : ft;
                    }
                }
            }
    }
    return w;
}
function Iz(n, t) {
    const e = Pt(t.outShape, 'int32'),
        s = t.strideDepth,
        r = t.strideHeight,
        o = t.strideWidth,
        i = t.dilationDepth,
        a = t.dilationHeight,
        l = t.dilationWidth,
        c = t.effectiveFilterDepth,
        u = t.effectiveFilterHeight,
        h = t.effectiveFilterWidth,
        d = t.padInfo.front,
        p = t.padInfo.top,
        f = t.padInfo.left;
    for (let m = 0; m < t.batchSize; ++m)
        for (let g = 0; g < t.inChannels; ++g)
            for (let y = 0; y < t.outDepth; ++y) {
                const b = y * s - d;
                let w = b;
                for (; w < 0; ) w += i;
                const x = Math.min(t.inDepth, c + b);
                for (let v = 0; v < t.outHeight; ++v) {
                    const C = v * r - p;
                    let $ = C;
                    for (; $ < 0; ) $ += a;
                    const T = Math.min(t.inHeight, u + C);
                    for (let N = 0; N < t.outWidth; ++N) {
                        const R = N * o - f;
                        let P = R;
                        for (; P < 0; ) P += l;
                        const E = Math.min(t.inWidth, h + R);
                        let O = Number.NEGATIVE_INFINITY,
                            S = -1;
                        for (let L = w; L < x; L += i) {
                            const q = L - b;
                            for (let W = $; W < T; W += a) {
                                const X = W - C;
                                for (let G = P; G < E; G += l) {
                                    const et = G - R,
                                        z = n.get(m, L, W, G, g);
                                    z >= O &&
                                        ((O = z), (S = q * u * h + X * u + et));
                                }
                            }
                        }
                        e.set(S, m, y, v, N, g);
                    }
                }
            }
    return e;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Cz(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t;
    It(r, 'avgPool');
    const { filterSize: o, strides: i, pad: a, dimRoundingMode: l } = s,
        c = 1;
    _(
        We(i, c),
        () =>
            `Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`
    );
    const u = ts(r.shape, o, i, c, a, l);
    let h;
    if (
        u.filterWidth === 1 &&
        u.filterHeight === 1 &&
        Ut(u.inShape, u.outShape)
    )
        h = As({ inputs: { x: r }, backend: e });
    else {
        const d = e.data.get(r.dataId).values,
            p = _t(r.shape),
            f = pg(d, r.shape, r.dtype, p, u, 'avg');
        h = e.makeTensorInfo(u.outShape, r.dtype, f.values);
    }
    return h;
}
const $z = { kernelName: zc, backendName: 'cpu', kernelFunc: Cz };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Nz(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        {
            filterSize: o,
            strides: i,
            pad: a,
            dimRoundingMode: l,
            dataFormat: c,
        } = s;
    It(r, 'avgPool3d');
    const u = Ys(r.shape, o, i, 1, a, l, c),
        h = e.data.get(r.dataId).values,
        d = zk(h, r.shape, r.dtype, _t(r.shape), u, 'avg');
    return e.makeTensorInfo(d.shape, 'float32', d.values);
}
const Tz = { kernelName: Bc, backendName: 'cpu', kernelFunc: Nz };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Ez(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: r, input: o } = t,
        { filterSize: i, strides: a, pad: l, dimRoundingMode: c } = s;
    It([r, o], 'avgPool3DGrad');
    const u = Ys(o.shape, i, a, 1, l, c),
        h = u.strideDepth,
        d = u.strideHeight,
        p = u.strideWidth,
        f = u.filterDepth,
        m = u.filterHeight,
        g = u.filterWidth,
        y = u.dilationDepth,
        b = u.dilationHeight,
        w = u.dilationWidth,
        x = u.effectiveFilterDepth,
        v = u.effectiveFilterHeight,
        C = u.effectiveFilterWidth,
        $ = x - 1 - u.padInfo.front,
        T = C - 1 - u.padInfo.left,
        N = v - 1 - u.padInfo.top,
        R = Pt(o.shape, 'float32'),
        P = 1 / (f * m * g),
        E = e.bufferSync(r);
    for (let O = 0; O < u.batchSize; ++O)
        for (let S = 0; S < u.inChannels; ++S)
            for (let L = 0; L < u.inDepth; ++L)
                for (let q = 0; q < u.inHeight; ++q)
                    for (let W = 0; W < u.inWidth; ++W) {
                        const X = L - $,
                            G = q - N,
                            et = W - T;
                        let z = 0;
                        for (let M = 0; M < x; M += y) {
                            const st = (X + M) / h;
                            if (
                                !(
                                    st < 0 ||
                                    st >= u.outDepth ||
                                    Math.floor(st) !== st
                                )
                            )
                                for (let nt = 0; nt < v; nt += b) {
                                    const J = (G + nt) / d;
                                    if (
                                        !(
                                            J < 0 ||
                                            J >= u.outHeight ||
                                            Math.floor(J) !== J
                                        )
                                    )
                                        for (let pt = 0; pt < C; pt += w) {
                                            const wt = (et + pt) / p;
                                            if (
                                                wt < 0 ||
                                                wt >= u.outWidth ||
                                                Math.floor(wt) !== wt
                                            )
                                                continue;
                                            const ft = E.get(O, st, J, wt, S);
                                            z += ft;
                                        }
                                }
                        }
                        R.set(z * P, O, L, q, W, S);
                    }
    return e.makeTensorInfo(R.shape, R.dtype, R.values);
}
const _z = { kernelName: fp, backendName: 'cpu', kernelFunc: Ez };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Az(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: r, input: o } = t,
        i = o;
    It([r, o], 'avgPoolGrad');
    const { filterSize: a, strides: l, pad: c } = s,
        u = ts(i.shape, a, l, 1, c),
        h = u.strideHeight,
        d = u.strideWidth,
        p = u.filterHeight,
        f = u.filterWidth,
        m = u.dilationHeight,
        g = u.dilationWidth,
        y = u.effectiveFilterHeight,
        b = u.effectiveFilterWidth,
        w = b - 1 - u.padInfo.left,
        x = y - 1 - u.padInfo.top,
        v = Pt(i.shape, 'float32'),
        C = 1 / (p * f),
        $ = e.data.get(r.dataId).values,
        T = Pt(r.shape, 'float32', $);
    for (let N = 0; N < u.batchSize; ++N)
        for (let R = 0; R < u.inChannels; ++R)
            for (let P = 0; P < u.inHeight; ++P)
                for (let E = 0; E < u.inWidth; ++E) {
                    const O = P - x,
                        S = E - w;
                    let L = 0;
                    for (let q = 0; q < y; q += m) {
                        const W = (O + q) / h;
                        if (!(W < 0 || W >= u.outHeight || Math.floor(W) !== W))
                            for (let X = 0; X < b; X += g) {
                                const G = (S + X) / d;
                                if (
                                    G < 0 ||
                                    G >= u.outWidth ||
                                    Math.floor(G) !== G
                                )
                                    continue;
                                const et = T.get(N, W, G, R);
                                L += et;
                            }
                    }
                    v.set(L * C, N, P, E, R);
                }
    return e.makeTensorInfo(v.shape, v.dtype, v.values);
}
const Rz = { kernelName: pp, backendName: 'cpu', kernelFunc: Az };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Dz(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r, scale: o, offset: i, mean: a, variance: l } = t;
    _(
        a.shape.length === l.shape.length,
        () =>
            'Batch normalization gradient requires mean and variance to have equal ranks.'
    ),
        _(
            i == null || a.shape.length === i.shape.length,
            () =>
                'Batch normalization gradient requires mean and offset to have equal ranks.'
        ),
        _(
            o == null || a.shape.length === o.shape.length,
            () =>
                'Batch normalization gradient requires mean and scale to have equal ranks.'
        ),
        It([r, a, l, o, i], 'batchNorm');
    let { varianceEpsilon: c } = s;
    c == null && (c = 0.001);
    const u = e.data.get(r.dataId).values,
        h = e.data.get(a.dataId).values,
        d = e.data.get(l.dataId).values,
        p = o ? e.data.get(o.dataId).values : new Float32Array([1]),
        f = i ? e.data.get(i.dataId).values : new Float32Array([0]),
        m = new Float32Array(u.length),
        g = f.length,
        y = p.length,
        b = d.length,
        w = h.length;
    let x = 0,
        v = 0,
        C = 0,
        $ = 0;
    for (let T = 0; T < u.length; ++T)
        (m[T] = f[x++] + ((u[T] - h[v++]) * p[C++]) / Math.sqrt(d[$++] + c)),
            x >= g && (x = 0),
            v >= w && (v = 0),
            C >= y && (C = 0),
            $ >= b && ($ = 0);
    return e.makeTensorInfo(r.shape, r.dtype, m);
}
const Oz = { kernelName: Qc, backendName: 'cpu', kernelFunc: Dz };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Fz(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { blockShape: o, crops: i } = s;
    It([r], 'batchToSpaceND');
    const a = o.reduce((y, b) => y * b),
        l = al(r.shape, o, a),
        c = ll(l.length, o.length),
        u = cl(r.shape, o, a),
        h = vm(i, o.length),
        d = km(u, i, o.length),
        p = re({ inputs: { x: r }, backend: e, attrs: { shape: l } }),
        f = hn({ inputs: { x: p }, backend: e, attrs: { perm: c } }),
        m = re({ inputs: { x: f }, backend: e, attrs: { shape: u } }),
        g = po({ inputs: { x: m }, backend: e, attrs: { begin: h, size: d } });
    return (
        e.disposeIntermediateTensorInfo(p),
        e.disposeIntermediateTensorInfo(f),
        e.disposeIntermediateTensorInfo(m),
        g
    );
}
const Lz = { kernelName: Vc, backendName: 'cpu', kernelFunc: Fz };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Pz(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r, weights: o } = t,
        { size: i } = s,
        a = e.data.get(r.dataId).values,
        l = e.data.get(o.dataId).values,
        c = lg(a, l, o.dtype, o.shape, i);
    return e.makeTensorInfo([i], o.dtype, c);
}
const zz = { kernelName: mp, backendName: 'cpu', kernelFunc: Pz };
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Bz(n) {
    const { inputs: t, backend: e } = n,
        { s0: s, s1: r } = t,
        o = e.data.get(s.dataId).values,
        i = e.data.get(r.dataId).values,
        a = Dt(Array.from(o), Array.from(i));
    return e.makeTensorInfo([a.length], 'int32', Int32Array.from(a));
}
const Mz = { kernelName: gp, backendName: 'cpu', kernelFunc: Bz };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Vz = Yt(pa, (n, t) => {
        const e = t;
        return n > e.clipValueMax
            ? e.clipValueMax
            : n < e.clipValueMin
            ? e.clipValueMin
            : n;
    }),
    Wz = { kernelName: pa, backendName: 'cpu', kernelFunc: Vz };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Uz = (n) => {
        const { x: t } = n.inputs,
            e = n.backend,
            s = new Float32Array(rt(t.shape)),
            r = e.data.get(t.dataId),
            o = r.complexTensorInfos.real,
            i = r.complexTensorInfos.imag,
            a = e.data.get(o.dataId).values,
            l = e.data.get(i.dataId).values;
        for (let c = 0; c < a.length; c++) {
            const u = a[c],
                h = l[c];
            s[c] = Math.hypot(u, h);
        }
        return e.makeOutput(s, t.shape, 'float32');
    },
    Gz = { kernelName: Uc, backendName: 'cpu', kernelFunc: Uz };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function oi(n) {
    const { inputs: t, backend: e } = n,
        { input: s } = t,
        r = e.data.get(s.dataId).complexTensorInfos.imag,
        o = e.data.get(r.dataId).values;
    return e.makeTensorInfo(r.shape, r.dtype, o);
}
const Hz = { kernelName: Fp, backendName: 'cpu', kernelFunc: oi };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function ii(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { axis: r } = s,
        o = Bt(r, t[0].shape)[0],
        i = t.map((m) => m.shape);
    bm(i, o);
    let a = Is(
        t.map((m) => m.shape),
        o
    );
    if (rt(a) === 0) return e.makeTensorInfo(a, t[0].dtype, []);
    const l = t.filter((m) => rt(m.shape) > 0);
    if (l.length === 1) return As({ inputs: { x: l[0] }, backend: e });
    if (l[0].dtype === 'complex64') {
        const m = l.map((x) => ho({ inputs: { input: x }, backend: e })),
            g = l.map((x) => oi({ inputs: { input: x }, backend: e })),
            y = ii({ inputs: m, backend: e, attrs: { axis: o } }),
            b = ii({ inputs: g, backend: e, attrs: { axis: o } }),
            w = yn({ inputs: { real: y, imag: b }, backend: e });
        return (
            m.forEach((x) => e.disposeIntermediateTensorInfo(x)),
            g.forEach((x) => e.disposeIntermediateTensorInfo(x)),
            e.disposeIntermediateTensorInfo(y),
            e.disposeIntermediateTensorInfo(b),
            w
        );
    }
    const c = l.map((m) => {
            const y = [-1, rt(m.shape.slice(o))];
            return re({ inputs: { x: m }, backend: e, attrs: { shape: y } });
        }),
        u = c.map((m) => ({
            vals: e.data.get(m.dataId).values,
            shape: m.shape,
        }));
    a = Is(
        c.map((m) => m.shape),
        1
    );
    const h = c[0].shape[0] === 1,
        d = Uv(u, a, t[0].dtype, h),
        p = Is(
            l.map((m) => m.shape),
            o
        ),
        f = e.makeTensorInfo(p, t[0].dtype, d);
    return c.forEach((m) => e.disposeIntermediateTensorInfo(m)), f;
}
const jz = { kernelName: Gc, backendName: 'cpu', kernelFunc: ii };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Bk(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r, filter: o } = t,
        {
            strides: i,
            pad: a,
            dataFormat: l,
            dilations: c,
            dimRoundingMode: u,
        } = s;
    It([r, o], 'conv2d');
    const h = Zs(l),
        d = Le(r.shape, o.shape, i, c, a, u, !1, h),
        p = d.filterHeight,
        f = d.filterWidth,
        m = d.dilationHeight,
        g = d.dilationWidth,
        y = d.padInfo.left,
        b = d.padInfo.top,
        w = d.dataFormat === 'channelsLast',
        x = new Te(d.outShape, r.dtype),
        v = _t(r.shape),
        C = _t(o.shape),
        $ = v[0],
        T = w ? v[1] : v[2],
        N = w ? v[2] : 1,
        R = w ? 1 : v[1],
        P = x.strides[0],
        E = w ? x.strides[1] : x.strides[2],
        O = w ? x.strides[2] : 1,
        S = w ? 1 : x.strides[1],
        L = e.data.get(r.dataId).values,
        q = e.data.get(o.dataId).values,
        W = x.values;
    for (let X = 0; X < d.batchSize; ++X) {
        const G = X * $,
            et = X * P;
        for (let z = 0; z < d.outHeight; ++z) {
            const M = et + z * E,
                st = z * d.strideHeight - b;
            for (let nt = 0; nt < p; ++nt) {
                const J = st + nt * m;
                if (J < 0 || J >= d.inHeight) continue;
                const pt = nt * C[0],
                    wt = G + J * T;
                for (let ft = 0; ft < d.outWidth; ++ft) {
                    const mt = M + ft * O,
                        Nt = ft * d.strideWidth - y;
                    for (let $t = 0; $t < f; ++$t) {
                        const zt = Nt + $t * g;
                        if (zt < 0 || zt >= d.inWidth) continue;
                        const Vt = pt + $t * C[1],
                            I = wt + zt * N;
                        let ot = Vt;
                        for (let Q = 0; Q < d.inChannels; ++Q) {
                            const F = L[I + Q * R];
                            for (let D = 0; D < d.outChannels; ++D)
                                W[mt + D * S] += F * q[ot + D];
                            ot += d.outChannels;
                        }
                    }
                }
            }
        }
    }
    return e.makeTensorInfo(x.shape, x.dtype, W);
}
const qz = { kernelName: Hc, backendName: 'cpu', kernelFunc: Bk };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Kz(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r, dy: o } = t,
        {
            strides: i,
            pad: a,
            dataFormat: l,
            dimRoundingMode: c,
            filterShape: u,
        } = s;
    It([r, o], 'conv2dBackpropFilter');
    const h = Zs(l),
        d = Le(r.shape, u, i, 1, a, c, !1, h),
        {
            strideHeight: p,
            strideWidth: f,
            filterHeight: m,
            filterWidth: g,
        } = d,
        y = d.dataFormat === 'channelsLast',
        b = new Te(d.filterShape, 'float32'),
        w = d.padInfo.left,
        x = d.padInfo.top,
        v = e.data.get(r.dataId).values,
        C = e.data.get(o.dataId).values,
        $ = new Te(r.shape, r.dtype, v),
        T = new Te(o.shape, o.dtype, C);
    for (let N = 0; N < m; ++N) {
        const R = Math.max(0, Math.ceil((x - N) / p)),
            P = Math.min(d.outHeight, (d.inHeight + x - N) / p);
        for (let E = 0; E < g; ++E) {
            const O = Math.max(0, Math.ceil((w - E) / f)),
                S = Math.min(d.outWidth, (d.inWidth + w - E) / f);
            for (let L = 0; L < d.inChannels; ++L)
                for (let q = 0; q < d.outChannels; ++q) {
                    let W = 0;
                    for (let X = 0; X < d.batchSize; ++X)
                        for (let G = R; G < P; ++G) {
                            const et = N + G * p - x;
                            for (let z = O; z < S; ++z) {
                                const M = E + z * f - w;
                                y
                                    ? (W +=
                                          $.get(X, et, M, L) *
                                          T.get(X, G, z, q))
                                    : (W +=
                                          $.get(X, L, et, M) *
                                          T.get(X, q, G, z));
                            }
                        }
                    b.set(W, N, E, L, q);
                }
        }
    }
    return e.makeTensorInfo(b.shape, b.dtype, b.values);
}
const Xz = { kernelName: bp, backendName: 'cpu', kernelFunc: Kz };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Yz(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: r, filter: o } = t,
        {
            inputShape: i,
            strides: a,
            pad: l,
            dataFormat: c,
            dimRoundingMode: u,
        } = s;
    It([r, o], 'conv2dBackpropInput');
    const h = _t(o.shape),
        d = _t(r.shape);
    let p = Zs(c);
    const f = Le(i, o.shape, a, 1, l, u, !1, p),
        m = new Te(f.inShape, 'float32'),
        g = m.values,
        y = e.data.get(r.dataId).values,
        b = e.data.get(o.dataId).values,
        [w, x, v] = h,
        {
            batchSize: C,
            filterHeight: $,
            filterWidth: T,
            inChannels: N,
            inHeight: R,
            inWidth: P,
            outChannels: E,
            outHeight: O,
            outWidth: S,
            strideHeight: L,
            strideWidth: q,
        } = f;
    p = f.dataFormat;
    const W = $ - 1 - f.padInfo.top,
        X = T - 1 - f.padInfo.left,
        G = p === 'channelsLast',
        et = m.strides[0],
        z = G ? m.strides[1] : m.strides[2],
        M = G ? m.strides[2] : 1,
        st = G ? 1 : m.strides[1],
        nt = d[0],
        J = G ? d[1] : d[2],
        pt = G ? d[2] : 1,
        wt = G ? 1 : d[1];
    for (let ft = 0; ft < C; ++ft)
        for (let mt = 0; mt < N; ++mt)
            for (let Nt = 0; Nt < R; ++Nt) {
                const $t = Nt - W,
                    zt = Math.max(0, Math.ceil($t / L)),
                    Vt = Math.min(O, ($ + $t) / L);
                for (let I = 0; I < P; ++I) {
                    const ot = I - X,
                        Q = Math.max(0, Math.ceil(ot / q)),
                        F = Math.min(S, (T + ot) / q);
                    let D = 0;
                    for (let at = zt; at < Vt; ++at) {
                        const lt = at * L - $t;
                        for (let Z = Q; Z < F; ++Z) {
                            const ht = Z * q - ot,
                                xt = nt * ft + J * at + pt * Z,
                                dt =
                                    w * ($ - 1 - lt) +
                                    x * (T - 1 - ht) +
                                    v * mt;
                            for (let Tt = 0; Tt < E; ++Tt) {
                                const qt = y[xt + wt * Tt],
                                    Ot = b[dt + Tt];
                                D += qt * Ot;
                            }
                        }
                    }
                    const K = et * ft + z * Nt + M * I + st * mt;
                    g[K] = D;
                }
            }
    return e.makeTensorInfo(m.shape, m.dtype, m.values);
}
const Zz = { kernelName: jc, backendName: 'cpu', kernelFunc: Yz };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Jz(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r, filter: o } = t,
        { strides: i, pad: a, dilations: l } = s;
    It([r, o], 'conv3d');
    const c = Nr(r.shape, o.shape, i, l, a),
        {
            filterDepth: u,
            filterHeight: h,
            filterWidth: d,
            dilationDepth: p,
            dilationHeight: f,
            dilationWidth: m,
            padInfo: g,
        } = c,
        y = g.front,
        b = g.left,
        w = g.top,
        x = new Te(c.outShape, r.dtype),
        v = e.data.get(r.dataId).values,
        C = e.data.get(o.dataId).values,
        $ = x.values,
        T = _t(r.shape),
        N = _t(o.shape);
    for (let R = 0; R < c.batchSize; ++R) {
        const P = R * T[0],
            E = R * x.strides[0];
        for (let O = 0; O < c.outDepth; ++O) {
            const S = E + O * x.strides[1],
                L = O * c.strideDepth - y;
            for (let q = 0; q < u; ++q) {
                const W = L + q * p;
                if (W < 0 || W >= c.inDepth) continue;
                const X = q * N[0],
                    G = P + W * T[1];
                for (let et = 0; et < c.outHeight; ++et) {
                    const z = S + et * x.strides[2],
                        M = et * c.strideHeight - w;
                    for (let st = 0; st < h; ++st) {
                        const nt = M + st * f;
                        if (nt < 0 || nt >= c.inHeight) continue;
                        const J = X + st * N[1],
                            pt = G + nt * T[2];
                        for (let wt = 0; wt < c.outWidth; ++wt) {
                            const ft = z + wt * c.outChannels,
                                mt = wt * c.strideWidth - b;
                            for (let Nt = 0; Nt < d; ++Nt) {
                                const $t = mt + Nt * m;
                                if ($t < 0 || $t >= c.inWidth) continue;
                                const zt = J + Nt * N[2],
                                    Vt = pt + $t * c.inChannels;
                                let I = zt;
                                for (let ot = 0; ot < c.inChannels; ++ot) {
                                    const Q = v[Vt + ot];
                                    for (let F = 0; F < c.outChannels; ++F)
                                        $[ft + F] += Q * C[I + F];
                                    I += c.outChannels;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return e.makeTensorInfo(x.shape, x.dtype, x.values);
}
const Qz = { kernelName: qc, backendName: 'cpu', kernelFunc: Jz };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function tB(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r, dy: o } = t,
        { strides: i, pad: a, filterShape: l } = s;
    It([r, o], 'conv3dBackpropFilterV2');
    const c = _t(r.shape),
        u = _t(o.shape),
        h = Nr(r.shape, l, i, 1, a),
        d = h.strideDepth,
        p = h.strideHeight,
        f = h.strideWidth,
        m = h.filterDepth,
        g = h.filterHeight,
        y = h.filterWidth,
        b = new Te(h.filterShape, 'float32'),
        w = b.values,
        [x, v, C, $] = b.strides,
        T = e.data.get(o.dataId).values,
        [N, R, P, E] = u,
        O = e.data.get(r.dataId).values,
        [S, L, q, W] = c,
        X = h.padInfo.front,
        G = h.padInfo.left,
        et = h.padInfo.top;
    for (let z = 0; z < m; ++z) {
        const M = Math.max(0, Math.ceil((X - z) / d)),
            st = Math.min(h.outDepth, (h.inDepth + X - z) / d),
            nt = z * x;
        for (let J = 0; J < g; ++J) {
            const pt = Math.max(0, Math.ceil((et - J) / p)),
                wt = Math.min(h.outHeight, (h.inHeight + et - J) / p),
                ft = J * v + nt;
            for (let mt = 0; mt < y; ++mt) {
                const Nt = Math.max(0, Math.ceil((G - mt) / f)),
                    $t = Math.min(h.outWidth, (h.inWidth + G - mt) / f),
                    zt = mt * C + ft;
                for (let Vt = 0; Vt < h.inChannels; ++Vt) {
                    const I = Vt * $ + zt;
                    for (let ot = 0; ot < h.outChannels; ++ot) {
                        let Q = 0;
                        for (let F = 0; F < h.batchSize; ++F) {
                            const D = F * S,
                                K = F * N;
                            for (let at = M; at < st; ++at) {
                                const Z = (z + at * d - X) * L + D,
                                    ht = at * R + K;
                                for (let xt = pt; xt < wt; ++xt) {
                                    const Tt = (J + xt * p - et) * q + Z,
                                        qt = xt * P + ht;
                                    for (let Ot = Nt; Ot < $t; ++Ot) {
                                        const Fs = (mt + Ot * f - G) * W + Tt,
                                            pn = Ot * E + qt;
                                        Q += O[Fs + Vt] * T[pn + ot];
                                    }
                                }
                            }
                        }
                        w[I + ot] = Q;
                    }
                }
            }
        }
    }
    return e.makeTensorInfo(b.shape, b.dtype, b.values);
}
const eB = { kernelName: xp, backendName: 'cpu', kernelFunc: tB };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function nB(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: r, filter: o } = t,
        { pad: i, strides: a, inputShape: l } = s;
    It([r], 'conv3dBackpropInputV2');
    const c = _t(r.shape),
        u = _t(o.shape),
        h = Nr(l, o.shape, a, 1, i),
        d = new Te(h.inShape, 'float32'),
        p = d.values,
        [f, m, g, y] = d.strides,
        b = e.data.get(r.dataId).values,
        [w, x, v, C] = c,
        $ = e.data.get(o.dataId).values,
        [T, N, R, P] = u,
        {
            batchSize: E,
            filterDepth: O,
            filterHeight: S,
            filterWidth: L,
            inChannels: q,
            inDepth: W,
            inHeight: X,
            inWidth: G,
            outChannels: et,
            outDepth: z,
            outHeight: M,
            outWidth: st,
            strideDepth: nt,
            strideHeight: J,
            strideWidth: pt,
        } = h,
        wt = O - 1 - h.padInfo.front,
        ft = S - 1 - h.padInfo.top,
        mt = L - 1 - h.padInfo.left;
    for (let Nt = 0; Nt < E; ++Nt)
        for (let $t = 0; $t < q; ++$t)
            for (let zt = 0; zt < W; ++zt) {
                const Vt = zt - wt,
                    I = Math.max(0, Math.ceil(Vt / nt)),
                    ot = Math.min(z, (O + Vt) / nt);
                for (let Q = 0; Q < X; ++Q) {
                    const F = Q - ft,
                        D = Math.max(0, Math.ceil(F / J)),
                        K = Math.min(M, (S + F) / J);
                    for (let at = 0; at < G; ++at) {
                        const lt = at - mt,
                            Z = Math.max(0, Math.ceil(lt / pt)),
                            ht = Math.min(st, (L + lt) / pt);
                        let xt = 0;
                        for (let dt = I; dt < ot; ++dt) {
                            const Tt = dt * nt - Vt;
                            for (let qt = D; qt < K; ++qt) {
                                const Ot = qt * J - F;
                                for (let ze = Z; ze < ht; ++ze) {
                                    const Fs = ze * pt - lt,
                                        pn = w * Nt + x * dt + v * qt + C * ze,
                                        Lr =
                                            T * (O - 1 - Tt) +
                                            N * (S - 1 - Ot) +
                                            R * (L - 1 - Fs) +
                                            P * $t;
                                    for (let oe = 0; oe < et; ++oe) {
                                        const Ao = b[pn + oe],
                                            Ti = $[Lr + oe];
                                        xt += Ao * Ti;
                                    }
                                }
                            }
                        }
                        p[f * Nt + m * zt + g * Q + y * at + $t] = xt;
                    }
                }
            }
    return e.makeTensorInfo(d.shape, d.dtype, d.values);
}
const sB = { kernelName: wp, backendName: 'cpu', kernelFunc: nB };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const rB = Yt(fa, (n) => Math.cos(n)),
    oB = { kernelName: fa, backendName: 'cpu', kernelFunc: rB };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const iB = Yt(ma, (n) => Math.cosh(n)),
    aB = { kernelName: ma, backendName: 'cpu', kernelFunc: iB };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function lB(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { image: r, boxes: o, boxInd: i } = t,
        { cropSize: a, method: l, extrapolationValue: c } = s,
        [u, h, d, p] = r.shape,
        f = o.shape[0],
        [m, g] = a,
        y = Pt([f, m, g, p], 'float32'),
        b = e.data.get(o.dataId).values,
        w = e.data.get(i.dataId).values,
        x = e.data.get(r.dataId).values,
        v = _t(r.shape),
        C = _t(y.shape);
    for (let $ = 0; $ < f; $++) {
        const T = $ * 4,
            N = b[T],
            R = b[T + 1],
            P = b[T + 2],
            E = b[T + 3],
            O = w[$];
        if (O >= u) continue;
        const S = m > 1 ? ((P - N) * (h - 1)) / (m - 1) : 0,
            L = g > 1 ? ((E - R) * (d - 1)) / (g - 1) : 0;
        for (let q = 0; q < m; q++) {
            const W = m > 1 ? N * (h - 1) + q * S : 0.5 * (N + P) * (h - 1);
            if (W < 0 || W > h - 1) {
                for (let X = 0; X < g; X++)
                    for (let G = 0; G < p; G++) {
                        const et = G + X * C[2] + q * C[1] + $ * C[0];
                        y.values[et] = c;
                    }
                continue;
            }
            if (l === 'bilinear') {
                const X = Math.floor(W),
                    G = Math.ceil(W),
                    et = W - X;
                for (let z = 0; z < g; z++) {
                    const M =
                        g > 1 ? R * (d - 1) + z * L : 0.5 * (R + E) * (d - 1);
                    if (M < 0 || M > d - 1) {
                        for (let pt = 0; pt < p; pt++) {
                            const wt = pt + z * C[2] + q * C[1] + $ * C[0];
                            y.values[wt] = c;
                        }
                        continue;
                    }
                    const st = Math.floor(M),
                        nt = Math.ceil(M),
                        J = M - st;
                    for (let pt = 0; pt < p; pt++) {
                        let wt = pt + st * v[2] + X * v[1] + O * v[0];
                        const ft = x[wt];
                        wt = pt + nt * v[2] + X * v[1] + O * v[0];
                        const mt = x[wt];
                        wt = pt + st * v[2] + G * v[1] + O * v[0];
                        const Nt = x[wt];
                        wt = pt + nt * v[2] + G * v[1] + O * v[0];
                        const $t = x[wt],
                            zt = ft + (mt - ft) * J,
                            Vt = Nt + ($t - Nt) * J;
                        (wt = pt + z * C[2] + q * C[1] + $ * C[0]),
                            (y.values[wt] = zt + (Vt - zt) * et);
                    }
                }
            } else
                for (let X = 0; X < g; ++X) {
                    const G =
                        g > 1 ? R * (d - 1) + X * L : 0.5 * (R + E) * (d - 1);
                    if (G < 0 || G > d - 1) {
                        for (let M = 0; M < p; M++) {
                            const st = M + X * C[2] + q * C[1] + $ * C[0];
                            y.values[st] = c;
                        }
                        continue;
                    }
                    const et = Math.round(G),
                        z = Math.round(W);
                    for (let M = 0; M < p; M++) {
                        const st = M + et * v[2] + z * v[1] + O * v[0],
                            nt = M + X * C[2] + q * C[1] + $ * C[0];
                        y.values[nt] = x[st];
                    }
                }
        }
    }
    return e.makeTensorInfo(y.shape, y.dtype, y.values);
}
const cB = { kernelName: kp, backendName: 'cpu', kernelFunc: lB };
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function uB(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { axis: o, exclusive: i, reverse: a } = s;
    It(r, 'cumprod');
    const l = me([o], r.shape.length);
    let c = r;
    l != null && (c = hn({ inputs: { x: r }, backend: e, attrs: { perm: l } }));
    const u = we(1, r.shape.length)[0];
    if (u !== c.shape.length - 1)
        throw new Error(
            `backend.cumprod in CPU expects an inner-most axis=${
                c.shape.length - 1
            } but got axis=${u}`
        );
    const h = vn(c.dtype, 'int32'),
        d = cp(rt(c.shape), h),
        p = e.data.get(c.dataId).values,
        f = c.shape[c.shape.length - 1],
        m = a ? (y, b) => y + f - b - 1 : (y, b) => y + b;
    for (let y = 0; y < p.length; y += f)
        for (let b = 0; b < f; b++) {
            const w = m(y, b);
            if (b === 0) d[w] = i ? 1 : p[w];
            else {
                const x = m(y, b - 1);
                d[w] = i ? p[x] * d[x] : p[w] * d[x];
            }
        }
    const g = e.makeTensorInfo(c.shape, h, d);
    if (l != null) {
        const y = Tr(l),
            b = hn({ inputs: { x: g }, backend: e, attrs: { perm: y } });
        return (
            e.disposeIntermediateTensorInfo(g),
            e.disposeIntermediateTensorInfo(c),
            b
        );
    }
    return g;
}
const hB = { kernelName: vp, backendName: 'cpu', kernelFunc: uB };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function dB(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { axis: o, exclusive: i, reverse: a } = s;
    It(r, 'cumsum');
    const l = me([o], r.shape.length);
    let c = r;
    l != null && (c = hn({ inputs: { x: r }, backend: e, attrs: { perm: l } }));
    const u = we(1, r.shape.length)[0];
    if (u !== c.shape.length - 1)
        throw new Error(
            `backend.cumsum in CPU expects an inner-most axis=${
                c.shape.length - 1
            } but got axis=${u}`
        );
    const h = vn(c.dtype, 'int32'),
        d = Ke(rt(c.shape), h),
        p = e.data.get(c.dataId).values,
        f = c.shape[c.shape.length - 1],
        m = a ? (y, b) => y + f - b - 1 : (y, b) => y + b;
    for (let y = 0; y < p.length; y += f)
        for (let b = 0; b < f; b++) {
            const w = m(y, b);
            if (b === 0) d[w] = i ? 0 : p[w];
            else {
                const x = m(y, b - 1);
                d[w] = i ? p[x] + d[x] : p[w] + d[x];
            }
        }
    const g = e.makeTensorInfo(c.shape, h, d);
    if (l != null) {
        const y = Tr(l),
            b = hn({ inputs: { x: g }, backend: e, attrs: { perm: y } });
        return (
            e.disposeIntermediateTensorInfo(g),
            e.disposeIntermediateTensorInfo(c),
            b
        );
    }
    return g;
}
const pB = { kernelName: Kc, backendName: 'cpu', kernelFunc: dB };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function fB(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r, weights: o } = t,
        { size: i, binaryOutput: a } = s;
    if (r.shape.length === 1) {
        const l = e.data.get(r.dataId).values,
            c = e.data.get(o.dataId).values,
            u = lg(l, c, o.dtype, o.shape, i);
        return e.makeTensorInfo([i], o.dtype, u);
    } else if (r.shape.length === 2) {
        const l = e.bufferSync(r),
            c = e.bufferSync(o),
            u = Mv(l, c, i, a);
        return e.makeTensorInfo(u.shape, o.dtype, u.values);
    }
    throw new Error(
        `Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`
    );
}
const mB = { kernelName: Sp, backendName: 'cpu', kernelFunc: fB };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function gB(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { blockSize: o, dataFormat: i } = s;
    _(
        i === 'NHWC',
        () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`
    );
    const a = r.shape[0],
        l = r.shape[1],
        c = r.shape[2],
        u = r.shape[3],
        h = l * o,
        d = c * o,
        p = u / (o * o),
        f = e.data.get(r.dataId).values,
        m = new Float32Array(a * h * d * p);
    let g = 0;
    for (let y = 0; y < a; ++y)
        for (let b = 0; b < h; ++b) {
            const w = Math.floor(b / o),
                x = b % o;
            for (let v = 0; v < d; ++v) {
                const C = Math.floor(v / o),
                    $ = v % o,
                    T = (x * o + $) * p;
                for (let N = 0; N < p; ++N) {
                    const P = N + T + u * (C + c * (w + l * y));
                    m[g++] = f[P];
                }
            }
        }
    return e.makeTensorInfo([a, h, d, p], r.dtype, m);
}
const yB = { kernelName: Ip, backendName: 'cpu', kernelFunc: gB };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Mk(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r, filter: o } = t,
        { strides: i, pad: a, dilations: l, dimRoundingMode: c } = s;
    It([r, o], 'depthwiseConv2DNative');
    const u = _t(r.shape),
        h = _t(o.shape);
    let d = l;
    d == null && (d = [1, 1]),
        _(
            We(i, d),
            () =>
                `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${d}'`
        );
    const p = Le(r.shape, o.shape, i, d, a, c, !0),
        {
            filterHeight: f,
            filterWidth: m,
            dilationHeight: g,
            dilationWidth: y,
            padInfo: b,
        } = p,
        w = b.left,
        x = b.top,
        v = p.outChannels / p.inChannels,
        C = new Te(p.outShape, r.dtype),
        $ = e.data.get(r.dataId).values,
        T = e.data.get(o.dataId).values,
        N = C.values;
    for (let R = 0; R < p.batchSize; ++R) {
        const P = R * u[0],
            E = R * C.strides[0];
        for (let O = 0; O < p.outHeight; ++O) {
            const S = E + O * C.strides[1],
                L = O * p.strideHeight - x;
            for (let q = 0; q < f; ++q) {
                const W = L + q * g;
                if (W < 0 || W >= p.inHeight) continue;
                const X = q * h[0],
                    G = P + W * u[1];
                for (let et = 0; et < p.outWidth; ++et) {
                    const z = S + et * C.strides[2],
                        M = et * p.strideWidth - w;
                    for (let st = 0; st < m; ++st) {
                        const nt = M + st * y;
                        if (nt < 0 || nt >= p.inWidth) continue;
                        const J = X + st * h[1],
                            pt = G + nt * p.inChannels;
                        let wt = z,
                            ft = J;
                        for (let mt = 0; mt < p.inChannels; ++mt) {
                            const Nt = $[pt + mt];
                            for (let $t = 0; $t < v; ++$t)
                                N[wt + $t] += Nt * T[ft + $t];
                            (wt += v), (ft += v);
                        }
                    }
                }
            }
        }
    }
    return e.makeTensorInfo(C.shape, C.dtype, C.values);
}
const bB = { kernelName: Xc, backendName: 'cpu', kernelFunc: Mk };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function xB(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r, dy: o } = t,
        {
            strides: i,
            dilations: a,
            pad: l,
            dimRoundingMode: c,
            filterShape: u,
        } = s;
    It([r, o], 'depthwiseConv2dNativeBackpropFilter');
    const h = Le(r.shape, u, i, a, l, c, !0),
        {
            strideHeight: d,
            strideWidth: p,
            filterHeight: f,
            filterWidth: m,
        } = h,
        g = new Te(h.filterShape, 'float32'),
        y = h.padInfo.left,
        b = h.padInfo.top,
        w = h.outChannels / h.inChannels,
        x = e.data.get(r.dataId).values,
        v = new Te(r.shape, r.dtype, x),
        C = e.data.get(o.dataId).values,
        $ = new Te(o.shape, o.dtype, C);
    for (let T = 0; T < f; ++T) {
        const N = Math.max(0, Math.ceil((b - T) / d)),
            R = Math.min(h.outHeight, (h.inHeight + b - T) / d);
        for (let P = 0; P < m; ++P) {
            const E = Math.max(0, Math.ceil((y - P) / p)),
                O = Math.min(h.outWidth, (h.inWidth + y - P) / p);
            for (let S = 0; S < h.outChannels; ++S) {
                const L = Math.trunc(S / w),
                    q = S % w;
                let W = 0;
                for (let X = 0; X < h.batchSize; ++X)
                    for (let G = N; G < R; ++G) {
                        const et = T + G * d - b;
                        for (let z = E; z < O; ++z) {
                            const M = P + z * p - y;
                            W += v.get(X, et, M, L) * $.get(X, G, z, S);
                        }
                    }
                g.set(W, T, P, L, q);
            }
        }
    }
    return e.makeTensorInfo(g.shape, g.dtype, g.values);
}
const wB = { kernelName: Cp, backendName: 'cpu', kernelFunc: xB };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function vB(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: r, filter: o } = t,
        {
            strides: i,
            dilations: a,
            pad: l,
            dimRoundingMode: c,
            inputShape: u,
        } = s;
    It([r, o], 'depthwiseConv2DNativeBackpropInput');
    const h = _t(r.shape),
        d = _t(o.shape),
        p = Le(u, o.shape, i, a, l, c, !0),
        f = new Te(p.inShape, 'float32'),
        m = f.values,
        [g, y, b] = f.strides,
        w = e.data.get(r.dataId).values,
        [x, v, C] = h,
        $ = e.data.get(o.dataId).values,
        [T, N, R] = d,
        {
            batchSize: P,
            filterHeight: E,
            filterWidth: O,
            inChannels: S,
            inHeight: L,
            inWidth: q,
            outChannels: W,
            outHeight: X,
            outWidth: G,
            strideHeight: et,
            strideWidth: z,
        } = p,
        M = E - 1 - p.padInfo.top,
        st = O - 1 - p.padInfo.left,
        nt = W / S;
    for (let J = 0; J < P; ++J)
        for (let pt = 0; pt < S; ++pt)
            for (let wt = 0; wt < L; ++wt) {
                const ft = wt - M,
                    mt = Math.max(0, Math.ceil(ft / et)),
                    Nt = Math.min(X, (E + ft) / et);
                for (let $t = 0; $t < q; ++$t) {
                    const zt = $t - st,
                        Vt = Math.max(0, Math.ceil(zt / z)),
                        I = Math.min(G, (O + zt) / z);
                    let ot = 0;
                    for (let Q = mt; Q < Nt; ++Q) {
                        const F = Q * et - ft;
                        for (let D = Vt; D < I; ++D) {
                            const K = D * z - zt,
                                at = x * J + v * Q + C * D,
                                lt = T * (E - 1 - F) + N * (O - 1 - K) + R * pt;
                            for (let Z = 0; Z < nt; ++Z) {
                                const ht = pt * nt + Z,
                                    xt = w[at + ht],
                                    dt = $[lt + Z];
                                ot += xt * dt;
                            }
                        }
                    }
                    m[g * J + y * wt + b * $t + pt] = ot;
                }
            }
    return e.makeTensorInfo(f.shape, f.dtype, f.values);
}
const kB = { kernelName: $p, backendName: 'cpu', kernelFunc: vB };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function SB(n) {
    const { inputs: t, backend: e } = n,
        { x: s } = t,
        r = rt(s.shape),
        o = e.data.get(s.dataId).values,
        i = Pt([r, r], s.dtype),
        a = i.values;
    for (let c = 0; c < o.length; c++) a[c * r + c] = o[c];
    const l = [...s.shape, ...s.shape];
    return e.makeTensorInfo(l, i.dtype, i.values);
}
const IB = { kernelName: Np, backendName: 'cpu', kernelFunc: SB };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const CB = {
    kernelName: Yc,
    backendName: 'cpu',
    kernelFunc: ({ inputs: n, backend: t, attrs: e }) => {
        const { x: s, filter: r } = n,
            { strides: o, pad: i, dilations: a } = e,
            l = t,
            c = l.data.get(s.dataId).values,
            u = s.shape.length,
            h = l.data.get(r.dataId).values,
            d = r.shape.length,
            {
                batchSize: p,
                inHeight: f,
                inWidth: m,
                inChannels: g,
                outHeight: y,
                outWidth: b,
                padInfo: w,
                strideHeight: x,
                strideWidth: v,
                filterHeight: C,
                filterWidth: $,
                dilationHeight: T,
                dilationWidth: N,
                outShape: R,
            } = tl(s.shape, r.shape, o, i, 'NHWC', a),
            P = rt(R),
            E = R.length,
            O = be(s.dtype, P);
        for (let L = 0; L < p; ++L)
            for (let q = 0; q < y; ++q) {
                const W = q * x - w.top;
                for (let X = 0; X < b; ++X) {
                    const G = X * v - w.left;
                    for (let et = 0; et < g; ++et) {
                        let z = Number.MIN_SAFE_INTEGER;
                        for (let st = 0; st < C; ++st) {
                            const nt = W + st * T;
                            if (nt >= 0 && nt < f)
                                for (let J = 0; J < $; ++J) {
                                    const pt = G + J * N;
                                    if (pt >= 0 && pt < m) {
                                        const wt = ks(
                                                [L, nt, pt, et],
                                                u,
                                                _t(s.shape)
                                            ),
                                            ft = ks(
                                                [st, J, et],
                                                d,
                                                _t(r.shape)
                                            ),
                                            mt = c[wt] + h[ft];
                                        mt > z && (z = mt);
                                    }
                                }
                        }
                        const M = ks([L, q, X, et], E, _t(R));
                        O[M] = z;
                    }
                }
            }
        return {
            dataId: l.write(go(O, s.dtype), R, s.dtype),
            shape: R,
            dtype: s.dtype,
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const $B = {
    kernelName: ad,
    backendName: 'cpu',
    kernelFunc: ({ inputs: n, backend: t, attrs: e }) => {
        const { x: s, filter: r, dy: o } = n,
            { strides: i, pad: a, dilations: l } = e,
            c = t,
            u = Xn(s.shape, c.data.get(s.dataId).values),
            h = Xn(r.shape, c.data.get(r.dataId).values),
            {
                batchSize: d,
                inHeight: p,
                inWidth: f,
                inChannels: m,
                outHeight: g,
                outWidth: y,
                padInfo: b,
                strideHeight: w,
                strideWidth: x,
                filterHeight: v,
                filterWidth: C,
                dilationHeight: $,
                dilationWidth: T,
                outShape: N,
            } = tl(s.shape, r.shape, i, a, 'NHWC', l);
        _(
            o.rank === N.length,
            () =>
                `Error in ${ad}, dy must have the same rank as output ${N.length}, but got ${o.rank}`
        );
        const R = Xn(N, c.data.get(o.dataId).values),
            P = Ob(r.shape, r.dtype);
        for (let O = 0; O < d; ++O)
            for (let S = 0; S < g; ++S) {
                const L = S * w - b.top;
                for (let q = 0; q < y; ++q) {
                    const W = q * x - b.left;
                    for (let X = 0; X < m; ++X) {
                        let G = Number.MIN_SAFE_INTEGER,
                            et = 0,
                            z = 0;
                        for (let M = 0; M < v; ++M) {
                            const st = L + M * $;
                            if (st >= 0 && st < p)
                                for (let nt = 0; nt < C; ++nt) {
                                    const J = W + nt * T;
                                    if (J >= 0 && J < f) {
                                        const pt = u[O][st][J][X] + h[M][nt][X];
                                        pt > G &&
                                            ((G = pt), (et = M), (z = nt));
                                    }
                                }
                        }
                        P[et][z][X] += R[O][S][q][X];
                    }
                }
            }
        return {
            dataId: c.write(go(P, s.dtype), r.shape, r.dtype),
            shape: r.shape,
            dtype: r.dtype,
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const NB = {
    kernelName: id,
    backendName: 'cpu',
    kernelFunc: ({ inputs: n, backend: t, attrs: e }) => {
        const { x: s, filter: r, dy: o } = n,
            { strides: i, pad: a, dilations: l } = e,
            c = t,
            u = Xn(s.shape, c.data.get(s.dataId).values),
            h = Xn(r.shape, c.data.get(r.dataId).values),
            {
                batchSize: d,
                inHeight: p,
                inWidth: f,
                inChannels: m,
                outHeight: g,
                outWidth: y,
                padInfo: b,
                strideHeight: w,
                strideWidth: x,
                filterHeight: v,
                filterWidth: C,
                dilationHeight: $,
                dilationWidth: T,
                outShape: N,
            } = tl(s.shape, r.shape, i, a, 'NHWC', l);
        _(
            o.rank === N.length,
            () =>
                `Error in ${id}, dy must have the same rank as output ${N.length}, but got ${o.rank}`
        );
        const R = Xn(N, c.data.get(o.dataId).values),
            P = Ob(s.shape, s.dtype);
        for (let O = 0; O < d; ++O)
            for (let S = 0; S < g; ++S) {
                const L = S * w - b.top;
                for (let q = 0; q < y; ++q) {
                    const W = q * x - b.left;
                    for (let X = 0; X < m; ++X) {
                        let G = Number.MIN_SAFE_INTEGER,
                            et = L < 0 ? 0 : L,
                            z = W < 0 ? 0 : W;
                        for (let M = 0; M < v; ++M) {
                            const st = L + M * $;
                            if (st >= 0 && st < p)
                                for (let nt = 0; nt < C; ++nt) {
                                    const J = W + nt * T;
                                    if (J >= 0 && J < f) {
                                        const pt = u[O][st][J][X] + h[M][nt][X];
                                        pt > G &&
                                            ((G = pt), (et = st), (z = J));
                                    }
                                }
                        }
                        P[O][et][z][X] += R[O][S][q][X];
                    }
                }
            }
        return {
            dataId: c.write(go(P, s.dtype), s.shape, s.dtype),
            shape: s.shape,
            dtype: s.dtype,
        };
    },
};
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function TB(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { image: r } = t,
        { canvas: o, options: i } = s,
        { contextOptions: a, imageOptions: l } = i || {},
        c = (l == null ? void 0 : l.alpha) || 1,
        u = (a == null ? void 0 : a.contextType) || '2d';
    if (u !== '2d')
        throw new Error(
            `Context type ${a.contextType} is not supported by the CPU backend.`
        );
    const h = o.getContext(u, (a == null ? void 0 : a.contextAttributes) || {});
    if (h == null) throw new Error(`Could not get the context with ${u} type.`);
    const [d, p] = r.shape.slice(0, 2),
        f = r.shape.length === 2 ? 1 : r.shape[2],
        m = e.data.get(r.dataId).values,
        g = r.dtype === 'float32' ? 255 : 1,
        y = new Uint8ClampedArray(p * d * 4);
    for (let w = 0; w < d * p; ++w) {
        const x = [0, 0, 0, 255 * c];
        for (let C = 0; C < f; C++) {
            const $ = m[w * f + C];
            if (r.dtype === 'float32') {
                if ($ < 0 || $ > 1)
                    throw new Error(
                        `Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${$}.`
                    );
            } else if (r.dtype === 'int32' && ($ < 0 || $ > 255))
                throw new Error(
                    `Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${$}.`
                );
            f === 1
                ? ((x[0] = $ * g), (x[1] = $ * g), (x[2] = $ * g))
                : (x[C] = $ * g);
        }
        const v = w * 4;
        (y[v + 0] = Math.round(x[0])),
            (y[v + 1] = Math.round(x[1])),
            (y[v + 2] = Math.round(x[2])),
            (y[v + 3] = Math.round(x[3]));
    }
    (o.width = p), (o.height = d);
    const b = new ImageData(y, p, d);
    return h.putImageData(b, 0, 0), r;
}
const EB = { kernelName: HI, backendName: 'cpu', kernelFunc: TB };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function bl(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { axis: o, keepDims: i } = s;
    It(r, 'sum');
    let a;
    r.dtype === 'bool'
        ? (a = vr({ inputs: { x: r }, backend: e, attrs: { dtype: 'int32' } }))
        : (a = As({ inputs: { x: r }, backend: e }));
    const l = a.shape.length,
        c = Bt(o, a.shape),
        u = me(c, l);
    let h = c,
        d = a;
    u != null &&
        ((d = hn({ inputs: { x: a }, backend: e, attrs: { perm: u } })),
        (h = we(h.length, l))),
        Ue('sum', h, d.shape.length);
    const [p, f] = Pe(d.shape, h),
        m = vn(d.dtype, 'int32');
    let g = vc(e, p, m);
    const y = rt(f),
        b = e.data.get(g.dataId).values,
        w = e.data.get(d.dataId).values;
    for (let x = 0; x < b.length; ++x) {
        const v = x * y;
        let C = 0;
        for (let $ = 0; $ < y; ++$) C += w[v + $];
        b[x] = C;
    }
    if (i) {
        const x = xe(g.shape, c),
            v = g;
        (g = re({ inputs: { x: g }, backend: e, attrs: { shape: x } })),
            e.disposeIntermediateTensorInfo(v);
    }
    return (
        e.disposeIntermediateTensorInfo(a),
        u != null && e.disposeIntermediateTensorInfo(d),
        g
    );
}
const _B = { kernelName: Eu, backendName: 'cpu', kernelFunc: bl };
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function AB(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { equation: r } = s,
        o = t,
        { allDims: i, summedDims: a, idDims: l } = _m(r, o.length);
    Rm(i.length, l, o);
    const { path: c, steps: u } = Dm(a, l),
        h = u.length;
    let d = null,
        p = i.length;
    const f = [];
    for (let m = 0; m < h; ++m) {
        for (const g of u[m]) {
            const { permutationIndices: y, expandDims: b } = Am(p, l[g]);
            let w;
            Om(y)
                ? (w = o[g])
                : ((w = hn({
                      inputs: { x: o[g] },
                      backend: e,
                      attrs: { perm: y },
                  })),
                  f.push(w));
            const x = w.shape.slice();
            for (let v = 0; v < b.length; ++v) x.splice(b[v], 0, 1);
            Ut(w.shape, x) ||
                ((w = re({
                    inputs: { x: w },
                    backend: e,
                    attrs: { shape: x },
                })),
                f.push(w)),
                d === null
                    ? (d = w)
                    : ((d = kh({ inputs: { a: w, b: d }, backend: e })),
                      f.push(d));
        }
        m < h - 1 &&
            (c[m] >= 0 &&
                ((d = bl({
                    inputs: { x: d },
                    backend: e,
                    attrs: { axis: c[m] - (i.length - p), keepDims: !1 },
                })),
                f.push(d)),
            p--);
    }
    for (const m of f) m !== d && e.disposeIntermediateTensorInfo(m);
    return d;
}
const RB = { kernelName: Tp, backendName: 'cpu', kernelFunc: AB };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function DB(n) {
    const { inputs: t, backend: e } = n,
        { dy: s, y: r } = t;
    It([s, r], 'eluGrad');
    const o = new Float32Array(rt(r.shape)),
        i = e.data.get(r.dataId).values,
        a = e.data.get(s.dataId).values;
    for (let l = 0; l < i.length; ++l) {
        const c = i[l];
        c >= 0 ? (o[l] = a[l]) : (o[l] = a[l] * (c + 1));
    }
    return e.makeTensorInfo(r.shape, 'float32', o);
}
const OB = { kernelName: Ep, backendName: 'cpu', kernelFunc: DB };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const FB = Sm,
    LB = Im,
    PB = Cm,
    zB = $m,
    BB = Nm,
    MB = Tm,
    VB = Yt(ba, (n) => {
        const t = Math.sign(n),
            e = Math.abs(n),
            s = 1 / (1 + FB * e);
        return (
            t *
            (1 -
                ((((MB * s + BB) * s + zB) * s + PB) * s + LB) *
                    s *
                    Math.exp(-e * e))
        );
    }),
    WB = { kernelName: ba, backendName: 'cpu', kernelFunc: VB };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Ic(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { input: r } = t,
        { dim: o } = s,
        i = r.shape.length,
        a = r.shape.slice();
    let l = o;
    return (
        o < 0 &&
            (_(
                -(i + 1) <= o,
                () => `Axis must be in the interval [${-(i + 1)}, ${i}]`
            ),
            (l = i + o + 1)),
        a.splice(l, 0, 1),
        re({ inputs: { x: r }, backend: e, attrs: { shape: a } })
    );
}
const UB = { kernelName: Jc, backendName: 'cpu', kernelFunc: Ic };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const GB = ke((n, t) => n / t),
    fg = Re(ga, GB),
    Xd = { kernelName: ga, backendName: 'cpu', kernelFunc: fg };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Vk(n, t, e) {
    const s = n.shape,
        r = s[0],
        o = s[1],
        i = e.data.get(n.dataId),
        a = i.complexTensorInfos.real,
        l = i.complexTensorInfos.imag,
        c = [r, o],
        u = rt(c),
        h = Ve('float32', u),
        d = Ve('float32', u);
    for (let g = 0; g < r; g++) {
        const y = po({
                inputs: { x: a },
                backend: e,
                attrs: { begin: [g, 0], size: [1, o] },
            }),
            b = po({
                inputs: { x: l },
                backend: e,
                attrs: { begin: [g, 0], size: [1, o] },
            }),
            w = yn({ inputs: { real: y, imag: b }, backend: e }),
            { real: x, imag: v } = HB(w, t, e),
            C = Ks(x, v);
        for (let $ = 0; $ < o; $++) {
            const T = Em(C, $);
            (h[g * o + $] = T.real), (d[g * o + $] = T.imag);
        }
        e.disposeIntermediateTensorInfo(y),
            e.disposeIntermediateTensorInfo(b),
            e.disposeIntermediateTensorInfo(w);
    }
    const p = e.makeTensorInfo(c, 'float32', h),
        f = e.makeTensorInfo(c, 'float32', d),
        m = yn({ inputs: { real: p, imag: f }, backend: e });
    return (
        e.disposeIntermediateTensorInfo(p),
        e.disposeIntermediateTensorInfo(f),
        m
    );
}
function HB(n, t, e) {
    const s = rt(n.shape),
        r = e.data.get(n.dataId),
        o = e.data.get(r.complexTensorInfos.real.dataId).values,
        i = e.data.get(r.complexTensorInfos.imag.dataId).values;
    if (jB(s)) {
        const a = Yd(o, i, s, t, e),
            l = [n.shape[0], n.shape[1]];
        if (t) {
            const c = e.makeTensorInfo(l, 'float32', a.real),
                u = e.makeTensorInfo(l, 'float32', a.imag),
                h = e.makeTensorInfo([], 'float32', Ir(s, 'float32')),
                d = As({ inputs: { x: h }, backend: e }),
                p = Xd.kernelFunc({ inputs: { a: c, b: h }, backend: e }),
                f = Xd.kernelFunc({ inputs: { a: u, b: d }, backend: e }),
                m = e.data.get(p.dataId).values,
                g = e.data.get(f.dataId).values;
            return (
                e.disposeIntermediateTensorInfo(c),
                e.disposeIntermediateTensorInfo(u),
                e.disposeIntermediateTensorInfo(h),
                e.disposeIntermediateTensorInfo(d),
                e.disposeIntermediateTensorInfo(p),
                e.disposeIntermediateTensorInfo(f),
                { real: m, imag: g }
            );
        }
        return a;
    } else {
        const a = Ks(o, i),
            l = qB(a, s, t);
        return t1(l);
    }
}
function jB(n) {
    return (n & (n - 1)) === 0;
}
function Yd(n, t, e, s, r) {
    if (e === 1) return { real: n, imag: t };
    const o = Ks(n, t),
        i = e / 2,
        a = e1(o),
        l = a.real,
        c = a.imag,
        u = [l.length],
        h = r.makeTensorInfo(u, 'float32', l),
        d = r.makeTensorInfo(u, 'float32', c),
        p = yn({ inputs: { real: h, imag: d }, backend: r }),
        f = n1(o),
        m = f.real,
        g = f.imag,
        y = [m.length],
        b = r.makeTensorInfo(y, 'float32', m),
        w = r.makeTensorInfo(y, 'float32', g),
        x = yn({ inputs: { real: b, imag: w }, backend: r }),
        v = Yd(l, c, i, s, r),
        C = v.real,
        $ = v.imag,
        T = [C.length],
        N = r.makeTensorInfo(T, 'float32', C),
        R = r.makeTensorInfo(T, 'float32', $),
        P = yn({ inputs: { real: N, imag: R }, backend: r }),
        E = Yd(m, g, i, s, r),
        O = E.real,
        S = E.imag,
        L = [O.length],
        q = r.makeTensorInfo(L, 'float32', O),
        W = r.makeTensorInfo(L, 'float32', S),
        X = yn({ inputs: { real: q, imag: W }, backend: r }),
        G = r1(e, s),
        et = [G.real.length],
        z = r.makeTensorInfo(et, 'float32', G.real),
        M = r.makeTensorInfo(et, 'float32', G.imag),
        st = yn({ inputs: { real: z, imag: M }, backend: r }),
        nt = kh({ inputs: { a: st, b: X }, backend: r }),
        J = ri({ inputs: { a: P, b: nt }, backend: r }),
        pt = dg({ inputs: { a: P, b: nt }, backend: r }),
        wt = ho({ inputs: { input: J }, backend: r }),
        ft = ho({ inputs: { input: pt }, backend: r }),
        mt = oi({ inputs: { input: J }, backend: r }),
        Nt = oi({ inputs: { input: pt }, backend: r }),
        $t = ii({ inputs: [wt, ft], backend: r, attrs: { axis: 0 } }),
        zt = ii({ inputs: [mt, Nt], backend: r, attrs: { axis: 0 } }),
        Vt = r.data.get($t.dataId).values,
        I = r.data.get(zt.dataId).values;
    return (
        r.disposeIntermediateTensorInfo(h),
        r.disposeIntermediateTensorInfo(d),
        r.disposeIntermediateTensorInfo(p),
        r.disposeIntermediateTensorInfo(b),
        r.disposeIntermediateTensorInfo(w),
        r.disposeIntermediateTensorInfo(x),
        r.disposeIntermediateTensorInfo(N),
        r.disposeIntermediateTensorInfo(R),
        r.disposeIntermediateTensorInfo(P),
        r.disposeIntermediateTensorInfo(q),
        r.disposeIntermediateTensorInfo(W),
        r.disposeIntermediateTensorInfo(X),
        r.disposeIntermediateTensorInfo(z),
        r.disposeIntermediateTensorInfo(M),
        r.disposeIntermediateTensorInfo(st),
        r.disposeIntermediateTensorInfo(nt),
        r.disposeIntermediateTensorInfo(J),
        r.disposeIntermediateTensorInfo(pt),
        r.disposeIntermediateTensorInfo(wt),
        r.disposeIntermediateTensorInfo(mt),
        r.disposeIntermediateTensorInfo(ft),
        r.disposeIntermediateTensorInfo(Nt),
        r.disposeIntermediateTensorInfo($t),
        r.disposeIntermediateTensorInfo(zt),
        { real: Vt, imag: I }
    );
}
function qB(n, t, e) {
    const s = new Float32Array(t * 2);
    for (let r = 0; r < t; r++) {
        let o = 0,
            i = 0;
        for (let a = 0; a < t; a++) {
            const l = o1(r * a, t, e),
                c = Em(n, a);
            (o += c.real * l.real - c.imag * l.imag),
                (i += c.real * l.imag + c.imag * l.real);
        }
        e && ((o /= t), (i /= t)), s1(s, o, i, r);
    }
    return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function KB(n) {
    const { inputs: t, backend: e } = n,
        { input: s } = t,
        r = rt(s.shape),
        o = s.shape[s.shape.length - 1],
        i = r / o,
        a = re({ inputs: { x: s }, backend: e, attrs: { shape: [i, o] } }),
        l = Vk(a, !1, e),
        c = re({ inputs: { x: l }, backend: e, attrs: { shape: s.shape } });
    return (
        e.disposeIntermediateTensorInfo(a),
        e.disposeIntermediateTensorInfo(l),
        c
    );
}
const XB = { kernelName: _p, backendName: 'cpu', kernelFunc: KB };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function mg(n) {
    const { backend: t, attrs: e } = n,
        { shape: s, value: r, dtype: o } = e,
        i = o || hi(r),
        a = be(i, rt(s));
    return ZB(a, r, i), t.makeTensorInfo(s, i, a);
}
const YB = { kernelName: Ap, backendName: 'cpu', kernelFunc: mg };
function ZB(n, t, e) {
    n.fill(t);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const JB = {
    kernelName: Rp,
    backendName: 'cpu',
    kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
        const { image: s } = n,
            r = e,
            o = Ve(s.dtype, rt(s.shape)),
            [i, a, l, c] = s.shape,
            u = r.data.get(s.dataId).values;
        for (let d = 0; d < i; d++) {
            const p = d * l * a * c;
            for (let f = 0; f < a; f++) {
                const m = f * (l * c);
                for (let g = 0; g < l; g++) {
                    const y = g * c;
                    for (let b = 0; b < c; b++) {
                        const w = Math.round(l - g - 1),
                            x = p + m + y + b;
                        let v = u[x];
                        if (w >= 0 && w < l) {
                            const C = w * c,
                                $ = p + m + C + b;
                            v = u[$];
                        }
                        o[x] = v;
                    }
                }
            }
        }
        return {
            dataId: r.write(o, s.shape, s.dtype),
            shape: s.shape,
            dtype: s.dtype,
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function QB(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r, filter: o, bias: i, preluActivationWeights: a } = t,
        {
            strides: l,
            pad: c,
            dataFormat: u,
            dilations: h,
            dimRoundingMode: d,
            activation: p,
            leakyreluAlpha: f,
        } = s;
    let m = Bk({
        inputs: { x: r, filter: o },
        backend: e,
        attrs: {
            strides: l,
            pad: c,
            dataFormat: u,
            dilations: h,
            dimRoundingMode: d,
        },
    });
    if (i) {
        const g = m;
        if (u === 'NCHW' && i.shape.length === 1 && i.shape[0] !== 1) {
            const y = re({
                inputs: { x: i },
                backend: e,
                attrs: { shape: [i.shape[0], 1, 1] },
            });
            (m = ri({ inputs: { a: m, b: y }, backend: e })),
                e.disposeIntermediateTensorInfo(y);
        } else m = ri({ inputs: { a: m, b: i }, backend: e });
        e.disposeIntermediateTensorInfo(g);
    }
    if (p) {
        const g = m;
        if (
            u === 'NCHW' &&
            p === 'prelu' &&
            a.shape.length === 1 &&
            a.shape[0] !== 1
        ) {
            const y = re({
                inputs: { x: a },
                backend: e,
                attrs: { shape: [a.shape[0], 1, 1] },
            });
            (m = Sc(e, m, p, y, f)), e.disposeIntermediateTensorInfo(y);
        } else m = Sc(e, m, p, a, f);
        e.disposeIntermediateTensorInfo(g);
    }
    return m;
}
const tM = { kernelName: tc, backendName: 'cpu', kernelFunc: QB };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function eM(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r, filter: o, bias: i, preluActivationWeights: a } = t,
        {
            strides: l,
            pad: c,
            dataFormat: u,
            dilations: h,
            dimRoundingMode: d,
            activation: p,
            leakyreluAlpha: f,
        } = s;
    let m = Mk({
        inputs: { x: r, filter: o },
        backend: e,
        attrs: {
            strides: l,
            pad: c,
            dataFormat: u,
            dilations: h,
            dimRoundingMode: d,
        },
    });
    if (i) {
        const g = m;
        (m = ri({ inputs: { a: m, b: i }, backend: e })),
            e.disposeIntermediateTensorInfo(g);
    }
    if (p) {
        const g = m;
        (m = Sc(e, m, p, a, f)), e.disposeIntermediateTensorInfo(g);
    }
    return m;
}
const nM = { kernelName: ec, backendName: 'cpu', kernelFunc: eM };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function sM(n) {
    const { inputs: t, backend: e } = n,
        { params: s, indices: r } = t,
        o = rt(s.shape),
        i = r.shape,
        a = i[i.length - 1],
        [l, c, u, h] = dm(s, r);
    if (c === 0) return e.makeTensorInfo(l, s.dtype, []);
    const d = e.data.get(r.dataId).values,
        p = e.bufferSync(s),
        f = Zv(d, p, s.dtype, c, a, u, h, s.shape, o);
    return e.makeTensorInfo(l, s.dtype, f.values);
}
const rM = { kernelName: Dp, backendName: 'cpu', kernelFunc: sM };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function oM(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r, indices: o } = t,
        { axis: i, batchDims: a } = s;
    It([r, o], 'gatherV2');
    const l = Bt(i, r.shape)[0],
        c = e.data.get(o.dataId).values,
        u = r.shape[l];
    for (let x = 0; x < c.length; ++x) {
        const v = c[x];
        _(
            v <= u - 1 && v >= 0,
            () => `GatherV2: the index value ${v} is not in [0, ${u - 1}]`
        );
    }
    let h = a;
    a == null && (h = 0);
    const d = rt(o.shape),
        p = Lm(r, o, l, h),
        f = re({
            inputs: { x: r },
            backend: e,
            attrs: {
                shape: [p.batchSize, p.outerSize, p.dimSize, p.sliceSize],
            },
        }),
        m = re({
            inputs: { x: o },
            backend: e,
            attrs: { shape: [p.batchSize, d / p.batchSize] },
        }),
        g = [p.batchSize, p.outerSize, d / p.batchSize, p.sliceSize],
        y = e.bufferSync(m),
        b = e.bufferSync(f),
        w = Jv(b, y, g);
    return (
        e.disposeIntermediateTensorInfo(f),
        e.disposeIntermediateTensorInfo(m),
        e.makeTensorInfo(p.outputShape, w.dtype, w.values)
    );
}
const iM = { kernelName: tu, backendName: 'cpu', kernelFunc: oM };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function aM(n) {
    const { inputs: t, backend: e } = n,
        { input: s } = t,
        r = rt(s.shape),
        o = s.shape[s.shape.length - 1],
        i = r / o,
        a = re({ inputs: { x: s }, backend: e, attrs: { shape: [i, o] } }),
        l = Vk(a, !0, e),
        c = re({ inputs: { x: l }, backend: e, attrs: { shape: s.shape } });
    return (
        e.disposeIntermediateTensorInfo(a),
        e.disposeIntermediateTensorInfo(l),
        c
    );
}
const lM = { kernelName: Op, backendName: 'cpu', kernelFunc: aM };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const cM = Yt(Ca, (n) => (Number.isFinite(n) ? 1 : 0), 'bool'),
    uM = { kernelName: Ca, backendName: 'cpu', kernelFunc: cM };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const hM = Yt($a, (n) => (Math.abs(n) === 1 / 0 ? 1 : 0), 'bool'),
    dM = { kernelName: $a, backendName: 'cpu', kernelFunc: hM };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const pM = Yt(Na, (n) => (Number.isNaN(n) ? 1 : 0), 'bool'),
    fM = { kernelName: Na, backendName: 'cpu', kernelFunc: pM };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function mM(n) {
    const { backend: t, attrs: e } = n,
        { start: s, stop: r, num: o } = e,
        i = sk(s, r, o);
    return t.makeTensorInfo([i.length], 'float32', i);
}
const gM = { kernelName: Lp, backendName: 'cpu', kernelFunc: mM };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const yM = Yt(Ea, (n) => Math.log1p(n)),
    bM = { kernelName: Ea, backendName: 'cpu', kernelFunc: yM };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const xM = ke((n, t) => n && t),
    wM = Re(ou, xM, null, 'bool'),
    vM = { kernelName: ou, backendName: 'cpu', kernelFunc: wM };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const kM = Yt(iu, (n) => (n ? 0 : 1), 'bool'),
    SM = { kernelName: iu, backendName: 'cpu', kernelFunc: kM };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const IM = ke((n, t) => n || t),
    CM = Re(au, IM, null, 'bool'),
    $M = { kernelName: au, backendName: 'cpu', kernelFunc: CM };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function NM(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { depthRadius: o, bias: i, alpha: a, beta: l } = s;
    It(r, 'LRN');
    const c = r.shape[3],
        u = c - 1,
        h = e.data.get(r.dataId).values,
        d = rt(r.shape),
        p = new Float32Array(d);
    function f(m) {
        const g = m % c;
        let y = m - g + Math.max(0, g - o);
        const b = m - g + Math.min(g + o, u);
        let w = 0;
        for (; y <= b; y++) {
            const x = h[y];
            w += x * x;
        }
        return w;
    }
    for (let m = 0; m < d; m++) {
        const g = f(m),
            y = h[m] * Math.pow(i + a * g, -l);
        p[m] = y;
    }
    return e.makeTensorInfo(r.shape, r.dtype, p);
}
const TM = { kernelName: lu, backendName: 'cpu', kernelFunc: NM };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function EM(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r, y: o, dy: i } = t,
        { depthRadius: a, bias: l, alpha: c, beta: u } = s;
    It(i, 'LRNGrad');
    const h = rt(i.shape),
        d = i.shape[3],
        p = e.data.get(i.dataId).values,
        f = e.data.get(r.dataId).values,
        m = e.data.get(o.dataId).values,
        g = new Float32Array(h),
        y = h;
    for (let b = 0; b < y; b++) {
        const w = b % d,
            x = b - w + Math.max(0, w - a),
            v = b - w + Math.min(d, w + a + 1);
        let C = 0;
        for (let $ = x; $ < v; $++) C += Math.pow(f[$], 2);
        C = c * C + l;
        for (let $ = x; $ < v; $++) {
            let T = (-2 * c * u * f[$] * m[b]) / C;
            b === $ && (T += Math.pow(C, -u)), (T *= p[b]), (g[$] += T);
        }
    }
    return e.makeTensorInfo(i.shape, r.dtype, g);
}
const _M = { kernelName: Pp, backendName: 'cpu', kernelFunc: EM };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Wk(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { reductionIndices: o, keepDims: i } = s,
        a = e;
    let l = r.shape;
    const c = l.length,
        u = Bt(o, l);
    let h = u;
    const d = me(h, c);
    let p = a.data.get(r.dataId).values;
    if (d != null) {
        const x = new Array(c);
        for (let v = 0; v < x.length; v++) x[v] = l[d[v]];
        (p = ug(p, l, r.dtype, d, x)), (h = we(h.length, c)), (l = x);
    }
    It(r, 'max'), Ue('max', h, c);
    const [f, m] = Pe(l, h),
        g = rt(m),
        y = ok(p, g, f, r.dtype),
        b = a.write(y, f, r.dtype);
    let w = f;
    return i && (w = xe(f, u)), { dataId: b, shape: w, dtype: r.dtype };
}
const AM = { kernelName: cu, backendName: 'cpu', kernelFunc: Wk };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function RM(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t;
    It(r, 'maxPool');
    const { filterSize: o, strides: i, pad: a, dimRoundingMode: l } = s,
        c = 1;
    _(
        We(i, c),
        () =>
            `Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`
    );
    const u = ts(r.shape, o, i, c, a, l);
    let h;
    if (
        u.filterWidth === 1 &&
        u.filterHeight === 1 &&
        Ut(u.inShape, u.outShape)
    )
        h = As({ inputs: { x: r }, backend: e });
    else {
        const d = e.data.get(r.dataId).values,
            p = _t(r.shape),
            f = pg(d, r.shape, r.dtype, p, u, 'max');
        h = e.makeTensorInfo(u.outShape, r.dtype, f.values);
    }
    return h;
}
const DM = { kernelName: uu, backendName: 'cpu', kernelFunc: RM };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function OM(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        {
            filterSize: o,
            strides: i,
            pad: a,
            dimRoundingMode: l,
            dataFormat: c,
        } = s;
    It(r, 'maxPool3d');
    const u = Ys(r.shape, o, i, 1, a, l, c),
        h = e.data.get(r.dataId).values,
        d = zk(h, r.shape, r.dtype, _t(r.shape), u, 'max');
    return e.makeTensorInfo(d.shape, 'float32', d.values);
}
const FM = { kernelName: hu, backendName: 'cpu', kernelFunc: OM };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function LM(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: r, input: o } = t,
        { filterSize: i, strides: a, pad: l, dimRoundingMode: c } = s;
    It([r, o], 'maxPool3DGrad');
    const u = Ys(o.shape, i, a, 1, l, c),
        h = e.bufferSync(o),
        d = Iz(h, u),
        p = u.strideDepth,
        f = u.strideHeight,
        m = u.strideWidth,
        g = u.dilationDepth,
        y = u.dilationHeight,
        b = u.dilationWidth,
        w = u.effectiveFilterDepth,
        x = u.effectiveFilterHeight,
        v = u.effectiveFilterWidth,
        C = w - 1 - u.padInfo.front,
        $ = v - 1 - u.padInfo.left,
        T = x - 1 - u.padInfo.top,
        N = Pt(o.shape, 'float32'),
        R = e.bufferSync(r);
    for (let P = 0; P < u.batchSize; ++P)
        for (let E = 0; E < u.inChannels; ++E)
            for (let O = 0; O < u.inDepth; ++O)
                for (let S = 0; S < u.inHeight; ++S)
                    for (let L = 0; L < u.inWidth; ++L) {
                        const q = O - C,
                            W = S - T,
                            X = L - $;
                        let G = 0;
                        for (let et = 0; et < w; et += g) {
                            const z = (q + et) / p;
                            if (
                                !(
                                    z < 0 ||
                                    z >= u.outDepth ||
                                    Math.floor(z) !== z
                                )
                            )
                                for (let M = 0; M < x; M += y) {
                                    const st = (W + M) / f;
                                    if (
                                        !(
                                            st < 0 ||
                                            st >= u.outHeight ||
                                            Math.floor(st) !== st
                                        )
                                    )
                                        for (let nt = 0; nt < v; nt += b) {
                                            const J = (X + nt) / m;
                                            if (
                                                J < 0 ||
                                                J >= u.outWidth ||
                                                Math.floor(J) !== J
                                            )
                                                continue;
                                            const pt =
                                                    w * x * v -
                                                    1 -
                                                    d.get(P, z, st, J, E),
                                                wt = et * x * v + M * v + nt,
                                                ft = pt === wt ? 1 : 0;
                                            if (ft === 0) continue;
                                            const mt = R.get(P, z, st, J, E);
                                            G += mt * ft;
                                        }
                                }
                        }
                        N.set(G, P, O, S, L, E);
                    }
    return e.makeTensorInfo(N.shape, N.dtype, N.values);
}
const PM = { kernelName: Bp, backendName: 'cpu', kernelFunc: LM };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function zM(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: r, input: o, output: i } = t,
        a = o;
    It([o, i], 'maxPoolGrad');
    const { filterSize: l, strides: c, pad: u, dimRoundingMode: h } = s,
        d = ts(a.shape, l, c, 1, u, h),
        p = e.data.get(a.dataId).values,
        f = Pt(d.outShape, a.dtype, Pk(p, a.shape, a.dtype, d).values),
        m = d.strideHeight,
        g = d.strideWidth,
        y = d.dilationHeight,
        b = d.dilationWidth,
        w = d.effectiveFilterHeight,
        x = d.effectiveFilterWidth,
        v = x - 1 - d.padInfo.left,
        C = w - 1 - d.padInfo.top,
        $ = Pt(a.shape, 'float32'),
        T = e.data.get(r.dataId).values,
        N = Pt(r.shape, 'float32', T);
    for (let R = 0; R < d.batchSize; ++R)
        for (let P = 0; P < d.inChannels; ++P)
            for (let E = 0; E < d.inHeight; ++E)
                for (let O = 0; O < d.inWidth; ++O) {
                    const S = E - C,
                        L = O - v;
                    let q = 0;
                    for (let W = 0; W < w; W += y) {
                        const X = (S + W) / m;
                        if (!(X < 0 || X >= d.outHeight || Math.floor(X) !== X))
                            for (let G = 0; G < x; G += b) {
                                const et = (L + G) / g;
                                if (
                                    et < 0 ||
                                    et >= d.outWidth ||
                                    Math.floor(et) !== et
                                )
                                    continue;
                                const z = w * x - 1 - f.get(R, X, et, P),
                                    M = W * x + G,
                                    st = z === M ? 1 : 0;
                                if (st === 0) continue;
                                const nt = N.get(R, X, et, P);
                                q += nt * st;
                            }
                    }
                    $.set(q, R, E, O, P);
                }
    return e.makeTensorInfo($.shape, $.dtype, $.values);
}
const BM = { kernelName: zp, backendName: 'cpu', kernelFunc: zM };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function MM(n, t, e, s, r) {
    const o = _t(t),
        i = pg(n, t, e, o, r, 'max'),
        a = Pk(n, t, e, r, !0, s);
    return [i.values, a.values];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const VM = {
    kernelName: Mp,
    backendName: 'cpu',
    kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
        const { x: s } = n,
            { filterSize: r, strides: o, pad: i, includeBatchInIndex: a } = t,
            l = e;
        It(s, 'MaxPoolWithArgmax');
        const c = l.data.get(s.dataId).values,
            u = ts(s.shape, r, o, [1, 1], i),
            [h, d] = MM(c, s.shape, s.dtype, a, u),
            p = l.write(h, u.outShape, s.dtype),
            f = l.write(d, u.outShape, s.dtype);
        return [
            { dataId: p, shape: u.outShape, dtype: s.dtype },
            { dataId: f, shape: u.outShape, dtype: 'int32' },
        ];
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function WM(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { axis: o, keepDims: i } = s,
        a = Bt(o, r.shape),
        c = Pe(r.shape, a)[1],
        u = rt(c),
        h = [],
        d = e.makeTensorInfo([], 'float32', new Float32Array([u]));
    h.push(d);
    const p = vr({ inputs: { x: r }, backend: e, attrs: { dtype: 'float32' } });
    h.push(p);
    const f = fg({ inputs: { a: p, b: d }, backend: e });
    h.push(f);
    const m = bl({
        inputs: { x: f },
        backend: e,
        attrs: { axis: o, keepDims: i },
    });
    return h.forEach((g) => e.disposeIntermediateTensorInfo(g)), m;
}
const UM = { kernelName: du, backendName: 'cpu', kernelFunc: WM };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function GM(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { axis: o, keepDims: i } = s;
    It(r, 'min');
    const a = Bt(o, r.shape);
    let l = a;
    const c = me(l, r.shape.length);
    let u = r;
    c != null &&
        ((u = hn({ inputs: { x: r }, backend: e, attrs: { perm: c } })),
        (l = we(l.length, r.shape.length))),
        Ue('min', l, u.shape.length);
    const [h, d] = Pe(u.shape, l),
        p = rt(d),
        f = Ke(rt(h), u.dtype),
        m = e.data.get(u.dataId).values;
    for (let y = 0; y < f.length; ++y) {
        const b = y * p;
        let w = m[b];
        for (let x = 0; x < p; ++x) {
            const v = m[b + x];
            (Number.isNaN(v) || v < w) && (w = v);
        }
        f[y] = w;
    }
    c != null && e.disposeIntermediateTensorInfo(u);
    const g = e.makeTensorInfo(h, u.dtype, f);
    if (i) {
        const y = xe(h, a),
            b = re({ inputs: { x: g }, backend: e, attrs: { shape: y } });
        return e.disposeIntermediateTensorInfo(g), b;
    }
    return g;
}
const HM = { kernelName: pu, backendName: 'cpu', kernelFunc: GM };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function jM(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { paddings: o, mode: i } = s;
    It(r, 'mirrorPad');
    const a = o.map((w, x) => w[0] + r.shape[x] + w[1]),
        l = o.map((w) => w[0]),
        c = o.map((w, x) => w[0] + r.shape[x]),
        u = i === 'reflect' ? 0 : 1,
        h = e.data.get(r.dataId).values,
        d = r.shape.length,
        p = _t(r.shape),
        f = rt(a),
        m = a.length,
        g = _t(a),
        y = Ve(r.dtype, f);
    for (let w = 0; w < f; w++) {
        let x = di(w, m, g);
        for (let C = 0; C < m; C++)
            x[C] < l[C]
                ? (x[C] = l[C] * 2 - x[C] - u)
                : x[C] >= c[C] && (x[C] = (c[C] - 1) * 2 - x[C] + u);
        x = x.map((C, $) => C - l[$]);
        const v = ks(x, d, p);
        y[w] = h[v];
    }
    return { dataId: e.write(y, a, r.dtype), shape: a, dtype: r.dtype };
}
const qM = { kernelName: fu, backendName: 'cpu', kernelFunc: jM };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const KM = ke((n, t) => {
        const e = n % t;
        return (n < 0 && t < 0) || (n >= 0 && t >= 0) ? e : (e + t) % t;
    }),
    XM = Re(Ra, KM),
    YM = { kernelName: Ra, backendName: 'cpu', kernelFunc: XM };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Uk(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { logits: r } = t,
        { dim: o } = s,
        i = r.shape.length;
    let a = o;
    if ((a === -1 && (a = i - 1), a !== i - 1))
        throw Error(
            `Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${a}`
        );
    const l = Bt([a], r.shape),
        c = Wk({
            inputs: { x: r },
            backend: e,
            attrs: { reductionIndices: l, keepDims: !1 },
        }),
        u = xe(c.shape, l),
        h = re({ inputs: { x: c }, backend: e, attrs: { shape: u } }),
        d = dg({ inputs: { a: r, b: h }, backend: e }),
        p = qv({ inputs: { x: d }, backend: e }),
        f = bl({
            inputs: { x: p },
            backend: e,
            attrs: { axis: l, keepDims: !1 },
        }),
        m = re({ inputs: { x: f }, backend: e, attrs: { shape: u } }),
        g = fg({ inputs: { a: p, b: m }, backend: e });
    return (
        e.disposeIntermediateTensorInfo(c),
        e.disposeIntermediateTensorInfo(h),
        e.disposeIntermediateTensorInfo(d),
        e.disposeIntermediateTensorInfo(p),
        e.disposeIntermediateTensorInfo(f),
        e.disposeIntermediateTensorInfo(m),
        g
    );
}
const ZM = { kernelName: Ru, backendName: 'cpu', kernelFunc: Uk };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function JM(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { logits: r } = t,
        { numSamples: o, seed: i, normalized: a } = s;
    It(r, 'multinomial');
    const l = a
            ? r
            : Uk({ inputs: { logits: r }, backend: e, attrs: { dim: -1 } }),
        c = l.shape[0],
        u = l.shape[1],
        h = e.data.get(l.dataId).values,
        d = [c, o],
        p = Ke(rt(d), 'int32');
    for (let f = 0; f < c; ++f) {
        const m = f * u,
            g = new Float32Array(u - 1);
        g[0] = h[m];
        for (let w = 1; w < g.length; ++w) g[w] = g[w - 1] + h[m + w];
        const y = Zu.alea(i.toString()),
            b = f * o;
        for (let w = 0; w < o; ++w) {
            const x = y();
            p[b + w] = g.length;
            for (let v = 0; v < g.length; v++)
                if (x < g[v]) {
                    p[b + w] = v;
                    break;
                }
        }
    }
    return (
        a || e.disposeIntermediateTensorInfo(l), e.makeTensorInfo(d, 'int32', p)
    );
}
const QM = { kernelName: Vp, backendName: 'cpu', kernelFunc: JM };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const tV = om;
function eV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { boxes: r, scores: o } = t,
        { maxOutputSize: i, iouThreshold: a, scoreThreshold: l } = s;
    It(r, 'NonMaxSuppression');
    const c = e.data.get(r.dataId).values,
        u = e.data.get(o.dataId).values,
        { selectedIndices: h } = tV(c, u, i, a, l);
    return e.makeTensorInfo([h.length], 'int32', new Int32Array(h));
}
const nV = { kernelName: Wp, backendName: 'cpu', kernelFunc: eV };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const sV = im;
function rV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { boxes: r, scores: o } = t,
        {
            maxOutputSize: i,
            iouThreshold: a,
            scoreThreshold: l,
            padToMaxOutputSize: c,
        } = s;
    It(r, 'NonMaxSuppressionPadded');
    const u = e.data.get(r.dataId).values,
        h = e.data.get(o.dataId).values,
        { selectedIndices: d, validOutputs: p } = sV(u, h, i, a, l, c);
    return [
        e.makeTensorInfo([d.length], 'int32', new Int32Array(d)),
        e.makeTensorInfo([], 'int32', new Int32Array([p])),
    ];
}
const oV = { kernelName: Up, backendName: 'cpu', kernelFunc: rV };
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const iV = am;
function aV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { boxes: r, scores: o } = t,
        {
            maxOutputSize: i,
            iouThreshold: a,
            scoreThreshold: l,
            softNmsSigma: c,
        } = s;
    It(r, 'NonMaxSuppressionWithScore');
    const u = e.data.get(r.dataId).values,
        h = e.data.get(o.dataId).values,
        d = i,
        p = a,
        f = l,
        m = c,
        { selectedIndices: g, selectedScores: y } = iV(u, h, d, p, f, m);
    return [
        e.makeTensorInfo([g.length], 'int32', new Int32Array(g)),
        e.makeTensorInfo([y.length], 'float32', new Float32Array(y)),
    ];
}
const lV = { kernelName: Gp, backendName: 'cpu', kernelFunc: aV };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function cV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { indices: r } = t,
        { dtype: o, depth: i, onValue: a, offValue: l } = s;
    It(r, 'oneHot');
    const c = rt(r.shape),
        u = new Float32Array(c * i);
    u.fill(l);
    const h = e.data.get(r.dataId).values;
    for (let d = 0; d < c; ++d) h[d] >= 0 && h[d] < i && (u[d * i + h[d]] = a);
    return e.makeTensorInfo([...r.shape, i], o, u);
}
const uV = { kernelName: bu, backendName: 'cpu', kernelFunc: cV };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Cc(n) {
    const { inputs: t, backend: e } = n,
        { x: s } = t;
    if (s.dtype === 'string')
        throw new Error('zerosLike is not supported for string tensors');
    if (s.dtype === 'complex64') {
        const r = ho({ inputs: { input: s }, backend: e }),
            o = Cc({ inputs: { x: r }, backend: e }),
            i = oi({ inputs: { input: s }, backend: e }),
            a = Cc({ inputs: { x: i }, backend: e }),
            l = yn({ inputs: { real: o, imag: a }, backend: e });
        return (
            e.disposeIntermediateTensorInfo(r),
            e.disposeIntermediateTensorInfo(o),
            e.disposeIntermediateTensorInfo(i),
            e.disposeIntermediateTensorInfo(a),
            l
        );
    } else
        return mg({
            backend: e,
            attrs: { shape: s.shape, value: 0, dtype: s.dtype },
        });
}
const hV = { kernelName: Lu, backendName: 'cpu', kernelFunc: Cc };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Gk(n) {
    const { inputs: t, backend: e } = n,
        { x: s } = t;
    if (s.dtype === 'string')
        throw new Error('onesLike is not supported for string tensors');
    if (s.dtype === 'complex64') {
        const r = ho({ inputs: { input: s }, backend: e }),
            o = Gk({ inputs: { x: r }, backend: e }),
            i = oi({ inputs: { input: s }, backend: e }),
            a = Cc({ inputs: { x: i }, backend: e }),
            l = yn({ inputs: { real: o, imag: a }, backend: e });
        return (
            e.disposeIntermediateTensorInfo(r),
            e.disposeIntermediateTensorInfo(o),
            e.disposeIntermediateTensorInfo(i),
            e.disposeIntermediateTensorInfo(a),
            l
        );
    } else
        return mg({
            backend: e,
            attrs: { shape: s.shape, value: 1, dtype: s.dtype },
        });
}
const dV = { kernelName: yu, backendName: 'cpu', kernelFunc: Gk };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Hk(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { axis: r } = s;
    if (t.length === 1)
        return Ic({ inputs: { input: t[0] }, backend: e, attrs: { dim: r } });
    const o = t[0].shape,
        i = t[0].dtype;
    t.forEach((u) => {
        $n(o, u.shape, 'All tensors passed to stack must have matching shapes'),
            _(
                i === u.dtype,
                () => 'All tensors passed to stack must have matching dtypes'
            );
    });
    const a = [],
        l = t.map((u) => {
            const h = Ic({
                inputs: { input: u },
                backend: e,
                attrs: { dim: r },
            });
            return a.push(h), h;
        }),
        c = ii({ inputs: l, backend: e, attrs: { axis: r } });
    return a.forEach((u) => e.disposeIntermediateTensorInfo(u)), c;
}
const pV = { kernelName: xu, backendName: 'cpu', kernelFunc: Hk };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function fV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { paddings: o, constantValue: i } = s;
    It(r, 'pad');
    const a = o.map((b, w) => b[0] + r.shape[w] + b[1]),
        l = o.map((b) => b[0]),
        c = e.data.get(r.dataId).values,
        u = rt(r.shape),
        h = r.shape.length,
        d = _t(r.shape),
        p = rt(a),
        f = a.length,
        m = _t(a),
        g = Ve(r.dtype, p);
    i !== 0 && g.fill(i);
    for (let b = 0; b < u; b++) {
        const x = di(b, h, d).map((C, $) => C + l[$]),
            v = ks(x, f, m);
        g[v] = c[b];
    }
    return { dataId: e.write(g, a, r.dtype), shape: a, dtype: r.dtype };
}
const jk = { kernelName: wu, backendName: 'cpu', kernelFunc: fV };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const mV = ke((n, t) => Math.pow(n, t)),
    gV = Re(Oa, mV),
    yV = { kernelName: Oa, backendName: 'cpu', kernelFunc: gV };
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function bV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { paramsNestedSplits: r, paramsDenseValues: o, indices: i } = t,
        a = r.map((g) => e.data.get(g.dataId).values),
        l = r.map((g) => g.shape),
        c = e.data.get(o.dataId).values,
        u = e.data.get(i.dataId).values,
        [h, d, p] = hk(a, l, c, o.shape, o.dtype, u, i.shape),
        f = h.map((g) => e.makeTensorInfo([g.length], 'int32', g)),
        m = e.makeTensorInfo(p, o.dtype, d);
    return f.concat([m]);
}
const xV = { kernelName: Hp, backendName: 'cpu', kernelFunc: bV };
/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function wV(n) {
    const { inputs: t, backend: e } = n,
        { starts: s, limits: r, deltas: o } = t,
        i = e.data.get(s.dataId).values,
        a = e.data.get(r.dataId).values,
        l = e.data.get(o.dataId).values,
        [c, u] = dk(i, s.shape, s.dtype, a, r.shape, l, o.shape),
        h = e.makeTensorInfo([c.length], 'int32', c),
        d = e.makeTensorInfo([u.length], s.dtype, u);
    return [h, d];
}
const vV = { kernelName: jp, backendName: 'cpu', kernelFunc: wV };
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function kV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { shape: r, values: o, defaultValue: i, rowPartitionTensors: a } = t,
        { rowPartitionTypes: l } = s,
        c = e.data.get(r.dataId).values,
        u = e.data.get(o.dataId).values,
        h = e.data.get(i.dataId).values,
        d = a.map((g) => e.data.get(g.dataId).values),
        p = a.map((g) => g.shape),
        [f, m] = pk(c, r.shape, u, o.shape, o.dtype, h, i.shape, d, p, l);
    return e.makeTensorInfo(f, o.dtype, m);
}
const SV = { kernelName: qp, backendName: 'cpu', kernelFunc: kV };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function IV(n) {
    const { backend: t, attrs: e } = n,
        { start: s, stop: r, dtype: o, step: i } = e,
        a = fk(s, r, i, o);
    return t.makeTensorInfo([a.length], o, a);
}
const CV = { kernelName: Kp, backendName: 'cpu', kernelFunc: IV };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const $V = Yt(Fa, (n) => 1 / n),
    NV = { kernelName: Fa, backendName: 'cpu', kernelFunc: $V };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function TV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { images: r } = t,
        { alignCorners: o, halfPixelCenters: i, size: a } = s;
    It(r, 'resizeBilinear');
    const l = _t(r.shape),
        [c, u] = a,
        [h, d, p, f] = r.shape,
        m = e.data.get(r.dataId).values,
        g = new Float32Array(rt([h, c, u, f])),
        y = [o && c > 1 ? d - 1 : d, o && u > 1 ? p - 1 : p],
        b = [o && c > 1 ? c - 1 : c, o && u > 1 ? u - 1 : u];
    let w = 0;
    const x = y[0] / b[0],
        v = y[1] / b[1];
    for (let C = 0; C < h; C++)
        for (let $ = 0; $ < c; $++) {
            let T;
            i ? (T = x * ($ + 0.5) - 0.5) : (T = x * $);
            const N = Math.max(0, Math.floor(T)),
                R = T - N,
                P = Math.min(d - 1, Math.ceil(T)),
                E = C * l[0] + N * l[1],
                O = C * l[0] + P * l[1];
            for (let S = 0; S < u; S++) {
                let L;
                i ? (L = v * (S + 0.5) - 0.5) : (L = v * S);
                const q = Math.max(0, Math.floor(L)),
                    W = L - q,
                    X = Math.min(p - 1, Math.ceil(L)),
                    G = E + q * l[2],
                    et = O + q * l[2],
                    z = E + X * l[2],
                    M = O + X * l[2];
                for (let st = 0; st < f; st++) {
                    const nt = m[G + st],
                        J = m[et + st],
                        pt = m[z + st],
                        wt = m[M + st],
                        ft = nt + (pt - nt) * W,
                        mt = J + (wt - J) * W,
                        Nt = ft + (mt - ft) * R;
                    g[w++] = Nt;
                }
            }
        }
    return e.makeTensorInfo([h, c, u, f], 'float32', g);
}
const EV = { kernelName: Cu, backendName: 'cpu', kernelFunc: TV };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function _V(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { images: r, dy: o } = t,
        { alignCorners: i } = s;
    It([o, r], 'resizeBilinearGrad');
    const a = _t(r.shape),
        [l, c, u, h] = r.shape,
        [, d, p] = o.shape,
        f = new Float32Array(l * c * u * h),
        m = [i && d > 1 ? c - 1 : c, i && p > 1 ? u - 1 : u],
        g = [i && d > 1 ? d - 1 : d, i && p > 1 ? p - 1 : p],
        y = m[0] / g[0],
        b = m[1] / g[1],
        w = e.data.get(o.dataId).values;
    let x = 0;
    for (let v = 0; v < l; v++) {
        const C = v * a[0];
        for (let $ = 0; $ < d; $++) {
            const T = $ * y,
                N = Math.floor(T),
                R = Math.min(Math.ceil(T), c - 1),
                P = C + N * a[1],
                E = C + R * a[1],
                O = T - N,
                S = 1 - O;
            for (let L = 0; L < p; L++) {
                const q = L * b,
                    W = Math.floor(q),
                    X = Math.min(Math.ceil(q), u - 1),
                    G = q - W,
                    et = 1 - G,
                    z = P + W * a[2],
                    M = P + X * a[2],
                    st = E + W * a[2],
                    nt = E + X * a[2],
                    J = S * et,
                    pt = S * G,
                    wt = O * et,
                    ft = O * G;
                for (let mt = 0; mt < h; mt++) {
                    const Nt = w[x++];
                    (f[z + mt] += Nt * J),
                        (f[M + mt] += Nt * pt),
                        (f[st + mt] += Nt * wt),
                        (f[nt + mt] += Nt * ft);
                }
            }
        }
    }
    return e.makeTensorInfo([l, u, c, h], 'float32', f);
}
const AV = { kernelName: Zp, backendName: 'cpu', kernelFunc: _V };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function RV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { images: r } = t,
        { alignCorners: o, halfPixelCenters: i, size: a } = s;
    It(r, 'resizeNearestNeighbor');
    const l = _t(r.shape),
        [c, u] = a,
        [h, d, p, f] = r.shape,
        m = e.data.get(r.dataId).values,
        g = new Float32Array(h * c * u * f),
        y = [o && c > 1 ? d - 1 : d, o && u > 1 ? p - 1 : p],
        b = [o && c > 1 ? c - 1 : c, o && u > 1 ? u - 1 : u],
        w = y[0] / b[0],
        x = y[1] / b[1];
    let v = 0;
    for (let C = 0; C < h; C++) {
        const $ = C * l[0];
        for (let T = 0; T < c; T++) {
            const N = i ? w * (T + 0.5) : w * T;
            let R = Math.min(d - 1, o ? Math.round(N) : Math.floor(N));
            i && (R = Math.max(0, R));
            const P = $ + R * l[1];
            for (let E = 0; E < u; E++) {
                const O = i ? x * (E + 0.5) : x * E;
                let S = Math.min(p - 1, o ? Math.round(O) : Math.floor(O));
                i && (S = Math.max(0, S));
                const L = P + S * l[2];
                for (let q = 0; q < f; q++) {
                    const W = m[L + q];
                    g[v++] = W;
                }
            }
        }
    }
    return e.makeTensorInfo([h, c, u, f], r.dtype, g);
}
const DV = { kernelName: Iu, backendName: 'cpu', kernelFunc: RV };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function OV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { images: r, dy: o } = t,
        { alignCorners: i } = s;
    It([o, r], 'resizeNearestNeighborGrad');
    const a = _t(r.shape),
        l = _t(o.shape),
        [c, u, h, d] = r.shape,
        [, p, f] = o.shape,
        m = new Float32Array(c * u * h * d),
        g = e.data.get(o.dataId).values,
        y = [i && p > 1 ? u - 1 : u, i && f > 1 ? h - 1 : h],
        b = [i && p > 1 ? p - 1 : p, i && f > 1 ? f - 1 : f],
        w = y[0] / b[0],
        x = y[1] / b[1],
        v = 1 / w,
        C = 1 / x,
        $ = Math.ceil(v) * 2 + 2,
        T = Math.ceil(C) * 2 + 2;
    for (let N = 0; N < c; N++) {
        const R = N * a[0];
        for (let P = 0; P < u; P++) {
            const E = R + P * a[1],
                O = Math.floor(P * v),
                S = Math.floor(O - $ / 2);
            for (let L = 0; L < h; L++) {
                const q = E + L * a[2],
                    W = Math.floor(L * C),
                    X = Math.floor(W - T / 2);
                for (let G = 0; G < d; G++) {
                    let et = 0;
                    for (let z = 0; z < $; z++) {
                        const M = z + S;
                        if (M < 0 || M >= p) continue;
                        const st = R + M * l[1],
                            nt = M * w,
                            J = Math.min(
                                u - 1,
                                i ? Math.round(nt) : Math.floor(nt)
                            );
                        if (P === J)
                            for (let pt = 0; pt < T; pt++) {
                                const wt = pt + X;
                                if (wt < 0 || wt >= f) continue;
                                const ft = st + wt * l[2],
                                    mt = wt * x,
                                    Nt = Math.min(
                                        h - 1,
                                        i ? Math.round(mt) : Math.floor(mt)
                                    );
                                L === Nt && (et += g[ft + G]);
                            }
                    }
                    m[q + G] = et;
                }
            }
        }
    }
    return e.makeTensorInfo(r.shape, r.dtype, m);
}
const FV = { kernelName: Yp, backendName: 'cpu', kernelFunc: OV };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function LV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { dims: o } = s;
    It(r, 'reverse');
    const i = r.shape.length,
        a = Bt(o, r.shape);
    if (i === 0) return As({ inputs: { x: r }, backend: e });
    const l = new Te(r.shape, r.dtype),
        c = e.bufferSync(r);
    for (let u = 0; u < l.size; u++) {
        const h = l.indexToLoc(u),
            d = h.slice();
        a.forEach((p) => (d[p] = r.shape[p] - 1 - d[p])),
            l.set(c.get(...d), ...h);
    }
    return e.makeTensorInfo(l.shape, l.dtype, l.values);
}
const PV = { kernelName: $u, backendName: 'cpu', kernelFunc: LV };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const zV = {
    kernelName: mf,
    backendName: 'cpu',
    kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
        const { image: s } = n,
            { radians: r, fillValue: o, center: i } = t,
            a = e,
            l = Ve(s.dtype, rt(s.shape)),
            [c, u, h, d] = s.shape,
            [p, f] = wm(i, u, h),
            m = 255,
            g = Math.sin(r),
            y = Math.cos(r),
            b = a.data.get(s.dataId).values;
        for (let x = 0; x < c; x++) {
            const v = x * h * u * d;
            for (let C = 0; C < u; C++) {
                const $ = C * (h * d);
                for (let T = 0; T < h; T++) {
                    const N = T * d;
                    for (let R = 0; R < d; R++) {
                        const P = [c, C, T, R],
                            E = P[2],
                            O = P[1];
                        let S = (E - p) * y - (O - f) * g,
                            L = (E - p) * g + (O - f) * y;
                        (S = Math.round(S + p)), (L = Math.round(L + f));
                        let q = o;
                        if (
                            (typeof o != 'number' &&
                                (R === 3 ? (q = m) : (q = o[R])),
                            S >= 0 && S < h && L >= 0 && L < u)
                        ) {
                            const X = L * (h * d),
                                G = S * d,
                                et = v + X + G + R;
                            q = b[et];
                        }
                        const W = v + $ + N + R;
                        l[W] = q;
                    }
                }
            }
        }
        return {
            dataId: a.write(l, s.shape, s.dtype),
            shape: s.shape,
            dtype: s.dtype,
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const BV = Yt(za, (n) => {
        const t = Math.floor(n);
        return n - t < 0.5
            ? Math.floor(n)
            : n - t > 0.5
            ? Math.ceil(n)
            : t % 2 === 0
            ? t
            : t + 1;
    }),
    MV = { kernelName: za, backendName: 'cpu', kernelFunc: BV };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function VV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { indices: r, updates: o } = t,
        { shape: i } = s,
        {
            sliceRank: a,
            numUpdates: l,
            sliceSize: c,
            strides: u,
            outputSize: h,
        } = vo(o, r, i),
        d = !0,
        p = e.bufferSync(r),
        f = e.bufferSync(o),
        m = Kr(p, f, i, h, c, l, a, u, 0, d);
    return e.makeTensorInfo(i, m.dtype, m.values);
}
const WV = { kernelName: Jp, backendName: 'cpu', kernelFunc: VV };
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function UV(n, t) {
    let e = 0,
        s = n.length,
        r = 0;
    for (; e < s; )
        (r = Math.floor((e + s) / 2)), n[r] < t ? (e = r + 1) : (s = r);
    return s;
}
function GV(n, t) {
    let e = 0,
        s = n.length,
        r = 0;
    for (; e < s; )
        (r = Math.floor((e + s) / 2)), n[r] <= t ? (e = r + 1) : (s = r);
    return s;
}
function HV(n, t, e, s, r, o) {
    const i = be('int32', e * r);
    for (let a = 0; a < e; ++a) {
        const l = n.slice(a * s, (a + 1) * s),
            c = a * r;
        for (let u = 0; u < r; ++u)
            i[c + u] = o === 'left' ? UV(l, t[u + c]) : GV(l, t[u + c]);
    }
    return i;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function jV(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { sortedSequence: r, values: o } = t,
        { side: i } = s,
        a = e.data.get(r.dataId).values,
        l = e.data.get(o.dataId).values,
        c = HV(a, l, r.shape[0], r.shape[1], o.shape[1], i);
    return e.makeTensorInfo(o.shape, 'int32', c);
}
const qV = { kernelName: tf, backendName: 'cpu', kernelFunc: jV };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function KV(n) {
    const { inputs: t, backend: e } = n,
        { condition: s, t: r, e: o } = t;
    It([s, r, o], 'select');
    const i = s.shape.length,
        a = e.data.get(s.dataId).values,
        l = e.data.get(r.dataId).values,
        c = e.data.get(o.dataId).values,
        u = vn(r.dtype, o.dtype),
        h = Ke(rt(r.shape), u);
    let d = 0;
    const p =
        i === 0 || i > 1 || r.shape.length === 1 ? 1 : rt(r.shape.slice(1));
    for (let f = 0; f < a.length; f++)
        for (let m = 0; m < p; m++)
            a[f] === 1 ? (h[d++] = l[f]) : (h[d++] = c[f]);
    return e.makeTensorInfo(r.shape, u, h);
}
const XV = { kernelName: Nu, backendName: 'cpu', kernelFunc: KV };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const YV = ch,
    ZV = uh,
    JV = Yt(Ma, (n) => (n >= 0 ? ZV * n : YV * (Math.exp(n) - 1))),
    QV = { kernelName: Ma, backendName: 'cpu', kernelFunc: JV };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const t4 = Yt(Ua, (n) => (n < 0 ? -1 : n > 0 ? 1 : 0)),
    e4 = { kernelName: Ua, backendName: 'cpu', kernelFunc: t4 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const n4 = Yt(Va, (n) => Math.sin(n)),
    s4 = { kernelName: Va, backendName: 'cpu', kernelFunc: n4 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const r4 = Yt(Wa, (n) => Math.sinh(n)),
    o4 = { kernelName: Wa, backendName: 'cpu', kernelFunc: r4 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const i4 = 11920928955078125e-23,
    qy = Math.log(i4) + 2,
    a4 = Yt(Ha, (n) => {
        const t = n > -qy,
            e = n < qy,
            s = Math.exp(n);
        let r;
        return e ? (r = s) : t ? (r = n) : (r = Math.log(1 + s)), r;
    }),
    l4 = { kernelName: Ha, backendName: 'cpu', kernelFunc: a4 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function c4(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { blockShape: o, paddings: i } = s;
    It([r], 'spaceToBatchND');
    const a = rt(o),
        l = [[0, 0]];
    l.push(...i);
    for (let C = 1 + o.length; C < r.shape.length; ++C) l.push([0, 0]);
    const c = jk.kernelFunc({
            inputs: { x: r },
            backend: e,
            attrs: { paddings: l, constantValue: 0 },
        }),
        u = al(c.shape, o, a, !1),
        h = ll(u.length, o.length, !1),
        d = cl(c.shape, o, a, !1),
        m = re({ inputs: { x: c }, backend: e, attrs: { shape: u } }),
        b = hn({ inputs: { x: m }, backend: e, attrs: { perm: h } }),
        v = re({ inputs: { x: b }, backend: e, attrs: { shape: d } });
    return (
        e.disposeIntermediateTensorInfo(c),
        e.disposeIntermediateTensorInfo(m),
        e.disposeIntermediateTensorInfo(b),
        v
    );
}
const u4 = { kernelName: _u, backendName: 'cpu', kernelFunc: c4 };
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function h4(n) {
    const { inputs: t, backend: e } = n,
        { indices: s, values: r, denseShape: o, defaultValue: i } = t;
    if (o.shape.length !== 1)
        throw new Error(`Dense shape must be a vector, saw:
        ${o.shape}`);
    if (s.shape.length !== 2)
        throw new Error(`Indices must be a matrix, saw:
        ${s.shape}`);
    if (r.shape.length !== 1)
        throw new Error(`Values must be a vector, saw:
        ${r.shape}`);
    if (i.shape.length !== 0)
        throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);
    const a = e.data.get(s.dataId).values,
        l = e.data.get(r.dataId).values,
        c = e.data.get(o.dataId).values,
        u = e.data.get(i.dataId).values[0],
        [h, d, p, f, m] = bk(a, s.shape, s.dtype, l, r.dtype, c, u);
    return [
        e.makeTensorInfo(d, s.dtype, h),
        e.makeTensorInfo([d[0]], r.dtype, p),
        e.makeTensorInfo(
            [f.length],
            'bool',
            new Uint8Array(f.map((g) => Number(g)))
        ),
        e.makeTensorInfo([m.length], s.dtype, new Int32Array(m)),
    ];
}
const d4 = { kernelName: ef, backendName: 'cpu', kernelFunc: h4 };
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function p4(n) {
    const { inputs: t, backend: e } = n,
        { inputIndices: s, inputShape: r, newShape: o } = t;
    if (s.shape.length !== 2)
        throw new Error(`Input indices should be a matrix but received shape
        ${s.shape}`);
    if (r.shape.length !== 1)
        throw new Error(`Input shape should be a vector but received shape
        ${r.shape}`);
    if (o.shape.length !== 1)
        throw new Error(
            `Target shape should be a vector but received shape ${o.shape}`
        );
    const i = Array.from(e.data.get(r.dataId).values),
        a = e.data.get(s.dataId).values,
        l = Array.from(e.data.get(o.dataId).values),
        [c, u, h] = xk(a, s.shape, s.dtype, i, l);
    return [
        e.makeTensorInfo(u, s.dtype, c),
        e.makeTensorInfo([h.length], o.dtype, new Int32Array(h)),
    ];
}
const f4 = { kernelName: nf, backendName: 'cpu', kernelFunc: p4 };
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function m4(n) {
    const { inputs: t, backend: e } = n,
        { data: s, indices: r, segmentIds: o } = t;
    if (s.shape.length < 1)
        throw new Error(
            'Data should be at least 1 dimensional but received scalar'
        );
    if (r.shape.length !== 1)
        throw new Error(`Indices should be a vector but received shape
          ${r.shape}`);
    if (o.shape.length !== 1)
        throw new Error(`Segment ids should be a vector but received shape
          ${o.shape}`);
    if (r.shape[0] !== o.shape[0])
        throw new Error('segmentIds and indices should have same size.');
    const i = e.data.get(s.dataId).values,
        a = e.data.get(r.dataId).values,
        l = e.data.get(o.dataId).values,
        [c, u] = hg(i, s.shape, s.dtype, a, l, !0);
    return e.makeTensorInfo(u, s.dtype, c);
}
const g4 = { kernelName: sf, backendName: 'cpu', kernelFunc: m4 };
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function y4(n) {
    const { inputs: t, backend: e } = n,
        { data: s, indices: r, segmentIds: o } = t;
    if (s.shape.length < 1)
        throw new Error(
            'Data should be at least 1 dimensional but received scalar'
        );
    if (r.shape.length !== 1)
        throw new Error(`Indices should be a vector but received shape
         ${r.shape}`);
    if (o.shape.length !== 1)
        throw new Error(`Segment ids should be a vector but received shape
         ${o.shape}`);
    if (r.shape[0] !== o.shape[0])
        throw new Error('segmentIds and indices should have same size.');
    const i = e.data.get(s.dataId).values,
        a = e.data.get(r.dataId).values,
        l = e.data.get(o.dataId).values,
        [c, u] = hg(i, s.shape, s.dtype, a, l);
    return e.makeTensorInfo(u, s.dtype, c);
}
const b4 = { kernelName: rf, backendName: 'cpu', kernelFunc: y4 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function x4(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { sparseIndices: r, sparseValues: o, defaultValue: i } = t,
        { outputShape: a } = s,
        {
            sliceRank: l,
            numUpdates: c,
            sliceSize: u,
            strides: h,
            outputSize: d,
        } = vo(o, r, a),
        p = !1,
        f = e.bufferSync(r);
    let m;
    switch (o.dtype) {
        case 'bool': {
            const g = e.bufferSync(o),
                y = !!e.data.get(i.dataId).values[0];
            m = Kr(f, g, a, d, u, c, l, h, y, p);
            break;
        }
        case 'float32': {
            const g = e.bufferSync(o),
                y = e.data.get(i.dataId).values[0];
            m = Kr(f, g, a, d, u, c, l, h, y, p);
            break;
        }
        case 'int32': {
            const g = e.bufferSync(o),
                y = e.data.get(i.dataId).values[0];
            m = Kr(f, g, a, d, u, c, l, h, y, p);
            break;
        }
        case 'string': {
            const g = e.bufferSync(o),
                y = dr(e.data.get(i.dataId).values[0]);
            m = Kr(f, g, a, d, u, c, l, h, y, p);
            break;
        }
        default:
            throw new Error(`Unsupported type ${o.dtype}`);
    }
    return e.makeTensorInfo(a, m.dtype, m.values);
}
const w4 = { kernelName: of, backendName: 'cpu', kernelFunc: x4 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function v4(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { numOrSizeSplits: o, axis: i } = s,
        a = Bt(i, r.shape)[0],
        l = Fm(r, o, a),
        c = new Array(r.shape.length).fill(0),
        u = r.shape.slice();
    return l.map((h) => {
        const d = [...u];
        d[a] = h;
        const p = po({
            inputs: { x: r },
            backend: e,
            attrs: { begin: c, size: d },
        });
        return (c[a] += h), p;
    });
}
const k4 = { kernelName: Au, backendName: 'cpu', kernelFunc: v4 };
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const S4 = {
    kernelName: af,
    backendName: 'cpu',
    kernelFunc: ({ inputs: n, backend: t }) => {
        const { x: e } = n,
            s = t;
        It(e, 'square');
        const r = s.data.get(e.dataId).values,
            o = new Float32Array(r.length);
        for (let a = 0; a < r.length; ++a) {
            const l = r[a];
            o[a] = l * l;
        }
        return {
            dataId: s.write(o, e.shape, e.dtype),
            shape: e.shape,
            dtype: e.dtype,
        };
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const I4 = Yt(Ja, (n, t) => {
        const e = t;
        return isNaN(n) ? NaN : n > 0 ? 1 : e.alpha;
    }),
    C4 = { kernelName: Ja, backendName: 'cpu', kernelFunc: I4 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function $4(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        {
            begin: o,
            end: i,
            strides: a,
            beginMask: l,
            endMask: c,
            ellipsisMask: u,
            newAxisMask: h,
            shrinkAxisMask: d,
        } = s;
    It(r, 'stridedSlice');
    const {
        finalShapeSparse: p,
        finalShape: f,
        isIdentity: m,
        sliceDim0: g,
        isSimpleSlice: y,
        begin: b,
        end: w,
        strides: x,
    } = ym(r.shape, o, i, a, l, c, u, h, d);
    let v;
    if (m) v = re({ inputs: { x: r }, backend: e, attrs: { shape: f } });
    else if (g || y) {
        _(
            r.shape.length >= 1,
            () => `Input must have rank at least 1, got: ${r.shape.length}`
        );
        const C = fm(b, w, x),
            $ = po({
                inputs: { x: r },
                backend: e,
                attrs: { begin: b, size: C },
            });
        (v = re({ inputs: { x: $ }, backend: e, attrs: { shape: f } })),
            e.disposeIntermediateTensorInfo($);
    } else {
        const C = e.bufferSync(r),
            $ = kk(p, C, x, b);
        v = e.makeTensorInfo(f, $.dtype, $.values);
    }
    return v;
}
const N4 = { kernelName: lf, backendName: 'cpu', kernelFunc: $4 };
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function T4(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        {
            separator: r,
            nGramWidths: o,
            leftPad: i,
            rightPad: a,
            padWidth: l,
            preserveShortSequences: c,
        } = s,
        { data: u, dataSplits: h } = t,
        d = e.data.get(u.dataId).values,
        p = e.data.get(h.dataId).values,
        [f, m] = Sk(d, p, r, o, i, a, l, c);
    return [
        e.makeTensorInfo([f.length], 'string', f),
        e.makeTensorInfo(h.shape, 'int32', m),
    ];
}
const E4 = { kernelName: cf, backendName: 'cpu', kernelFunc: T4 };
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function _4(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { skipEmpty: r } = s,
        { input: o, delimiter: i } = t;
    if (o.dtype !== 'string')
        throw new Error('Input must be of datatype string');
    if (o.shape.length !== 1)
        throw new Error(`Input must be a vector, got shape: ${o.shape}`);
    if (i.shape.length !== 0)
        throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);
    const a = e.data.get(o.dataId).values,
        l = e.data.get(i.dataId).values[0],
        [c, u, h] = Ik(a, l, r),
        d = u.length;
    return [
        e.makeTensorInfo([d, 2], 'int32', c),
        e.makeTensorInfo([d], 'string', u),
        e.makeTensorInfo([2], 'int32', new Int32Array(h)),
    ];
}
const A4 = { kernelName: uf, backendName: 'cpu', kernelFunc: _4 };
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function R4(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { numBuckets: r } = s,
        { input: o } = t;
    if (o.dtype !== 'string')
        throw new Error('Input must be of datatype string');
    if (r <= 0) throw new Error('Number of buckets must be at least 1');
    const i = e.data.get(o.dataId).values,
        a = Ck(i, r);
    return e.makeTensorInfo(o.shape, 'int32', a);
}
const D4 = { kernelName: hf, backendName: 'cpu', kernelFunc: R4 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const O4 = Yt(Xa, (n) => Math.tan(n)),
    F4 = { kernelName: Xa, backendName: 'cpu', kernelFunc: O4 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const L4 = Yt(Ya, (n) => Math.tanh(n)),
    P4 = { kernelName: Ya, backendName: 'cpu', kernelFunc: L4 };
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function z4(n) {
    const { inputs: t, backend: e } = n,
        { tensor: s, indices: r, updates: o } = t,
        {
            sliceRank: i,
            numUpdates: a,
            sliceSize: l,
            strides: c,
            outputSize: u,
        } = vo(o, r, s.shape),
        h = !1,
        d = e.bufferSync(r),
        p = e.bufferSync(o),
        f = e.bufferSync(s),
        m = Kr(d, p, s.shape, u, l, a, i, c, f, h);
    return e.makeTensorInfo(s.shape, m.dtype, m.values);
}
const B4 = { kernelName: Qp, backendName: 'cpu', kernelFunc: z4 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function M4(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { reps: o } = s;
    It(r, 'tile');
    const i = Nk(e.bufferSync(r), o);
    return e.makeTensorInfo(i.shape, i.dtype, i.values);
}
const V4 = { kernelName: Za, backendName: 'cpu', kernelFunc: M4 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function W4(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { k: o, sorted: i } = s;
    It(r, 'topk');
    const a = e.data.get(r.dataId).values,
        [l, c] = Ek(a, r.shape, r.dtype, o, i);
    return [
        e.makeTensorInfo(l.shape, l.dtype, l.values),
        e.makeTensorInfo(c.shape, c.dtype, c.values),
    ];
}
const U4 = { kernelName: df, backendName: 'cpu', kernelFunc: W4 };
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function G4(n) {
    const { inputs: t, attrs: e, backend: s } = n,
        { image: r, transforms: o } = t,
        { interpolation: i, fillMode: a, fillValue: l, outputShape: c } = e,
        [u, h, d, p] = r.shape,
        [f, m] = c ?? [h, d],
        g = [u, f, m, p],
        y = _t(r.shape),
        b = y[0],
        w = y[1],
        x = y[2],
        v = _t(g),
        C = v[0],
        $ = v[1],
        T = v[2],
        N = Ve(r.dtype, rt(g));
    N.fill(l);
    const R = s.data.get(r.dataId).values,
        P = s.data.get(o.dataId).values;
    for (let O = 0; O < u; ++O) {
        const S = o.shape[0] === 1 ? P : P.subarray(O * 8, O * 8 + 8);
        for (let L = 0; L < f; ++L)
            for (let q = 0; q < m; ++q)
                for (let W = 0; W < p; ++W) {
                    let X;
                    const G = S[6] * q + S[7] * L + 1;
                    if (G === 0) continue;
                    const et = (S[0] * q + S[1] * L + S[2]) / G,
                        z = (S[3] * q + S[4] * L + S[5]) / G,
                        M = Ky(et, d, a),
                        st = Ky(z, h, a);
                    switch (i) {
                        case 'nearest':
                            X = Y4(R, h, d, b, w, x, O, st, M, W, l);
                            break;
                        case 'bilinear':
                            X = Z4(R, h, d, b, w, x, O, st, M, W, l);
                            break;
                        default:
                            throw new Error(
                                `Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`
                            );
                    }
                    const nt = O * C + L * $ + q * T + W;
                    N[nt] = X;
                }
        return s.makeTensorInfo(g, r.dtype, N);
    }
    return { dataId: s.write(N, g, r.dtype), shape: r.shape, dtype: r.dtype };
}
const H4 = { kernelName: pf, backendName: 'cpu', kernelFunc: G4 };
function Ky(n, t, e) {
    switch (e) {
        case 'reflect':
            return j4(n, t);
        case 'wrap':
            return q4(n, t);
        case 'nearest':
            return X4(n, t);
        case 'constant':
        default:
            return K4(n);
    }
}
function j4(n, t) {
    let e = n;
    if (e < 0)
        if (t <= 1) e = 0;
        else {
            const s = 2 * t;
            e < s && (e = s * Math.trunc(-e / s) + e),
                (e = e < -t ? e + s : -e - 1);
        }
    else if (e > t - 1)
        if (t <= 1) e = 0;
        else {
            const s = 2 * t;
            (e -= s * Math.trunc(e / s)), e >= t && (e = s - e - 1);
        }
    return eo(0, e, t - 1);
}
function q4(n, t) {
    let e = n;
    if (e < 0)
        if (t <= 1) e = 0;
        else {
            const s = t - 1;
            e += t * (Math.trunc(-e / s) + 1);
        }
    else if (e > t - 1)
        if (t <= 1) e = 0;
        else {
            const s = t - 1;
            e -= t * Math.trunc(e / s);
        }
    return eo(0, e, t - 1);
}
function K4(n, t) {
    return n;
}
function X4(n, t) {
    return eo(0, n, t - 1);
}
function zi(n, t, e, s, r, o, i, a, l, c, u) {
    const h = i * s + a * r + l * o + c;
    return 0 <= a && a < t && 0 <= l && l < e ? n[h] : u;
}
function Y4(n, t, e, s, r, o, i, a, l, c, u) {
    const h = Math.round(a),
        d = Math.round(l);
    return zi(n, t, e, s, r, o, i, h, d, c, u);
}
function Z4(n, t, e, s, r, o, i, a, l, c, u) {
    const h = Math.floor(a),
        d = Math.floor(l),
        p = h + 1,
        f = d + 1,
        m =
            (f - l) * zi(n, t, e, s, r, o, i, h, d, c, u) +
            (l - d) * zi(n, t, e, s, r, o, i, h, f, c, u),
        g =
            (f - l) * zi(n, t, e, s, r, o, i, p, d, c, u) +
            (l - d) * zi(n, t, e, s, r, o, i, p, f, c, u);
    return (p - a) * m + (a - h) * g;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function J4(n) {
    const { inputs: t, attrs: e, backend: s } = n,
        { axis: r } = e,
        { x: o } = t;
    It(o, 'unique');
    const i = s.data.get(o.dataId).values,
        {
            outputValues: a,
            outputShape: l,
            indices: c,
        } = _k(i, r, o.shape, o.dtype);
    return [
        s.makeTensorInfo(l, o.dtype, a),
        s.makeTensorInfo([c.length], 'int32', c),
    ];
}
const Q4 = { kernelName: ff, backendName: 'cpu', kernelFunc: J4 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function tW(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { value: r } = t;
    let { axis: o } = s;
    o < 0 && (o += r.shape.length);
    const i = r.shape.length,
        a = r.shape[o],
        l = new Array(i - 1);
    let c = 0;
    for (let p = 0; p < i; p++) p !== o && (l[c++] = r.shape[p]);
    const u = new Array(i).fill(0),
        h = r.shape.slice();
    h[o] = 1;
    const d = new Array(a);
    for (let p = 0; p < d.length; p++) {
        u[o] = p;
        const f = po({
            inputs: { x: r },
            backend: e,
            attrs: { begin: u, size: h },
        });
        (d[p] = re({ inputs: { x: f }, backend: e, attrs: { shape: l } })),
            e.disposeIntermediateTensorInfo(f);
    }
    return d;
}
const eW = { kernelName: Ou, backendName: 'cpu', kernelFunc: tW };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function nW(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r, segmentIds: o } = t,
        { numSegments: i } = s;
    It(r, 'unsortedSegmentSum');
    const a = r.shape.length,
        l = o.shape.length,
        c = [],
        u = [],
        h = a - l;
    let d = o;
    for (let f = 0; f < h; ++f) {
        const m = Ic({
            inputs: { input: d },
            backend: e,
            attrs: { dim: f + 1 },
        });
        (d = m), u.push(m);
    }
    for (let f = 0; f < i; ++f) {
        const m = Ir(f, 'int32'),
            g = e.makeTensorInfo([], 'int32', m),
            y = Hv({ inputs: { a: g, b: d }, backend: e }),
            b = vr({
                inputs: { x: y },
                backend: e,
                attrs: { dtype: 'float32' },
            }),
            w = kh({ inputs: { a: b, b: r }, backend: e }),
            x = bl({
                inputs: { x: w },
                backend: e,
                attrs: { axis: 0, keepDims: !1 },
            });
        c.push(x), u.push(g), u.push(y), u.push(b), u.push(w), u.push(x);
    }
    const p = Hk({ inputs: c, backend: e, attrs: { axis: 0 } });
    return u.forEach((f) => e.disposeIntermediateTensorInfo(f)), p;
}
const sW = { kernelName: Fu, backendName: 'cpu', kernelFunc: nW };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const rW = [
    JP,
    RL,
    tz,
    nz,
    zL,
    rz,
    iz,
    lz,
    uz,
    dz,
    fz,
    gz,
    bz,
    vz,
    Sz,
    $z,
    Tz,
    _z,
    Rz,
    YP,
    Oz,
    Lz,
    zz,
    ML,
    Mz,
    LL,
    WL,
    Wz,
    DL,
    Gz,
    jz,
    qz,
    Xz,
    Zz,
    Qz,
    eB,
    sB,
    oB,
    aB,
    cB,
    hB,
    pB,
    mB,
    yB,
    bB,
    wB,
    kB,
    IB,
    CB,
    $B,
    NB,
    EB,
    RB,
    UP,
    OB,
    UL,
    WB,
    GL,
    UB,
    jL,
    XB,
    YB,
    JB,
    KL,
    YL,
    tM,
    nM,
    rM,
    iM,
    JL,
    tP,
    OL,
    lM,
    Hz,
    uM,
    dM,
    fM,
    GP,
    nP,
    rP,
    gM,
    iP,
    bM,
    vM,
    SM,
    $M,
    TM,
    _M,
    AM,
    lP,
    DM,
    FM,
    PM,
    BM,
    VM,
    UM,
    HM,
    uP,
    qM,
    YM,
    QM,
    dP,
    fP,
    nV,
    oV,
    lV,
    gP,
    uV,
    dV,
    pV,
    jk,
    yV,
    jP,
    xP,
    xV,
    vV,
    SV,
    CV,
    FL,
    Xd,
    NV,
    qP,
    KP,
    XP,
    EV,
    AV,
    DV,
    FV,
    PV,
    zV,
    MV,
    NP,
    WV,
    qV,
    XV,
    QV,
    EP,
    e4,
    s4,
    o4,
    _P,
    ZM,
    l4,
    u4,
    d4,
    f4,
    g4,
    b4,
    w4,
    k4,
    DP,
    S4,
    FP,
    PP,
    C4,
    N4,
    E4,
    A4,
    D4,
    VP,
    _B,
    F4,
    P4,
    B4,
    V4,
    U4,
    H4,
    yP,
    Q4,
    eW,
    sW,
    hV,
];
for (const n of rW) Pb(n);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Hr = {},
    Rl = {
        alpha: !1,
        antialias: !1,
        premultipliedAlpha: !1,
        preserveDrawingBuffer: !1,
        depth: !1,
        stencil: !1,
        failIfMajorPerformanceCaveat: !0,
    };
function oW(n, t) {
    Hr[n] = t;
}
function ps(n, t) {
    if (!(n in Hr) || t != null) {
        const s = aW(n, t);
        if (s !== null) Hr[n] = s;
        else
            return (
                console.log('Could not get context for WebGL version', n), null
            );
    }
    const e = Hr[n];
    return e == null || e.isContextLost()
        ? (delete Hr[n], ps(n))
        : (e.disable(e.DEPTH_TEST),
          e.disable(e.STENCIL_TEST),
          e.disable(e.BLEND),
          e.disable(e.DITHER),
          e.disable(e.POLYGON_OFFSET_FILL),
          e.disable(e.SAMPLE_COVERAGE),
          e.enable(e.SCISSOR_TEST),
          e.enable(e.CULL_FACE),
          e.cullFace(e.BACK),
          Hr[n]);
}
function iW(n) {
    if (!tt().getBool('IS_SAFARI') && typeof OffscreenCanvas < 'u' && n === 2)
        return new OffscreenCanvas(300, 150);
    if (typeof document < 'u') return document.createElement('canvas');
    throw new Error('Cannot create a canvas in this context');
}
function aW(n, t) {
    if (n !== 1 && n !== 2)
        throw new Error(
            'Cannot get WebGL rendering context, WebGL is disabled.'
        );
    const e = t ?? iW(n);
    return (
        e.addEventListener(
            'webglcontextlost',
            (s) => {
                s.preventDefault(), delete Hr[n];
            },
            !1
        ),
        tt().getBool('SOFTWARE_WEBGL_ENABLED') &&
            (Rl.failIfMajorPerformanceCaveat = !1),
        n === 1
            ? e.getContext('webgl', Rl) ||
              e.getContext('experimental-webgl', Rl)
            : e.getContext('webgl2', Rl)
    );
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var Ji;
(function (n) {
    (n[(n.DENSE = 0)] = 'DENSE'), (n[(n.SHARED_BATCH = 1)] = 'SHARED_BATCH');
})(Ji || (Ji = {}));
var An;
(function (n) {
    (n[(n.RENDER = 0)] = 'RENDER'),
        (n[(n.UPLOAD = 1)] = 'UPLOAD'),
        (n[(n.PIXELS = 2)] = 'PIXELS'),
        (n[(n.DOWNLOAD = 3)] = 'DOWNLOAD');
})(An || (An = {}));
var Me;
(function (n) {
    (n[(n.UNPACKED_FLOAT16 = 0)] = 'UNPACKED_FLOAT16'),
        (n[(n.UNPACKED_FLOAT32 = 1)] = 'UNPACKED_FLOAT32'),
        (n[(n.PACKED_4X1_UNSIGNED_BYTE = 2)] = 'PACKED_4X1_UNSIGNED_BYTE'),
        (n[(n.PACKED_2X2_FLOAT32 = 3)] = 'PACKED_2X2_FLOAT32'),
        (n[(n.PACKED_2X2_FLOAT16 = 4)] = 'PACKED_2X2_FLOAT16');
})(Me || (Me = {}));
function xl(n, t) {
    return [t, n];
}
function lW(n, t) {
    return n * t;
}
function Dl(n) {
    const t = rt(n),
        e = Math.ceil(t / 4);
    return nd(e);
}
function wi(n, t) {
    return [Math.max(1, Math.ceil(t / 2)), Math.max(1, Math.ceil(n / 2))];
}
function cW(n, t) {
    const [e, s] = wi(n, t);
    return e * s * 4;
}
function gg(n, t) {
    const e = n;
    let s, r, o, i, a, l, c, u, h, d;
    return (
        tt().getNumber('WEBGL_VERSION') === 2
            ? ((s = e.R32F),
              (r = e.R16F),
              (o = e.RGBA16F),
              (i = e.RGBA32F),
              (a = e.RED),
              (c = 4),
              (u = 1),
              (h = e.HALF_FLOAT),
              (d = e.FLOAT),
              (l = e.RGBA8))
            : ((s = n.RGBA),
              (r = n.RGBA),
              (o = n.RGBA),
              (i = e.RGBA),
              (a = n.RGBA),
              (c = 4),
              (u = 4),
              (h = t != null ? t.HALF_FLOAT_OES : null),
              (d = n.FLOAT),
              (l = n.RGBA)),
        {
            internalFormatFloat: s,
            internalFormatHalfFloat: r,
            internalFormatPackedHalfFloat: o,
            internalFormatPackedFloat: i,
            textureFormatFloat: a,
            downloadTextureFormat: l,
            downloadUnpackNumChannels: c,
            defaultNumChannels: u,
            textureTypeHalfFloat: h,
            textureTypeFloat: d,
        }
    );
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function vt(n, t) {
    const e = t();
    return tt().getBool('DEBUG') && uW(n), e;
}
function uW(n) {
    const t = n.getError();
    if (t !== n.NO_ERROR) throw new Error('WebGL Error: ' + fW(n, t));
}
const hW = 596e-10,
    dW = 65504;
function pW(n) {
    return !!(
        tt().getBool('WEBGL_RENDER_FLOAT32_ENABLED') ||
        n === 0 ||
        (hW < Math.abs(n) && Math.abs(n) < dW)
    );
}
function fW(n, t) {
    switch (t) {
        case n.NO_ERROR:
            return 'NO_ERROR';
        case n.INVALID_ENUM:
            return 'INVALID_ENUM';
        case n.INVALID_VALUE:
            return 'INVALID_VALUE';
        case n.INVALID_OPERATION:
            return 'INVALID_OPERATION';
        case n.INVALID_FRAMEBUFFER_OPERATION:
            return 'INVALID_FRAMEBUFFER_OPERATION';
        case n.OUT_OF_MEMORY:
            return 'OUT_OF_MEMORY';
        case n.CONTEXT_LOST_WEBGL:
            return 'CONTEXT_LOST_WEBGL';
        default:
            return `Unknown error code ${t}`;
    }
}
function Ol(n, t) {
    return tr(
        n,
        () => n.getExtension(t),
        'Extension "' + t + '" not supported on this browser.'
    );
}
function mW(n, t) {
    const e = tr(
        n,
        () => n.createShader(n.VERTEX_SHADER),
        'Unable to create vertex WebGLShader.'
    );
    if (
        (vt(n, () => n.shaderSource(e, t)),
        vt(n, () => n.compileShader(e)),
        n.getShaderParameter(e, n.COMPILE_STATUS) === !1)
    )
        throw (
            (console.log(n.getShaderInfoLog(e)),
            new Error('Failed to compile vertex shader.'))
        );
    return e;
}
function gW(n, t) {
    const e = tr(
        n,
        () => n.createShader(n.FRAGMENT_SHADER),
        'Unable to create fragment WebGLShader.'
    );
    if (
        (vt(n, () => n.shaderSource(e, t)),
        vt(n, () => n.compileShader(e)),
        tt().get('ENGINE_COMPILE_ONLY'))
    )
        return e;
    if (n.getShaderParameter(e, n.COMPILE_STATUS) === !1)
        throw (
            (qk(t, n.getShaderInfoLog(e)),
            new Error('Failed to compile fragment shader.'))
        );
    return e;
}
const yW = /ERROR: [0-9]+:([0-9]+):/g;
function qk(n, t) {
    const e = yW.exec(t);
    if (e == null) {
        console.log(`Couldn't parse line number in error: ${t}`),
            console.log(n);
        return;
    }
    const s = +e[1],
        r = n.split(`
`),
        o = r.length.toString().length + 2,
        i = r.map((h, d) => Mo((d + 1).toString(), o) + h);
    let a = 0;
    for (let h = 0; h < i.length; h++) a = Math.max(i[h].length, a);
    const l = i.slice(0, s - 1),
        c = i.slice(s - 1, s),
        u = i.slice(s);
    console.log(
        l.join(`
`)
    ),
        console.log(
            t.split(`
`)[0]
        ),
        console.log(
            `%c ${Mo(c[0], a)}`,
            'border:1px solid red; background-color:#e3d2d2; color:#a61717'
        ),
        console.log(
            u.join(`
`)
        );
}
function bW(n) {
    return tr(n, () => n.createProgram(), 'Unable to create WebGLProgram.');
}
function xW(n, t) {
    if (
        (vt(n, () => n.linkProgram(t)),
        !tt().get('ENGINE_COMPILE_ONLY') &&
            n.getProgramParameter(t, n.LINK_STATUS) === !1)
    )
        throw (
            (console.log(n.getProgramInfoLog(t)),
            new Error('Failed to link vertex and fragment shaders.'))
        );
}
function qh(n, t) {
    if (
        (vt(n, () => n.validateProgram(t)),
        n.getProgramParameter(t, n.VALIDATE_STATUS) === !1)
    )
        throw (
            (console.log(n.getProgramInfoLog(t)),
            new Error('Shader program validation failed.'))
        );
}
function wW(n, t) {
    const e = tr(n, () => n.createBuffer(), 'Unable to create WebGLBuffer');
    return (
        vt(n, () => n.bindBuffer(n.ARRAY_BUFFER, e)),
        vt(n, () => n.bufferData(n.ARRAY_BUFFER, t, n.STATIC_DRAW)),
        e
    );
}
function vW(n, t) {
    const e = tr(n, () => n.createBuffer(), 'Unable to create WebGLBuffer');
    return (
        vt(n, () => n.bindBuffer(n.ELEMENT_ARRAY_BUFFER, e)),
        vt(n, () => n.bufferData(n.ELEMENT_ARRAY_BUFFER, t, n.STATIC_DRAW)),
        e
    );
}
function kW(n) {
    return tr(n, () => n.createTexture(), 'Unable to create WebGLTexture.');
}
function SW(n, t) {
    const e = tt().getNumber('WEBGL_MAX_TEXTURE_SIZE');
    if (n <= 0 || t <= 0) {
        const s = `[${n}x${t}]`;
        throw new Error('Requested texture size ' + s + ' is invalid.');
    }
    if (n > e || t > e) {
        const s = `[${n}x${t}]`,
            r = `[${e}x${e}]`;
        throw new Error(
            'Requested texture size ' +
                s +
                ' greater than WebGL maximum on this browser / GPU ' +
                r +
                '.'
        );
    }
}
function IW(n) {
    return tr(
        n,
        () => n.createFramebuffer(),
        'Unable to create WebGLFramebuffer.'
    );
}
function Xy(n, t, e, s, r, o, i) {
    const a = n.getAttribLocation(t, e);
    return a === -1
        ? !1
        : (vt(n, () => n.bindBuffer(n.ARRAY_BUFFER, s)),
          vt(n, () => n.vertexAttribPointer(a, r, n.FLOAT, !1, o, i)),
          vt(n, () => n.enableVertexAttribArray(a)),
          !0);
}
function CW(n, t, e) {
    _W(n, e),
        vt(n, () => n.activeTexture(n.TEXTURE0 + e)),
        vt(n, () => n.bindTexture(n.TEXTURE_2D, t));
}
function $W(n, t, e) {
    return tr(
        n,
        () => n.getUniformLocation(t, e),
        'uniform "' + e + '" not present in program.'
    );
}
function NW(n, t, e) {
    return n.getUniformLocation(t, e);
}
function TW(n, t, e, s) {
    vt(n, () => CW(n, t, s)), vt(n, () => n.uniform1i(e, s));
}
function Kh(n, t, e) {
    vt(n, () => n.bindFramebuffer(n.FRAMEBUFFER, e)),
        vt(n, () =>
            n.framebufferTexture2D(
                n.FRAMEBUFFER,
                n.COLOR_ATTACHMENT0,
                n.TEXTURE_2D,
                t,
                0
            )
        );
}
function Yy(n, t) {
    vt(n, () => n.bindFramebuffer(n.FRAMEBUFFER, t)),
        vt(n, () =>
            n.framebufferTexture2D(
                n.FRAMEBUFFER,
                n.COLOR_ATTACHMENT0,
                n.TEXTURE_2D,
                null,
                0
            )
        );
}
function Fl(n) {
    const t = n.checkFramebufferStatus(n.FRAMEBUFFER);
    if (t !== n.FRAMEBUFFER_COMPLETE)
        throw new Error('Error binding framebuffer: ' + EW(n, t));
}
function EW(n, t) {
    switch (t) {
        case n.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
            return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';
        case n.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
            return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';
        case n.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
            return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';
        case n.FRAMEBUFFER_UNSUPPORTED:
            return 'FRAMEBUFFER_UNSUPPORTED';
        default:
            return `unknown error ${t}`;
    }
}
function tr(n, t, e) {
    const s = vt(n, () => t());
    if (s == null) throw new Error(e);
    return s;
}
function _W(n, t) {
    const e = n.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1,
        s = t + n.TEXTURE0;
    if (s < n.TEXTURE0 || s > e) {
        const r = `[gl.TEXTURE0, gl.TEXTURE${e}]`;
        throw new Error(`textureUnit must be in ${r}.`);
    }
}
function ai(n, t = 2) {
    return rt(n.slice(0, n.length - t));
}
function li(n) {
    if (n.length === 0)
        throw Error('Cannot get rows and columns of an empty shape array.');
    return [n.length > 1 ? n[n.length - 2] : 1, n[n.length - 1]];
}
function Ll(n) {
    let t = [1, 1, 1];
    return (
        n.length === 0 ||
            (n.length === 1 && n[0] === 1) ||
            (t = [ai(n), ...li(n)]),
        t
    );
}
function AW(n, t = !1) {
    let e = tt().getNumber('WEBGL_MAX_TEXTURE_SIZE'),
        s = tt().getNumber('WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE');
    s === 1 / 0 &&
        tt().getBool('WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE') &&
        (s = e / 2),
        t &&
            ((e = e * 2),
            (s = s * 2),
            (n = n.map((a, l) => (l >= n.length - 2 ? lp(n[l]) : n[l]))),
            n.length === 1 && (n = [2, n[0]])),
        n.length !== 2 && (n = Sr(n).newShape);
    let r = rt(n),
        o = null;
    n.length <= 1 && r <= e
        ? (o = [1, r])
        : n.length === 2 && n[0] <= e && n[1] <= e
        ? (o = n)
        : n.length === 3 && n[0] * n[1] <= e && n[2] <= e
        ? (o = [n[0] * n[1], n[2]])
        : n.length === 3 && n[0] <= e && n[1] * n[2] <= e
        ? (o = [n[0], n[1] * n[2]])
        : n.length === 4 && n[0] * n[1] * n[2] <= e && n[3] <= e
        ? (o = [n[0] * n[1] * n[2], n[3]])
        : n.length === 4 &&
          n[0] <= e &&
          n[1] * n[2] * n[3] <= e &&
          (o = [n[0], n[1] * n[2] * n[3]]);
    const i =
        o != null &&
        Math.max(...o) > s &&
        Math.min(...o) <= (t ? 2 : 1) &&
        Math.min(...o) > 0;
    if (o == null || i)
        if (t) {
            const a = ai(n);
            let l = 2,
                c = 2;
            n.length && ([l, c] = li(n)),
                (r = a * (l / 2) * (c / 2)),
                (o = nd(r).map((u) => u * 2));
        } else o = nd(r);
    return o;
}
function Pl(n) {
    return n % 2 === 0;
}
function $c(n, t) {
    if (
        ((n = n.slice(-2)),
        (t = t.slice(-2)),
        Ut(n, t) ||
            !n.length ||
            !t.length ||
            n[0] === 0 ||
            n[1] === 0 ||
            t[0] === 0 ||
            t[1] === 0)
    )
        return !0;
    if (n.length !== t.length) {
        const e = n[n.length - 1],
            s = t[t.length - 1];
        if (e === s || (Pl(e) && Pl(s) && (n[0] === 1 || t[0] === 1)))
            return !0;
    }
    return n[1] === t[1] && Pl(n[0]) && Pl(t[0]);
}
let Xh, Yh;
function RW(n) {
    if (Xh == null) {
        const t = ps(n);
        Xh = t.getParameter(t.MAX_TEXTURE_SIZE);
    }
    return Xh;
}
function DW(n) {
    if (Yh == null) {
        const t = ps(n);
        Yh = t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS);
    }
    return Math.min(16, Yh);
}
function OW(n) {
    if (n === 0) return 0;
    let t;
    const e = ps(n);
    return (
        Kn(e, 'EXT_disjoint_timer_query_webgl2') && n === 2
            ? (t = 2)
            : Kn(e, 'EXT_disjoint_timer_query')
            ? (t = 1)
            : (t = 0),
        t
    );
}
function Kn(n, t) {
    return n.getExtension(t) != null;
}
function Zy(n) {
    try {
        if (ps(n) != null) return !0;
    } catch (t) {
        return console.log('Error when getting WebGL context: ', t), !1;
    }
    return !1;
}
function FW(n) {
    if (n === 0) return !1;
    const t = ps(n);
    if (n === 1) {
        if (!Kn(t, 'OES_texture_float')) return !1;
    } else if (!Kn(t, 'EXT_color_buffer_float')) return !1;
    return Zd(t);
}
function LW(n) {
    if (n === 0) return !1;
    const t = ps(n);
    if (n === 1) {
        if (!Kn(t, 'OES_texture_float') || !Kn(t, 'WEBGL_color_buffer_float'))
            return !1;
    } else {
        if (Kn(t, 'EXT_color_buffer_float')) return Zd(t);
        const s = 'EXT_color_buffer_half_float';
        if (Kn(t, s)) {
            const r = t.getExtension(s);
            return PW(t, r);
        }
        return !1;
    }
    return Zd(t);
}
function Zd(n) {
    const t = gg(n),
        e = n.createTexture();
    n.bindTexture(n.TEXTURE_2D, e);
    const s = 1,
        r = 1;
    n.texImage2D(
        n.TEXTURE_2D,
        0,
        t.internalFormatFloat,
        s,
        r,
        0,
        t.textureFormatFloat,
        t.textureTypeFloat,
        null
    );
    const o = n.createFramebuffer();
    n.bindFramebuffer(n.FRAMEBUFFER, o),
        n.framebufferTexture2D(
            n.FRAMEBUFFER,
            n.COLOR_ATTACHMENT0,
            n.TEXTURE_2D,
            e,
            0
        );
    const i =
        n.checkFramebufferStatus(n.FRAMEBUFFER) === n.FRAMEBUFFER_COMPLETE;
    return (
        n.bindTexture(n.TEXTURE_2D, null),
        n.bindFramebuffer(n.FRAMEBUFFER, null),
        n.deleteTexture(e),
        n.deleteFramebuffer(o),
        i
    );
}
function PW(n, t) {
    const e = gg(n, t),
        s = n.createTexture();
    n.bindTexture(n.TEXTURE_2D, s);
    const r = 1,
        o = 1;
    n.texImage2D(
        n.TEXTURE_2D,
        0,
        e.internalFormatHalfFloat,
        r,
        o,
        0,
        e.textureFormatFloat,
        e.textureTypeHalfFloat,
        null
    );
    const i = n.createFramebuffer();
    n.bindFramebuffer(n.FRAMEBUFFER, i),
        n.framebufferTexture2D(
            n.FRAMEBUFFER,
            n.COLOR_ATTACHMENT0,
            n.TEXTURE_2D,
            s,
            0
        );
    const a =
        n.checkFramebufferStatus(n.FRAMEBUFFER) === n.FRAMEBUFFER_COMPLETE;
    return (
        n.bindTexture(n.TEXTURE_2D, null),
        n.bindFramebuffer(n.FRAMEBUFFER, null),
        n.deleteTexture(s),
        n.deleteFramebuffer(i),
        a
    );
}
function zW(n) {
    return n !== 2 ? !1 : ps(n).fenceSync != null;
}
function wl(n, t) {
    Array.isArray(n) || (n = [n]),
        n.forEach((e) => {
            e != null &&
                _(
                    e.dtype !== 'complex64',
                    () =>
                        `${t} does not support complex64 tensors in the WebGL backend.`
                );
        });
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Ct = tt();
Ct.registerFlag('HAS_WEBGL', () => Ct.getNumber('WEBGL_VERSION') > 0);
Ct.registerFlag('WEBGL_VERSION', () => (Zy(2) ? 2 : Zy(1) ? 1 : 0));
Ct.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => !1);
Ct.registerFlag('WEBGL_BUFFER_SUPPORTED', () => Ct.get('WEBGL_VERSION') === 2);
Ct.registerFlag('WEBGL_CPU_FORWARD', () => !0);
Ct.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => !1);
Ct.registerFlag('WEBGL_PACK', () => Ct.getBool('HAS_WEBGL'));
Ct.registerFlag('WEBGL_PACK_NORMALIZATION', () => Ct.getBool('WEBGL_PACK'));
Ct.registerFlag('WEBGL_PACK_CLIP', () => Ct.getBool('WEBGL_PACK'));
Ct.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => Ct.getBool('WEBGL_PACK'));
Ct.registerFlag('WEBGL_PACK_BINARY_OPERATIONS', () => Ct.getBool('WEBGL_PACK'));
Ct.registerFlag('WEBGL_PACK_UNARY_OPERATIONS', () => Ct.getBool('WEBGL_PACK'));
Ct.registerFlag('WEBGL_PACK_ARRAY_OPERATIONS', () => Ct.getBool('WEBGL_PACK'));
Ct.registerFlag('WEBGL_PACK_IMAGE_OPERATIONS', () => Ct.getBool('WEBGL_PACK'));
Ct.registerFlag('WEBGL_PACK_REDUCE', () => Ct.getBool('WEBGL_PACK'));
Ct.registerFlag('WEBGL_LAZILY_UNPACK', () => Ct.getBool('WEBGL_PACK'));
Ct.registerFlag('WEBGL_CONV_IM2COL', () => Ct.getBool('WEBGL_PACK'));
Ct.registerFlag('WEBGL_PACK_CONV2DTRANSPOSE', () => Ct.getBool('WEBGL_PACK'));
Ct.registerFlag('WEBGL_MAX_TEXTURE_SIZE', () =>
    RW(Ct.getNumber('WEBGL_VERSION'))
);
Ct.registerFlag('WEBGL_MAX_TEXTURES_IN_SHADER', () =>
    DW(Ct.getNumber('WEBGL_VERSION'))
);
Ct.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {
    const n = Ct.getNumber('WEBGL_VERSION');
    return n === 0 ? 0 : OW(n);
});
Ct.registerFlag(
    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE',
    () =>
        Ct.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&
        !t0()
);
Ct.registerFlag('WEBGL_RENDER_FLOAT32_CAPABLE', () =>
    FW(Ct.getNumber('WEBGL_VERSION'))
);
Ct.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () =>
    Ct.getBool('WEBGL_FORCE_F16_TEXTURES')
        ? !1
        : Ct.getBool('WEBGL_RENDER_FLOAT32_CAPABLE')
);
Ct.registerFlag('WEBGL_DOWNLOAD_FLOAT_ENABLED', () =>
    LW(Ct.getNumber('WEBGL_VERSION'))
);
Ct.registerFlag('WEBGL_FENCE_API_ENABLED', () =>
    zW(Ct.getNumber('WEBGL_VERSION'))
);
Ct.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () =>
    Ct.getBool('WEBGL_RENDER_FLOAT32_ENABLED') ? 4 : 0
);
Ct.registerFlag(
    'WEBGL_DELETE_TEXTURE_THRESHOLD',
    () => -1,
    (n) => {
        if (typeof n != 'number')
            throw new Error(
                `WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${n}.`
            );
        if (n < 0 && n !== -1)
            throw new Error(
                `WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${n}.`
            );
    }
);
Ct.registerFlag(
    'WEBGL_FLUSH_THRESHOLD',
    () => (t0() ? 1 : -1),
    (n) => {
        if (typeof n != 'number')
            throw new Error(
                `WEBGL_FLUSH_THRESHOLD must be a number but got ${n}.`
            );
        if (n < 0 && n !== -1)
            throw new Error(
                `WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${n}.`
            );
    }
);
Ct.registerFlag('CPU_HANDOFF_SIZE_THRESHOLD', () => 128);
Ct.registerFlag('WEBGL_USE_SHAPES_UNIFORMS', () => !1);
Ct.registerFlag('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD', () => 1e5);
Ct.registerFlag('TOPK_K_CPU_HANDOFF_THRESHOLD', () => 128);
Ct.registerFlag('WEBGL_EXP_CONV', () => !1);
Ct.registerFlag('SOFTWARE_WEBGL_ENABLED', () => Ct.getBool('IS_TEST'));
Ct.registerFlag('WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE', () => 1 / 0);
Ct.registerFlag('WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE', () => !1);
Ct.registerFlag('WEBGL2_ISNAN_CUSTOM', () => !1);
Ct.registerFlag('ENGINE_COMPILE_ONLY', () => !1);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function rn() {
    let n, t, e, s, r, o, i, a, l, c;
    return (
        tt().getNumber('WEBGL_VERSION') === 2
            ? ((n = '#version 300 es'),
              (t = 'in'),
              (e = 'out'),
              (s = 'in'),
              (r = 'texture'),
              (o = 'outputColor'),
              (i = 'out vec4 outputColor;'),
              (a = tt().getBool('WEBGL2_ISNAN_CUSTOM')
                  ? `
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `
                  : ''),
              (l = ''),
              (c = `
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `))
            : ((n = ''),
              (t = 'attribute'),
              (e = 'varying'),
              (s = 'varying'),
              (r = 'texture2D'),
              (o = 'gl_FragColor'),
              (i = ''),
              (a = `
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `),
              (l = `
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `),
              (c = `
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `)),
        {
            version: n,
            attribute: t,
            varyingVs: e,
            varyingFs: s,
            texture2D: r,
            output: o,
            defineOutput: i,
            defineSpecialNaN: a,
            defineSpecialInf: l,
            defineRound: c,
        }
    );
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Io(n, t, e = 'index') {
    const s = _t(t);
    return s
        .map((r, o) => {
            const i = `int ${n[o]} = ${e} / ${r}`,
                a =
                    o === s.length - 1
                        ? `int ${n[o + 1]} = ${e} - ${n[o]} * ${r}`
                        : `index -= ${n[o]} * ${r}`;
            return `${i}; ${a};`;
        })
        .join('');
}
function Sh(n, t, e = 'index') {
    const s = _t(t);
    return s
        .map((r, o) => {
            const i = `int ${n[o]} = ${e} / outShapeStrides[${o}]`,
                a =
                    o === s.length - 1
                        ? `int ${n[o + 1]} = ${e} - ${
                              n[o]
                          } * outShapeStrides[${o}]`
                        : `index -= ${n[o]} * outShapeStrides[${o}]`;
            return `${i}; ${a};`;
        })
        .join('');
}
function BW(n, t) {
    const e = n.length,
        s = n.map((o) => `${t}[${o}]`),
        r = new Array(e - 1);
    r[e - 2] = s[e - 1];
    for (let o = e - 3; o >= 0; --o) r[o] = `(${r[o + 1]} * ${s[o + 1]})`;
    return r;
}
function MW(n, t, e = 'index') {
    const s = n.map((o, i) => i),
        r = BW(s, t);
    return r
        .map((o, i) => {
            const a = `int ${n[i]} = ${e} / ${r[i]}`,
                l =
                    i === r.length - 1
                        ? `int ${n[i + 1]} = ${e} - ${n[i]} * ${r[i]}`
                        : `index -= ${n[i]} * ${r[i]}`;
            return `${a}; ${l};`;
        })
        .join('');
}
function yg(n) {
    const t = _t(n).map((e) => e.toString());
    return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;
  }
`;
}
function bg() {
    return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`;
}
const Kk = `
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const { getBroadcastDims: Xk } = JA;
function VW(n, t, e) {
    const s = [];
    if (
        (n.forEach((p) => {
            const f = rt(p.shapeInfo.logicalShape);
            if (
                (p.shapeInfo.isUniform
                    ? s.push(`uniform float ${p.name}${f > 1 ? `[${f}]` : ''};`)
                    : (s.push(`uniform sampler2D ${p.name};`),
                      s.push(`uniform int offset${p.name};`)),
                e.enableShapeUniforms)
            ) {
                const { uniformShape: m } = xg(
                    e.packedInputs,
                    p.shapeInfo.logicalShape,
                    p.shapeInfo.texShape
                );
                switch (m.length) {
                    case 1:
                        s.push(`uniform int ${p.name}Shape;`);
                        break;
                    case 2:
                        s.push(`uniform ivec2 ${p.name}Shape;`);
                        break;
                    case 3:
                        s.push(`uniform ivec3 ${p.name}Shape;`);
                        break;
                    case 4:
                        s.push(`uniform ivec4 ${p.name}Shape;`);
                        break;
                }
                s.push(`uniform ivec2 ${p.name}TexShape;`);
            }
        }),
        e.enableShapeUniforms)
    ) {
        switch (t.logicalShape.length) {
            case 1:
                s.push('uniform int outShape;');
                break;
            case 2:
                s.push('uniform ivec2 outShape;'),
                    s.push('uniform int outShapeStrides;');
                break;
            case 3:
                s.push('uniform ivec3 outShape;'),
                    s.push('uniform ivec2 outShapeStrides;');
                break;
            case 4:
                s.push('uniform ivec4 outShape;'),
                    s.push('uniform ivec3 outShapeStrides;');
                break;
        }
        s.push('uniform ivec2 outTexShape;');
    }
    e.customUniforms &&
        e.customUniforms.forEach((p) => {
            s.push(
                `uniform ${p.type} ${p.name}${
                    p.arrayIndex ? `[${p.arrayIndex}]` : ''
                };`
            );
        });
    const r = s.join(`
`),
        o = n.map((p) => WW(p, t, e.packedInputs, e.enableShapeUniforms)).join(`
`),
        i = t.texShape,
        a = rn(),
        l = HW(a);
    let c,
        u,
        h = KW(a);
    return (
        t.isPacked
            ? ((c = UW(t.logicalShape, i, e.enableShapeUniforms)), (u = qW(a)))
            : ((c = GW(t.logicalShape, i, e.enableShapeUniforms)), (u = jW(a))),
        e.packedInputs && (h += JW),
        [h, l, u, r, c, o, e.userCode].join(`
`)
    );
}
function vi(n, t = !1) {
    const e = n.shapeInfo.logicalShape;
    switch (e.length) {
        case 0:
            return uU(n, t);
        case 1:
            return dU(n, t);
        case 2:
            return fU(n, t);
        case 3:
            return gU(n, t);
        case 4:
            return bU(n, t);
        case 5:
            return xU(n);
        case 6:
            return wU(n);
        default:
            throw new Error(
                `${e.length}-D input sampling is not yet supported`
            );
    }
}
function Yk(n, t) {
    switch (n.shapeInfo.logicalShape.length) {
        case 0:
            return cU(n);
        case 1:
            return hU(n, t);
        case 2:
            return pU(n, t);
        case 3:
            return mU(n, t);
        default:
            return yU(n, t);
    }
}
function WW(n, t, e = !1, s) {
    let r = '';
    e ? (r += Yk(n, s)) : (r += vi(n, s));
    const o = n.shapeInfo.logicalShape,
        i = t.logicalShape;
    return o.length <= i.length && (e ? (r += vU(n, t)) : (r += kU(n, t))), r;
}
function UW(n, t, e) {
    switch (n.length) {
        case 0:
            return Zk();
        case 1:
            return QW(n, t, e);
        case 2:
            return aU(n, t, e);
        case 3:
            return eU(n, t, e);
        default:
            return sU(n, t, e);
    }
}
function GW(n, t, e) {
    switch (n.length) {
        case 0:
            return Zk();
        case 1:
            return tU(n, t, e);
        case 2:
            return lU(n, t, e);
        case 3:
            return nU(n, t, e);
        case 4:
            return rU(n, t, e);
        case 5:
            return oU(n, t);
        case 6:
            return iU(n, t);
        default:
            throw new Error(
                `${n.length}-D output sampling is not yet supported`
            );
    }
}
function HW(n) {
    return `
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${n.texture2D}(textureSampler, uv).r;
    }
  `;
}
function jW(n) {
    return `
    void setOutput(float val) {
      ${n.output} = vec4(val, 0, 0, 0);
    }
  `;
}
function qW(n) {
    return `
    void setOutput(vec4 val) {
      ${n.output} = val;
    }
  `;
}
function KW(n) {
    return `${n.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${n.varyingFs} vec2 resultUV;
    ${n.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${n.defineSpecialNaN}
    ${n.defineSpecialInf}
    ${n.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${XW}
    ${YW}
    ${ZW}
  `;
}
const XW = `
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,
    YW = `
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,
    ZW = `
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,
    JW = `
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;
function Zk() {
    return `
    int getOutputCoords() {
      return 0;
    }
  `;
}
function QW(n, t, e) {
    const s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)];
    return s[0] === 1
        ? e
            ? `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    `
            : `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${s[1]}.0);
      }
    `
        : s[1] === 1
        ? e
            ? `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    `
            : `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${s[0]}.0);
      }
    `
        : e
        ? `
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  `
        : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);
    }
  `;
}
function tU(n, t, e) {
    return t[0] === 1
        ? e
            ? `
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    `
            : `
      int getOutputCoords() {
        return int(resultUV.x * ${t[1]}.0);
      }
    `
        : t[1] === 1
        ? e
            ? `
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    `
            : `
      int getOutputCoords() {
        return int(resultUV.y * ${t[0]}.0);
      }
    `
        : e
        ? `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  `
        : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      return resTexRC.x * ${t[1]} + resTexRC.y;
    }
  `;
}
function eU(n, t, e) {
    if (e)
        return `
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;
    const s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)],
        r = Math.ceil(n[2] / 2),
        o = r * Math.ceil(n[1] / 2);
    return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      int index = resTexRC.x * ${s[1]} + resTexRC.y;

      int b = index / ${o};
      index -= b * ${o};

      int r = 2 * (index / ${r});
      int c = imod(index, ${r}) * 2;

      return ivec3(b, r, c);
    }
  `;
}
function nU(n, t, e) {
    if (e)
        return `
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${Sh(['r', 'c', 'd'], n)}
    return ivec3(r, c, d);
  }
`;
    const s = Io(['r', 'c', 'd'], n);
    return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${s}
      return ivec3(r, c, d);
    }
  `;
}
function sU(n, t, e) {
    if (e)
        return `
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;
    const s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)],
        r = Math.ceil(n[n.length - 1] / 2),
        o = r * Math.ceil(n[n.length - 2] / 2);
    let i = o,
        a = '',
        l = 'b, r, c';
    for (let c = 2; c < n.length - 1; c++)
        (i *= n[n.length - c - 1]),
            (a =
                `
      int b${c} = index / ${i};
      index -= b${c} * ${i};
    ` + a),
            (l = `b${c}, ` + l);
    return `
    ivec${n.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      int index = resTexRC.x * ${s[1]} + resTexRC.y;

      ${a}

      int b = index / ${o};
      index -= b * ${o};

      int r = 2 * (index / ${r});
      int c = imod(index, ${r}) * 2;

      return ivec${n.length}(${l});
    }
  `;
}
function rU(n, t, e) {
    if (e)
        return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${Sh(['r', 'c', 'd', 'd2'], n)}
      return ivec4(r, c, d, d2);
    }
  `;
    const s = Io(['r', 'c', 'd', 'd2'], n);
    return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${s}
      return ivec4(r, c, d, d2);
    }
  `;
}
function oU(n, t) {
    const e = Io(['r', 'c', 'd', 'd2', 'd3'], n);
    return `
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},
                             ${t[1]}));

      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${e}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `;
}
function iU(n, t) {
    const e = Io(['r', 'c', 'd', 'd2', 'd3', 'd4'], n);
    return `
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${e}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `;
}
function aU(n, t, e) {
    const s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)];
    if (Ut(n, t))
        return e
            ? `
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    `
            : `
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));
      }
    `;
    const r = Math.ceil(n[1] / 2);
    return e
        ? `
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  `
        : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));

      int index = resTexRC.x * ${s[1]} + resTexRC.y;
      int r = 2 * (index / ${r});
      int c = imod(index, ${r}) * 2;

      return ivec2(r, c);
    }
  `;
}
function lU(n, t, e) {
    return Ut(n, t)
        ? e
            ? `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    `
            : `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));
      }
    `
        : n[1] === 1
        ? e
            ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    `
            : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    `
        : n[0] === 1
        ? e
            ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    `
            : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    `
        : e
        ? `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  `
        : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      int r = index / ${n[1]};
      int c = index - r * ${n[1]};
      return ivec2(r, c);
    }
  `;
}
function Co(n) {
    return `offset${n}`;
}
function cU(n) {
    const t = n.name,
        e = 'get' + t.charAt(0).toUpperCase() + t.slice(1),
        s = rn();
    return `
    vec4 ${e}() {
      return ${s.texture2D}(${t}, halfCR);
    }
  `;
}
function uU(n, t) {
    const e = n.name,
        s = 'get' + e.charAt(0).toUpperCase() + e.slice(1);
    if (n.shapeInfo.isUniform) return `float ${s}() {return ${e};}`;
    const [r, o] = n.shapeInfo.texShape;
    if (r === 1 && o === 1)
        return `
      float ${s}() {
        return sampleTexture(${e}, halfCR);
      }
    `;
    const i = Co(e);
    if (t)
        return `
    float ${s}() {
      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], ${i});
      return sampleTexture(${e}, uv);
    }
  `;
    const [a, l] = n.shapeInfo.texShape;
    return `
    float ${s}() {
      vec2 uv = uvFromFlat(${a}, ${l}, ${i});
      return sampleTexture(${e}, uv);
    }
  `;
}
function hU(n, t) {
    const e = n.name,
        s = 'get' + e.charAt(0).toUpperCase() + e.slice(1),
        r = n.shapeInfo.texShape,
        o = rn();
    if (t)
        return `
    vec4 ${s}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${o.texture2D}(${e}, uv);
    }
  `;
    const i = [Math.ceil(r[0] / 2), Math.ceil(r[1] / 2)];
    return `
    vec4 ${s}(int index) {
      vec2 uv = packedUVfrom1D(
        ${i[0]}, ${i[1]}, index);
      return ${o.texture2D}(${e}, uv);
    }
  `;
}
function dU(n, t) {
    const e = n.name,
        s = 'get' + e.charAt(0).toUpperCase() + e.slice(1);
    if (n.shapeInfo.isUniform)
        return `
      float ${s}(int index) {
        ${ki(n)}
      }
    `;
    const r = n.shapeInfo.texShape,
        o = r[0],
        i = r[1];
    if (i === 1 && o === 1)
        return `
      float ${s}(int index) {
        return sampleTexture(${e}, halfCR);
      }
    `;
    const a = Co(e);
    return i === 1
        ? t
            ? `
      float ${s}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / float(${e}TexShape[0]));
        return sampleTexture(${e}, uv);
      }
    `
            : `
      float ${s}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / ${o}.0);
        return sampleTexture(${e}, uv);
      }
    `
        : o === 1
        ? t
            ? `
      float ${s}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / float(${e}TexShape[1]), 0.5);
        return sampleTexture(${e}, uv);
      }
    `
            : `
      float ${s}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / ${i}.0, 0.5);
        return sampleTexture(${e}, uv);
      }
    `
        : t
        ? `
    float ${s}(int index) {
      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], index + ${a});
      return sampleTexture(${e}, uv);
    }
  `
        : `
    float ${s}(int index) {
      vec2 uv = uvFromFlat(${o}, ${i}, index + ${a});
      return sampleTexture(${e}, uv);
    }
  `;
}
function pU(n, t) {
    const e = n.shapeInfo.logicalShape,
        s = n.name,
        r = 'get' + s.charAt(0).toUpperCase() + s.slice(1),
        o = n.shapeInfo.texShape,
        i = o[0],
        a = o[1],
        l = rn();
    if (o != null && Ut(e, o))
        return t
            ? `
      vec4 ${r}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);

        return ${l.texture2D}(${s}, uv);
      }
    `
            : `
      vec4 ${r}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}.0, ${i}.0);

        return ${l.texture2D}(${s}, uv);
      }
    `;
    if (t)
        return `
    vec4 ${r}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${l.texture2D}(${s}, uv);
    }
  `;
    const c = [Math.ceil(o[0] / 2), Math.ceil(o[1] / 2)],
        u = Math.ceil(e[1] / 2);
    return `
    vec4 ${r}(int row, int col) {
      vec2 uv = packedUVfrom2D(${u}, ${c[0]}, ${c[1]}, row, col);
      return ${l.texture2D}(${s}, uv);
    }
  `;
}
function fU(n, t) {
    const e = n.shapeInfo.logicalShape,
        s = n.name,
        r = 'get' + s.charAt(0).toUpperCase() + s.slice(1),
        o = n.shapeInfo.texShape;
    if (o != null && Ut(e, o)) {
        if (t)
            return `
      float ${r}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    `;
        const d = o[0],
            p = o[1];
        return `
    float ${r}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${p}.0, ${d}.0);
      return sampleTexture(${s}, uv);
    }
  `;
    }
    const { newShape: i, keptDims: a } = Sr(e),
        l = i;
    if (l.length < e.length) {
        const d = Si(n, l),
            p = ['row', 'col'];
        return `
      ${vi(d, t)}
      float ${r}(int row, int col) {
        return ${r}(${Ii(p, a)});
      }
    `;
    }
    if (n.shapeInfo.isUniform)
        return `
      float ${r}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));
        ${ki(n)}
      }
    `;
    const c = o[0],
        u = o[1],
        h = Co(s);
    return u === 1
        ? t
            ? `
      float ${r}(int row, int col) {
        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));
        return sampleTexture(${s}, uv);
      }
    `
            : `
    float ${r}(int row, int col) {
      float index = dot(vec3(row, col, ${h}), vec3(${e[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${c}.0);
      return sampleTexture(${s}, uv);
    }
  `
        : c === 1
        ? t
            ? `
      float ${r}(int row, int col) {
        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);
        return sampleTexture(${s}, uv);
      }
    `
            : `
    float ${r}(int row, int col) {
      float index = dot(vec3(row, col, ${h}), vec3(${e[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);
      return sampleTexture(${s}, uv);
    }
  `
        : t
        ? `
      float ${r}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${s}Shape[1] + col + ${h};
        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);
        return sampleTexture(${s}, uv);
      }
    `
        : `
  float ${r}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${e[1]} + col + ${h};
    vec2 uv = uvFromFlat(${c}, ${u}, index);
    return sampleTexture(${s}, uv);
  }
`;
}
function mU(n, t) {
    const e = n.shapeInfo.logicalShape,
        s = n.name,
        r = 'get' + s.charAt(0).toUpperCase() + s.slice(1),
        o = n.shapeInfo.texShape,
        i = [Math.ceil(o[0] / 2), Math.ceil(o[1] / 2)];
    if (e[0] === 1) {
        const d = e.slice(1),
            p = [1, 2],
            f = Si(n, d),
            m = ['b', 'row', 'col'];
        return `
        ${Yk(f, t)}
        vec4 ${r}(int b, int row, int col) {
          return ${r}(${Ii(m, p)});
        }
      `;
    }
    const a = rn();
    if (t)
        return `
    vec4 ${r}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${a.texture2D}(${s}, uv);
    }
  `;
    const l = i[0],
        c = i[1],
        u = Math.ceil(e[2] / 2),
        h = u * Math.ceil(e[1] / 2);
    return `
    vec4 ${r}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${l}, ${c}, ${h}, ${u}, b, row, col);
      return ${a.texture2D}(${s}, uv);
    }
  `;
}
function gU(n, t) {
    const e = n.shapeInfo.logicalShape,
        s = n.name,
        r = 'get' + s.charAt(0).toUpperCase() + s.slice(1),
        o = e[1] * e[2],
        i = e[2],
        { newShape: a, keptDims: l } = Sr(e),
        c = a;
    if (c.length < e.length) {
        const m = Si(n, c),
            g = ['row', 'col', 'depth'];
        return `
        ${vi(m, t)}
        float ${r}(int row, int col, int depth) {
          return ${r}(${Ii(g, l)});
        }
      `;
    }
    if (n.shapeInfo.isUniform)
        return `
      float ${r}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${o}, ${i}, 1)));
        ${ki(n)}
      }
    `;
    const u = n.shapeInfo.texShape,
        h = u[0],
        d = u[1],
        p = n.shapeInfo.flatOffset;
    if (d === o && p == null)
        return t
            ? `
      float ${r}(int row, int col, int depth) {
        int stride1 = ${s}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    `
            : `
        float ${r}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${i}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${d}.0, ${h}.0);
          return sampleTexture(${s}, uv);
        }
      `;
    if (d === i && p == null)
        return t
            ? `
      float ${r}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    `
            : `
    float ${r}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${h}.0);
      return sampleTexture(${s}, uv);
    }
  `;
    const f = Co(s);
    return t
        ? `
    float ${r}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${s}Shape[1] * ${s}Shape[2];
      int stride1 = ${s}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${f};
      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);
      return sampleTexture(${s}, uv);
    }
    `
        : `
      float ${r}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${o} + col * ${i} + depth + ${f};
        vec2 uv = uvFromFlat(${h}, ${d}, index);
        return sampleTexture(${s}, uv);
      }
  `;
}
function yU(n, t) {
    const e = n.name,
        s = 'get' + e.charAt(0).toUpperCase() + e.slice(1),
        r = rn();
    if (t)
        return `
    vec4 ${s}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${e}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${e}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${e}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${e}, uv);
    }
  `;
    const o = n.shapeInfo.logicalShape,
        i = o.length,
        a = n.shapeInfo.texShape,
        l = [Math.ceil(a[0] / 2), Math.ceil(a[1] / 2)],
        c = l[0],
        u = l[1],
        h = Math.ceil(o[i - 1] / 2);
    let d = h * Math.ceil(o[i - 2] / 2),
        p = 'int b, int row, int col',
        f = `b * ${d} + (row / 2) * ${h} + (col / 2)`;
    for (let m = 2; m < i - 1; m++)
        (p = `int b${m}, ` + p),
            (d *= o[i - m - 1]),
            (f = `b${m} * ${d} + ` + f);
    return `
    vec4 ${s}(${p}) {
      int index = ${f};
      int texR = index / ${u};
      int texC = index - texR * ${u};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${u}, ${c});
      return ${r.texture2D}(${e}, uv);
    }
  `;
}
function bU(n, t) {
    const e = n.shapeInfo.logicalShape,
        s = n.name,
        r = 'get' + s.charAt(0).toUpperCase() + s.slice(1),
        o = e[3],
        i = e[2] * o,
        a = e[1] * i,
        { newShape: l, keptDims: c } = Sr(e);
    if (l.length < e.length) {
        const b = Si(n, l),
            w = ['row', 'col', 'depth', 'depth2'];
        return `
      ${vi(b, t)}
      float ${r}(int row, int col, int depth, int depth2) {
        return ${r}(${Ii(w, c)});
      }
    `;
    }
    if (n.shapeInfo.isUniform)
        return `
      float ${r}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${a}, ${i}, ${o}, 1)));
        ${ki(n)}
      }
    `;
    const u = n.shapeInfo.flatOffset,
        h = n.shapeInfo.texShape,
        d = h[0],
        p = h[1],
        f = `int stride2 = ${s}Shape[3];`,
        m = `int stride1 = ${s}Shape[2] * stride2;`,
        g = `int stride0 = ${s}Shape[1] * stride1;`;
    if (p === a && u == null)
        return t
            ? `
      float ${r}(int row, int col, int depth, int depth2) {
        ${f}
        ${m}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    `
            : `
      float ${r}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${i}, ${o}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${p}.0, ${d}.0);
        return sampleTexture(${s}, uv);
      }
    `;
    if (p === o && u == null)
        return t
            ? `
      float ${r}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    `
            : `
      float ${r}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${e[1] * e[2]}, ${e[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${p}.0, ${d}.0);
        return sampleTexture(${s}, uv);
      }
    `;
    const y = Co(s);
    return t
        ? `
    float ${r}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${f}
      ${m}
      ${g}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${y});
      return sampleTexture(${s}, uv);
    }
  `
        : `
    float ${r}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} +
          depth * ${o} + depth2;
      vec2 uv = uvFromFlat(${d}, ${p}, index + ${y});
      return sampleTexture(${s}, uv);
    }
  `;
}
function xU(n) {
    const t = n.shapeInfo.logicalShape,
        e = n.name,
        s = 'get' + e.charAt(0).toUpperCase() + e.slice(1),
        r = t[4],
        o = t[3] * r,
        i = t[2] * o,
        a = t[1] * i,
        { newShape: l, keptDims: c } = Sr(t);
    if (l.length < t.length) {
        const m = Si(n, l),
            g = ['row', 'col', 'depth', 'depth2', 'depth3'];
        return `
      ${vi(m)}
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        return ${s}(${Ii(g, c)});
      }
    `;
    }
    if (n.shapeInfo.isUniform)
        return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${a}, ${i}, ${o}, ${r})) +
          depth3;
        ${ki(n)}
      }
    `;
    const u = n.shapeInfo.flatOffset,
        h = n.shapeInfo.texShape,
        d = h[0],
        p = h[1];
    if (p === a && u == null)
        return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${i}, ${o}, ${r}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${p}.0, ${d}.0);
        return sampleTexture(${e}, uv);
      }
    `;
    if (p === r && u == null)
        return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${t[1] * t[2] * t[3]},
               ${t[2] * t[3]}, ${t[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${p}.0, ${d}.0);
        return sampleTexture(${e}, uv);
      }
    `;
    const f = Co(e);
    return `
    float ${s}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} + depth * ${o} +
          depth2 * ${r} + depth3 + ${f};
      vec2 uv = uvFromFlat(${d}, ${p}, index);
      return sampleTexture(${e}, uv);
    }
  `;
}
function wU(n) {
    const t = n.shapeInfo.logicalShape,
        e = n.name,
        s = 'get' + e.charAt(0).toUpperCase() + e.slice(1),
        { newShape: r, keptDims: o } = Sr(t);
    if (r.length < t.length) {
        const g = Si(n, r),
            y = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];
        return `
      ${vi(g)}
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${s}(${Ii(y, o)});
      }
    `;
    }
    const i = t[5],
        a = t[4] * i,
        l = t[3] * a,
        c = t[2] * l,
        u = t[1] * c;
    if (n.shapeInfo.isUniform)
        return `
      float ${s}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${u}, ${c}, ${l}, ${a})) +
          dot(
            vec2(depth3, depth4),
            vec2(${i}, 1)));
        ${ki(n)}
      }
    `;
    const h = n.shapeInfo.flatOffset,
        d = n.shapeInfo.texShape,
        p = d[0],
        f = d[1];
    if (f === u && h == null)
        return `
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${c}, ${l}, ${a}, ${i})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${p}.0);
        return sampleTexture(${e}, uv);
      }
    `;
    if (f === i && h == null)
        return `
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${t[1] * t[2] * t[3] * t[4]},
               ${t[2] * t[3] * t[4]},
               ${t[3] * t[4]},
               ${t[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${p}.0);
        return sampleTexture(${e}, uv);
      }
    `;
    const m = Co(e);
    return `
    float ${s}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${u} + col * ${c} + depth * ${l} +
          depth2 * ${a} + depth3 * ${i} + depth4 + ${m};
      vec2 uv = uvFromFlat(${p}, ${f}, index);
      return sampleTexture(${e}, uv);
    }
  `;
}
function ki(n) {
    const t = n.name,
        e = rt(n.shapeInfo.logicalShape);
    return e < 2
        ? `return ${t};`
        : `
    for (int i = 0; i < ${e}; i++) {
      if (i == index) {
        return ${t}[i];
      }
    }
  `;
}
function vU(n, t) {
    const e = n.name,
        s = e.charAt(0).toUpperCase() + e.slice(1),
        r = 'get' + s + 'AtOutCoords',
        o = n.shapeInfo.logicalShape.length,
        i = t.logicalShape.length,
        a = Xk(n.shapeInfo.logicalShape, t.logicalShape),
        l = Zt(i),
        c = i - o;
    let u;
    const h = ['x', 'y', 'z', 'w', 'u', 'v'];
    o === 0
        ? (u = '')
        : i < 2 && a.length >= 1
        ? (u = 'coords = 0;')
        : (u = a.map((b) => `coords.${h[b + c]} = 0;`).join(`
`));
    let d = '';
    i < 2 && o > 0
        ? (d = 'coords')
        : (d = n.shapeInfo.logicalShape
              .map((b, w) => `coords.${h[w + c]}`)
              .join(', '));
    let p = 'return outputValue;';
    const m = rt(n.shapeInfo.logicalShape) === 1,
        y = rt(t.logicalShape) === 1;
    if (o === 1 && !m && !y)
        p = `
      return vec4(outputValue.xy, outputValue.xy);
    `;
    else if (m && !y)
        i === 1
            ? (p = `
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      `)
            : (p = `
        return vec4(outputValue.x);
      `);
    else if (a.length) {
        const b = o - 2,
            w = o - 1;
        a.indexOf(b) > -1 && a.indexOf(w) > -1
            ? (p = 'return vec4(outputValue.x);')
            : a.indexOf(b) > -1
            ? (p =
                  'return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);')
            : a.indexOf(w) > -1 &&
              (p = 'return vec4(outputValue.xx, outputValue.zz);');
    }
    return `
    vec4 ${r}() {
      ${l} coords = getOutputCoords();
      ${u}
      vec4 outputValue = get${s}(${d});
      ${p}
    }
  `;
}
function kU(n, t) {
    const e = n.name,
        s = e.charAt(0).toUpperCase() + e.slice(1),
        r = 'get' + s + 'AtOutCoords',
        o = t.texShape,
        i = n.shapeInfo.texShape,
        a = n.shapeInfo.logicalShape.length,
        l = t.logicalShape.length;
    if (
        !n.shapeInfo.isUniform &&
        a === l &&
        n.shapeInfo.flatOffset == null &&
        Ut(i, o)
    )
        return `
      float ${r}() {
        return sampleTexture(${e}, resultUV);
      }
    `;
    const c = Zt(l),
        u = Xk(n.shapeInfo.logicalShape, t.logicalShape),
        h = l - a;
    let d;
    const p = ['x', 'y', 'z', 'w', 'u', 'v'];
    a === 0
        ? (d = '')
        : l < 2 && u.length >= 1
        ? (d = 'coords = 0;')
        : (d = u.map((m) => `coords.${p[m + h]} = 0;`).join(`
`));
    let f = '';
    return (
        l < 2 && a > 0
            ? (f = 'coords')
            : (f = n.shapeInfo.logicalShape
                  .map((m, g) => `coords.${p[g + h]}`)
                  .join(', ')),
        `
    float ${r}() {
      ${c} coords = getOutputCoords();
      ${d}
      return get${s}(${f});
    }
  `
    );
}
function Zt(n) {
    if (n <= 1) return 'int';
    if (n === 2) return 'ivec2';
    if (n === 3) return 'ivec3';
    if (n === 4) return 'ivec4';
    if (n === 5) return 'ivec5';
    if (n === 6) return 'ivec6';
    throw Error(`GPU for rank ${n} is not yet supported`);
}
function xg(n, t, e) {
    const { newShape: s, keptDims: r } = Sr(t),
        o = t.length,
        i = n && o === 3 && t[0] === 1,
        a = i ? t.slice(1) : s,
        l = (!n && o > 1 && !Ut(t, e) && s.length < o) || i;
    return { useSqueezeShape: l, uniformShape: l ? a : t, keptDims: r };
}
function Si(n, t) {
    const e = JSON.parse(JSON.stringify(n));
    return (e.shapeInfo.logicalShape = t), e;
}
function Ii(n, t) {
    return t.map((e) => n[e]).join(', ');
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function SU(n, t, e, s) {
    const r = e.map((u, h) => {
            const d = {
                logicalShape: u.shape,
                texShape: u.isUniform ? null : u.texData.texShape,
                isUniform: u.isUniform,
                isPacked: u.isUniform ? !1 : u.texData.isPacked,
                flatOffset: null,
            };
            return (
                u.texData != null &&
                    u.texData.slice != null &&
                    u.texData.slice.flatOffset > 0 &&
                    (d.flatOffset = u.texData.slice.flatOffset),
                { name: t.variableNames[h], shapeInfo: d }
            );
        }),
        o = r.map((u) => u.shapeInfo),
        i = {
            logicalShape: s.shape,
            texShape: s.texData.texShape,
            isUniform: !1,
            isPacked: s.texData.isPacked,
            flatOffset: null,
        },
        a = VW(r, i, t),
        l = gW(n.gl, a),
        c = n.createProgram(l);
    return tt().get('ENGINE_COMPILE_ONLY')
        ? {
              program: t,
              fragmentShader: l,
              source: a,
              webGLProgram: c,
              inShapeInfos: o,
              outShapeInfo: i,
              variablesLocations: null,
              customUniformLocations: null,
              infLoc: null,
              nanLoc: null,
              outShapeLocation: null,
              outShapeStridesLocation: null,
              outTexShapeLocation: null,
          }
        : (n.buildVao(c),
          Object.assign(
              {
                  program: t,
                  fragmentShader: l,
                  source: a,
                  webGLProgram: c,
                  inShapeInfos: o,
                  outShapeInfo: i,
              },
              Jk(n, t, c)
          ));
}
function Jk(n, t, e) {
    const s = [],
        r = [];
    let o,
        i,
        a,
        l = null,
        c = null;
    (c = n.getUniformLocation(e, 'NAN', !1)),
        tt().getNumber('WEBGL_VERSION') === 1 &&
            (l = n.getUniformLocation(e, 'INFINITY', !1));
    const u = !1;
    for (const h of t.variableNames) {
        const d = {
            name: h,
            uniform: n.getUniformLocation(e, h, u),
            offset: n.getUniformLocation(e, `offset${h}`, u),
        };
        t.enableShapeUniforms &&
            ((d.shape = n.getUniformLocation(e, `${h}Shape`, u)),
            (d.texShape = n.getUniformLocation(e, `${h}TexShape`, u))),
            s.push(d);
    }
    if (
        (t.enableShapeUniforms &&
            ((o = n.getUniformLocation(e, 'outShape', u)),
            (a = n.getUniformLocation(e, 'outShapeStrides', u)),
            (i = n.getUniformLocation(e, 'outTexShape', u))),
        t.customUniforms)
    )
        for (const h of t.customUniforms)
            r.push(n.getUniformLocation(e, h.name, u));
    return {
        variablesLocations: s,
        customUniformLocations: r,
        infLoc: l,
        nanLoc: c,
        outShapeLocation: o,
        outShapeStridesLocation: a,
        outTexShapeLocation: i,
    };
}
function Jy(n, t) {
    if (n.length !== t.length)
        throw Error(
            `Binary was compiled with ${n.length} inputs, but was executed with ${t.length} inputs`
        );
    n.forEach((e, s) => {
        const r = e.logicalShape,
            o = t[s],
            i = o.shape;
        if (!Ut(r, i))
            throw Error(
                `Binary was compiled with different shapes than the current args. Shapes ${r} and ${i} must match`
            );
        if (e.isUniform && o.isUniform) return;
        const a = e.texShape,
            l = o.isUniform ? null : o.texData.texShape;
        if (!Ut(a, l))
            throw Error(
                `Binary was compiled with different texture shapes than the current args. Shape ${a} and ${l} must match`
            );
    });
}
function IU(n, t, e, s, r) {
    t.program.enableShapeUniforms ||
        (Jy(t.inShapeInfos, e), Jy([t.outShapeInfo], [s]));
    const o = s.texData.texture,
        i = s.texData.texShape;
    s.texData.isPacked
        ? n.setOutputPackedMatrixTexture(o.texture, i[0], i[1])
        : n.setOutputMatrixTexture(o.texture, i[0], i[1]),
        n.setProgram(t.webGLProgram),
        n.bindVertexArray(t.webGLProgram.vao),
        tt().getNumber('WEBGL_VERSION') === 1 &&
            t.infLoc !== null &&
            n.gl.uniform1f(t.infLoc, 1 / 0),
        t.nanLoc !== null && n.gl.uniform1f(t.nanLoc, NaN);
    for (let l = 0; l < e.length; ++l) {
        const c = e[l],
            {
                uniform: u,
                offset: h,
                shape: d,
                texShape: p,
            } = t.variablesLocations[l];
        if (d) {
            const { uniformShape: f } = xg(
                t.program.packedInputs,
                c.shape,
                c.texData.texShape
            );
            switch (f.length) {
                case 1:
                    n.gl.uniform1iv(d, new Int32Array(f));
                    break;
                case 2:
                    n.gl.uniform2iv(d, new Int32Array(f));
                    break;
                case 3:
                    n.gl.uniform3iv(d, new Int32Array(f));
                    break;
                case 4:
                    n.gl.uniform4iv(d, new Int32Array(f));
                    break;
            }
        }
        if (
            (p &&
                n.gl.uniform2i(p, c.texData.texShape[0], c.texData.texShape[1]),
            u != null)
        ) {
            if (c.isUniform) {
                if (rt(c.shape) < 2) n.gl.uniform1f(u, c.uniformValues[0]);
                else {
                    let f = c.uniformValues;
                    f instanceof Float32Array || (f = new Float32Array(f)),
                        n.gl.uniform1fv(u, f);
                }
                continue;
            }
            c.texData.slice != null &&
                h != null &&
                n.gl.uniform1i(h, c.texData.slice.flatOffset),
                n.setInputMatrixTexture(c.texData.texture.texture, u, l);
        }
    }
    const a = t.outShapeLocation;
    if (a)
        switch (s.shape.length) {
            case 1:
                n.gl.uniform1iv(a, new Int32Array(s.shape));
                break;
            case 2:
                n.gl.uniform2iv(a, new Int32Array(s.shape));
                break;
            case 3:
                n.gl.uniform3iv(a, new Int32Array(s.shape));
                break;
            case 4:
                n.gl.uniform4iv(a, new Int32Array(s.shape));
                break;
        }
    if (t.outShapeStridesLocation) {
        const l = _t(s.shape);
        switch (s.shape.length) {
            case 2:
                n.gl.uniform1iv(t.outShapeStridesLocation, new Int32Array(l));
                break;
            case 3:
                n.gl.uniform2iv(t.outShapeStridesLocation, new Int32Array(l));
                break;
            case 4:
                n.gl.uniform3iv(t.outShapeStridesLocation, new Int32Array(l));
                break;
        }
    }
    if (
        (t.outTexShapeLocation &&
            n.gl.uniform2i(
                t.outTexShapeLocation,
                s.texData.texShape[0],
                s.texData.texShape[1]
            ),
        t.program.customUniforms && r)
    )
        for (let l = 0; l < t.program.customUniforms.length; ++l) {
            const c = t.program.customUniforms[l],
                u = t.customUniformLocations[l],
                h = r[l];
            if (c.type === 'float') n.gl.uniform1fv(u, h);
            else if (c.type === 'vec2') n.gl.uniform2fv(u, h);
            else if (c.type === 'vec3') n.gl.uniform3fv(u, h);
            else if (c.type === 'vec4') n.gl.uniform4fv(u, h);
            else if (c.type === 'int') n.gl.uniform1iv(u, h);
            else if (c.type === 'ivec2') n.gl.uniform2iv(u, h);
            else if (c.type === 'ivec3') n.gl.uniform3iv(u, h);
            else if (c.type === 'ivec4') n.gl.uniform4iv(u, h);
            else throw Error(`uniform type ${c.type} is not supported yet.`);
        }
    n.executeProgram();
}
function CU(n, t, e) {
    let s = '';
    t.concat(e).forEach((i) => {
        const a =
            i.texData != null &&
            i.texData.slice != null &&
            i.texData.slice.flatOffset > 0;
        if (n.enableShapeUniforms && !i.isUniform) {
            const l = i.texData.texShape,
                {
                    useSqueezeShape: c,
                    uniformShape: u,
                    keptDims: h,
                } = xg(n.packedInputs, i.shape, l);
            let d = '',
                p = '',
                f = '';
            if (u.length === 1 && n.packedInputs) {
                const v = [Math.ceil(l[0] / 2), Math.ceil(l[1] / 2)];
                d = `${v[0] > 1}_${v[1] > 1}`;
            } else if (u.length === 2 && !n.packedInputs)
                p = `${u[0] > 1}_${u[1] > 1}`;
            else if (u.length > 2 && !n.packedInputs) {
                const v = _t(u);
                f = `${v[0] === l[1]}_${v[v.length - 1] === l[1]}`;
            }
            const m = i.shape.length,
                g = u.length === 2 && Ut(i.shape, l),
                y = rt(i.shape) === 1,
                b = Qo(i.shape, e.shape),
                w =
                    !n.packedInputs &&
                    m === e.shape.length &&
                    Ut(l, e.texData.texShape),
                x =
                    n.packedInputs || u.length > 2
                        ? ''
                        : `${l[0] > 1}_${l[1] > 1}`;
            s += `${m}_${w}_${c ? h : ''}_${
                u.length
            }_${y}_${b}_${g}_${d}_${p}_${f}_${x}_${a}`;
        } else {
            const l = i.isUniform ? 'uniform' : i.texData.texShape;
            s += `${i.shape}_${l}_${a}`;
        }
    });
    const r = n.userCode;
    let o = n.constructor.name;
    return (o += '_' + s + '_' + r + `${tt().getNumber('WEBGL_VERSION')}`), o;
}
function Ye(n) {
    return tt().getBool('WEBGL_USE_SHAPES_UNIFORMS') && n <= 4;
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class $U {
    constructor(t) {
        (this.variableNames = ['A']),
            (this.packedInputs = !1),
            (this.packedOutput = !0),
            (this.outPackingScheme = Ji.DENSE),
            (this.customUniforms = [{ name: 'texShape', type: 'ivec2' }]);
        const e = rn();
        (this.outputShape = t),
            (this.enableShapeUniforms = Ye(this.outputShape.length)),
            (this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${
            this.enableShapeUniforms
                ? Sh(['r', 'c', 'd'], t)
                : Io(['r', 'c', 'd'], t)
        }
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${e.output} = result;
      }
    `);
    }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class NU {
    constructor(t) {
        (this.variableNames = ['A']),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outPackingScheme = Ji.DENSE),
            (this.customUniforms = [{ name: 'texShape', type: 'ivec2' }]);
        const e = rn();
        (this.outputShape = t),
            (this.enableShapeUniforms = Ye(this.outputShape.length)),
            (this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${
            this.enableShapeUniforms
                ? Sh(['r', 'c', 'd'], t)
                : Io(['r', 'c', 'd'], t)
        }
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${e.output} = result;
      }
    `);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class TU {
    constructor(t) {
        (this.variableNames = ['A']), (this.outTexUsage = An.DOWNLOAD);
        const e = rn();
        (this.outputShape = t),
            (this.userCode = `
      ${Kk}

      void main() {
        float x = getAAtOutCoords();
        ${e.output} = encode_float(x);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class EU {
    constructor(t) {
        (this.variableNames = ['A']),
            (this.packedInputs = !0),
            (this.packedOutput = !1),
            (this.outTexUsage = An.DOWNLOAD);
        const e = rn();
        (this.outputShape = t),
            (this.userCode = `
      ${Kk}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${e.output} = encode_float(x);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const _U = { R: 0, G: 1, B: 2, A: 3 };
class Qy {
    constructor(t, e = !1, s = 'RGBA') {
        (this.variableNames = ['A']),
            (this.customUniforms = [{ name: 'texShape', type: 'ivec2' }]);
        const r = rn();
        (this.outputShape = t),
            (this.enableShapeUniforms = Ye(this.outputShape.length));
        let o = 'result';
        e && (o = 'floor(result * 255. + 0.5)');
        let i = '';
        for (let a = 0; a < s.length; a++) {
            const l = s[a];
            i += `
          if(offset == ${a}) {
            result = values[${_U[l]}];
          }`;
        }
        this.userCode = `
      ${this.enableShapeUniforms ? bg() : yg(t)}

      void main() {
        ivec3 coords = getOutputCoords();
        int flatIndex = getFlatIndex(coords);
        float result = 0.;
        int offset = imod(flatIndex, ${s.length});

        flatIndex = idiv(flatIndex, ${s.length}, 1.);

        int r = flatIndex / texShape[1];
        if (r < texShape[0]) {
          int c = imod(flatIndex, texShape[1]);
          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
          vec4 values = ${r.texture2D}(A, uv);
          ${i}
        }
        ${r.output} = vec4(${o}, 0., 0., 0.);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class AU {
    constructor(t, e = !1) {
        (this.variableNames = ['A']),
            (this.packedInputs = !1),
            (this.packedOutput = !0),
            (this.customUniforms = [{ name: 'texShape', type: 'ivec2' }]);
        const s = rn();
        (this.outputShape = t),
            (this.enableShapeUniforms = Ye(this.outputShape.length));
        let r = '',
            o = 'result';
        e && (o = 'floor(result * 255. + 0.5)');
        for (let i = 0; i <= 1; i++)
            for (let a = 0; a <= 1; a++) {
                const l = i * 2 + a;
                r += `
          localCoords = coords;
          if(localCoords[2] + ${a} < ${
                    this.enableShapeUniforms ? 'outShape[2]' : `${t[2]}`
                }) {
          localCoords[2] += ${a};
          if (localCoords[1] + ${i} < ${
                    this.enableShapeUniforms ? 'outShape[1]' : `${t[1]}`
                }) {
            localCoords[1] += ${i};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${s.texture2D}(A, uv);

            if (offset == 0) {
              result[${l}] = values[0];
            } else if (offset == 1) {
              result[${l}] = values[1];
            } else if (offset == 2) {
              result[${l}] = values[2];
            } else {
              result[${l}] = values[3];
            }
          }
        }
        `;
            }
        this.userCode = `
        ${this.enableShapeUniforms ? bg() : yg(t)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${r}

          ${s.output} = ${o};
        }
    `;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function RU(n) {
    const t = rn(),
        e = `${t.version}
    precision highp float;
    ${t.attribute} vec3 clipSpacePos;
    ${t.attribute} vec2 uv;
    ${t.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;
    return mW(n, e);
}
function DU(n) {
    const t = new Float32Array([
        -1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0,
    ]);
    return wW(n, t);
}
function OU(n) {
    const t = new Uint16Array([0, 1, 2, 2, 1, 3]);
    return vW(n, t);
}
function vl(n, t, e, s, r, o) {
    SW(t, e);
    const i = kW(n),
        a = n.TEXTURE_2D;
    return (
        vt(n, () => n.bindTexture(a, i)),
        vt(n, () => n.texParameteri(a, n.TEXTURE_WRAP_S, n.CLAMP_TO_EDGE)),
        vt(n, () => n.texParameteri(a, n.TEXTURE_WRAP_T, n.CLAMP_TO_EDGE)),
        vt(n, () => n.texParameteri(a, n.TEXTURE_MIN_FILTER, n.NEAREST)),
        vt(n, () => n.texParameteri(a, n.TEXTURE_MAG_FILTER, n.NEAREST)),
        tt().getNumber('WEBGL_VERSION') === 1
            ? vt(n, () => n.texImage2D(a, 0, s, t, e, 0, r, o, null))
            : vt(n, () => n.texStorage2D(a, 1, s, t, e)),
        vt(n, () => n.bindTexture(n.TEXTURE_2D, null)),
        { texture: i, texShape: [e, t] }
    );
}
function Qk(n) {
    return n.internalFormatFloat;
}
function FU(n, t, e, s) {
    const [r, o] = xl(t, e);
    return vl(n, r, o, Qk(s), s.textureFormatFloat, n.FLOAT);
}
function tS(n) {
    return n.internalFormatHalfFloat;
}
function LU(n, t, e, s) {
    const [r, o] = xl(t, e);
    return vl(n, r, o, tS(s), s.textureFormatFloat, s.textureTypeHalfFloat);
}
function eS(n) {
    return n.downloadTextureFormat;
}
function PU(n, t, e, s) {
    const [r, o] = xl(t, e);
    return vl(n, r, o, eS(s), n.RGBA, n.UNSIGNED_BYTE);
}
function nS(n) {
    return n.internalFormatPackedFloat;
}
function zU(n, t, e, s) {
    const [r, o] = wi(t, e);
    return vl(n, r, o, nS(s), n.RGBA, n.FLOAT);
}
function sS(n) {
    return n.internalFormatPackedHalfFloat;
}
function BU(n, t, e, s) {
    const [r, o] = wi(t, e);
    return vl(n, r, o, sS(s), n.RGBA, s.textureTypeHalfFloat);
}
function MU(n, t, e) {
    return (
        vt(n, () => n.bindBuffer(n.ARRAY_BUFFER, e)),
        Xy(n, t, 'clipSpacePos', e, 3, 20, 0) && Xy(n, t, 'uv', e, 2, 20, 12)
    );
}
function VU(n, t, e, s, r, o) {
    vt(n, () => n.bindTexture(n.TEXTURE_2D, t));
    let i, a, l;
    r instanceof Uint8Array
        ? ((i = new Uint8Array(e * s * 4)), (a = n.UNSIGNED_BYTE), (l = n.RGBA))
        : ((i = new Float32Array(e * s * 4)),
          (a = n.FLOAT),
          (l = o.internalFormatPackedFloat)),
        i.set(r),
        tt().getNumber('WEBGL_VERSION') === 2
            ? vt(n, () =>
                  n.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, e, s, n.RGBA, a, i)
              )
            : vt(n, () =>
                  n.texImage2D(n.TEXTURE_2D, 0, l, e, s, 0, n.RGBA, a, i)
              ),
        vt(n, () => n.bindTexture(n.TEXTURE_2D, null));
}
function WU(n, t, e) {
    vt(n, () => n.bindTexture(n.TEXTURE_2D, t)),
        e.data instanceof Uint8Array
            ? tt().getNumber('WEBGL_VERSION') === 2
                ? vt(n, () =>
                      n.texSubImage2D(
                          n.TEXTURE_2D,
                          0,
                          0,
                          0,
                          e.width,
                          e.height,
                          n.RGBA,
                          n.UNSIGNED_BYTE,
                          e.data
                      )
                  )
                : vt(n, () =>
                      n.texImage2D(
                          n.TEXTURE_2D,
                          0,
                          n.RGBA,
                          e.width,
                          e.height,
                          0,
                          n.RGBA,
                          n.UNSIGNED_BYTE,
                          e.data
                      )
                  )
            : tt().getNumber('WEBGL_VERSION') === 2
            ? vt(n, () =>
                  n.texSubImage2D(
                      n.TEXTURE_2D,
                      0,
                      0,
                      0,
                      n.RGBA,
                      n.UNSIGNED_BYTE,
                      e
                  )
              )
            : vt(n, () =>
                  n.texImage2D(
                      n.TEXTURE_2D,
                      0,
                      n.RGBA,
                      n.RGBA,
                      n.UNSIGNED_BYTE,
                      e
                  )
              ),
        vt(n, () => n.bindTexture(n.TEXTURE_2D, null));
}
function UU(n, t, e, s) {
    const r = n.createBuffer();
    vt(n, () => n.bindBuffer(n.PIXEL_PACK_BUFFER, r));
    const a = 4 * 4 * t * e;
    return (
        vt(n, () => n.bufferData(n.PIXEL_PACK_BUFFER, a, n.STREAM_READ)),
        vt(n, () => n.readPixels(0, 0, e, t, n.RGBA, n.FLOAT, 0)),
        vt(n, () => n.bindBuffer(n.PIXEL_PACK_BUFFER, null)),
        r
    );
}
function GU(n, t, e) {
    const s = n,
        r = new Float32Array(e);
    return (
        s.bindBuffer(s.PIXEL_PACK_BUFFER, t),
        s.getBufferSubData(s.PIXEL_PACK_BUFFER, 0, r),
        s.bindBuffer(s.PIXEL_PACK_BUFFER, null),
        r
    );
}
function HU(n, t, e, s) {
    const [r, o] = xl(t, e),
        i = 4,
        a = new Uint8Array(lW(t * e, i));
    return (
        vt(n, () =>
            n.readPixels(
                0,
                0,
                r,
                o,
                s.downloadTextureFormat,
                n.UNSIGNED_BYTE,
                a
            )
        ),
        new Float32Array(a.buffer)
    );
}
function jU(n, t, e, s, r, o, i, a) {
    const l = n,
        c = new Float32Array(cW(o, i));
    return (
        l.bindBuffer(l.PIXEL_PACK_BUFFER, t),
        l.getBufferSubData(l.PIXEL_PACK_BUFFER, 0, c),
        l.bindBuffer(l.PIXEL_PACK_BUFFER, null),
        c
    );
}
function qU(n, t, e) {
    const s = new Float32Array(t * e * 4);
    return vt(n, () => n.readPixels(0, 0, e, t, n.RGBA, n.FLOAT, s)), s;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class Zh {
    constructor(t) {
        (this.outputTexture = null),
            (this.program = null),
            (this.disposed = !1),
            (this.itemsToPoll = []);
        const e = tt().getNumber('WEBGL_VERSION');
        if (
            (t != null ? ((this.gl = t), oW(e, t)) : (this.gl = ps(e)),
            (t = this.gl),
            tt().getNumber('WEBGL_VERSION') === 2)
        ) {
            const o = t;
            (this.createVertexArray = () => vt(o, () => o.createVertexArray())),
                (this.bindVertexArray = (i) =>
                    vt(o, () => o.bindVertexArray(i))),
                (this.deleteVertexArray = (i) =>
                    vt(o, () => o.deleteVertexArray(i))),
                (this.getVertexArray = () =>
                    vt(o, () => o.getParameter(o.VERTEX_ARRAY_BINDING)));
        } else if (t != null) {
            const o = t.getExtension('OES_vertex_array_object');
            if (o == null)
                throw new Error(
                    'All WebGL1 implementations are expected to offer OES_vertex_array_object.'
                );
            (this.createVertexArray = () =>
                vt(t, () => o.createVertexArrayOES())),
                (this.bindVertexArray = (i) =>
                    vt(t, () => o.bindVertexArrayOES(i))),
                (this.deleteVertexArray = (i) =>
                    vt(t, () => o.deleteVertexArrayOES(i))),
                (this.getVertexArray = () =>
                    vt(t, () => t.getParameter(o.VERTEX_ARRAY_BINDING_OES)));
        }
        let s = 'WEBGL_color_buffer_float';
        const r = 'EXT_color_buffer_half_float';
        if (
            ((this.parallelCompilationExtension = this.gl.getExtension(
                'KHR_parallel_shader_compile'
            )),
            tt().getNumber('WEBGL_VERSION') === 1)
        ) {
            const o = 'OES_texture_float',
                i = 'OES_texture_half_float';
            if (((this.textureFloatExtension = Ol(this.gl, o)), Kn(this.gl, i)))
                this.textureHalfFloatExtension = Ol(this.gl, i);
            else if (tt().get('WEBGL_FORCE_F16_TEXTURES'))
                throw new Error(
                    'GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.'
                );
            if (
                ((this.colorBufferFloatExtension = this.gl.getExtension(s)),
                Kn(this.gl, r))
            )
                this.colorBufferHalfFloatExtension = Ol(this.gl, r);
            else if (tt().get('WEBGL_FORCE_F16_TEXTURES'))
                throw new Error(
                    'GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.'
                );
        } else if (((s = 'EXT_color_buffer_float'), Kn(this.gl, s)))
            this.colorBufferFloatExtension = this.gl.getExtension(s);
        else if (Kn(this.gl, r))
            this.colorBufferHalfFloatExtension = this.gl.getExtension(r);
        else
            throw new Error(
                'GL context does not support color renderable floats'
            );
        (this.vertexBuffer = DU(this.gl)),
            (this.indexBuffer = OU(this.gl)),
            (this.framebuffer = IW(this.gl)),
            (this.textureConfig = gg(this.gl, this.textureHalfFloatExtension));
    }
    get debug() {
        return tt().getBool('DEBUG');
    }
    dispose() {
        if (this.disposed) return;
        this.program != null &&
            console.warn(
                'Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing.'
            ),
            this.outputTexture != null &&
                console.warn(
                    'Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.'
                );
        const t = this.gl;
        vt(t, () => t.finish()),
            vt(t, () => t.bindFramebuffer(t.FRAMEBUFFER, null)),
            vt(t, () => t.deleteFramebuffer(this.framebuffer)),
            vt(t, () => t.bindBuffer(t.ARRAY_BUFFER, null)),
            vt(t, () => t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, null)),
            vt(t, () => t.deleteBuffer(this.indexBuffer)),
            (this.disposed = !0);
    }
    createFloat32MatrixTexture(t, e) {
        return this.throwIfDisposed(), FU(this.gl, t, e, this.textureConfig);
    }
    createFloat16MatrixTexture(t, e) {
        return this.throwIfDisposed(), LU(this.gl, t, e, this.textureConfig);
    }
    createUnsignedBytesMatrixTexture(t, e) {
        return this.throwIfDisposed(), PU(this.gl, t, e, this.textureConfig);
    }
    uploadPixelDataToTexture(t, e) {
        this.throwIfDisposed(), WU(this.gl, t, e);
    }
    uploadDenseMatrixToTexture(t, e, s, r) {
        this.throwIfDisposed(), VU(this.gl, t, e, s, r, this.textureConfig);
    }
    createFloat16PackedMatrixTexture(t, e) {
        return this.throwIfDisposed(), BU(this.gl, t, e, this.textureConfig);
    }
    createPackedMatrixTexture(t, e) {
        return this.throwIfDisposed(), zU(this.gl, t, e, this.textureConfig);
    }
    deleteMatrixTexture(t) {
        this.throwIfDisposed(),
            this.outputTexture === t &&
                (Yy(this.gl, this.framebuffer), (this.outputTexture = null)),
            vt(this.gl, () => this.gl.deleteTexture(t));
    }
    downloadByteEncodedFloatMatrixFromOutputTexture(t, e, s) {
        return this.downloadMatrixDriver(t, () =>
            HU(this.gl, e, s, this.textureConfig)
        );
    }
    downloadPackedMatrixFromBuffer(t, e, s, r, o, i) {
        return jU(this.gl, t, e, s, r, o, i, this.textureConfig);
    }
    downloadFloat32MatrixFromBuffer(t, e) {
        return GU(this.gl, t, e);
    }
    createBufferFromTexture(t, e, s) {
        this.bindTextureToFrameBuffer(t);
        const r = UU(this.gl, e, s, this.textureConfig);
        return this.unbindTextureToFrameBuffer(), r;
    }
    createAndWaitForFence() {
        const t = this.createFence(this.gl);
        return this.pollFence(t);
    }
    createFence(t) {
        let e, s;
        if (tt().getBool('WEBGL_FENCE_API_ENABLED')) {
            const r = t,
                o = r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE, 0);
            t.flush(),
                (s = () => {
                    const i = r.clientWaitSync(o, 0, 0);
                    return (
                        i === r.ALREADY_SIGNALED || i === r.CONDITION_SATISFIED
                    );
                }),
                (e = o);
        } else
            tt().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0
                ? ((e = this.beginQuery()),
                  this.endQuery(),
                  (s = () =>
                      this.isQueryAvailable(
                          e,
                          tt().getNumber(
                              'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'
                          )
                      )))
                : (s = () => !0);
        return { query: e, isFencePassed: s };
    }
    downloadMatrixFromPackedTexture(t, e, s) {
        return this.downloadMatrixDriver(t, () => qU(this.gl, e, s));
    }
    createProgram(t) {
        this.throwIfDisposed();
        const e = this.gl;
        this.vertexShader == null && (this.vertexShader = RU(e));
        const s = bW(e);
        vt(e, () => e.attachShader(s, this.vertexShader)),
            vt(e, () => e.attachShader(s, t)),
            xW(e, s);
        const r = Object.assign(s, { vao: this.createVertexArray() });
        return this.debug && qh(e, r), r;
    }
    buildVao(t) {
        this.setProgram(t), this.bindVertexArray(t.vao);
        const e = this.gl;
        vt(e, () => e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, this.indexBuffer)),
            MU(e, t, this.vertexBuffer);
    }
    deleteProgram(t) {
        this.throwIfDisposed(),
            t === this.program && (this.program = null),
            t != null &&
                (vt(this.gl, () => this.gl.deleteProgram(t)),
                this.deleteVertexArray(t.vao));
    }
    setProgram(t) {
        this.throwIfDisposed(),
            (this.program = t),
            this.program != null && this.debug && qh(this.gl, this.program),
            vt(this.gl, () => this.gl.useProgram(t));
    }
    getUniformLocation(t, e, s = !0) {
        return (
            this.throwIfDisposed(), s ? $W(this.gl, t, e) : NW(this.gl, t, e)
        );
    }
    getAttributeLocation(t, e) {
        return (
            this.throwIfDisposed(),
            vt(this.gl, () => this.gl.getAttribLocation(t, e))
        );
    }
    getUniformLocationNoThrow(t, e) {
        return this.throwIfDisposed(), this.gl.getUniformLocation(t, e);
    }
    setInputMatrixTexture(t, e, s) {
        this.throwIfDisposed(), this.throwIfNoProgram(), TW(this.gl, t, e, s);
    }
    setOutputMatrixTexture(t, e, s) {
        this.setOutputMatrixTextureDriver(t, s, e);
    }
    setOutputPackedMatrixTexture(t, e, s) {
        this.throwIfDisposed();
        const [r, o] = wi(e, s);
        this.setOutputMatrixTextureDriver(t, r, o);
    }
    setOutputMatrixWriteRegion(t, e, s, r) {
        this.setOutputMatrixWriteRegionDriver(s, t, r, e);
    }
    setOutputPackedMatrixWriteRegion(t, e, s, r) {
        throw new Error('setOutputPackedMatrixWriteRegion not implemented.');
    }
    debugValidate() {
        this.program != null && qh(this.gl, this.program), Fl(this.gl);
    }
    executeProgram() {
        this.throwIfDisposed(), this.throwIfNoProgram();
        const t = this.gl;
        if (this.debug) {
            const e = this.getVertexArray();
            console.assert(
                e === this.program.vao,
                'VAO changed between setProgram and executeProgram!'
            ),
                this.debugValidate();
        }
        vt(t, () => t.drawElements(t.TRIANGLES, 6, t.UNSIGNED_SHORT, 0));
    }
    blockUntilAllProgramsCompleted() {
        this.throwIfDisposed(), vt(this.gl, () => this.gl.finish());
    }
    getQueryTimerExtension() {
        return (
            this.disjointQueryTimerExtension == null &&
                (this.disjointQueryTimerExtension = Ol(
                    this.gl,
                    tt().getNumber(
                        'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'
                    ) === 2
                        ? 'EXT_disjoint_timer_query_webgl2'
                        : 'EXT_disjoint_timer_query'
                )),
            this.disjointQueryTimerExtension
        );
    }
    getQueryTimerExtensionWebGL2() {
        return this.getQueryTimerExtension();
    }
    getQueryTimerExtensionWebGL1() {
        return this.getQueryTimerExtension();
    }
    beginQuery() {
        if (
            tt().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2
        ) {
            const s = this.gl,
                r = this.getQueryTimerExtensionWebGL2(),
                o = s.createQuery();
            return s.beginQuery(r.TIME_ELAPSED_EXT, o), o;
        }
        const t = this.getQueryTimerExtensionWebGL1(),
            e = t.createQueryEXT();
        return t.beginQueryEXT(t.TIME_ELAPSED_EXT, e), e;
    }
    endQuery() {
        if (
            tt().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2
        ) {
            const e = this.gl,
                s = this.getQueryTimerExtensionWebGL2();
            e.endQuery(s.TIME_ELAPSED_EXT);
            return;
        }
        const t = this.getQueryTimerExtensionWebGL1();
        t.endQueryEXT(t.TIME_ELAPSED_EXT);
    }
    async waitForQueryAndGetTime(t) {
        return (
            await Fg(
                () =>
                    this.disposed ||
                    this.isQueryAvailable(
                        t,
                        tt().getNumber(
                            'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'
                        )
                    )
            ),
            this.getQueryTime(
                t,
                tt().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')
            )
        );
    }
    getQueryTime(t, e) {
        if (e === 0) return null;
        if (e === 2) {
            const s = this.gl;
            return s.getQueryParameter(t, s.QUERY_RESULT) / 1e6;
        } else {
            const s = this.getQueryTimerExtensionWebGL1();
            return s.getQueryObjectEXT(t, s.QUERY_RESULT_EXT) / 1e6;
        }
    }
    isQueryAvailable(t, e) {
        if (e === 0) return !0;
        if (e === 2) {
            const s = this.gl,
                r = this.getQueryTimerExtensionWebGL2(),
                o = s.getQueryParameter(t, s.QUERY_RESULT_AVAILABLE);
            return (
                this.disjoint == null &&
                    (this.disjoint = this.gl.getParameter(r.GPU_DISJOINT_EXT)),
                o && !this.disjoint
            );
        } else {
            const s = this.getQueryTimerExtensionWebGL1(),
                r = s.getQueryObjectEXT(t, s.QUERY_RESULT_AVAILABLE_EXT);
            return (
                this.disjoint == null &&
                    (this.disjoint = this.gl.getParameter(s.GPU_DISJOINT_EXT)),
                r && !this.disjoint
            );
        }
    }
    pollFence(t) {
        return new Promise((e) => {
            this.addItemToPoll(
                () => t.isFencePassed(),
                () => e()
            );
        });
    }
    pollItems() {
        const t = KU(this.itemsToPoll.map((e) => e.isDoneFn));
        for (let e = 0; e <= t; ++e) {
            const { resolveFn: s } = this.itemsToPoll[e];
            s();
        }
        this.itemsToPoll = this.itemsToPoll.slice(t + 1);
    }
    addItemToPoll(t, e) {
        if (
            (this.itemsToPoll.push({ isDoneFn: t, resolveFn: e }),
            this.itemsToPoll.length > 1)
        )
            return;
        let s;
        'setTimeoutCustom' in tt().platform &&
            (s = tt().platform.setTimeoutCustom.bind(tt().platform)),
            Fg(
                () => (this.pollItems(), this.itemsToPoll.length === 0),
                () => 0,
                null,
                s
            );
    }
    bindTextureToFrameBuffer(t) {
        this.throwIfDisposed(),
            Kh(this.gl, t, this.framebuffer),
            this.debug && Fl(this.gl);
    }
    unbindTextureToFrameBuffer() {
        this.outputTexture != null
            ? (Kh(this.gl, this.outputTexture, this.framebuffer),
              this.debug && Fl(this.gl))
            : Yy(this.gl, this.framebuffer);
    }
    downloadMatrixDriver(t, e) {
        this.bindTextureToFrameBuffer(t);
        const s = e();
        return this.unbindTextureToFrameBuffer(), s;
    }
    setOutputMatrixTextureDriver(t, e, s) {
        this.throwIfDisposed();
        const r = this.gl;
        Kh(r, t, this.framebuffer),
            this.debug && Fl(r),
            (this.outputTexture = t),
            vt(r, () => r.viewport(0, 0, e, s)),
            vt(r, () => r.scissor(0, 0, e, s));
    }
    setOutputMatrixWriteRegionDriver(t, e, s, r) {
        this.throwIfDisposed(), vt(this.gl, () => this.gl.scissor(t, e, s, r));
    }
    throwIfDisposed() {
        if (this.disposed)
            throw new Error('Attempted to use disposed GPGPUContext.');
    }
    throwIfNoProgram() {
        if (this.program == null)
            throw new Error('No GPU program is currently set.');
    }
}
function KU(n) {
    let t = 0;
    for (; t < n.length && n[t](); ++t);
    return t - 1;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const {
    addImpl: XU,
    bincountImpl: rS,
    bincountReduceImpl: YU,
    bitwiseAndImpl: ZU,
    castImpl: JU,
    ceilImpl: QU,
    concatImpl: tG,
    equalImpl: eG,
    expImpl: nG,
    expm1Impl: sG,
    floorImpl: rG,
    gatherNdImpl: oG,
    gatherV2Impl: iG,
    greaterImpl: aG,
    greaterEqualImpl: lG,
    lessImpl: cG,
    lessEqualImpl: uG,
    linSpaceImpl: hG,
    logImpl: dG,
    maxImpl: pG,
    maximumImpl: fG,
    minimumImpl: mG,
    multiplyImpl: gG,
    negImpl: yG,
    notEqualImpl: bG,
    prodImpl: xG,
    raggedGatherImpl: wG,
    raggedRangeImpl: vG,
    raggedTensorToTensorImpl: kG,
    rangeImpl: SG,
    rsqrtImpl: IG,
    scatterImpl: CG,
    sigmoidImpl: $G,
    simpleAbsImpl: oS,
    sliceImpl: NG,
    sparseFillEmptyRowsImpl: TG,
    sparseReshapeImpl: EG,
    sparseSegmentReductionImpl: iS,
    sqrtImpl: _G,
    staticRegexReplaceImpl: AG,
    stridedSliceImpl: RG,
    stringNGramsImpl: DG,
    stringSplitImpl: OG,
    stringToHashBucketFastImpl: FG,
    subImpl: LG,
    tileImpl: PG,
    topKImpl: zG,
    transposeImpl: wg,
    uniqueImpl: BG,
} = WP;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function aS(n, t) {
    return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, t).map((e) => `${n}.${e}`);
}
function en(n, t) {
    return t === 1 ? [n] : aS(n, t);
}
function MG(n, t) {
    if (n === 1) return 'rc';
    let e = '';
    for (let s = 0; s < n; s++) (e += t[s]), s < n - 1 && (e += ',');
    return e;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class VG {
    constructor(t) {
        if (
            ((this.variableNames = ['A']),
            (this.packedInputs = !1),
            (this.packedOutput = !0),
            (this.outputShape = t),
            (this.rank = t.length),
            (this.enableShapeUniforms = Ye(this.outputShape.length)),
            this.rank === 0)
        )
            this.userCode = `
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;
        else {
            const e = en('rc', this.rank),
                s = Zt(this.rank),
                r = this.getOutOfBoundsCondition(e),
                o = this.getSetup(e),
                i = this.getOutput(e);
            this.userCode = `
        void main() {
          ${s} rc = getOutputCoords();

          if(${r}) {
            setOutput(vec4(0));
          } else {
            ${o}

            setOutput(vec4(${i}));
          }
        }
      `;
        }
    }
    getSourceCoordsArr(t) {
        const e = [];
        for (let s = 0; s <= 1; s++)
            for (let r = 0; r <= 1; r++) {
                let o = `${s === 0 ? 'r' : 'rp1'}, ${r === 0 ? 'c' : 'cp1'}`;
                for (let i = 2; i < this.rank; i++)
                    o = `${t[t.length - 1 - i]},` + o;
                e.push(o);
            }
        return e;
    }
    getOutOfBoundsCondition(t) {
        if (this.rank === 1)
            return `rc > ${
                this.enableShapeUniforms ? 'outShape' : this.outputShape[0]
            }`;
        let e = '';
        for (let s = this.rank - 2; s < this.rank; s++)
            (e += `${t[s]} >= ${
                this.enableShapeUniforms
                    ? `outShape[${s}]`
                    : this.outputShape[s]
            }`),
                s < this.rank - 1 && (e += '||');
        return e;
    }
    getSetup(t) {
        if (this.rank === 1) return '';
        const e = t.slice(-2),
            s = this.enableShapeUniforms
                ? `outShape[${this.rank} - 1]`
                : this.outputShape[this.rank - 1],
            r = this.enableShapeUniforms
                ? `outShape[${this.rank} - 2]`
                : this.outputShape[this.rank - 2];
        return `
      int r = ${e[0]};
      int c = ${e[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${s};
      bool rEdge = rp1 >= ${r};
    `;
    }
    getOutput(t) {
        const e = this.getSourceCoordsArr(t);
        return this.rank === 1
            ? `getA(rc), (rc + 1 >= ${
                  this.enableShapeUniforms ? 'outShape' : this.outputShape[0]
              } ? 0. : getA(rc + 1)), 0, 0`
            : `getA(${e[0]}),
            cEdge ? 0. : getA(${e[1]}),
            rEdge ? 0. : getA(${e[2]}),
            rEdge || cEdge ? 0. : getA(${e[3]})`;
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class lS {
    constructor(t, e) {
        (this.variableNames = ['A']),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.customUniforms = [{ name: 'inputShape', type: 'ivec3' }]),
            (this.outputShape = t),
            (this.enableShapeUniforms = Ye(this.outputShape.length));
        let s = '';
        for (let r = 0; r < 4; r++) {
            let o = 'thisRC = rc;';
            r % 2 === 1 && (o += 'thisRC.z += 1;'),
                r > 1 && (o += 'thisRC.y += 1;'),
                (s += `
        ${o}
        ${r > 0 ? 'if(thisRC.y < rows && thisRC.z < cols){' : ''}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${r}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${r > 0 ? '}' : ''}
      `);
        }
        this.userCode = `
      ${WG(e, this.enableShapeUniforms)}
      ${this.enableShapeUniforms ? bg() : yg(t)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms ? 'outShape[1]' : t[1]};
        int cols = ${this.enableShapeUniforms ? 'outShape[2]' : t[2]};

        ${s}

        setOutput(result);
      }
    `;
    }
}
function WG(n, t) {
    return `
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${t ? MW(['r', 'c', 'd'], 'inputShape') : Io(['r', 'c', 'd'], n)}
      return ivec3(r, c, d);
    }
  `;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class UG {
    constructor(t) {
        (this.gpgpu = t),
            (this.numUsedTextures = 0),
            (this.numFreeTextures = 0),
            (this._numBytesAllocated = 0),
            (this._numBytesFree = 0),
            (this.freeTextures = {}),
            (this.usedTextures = {}),
            (this.logEnabled = !1);
    }
    acquireTexture(t, e, s) {
        const r = eb(e, s),
            o = nb(t, r, s);
        o in this.freeTextures || (this.freeTextures[o] = []),
            o in this.usedTextures || (this.usedTextures[o] = []);
        const i = tb(t, r, this.gpgpu.gl, this.gpgpu.textureConfig, s);
        if (this.freeTextures[o].length > 0) {
            this.numFreeTextures--,
                this.numUsedTextures++,
                (this._numBytesFree -= i),
                this.log();
            const l = this.freeTextures[o].pop();
            return this.usedTextures[o].push(l), l;
        }
        let a;
        return (
            r === Me.PACKED_2X2_FLOAT32
                ? (a = this.gpgpu.createPackedMatrixTexture(t[0], t[1]))
                : r === Me.PACKED_2X2_FLOAT16
                ? (a = this.gpgpu.createFloat16PackedMatrixTexture(t[0], t[1]))
                : r === Me.UNPACKED_FLOAT32
                ? (a = this.gpgpu.createFloat32MatrixTexture(t[0], t[1]))
                : r === Me.UNPACKED_FLOAT16
                ? (a = this.gpgpu.createFloat16MatrixTexture(t[0], t[1]))
                : r === Me.PACKED_4X1_UNSIGNED_BYTE &&
                  (a = this.gpgpu.createUnsignedBytesMatrixTexture(t[0], t[1])),
            this.usedTextures[o].push(a),
            this.numUsedTextures++,
            (this._numBytesAllocated += i),
            this.log(),
            a
        );
    }
    releaseTexture(t, e, s, r) {
        if (this.freeTextures == null) return;
        const o = eb(s, r),
            i = nb(e, o, r);
        i in this.freeTextures || (this.freeTextures[i] = []);
        const a = tb(e, o, this.gpgpu.gl, this.gpgpu.textureConfig, r),
            l = tt().getNumber('WEBGL_DELETE_TEXTURE_THRESHOLD');
        l !== -1 && this._numBytesAllocated > l
            ? (this.gpgpu.deleteMatrixTexture(t.texture),
              (this._numBytesAllocated -= a))
            : (this.freeTextures[i].push(t),
              this.numFreeTextures++,
              (this._numBytesFree += a)),
            this.numUsedTextures--;
        const c = this.usedTextures[i],
            u = c && c.indexOf(t);
        if (u == null || u < 0)
            throw new Error(
                'Cannot release a texture that was never provided by this texture manager'
            );
        (c[u] = c[c.length - 1]), c.pop(), this.log();
    }
    log() {
        if (!this.logEnabled) return;
        const t = this.numFreeTextures + this.numUsedTextures;
        console.log(
            'Free/Used',
            `${this.numFreeTextures} / ${this.numUsedTextures}`,
            `(${t})`
        );
        const e = this._numBytesFree / this._numBytesAllocated;
        console.log(`Bytes allocated: ${this._numBytesAllocated}`),
            console.log(
                `Bytes unused: ${this._numBytesFree} (${Math.round(100 * e)}%)`
            );
    }
    get numBytesAllocated() {
        return this._numBytesAllocated;
    }
    get numBytesFree() {
        return this._numBytesFree;
    }
    getNumUsedTextures() {
        return this.numUsedTextures;
    }
    getNumFreeTextures() {
        return this.numFreeTextures;
    }
    dispose() {
        if (this.freeTextures != null) {
            for (const t in this.freeTextures)
                this.freeTextures[t].forEach((e) => {
                    this.gpgpu.deleteMatrixTexture(e.texture);
                });
            for (const t in this.usedTextures)
                this.usedTextures[t].forEach((e) => {
                    this.gpgpu.deleteMatrixTexture(e.texture);
                });
            (this.freeTextures = null),
                (this.usedTextures = null),
                (this.numUsedTextures = 0),
                (this.numFreeTextures = 0),
                (this._numBytesAllocated = 0),
                (this._numBytesFree = 0);
        }
    }
}
function GG(n, t) {
    const e = n;
    if (t === e.R32F) return 4;
    if (t === e.R16F) return 2;
    if (t === e.RGBA32F) return 16;
    if (t === n.RGBA) return 16;
    if (t === e.RGBA16F) return 8;
    if (t === e.RGBA8) return 4;
    throw new Error(`Unknown internal format ${t}`);
}
function tb(n, t, e, s, r) {
    const o = HG(t, s);
    let i;
    if (r) {
        const [l, c] = wi(n[0], n[1]);
        i = l * c;
    } else {
        const [l, c] = xl(n[0], n[1]);
        i = l * c;
    }
    const a = GG(e, o);
    return i * a;
}
function HG(n, t) {
    switch (n) {
        case Me.PACKED_2X2_FLOAT32:
            return nS(t);
        case Me.PACKED_2X2_FLOAT16:
            return sS(t);
        case Me.UNPACKED_FLOAT32:
            return Qk(t);
        case Me.UNPACKED_FLOAT16:
            return tS(t);
        case Me.PACKED_4X1_UNSIGNED_BYTE:
            return eS(t);
        default:
            throw new Error(`Unknown physical texture type ${n}`);
    }
}
function jG(n) {
    return tt().getBool('WEBGL_RENDER_FLOAT32_ENABLED')
        ? n
            ? Me.PACKED_2X2_FLOAT32
            : Me.UNPACKED_FLOAT32
        : n
        ? Me.PACKED_2X2_FLOAT16
        : Me.UNPACKED_FLOAT16;
}
function eb(n, t) {
    if (n === An.UPLOAD) return Me.PACKED_2X2_FLOAT32;
    if (n === An.RENDER || n == null) return jG(t);
    if (n === An.DOWNLOAD || n === An.PIXELS)
        return Me.PACKED_4X1_UNSIGNED_BYTE;
    throw new Error(`Unknown logical texture type ${n}`);
}
function nb(n, t, e) {
    return `${n[0]}_${n[1]}_${t}_${e}`;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class vs {
    constructor(t, e) {
        (this.variableNames = ['A']),
            (this.outputShape = t),
            (this.enableShapeUniforms = Ye(this.outputShape.length)),
            (this.userCode = `
      float unaryOperation(float x) {
        ${e}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `);
    }
}
const ns = 'if (isnan(x)) return x;',
    qG = 'return x;',
    sb = 'return abs(x);',
    KG = 'return (x >= 0.0) ? x : (exp(x) - 1.0);',
    XG =
        ns +
        `
  return (x < 0.0) ? 0.0 : x;
`,
    YG =
        ns +
        `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,
    nr = 'return x;',
    ZG = 'return 1.0 / (1.0 + exp(-1.0 * x));';
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const JG = 'return x;',
    QG = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,
    t6 = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,
    e6 = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,
    n6 = 'return 1.0 / (1.0 + exp(-1.0 * x));';
class ir {
    constructor(t, e) {
        (this.variableNames = ['A']),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = t),
            (this.enableShapeUniforms = Ye(this.outputShape.length)),
            (this.userCode = `
      vec4 unaryOperation(vec4 x) {
        ${e}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class s6 {
    constructor(t) {
        (this.variableNames = ['A']),
            (this.packedInputs = !0),
            (this.packedOutput = !1),
            (this.outputShape = t),
            (this.enableShapeUniforms = Ye(this.outputShape.length));
        const e = t.length,
            s = en('rc', e),
            r = Zt(e),
            o = MG(e, s),
            i = s.slice(-2),
            a = e <= 1 ? 'rc' : `vec2(${i.join(',')})`;
        this.userCode = `
      void main() {
        ${r} rc = getOutputCoords();
        vec4 packedInput = getA(${o});

        setOutput(getChannel(packedInput, ${a}));
      }
    `;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const r6 = nm,
    o6 = 1e-7,
    i6 = 1e-4,
    zl = {};
function a6(n) {
    return n in zl || (zl[n] = {}), zl[n];
}
const l6 = tt().getNumber('CPU_HANDOFF_SIZE_THRESHOLD'),
    c6 = 600;
function u6() {
    return tt().global.screen == null
        ? 1024
        : (tt().global.screen.height *
              tt().global.screen.width *
              window.devicePixelRatio *
              c6) /
              1024 /
              1024;
}
class Ih extends ap {
    nextDataId() {
        return Ih.nextDataId++;
    }
    constructor(t) {
        if (
            (super(),
            (this.pendingRead = new WeakMap()),
            (this.pendingDisposal = new WeakSet()),
            (this.dataRefCount = new WeakMap()),
            (this.numBytesInGPU = 0),
            (this.uploadWaitMs = 0),
            (this.downloadWaitMs = 0),
            (this.lastGlFlushTime = 0),
            (this.warnedAboutMemory = !1),
            (this.pendingDeletes = 0),
            (this.disposed = !1),
            !tt().getBool('HAS_WEBGL'))
        )
            throw new Error('WebGL is not supported on this device');
        let e;
        if (t != null) {
            if (t instanceof Zh) e = t;
            else {
                const s = ps(tt().getNumber('WEBGL_VERSION'), t);
                e = new Zh(s);
            }
            (this.binaryCache = {}), (this.gpgpuCreatedLocally = !1);
        } else {
            const s = ps(tt().getNumber('WEBGL_VERSION'));
            (e = new Zh(s)),
                (this.binaryCache = a6(tt().getNumber('WEBGL_VERSION'))),
                (this.gpgpuCreatedLocally = !0);
        }
        (this.gpgpu = e),
            (this.canvas = this.gpgpu.gl.canvas),
            (this.textureManager = new UG(this.gpgpu)),
            (this.numMBBeforeWarning = u6()),
            (this.texData = new _b(this, ys()));
    }
    numDataIds() {
        return this.texData.numDataIds() - this.pendingDeletes;
    }
    writeTexture(t, e, s, r, o, i) {
        const a = this.makeTensorInfo(e, s),
            l = this.texData.get(a.dataId);
        (l.isPacked = !1),
            (l.texture = { texture: t, texShape: [r, o] }),
            (l.texShape = [r, o]);
        const c = Ll(e),
            u = new Qy(c, !1, i),
            h = this.runWebGLProgram(u, [a], s, [[r, o]]);
        return (
            (h.shape = e),
            (l.texture = null),
            this.disposeIntermediateTensorInfo(a),
            h.dataId
        );
    }
    write(t, e, s) {
        if (
            ((tt().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||
                tt().getBool('DEBUG')) &&
                this.checkNumericalProblems(t),
            s === 'complex64' && t != null)
        )
            throw new Error(
                'Cannot write to a complex64 dtype. Please use tf.complex(real, imag).'
            );
        const r = { id: this.nextDataId() };
        return (
            this.texData.set(r, {
                shape: e,
                dtype: s,
                values: t,
                usage: An.UPLOAD,
                refCount: 1,
            }),
            r
        );
    }
    refCount(t) {
        return this.texData.has(t) ? this.texData.get(t).refCount : 0;
    }
    incRef(t) {
        const e = this.texData.get(t);
        e.refCount++;
    }
    decRef(t) {
        if (this.texData.has(t)) {
            const e = this.texData.get(t);
            e.refCount--;
        }
    }
    move(t, e, s, r, o) {
        if (
            (tt().getBool('DEBUG') && this.checkNumericalProblems(e),
            r === 'complex64')
        )
            throw new Error(
                'Cannot write to a complex64 dtype. Please use tf.complex(real, imag).'
            );
        this.texData.set(t, {
            shape: s,
            dtype: r,
            values: e,
            usage: An.UPLOAD,
            refCount: o,
        });
    }
    disposeIntermediateTensorInfo(t) {
        this.disposeData(t.dataId);
    }
    readSync(t) {
        const e = this.texData.get(t),
            {
                values: s,
                dtype: r,
                complexTensorInfos: o,
                slice: i,
                shape: a,
                isPacked: l,
            } = e;
        if (i != null) {
            let d;
            l ? (d = new ir(a, nr)) : (d = new vs(a, nr));
            const p = this.runWebGLProgram(
                    d,
                    [{ dataId: t, shape: a, dtype: r }],
                    r
                ),
                f = this.readSync(p.dataId);
            return this.disposeIntermediateTensorInfo(p), f;
        }
        if (s != null) return this.convertAndCacheOnCPU(t);
        if (r === 'string') return s;
        const c = this.activeTimers != null;
        let u;
        c && (u = on());
        let h;
        if (r === 'complex64') {
            const d = this.readSync(o.real.dataId),
                p = this.readSync(o.imag.dataId);
            h = Ks(d, p);
        } else h = this.getValuesFromTexture(t);
        return (
            c && (this.downloadWaitMs += on() - u),
            this.convertAndCacheOnCPU(t, h)
        );
    }
    async read(t) {
        if (this.pendingRead.has(t)) {
            const f = this.pendingRead.get(t);
            return new Promise((m) => f.push(m));
        }
        const e = this.texData.get(t),
            {
                values: s,
                shape: r,
                slice: o,
                dtype: i,
                complexTensorInfos: a,
                isPacked: l,
            } = e;
        if (o != null) {
            let f;
            l ? (f = new ir(r, nr)) : (f = new vs(r, nr));
            const m = this.runWebGLProgram(
                    f,
                    [{ dataId: t, shape: r, dtype: i }],
                    i
                ),
                g = this.read(m.dataId);
            return this.disposeIntermediateTensorInfo(m), g;
        }
        if (s != null) return this.convertAndCacheOnCPU(t);
        if (
            tt().getBool('DEBUG') &&
            !tt().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&
            tt().getNumber('WEBGL_VERSION') === 2
        )
            throw new Error(
                'tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.'
            );
        let c = null,
            u;
        if (i !== 'complex64' && tt().get('WEBGL_BUFFER_SUPPORTED')) {
            u = this.decode(t);
            const f = this.texData.get(u.dataId);
            c = this.gpgpu.createBufferFromTexture(f.texture.texture, ...Dl(r));
        }
        this.pendingRead.set(t, []),
            i !== 'complex64' && (await this.gpgpu.createAndWaitForFence());
        let h;
        if (i === 'complex64') {
            const f = await Promise.all([
                    this.read(a.real.dataId),
                    this.read(a.imag.dataId),
                ]),
                m = f[0],
                g = f[1];
            h = Ks(m, g);
        } else if (c == null) h = this.getValuesFromTexture(t);
        else {
            const f = rt(r);
            h = this.gpgpu.downloadFloat32MatrixFromBuffer(c, f);
        }
        if ((u != null && this.disposeIntermediateTensorInfo(u), c != null)) {
            const f = this.gpgpu.gl;
            vt(f, () => f.deleteBuffer(c));
        }
        const d = this.convertAndCacheOnCPU(t, h),
            p = this.pendingRead.get(t);
        return (
            this.pendingRead.delete(t),
            p.forEach((f) => f(d)),
            this.pendingDisposal.has(t) &&
                (this.pendingDisposal.delete(t),
                this.disposeData(t) && ys().removeDataId(t, this),
                this.pendingDeletes--),
            d
        );
    }
    readToGPU(t, e = {}) {
        const s = this.texData.get(t),
            {
                values: r,
                shape: o,
                slice: i,
                dtype: a,
                isPacked: l,
                texture: c,
            } = s;
        if (a === 'complex64')
            throw new Error(
                'Does not support reading texture for complex64 dtype.'
            );
        if (i != null) {
            let p;
            l ? (p = new ir(o, nr)) : (p = new vs(o, nr));
            const f = this.runWebGLProgram(
                    p,
                    [{ dataId: t, shape: o, dtype: a }],
                    a
                ),
                m = this.readToGPU(f, e);
            return this.disposeIntermediateTensorInfo(f), m;
        }
        if (c == null)
            throw r != null
                ? new Error('Data is not on GPU but on CPU.')
                : new Error('There is no data on GPU or CPU.');
        const u = this.decode(t, e.customTexShape),
            h = ys().makeTensorFromTensorInfo(u),
            d = this.texData.get(u.dataId);
        return Object.assign({ tensorRef: h }, d.texture);
    }
    bufferSync(t) {
        const e = this.readSync(t.dataId);
        if (t.dtype === 'string')
            try {
                const s = e.map((r) => dr(r));
                return Pt(t.shape, t.dtype, s);
            } catch {
                throw new Error(
                    'Failed to decode encoded string bytes into utf-8'
                );
            }
        return Pt(t.shape, t.dtype, e);
    }
    checkNumericalProblems(t) {
        if (t != null)
            for (let e = 0; e < t.length; e++) {
                const s = t[e];
                if (!pW(s))
                    throw tt().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')
                        ? Error(
                              `The value ${s} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`
                          )
                        : Error(
                              `The value ${s} cannot be represented on this device.`
                          );
            }
    }
    getValuesFromTexture(t) {
        const { shape: e, dtype: s, isPacked: r } = this.texData.get(t),
            o = rt(e);
        if (tt().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {
            const d = this.decode(t),
                p = this.texData.get(d.dataId),
                f = this.gpgpu
                    .downloadMatrixFromPackedTexture(
                        p.texture.texture,
                        ...Dl(e)
                    )
                    .subarray(0, o);
            return this.disposeIntermediateTensorInfo(d), f;
        }
        const i = tt().getBool('WEBGL_PACK') && r === !0,
            a = i ? Ll(e) : e,
            l = i ? new EU(a) : new TU(a),
            c = this.runWebGLProgram(
                l,
                [{ shape: a, dtype: s, dataId: t }],
                'float32'
            ),
            u = this.texData.get(c.dataId),
            h = this.gpgpu
                .downloadByteEncodedFloatMatrixFromOutputTexture(
                    u.texture.texture,
                    u.texShape[0],
                    u.texShape[1]
                )
                .subarray(0, o);
        return this.disposeIntermediateTensorInfo(c), h;
    }
    timerAvailable() {
        return (
            tt().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0
        );
    }
    time(t) {
        const e = this.activeTimers,
            s = [];
        let r = !1;
        this.programTimersStack == null
            ? ((this.programTimersStack = s), (r = !0))
            : this.activeTimers.push(s),
            (this.activeTimers = s),
            t();
        const o = so(this.activeTimers.map((l) => l.query)).filter(
                (l) => l != null
            ),
            i = so(this.activeTimers.map((l) => l.name)).filter(
                (l) => l != null
            );
        (this.activeTimers = e), r && (this.programTimersStack = null);
        const a = {
            uploadWaitMs: this.uploadWaitMs,
            downloadWaitMs: this.downloadWaitMs,
            kernelMs: null,
            wallMs: null,
        };
        return (async () => {
            if (
                tt().getNumber(
                    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE'
                ) > 0
            ) {
                const l = await Promise.all(o);
                (a.kernelMs = AI(l)),
                    (a.getExtraProfileInfo = () =>
                        l
                            .map((c, u) => ({ name: i[u], ms: c }))
                            .map((c) => `${c.name}: ${c.ms}`)
                            .join(', '));
            } else
                a.kernelMs = {
                    error: 'WebGL query timers are not supported in this environment.',
                };
            return (this.uploadWaitMs = 0), (this.downloadWaitMs = 0), a;
        })();
    }
    memory() {
        return {
            unreliable: !1,
            numBytesInGPU: this.numBytesInGPU,
            numBytesInGPUAllocated: this.textureManager.numBytesAllocated,
            numBytesInGPUFree: this.textureManager.numBytesFree,
        };
    }
    startTimer() {
        return tt().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') >
            0
            ? this.gpgpu.beginQuery()
            : { startMs: on(), endMs: null };
    }
    endTimer(t) {
        return tt().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') >
            0
            ? (this.gpgpu.endQuery(), t)
            : ((t.endMs = on()), t);
    }
    async getQueryTime(t) {
        if (tt().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0)
            return this.gpgpu.waitForQueryAndGetTime(t);
        const e = t;
        return e.endMs - e.startMs;
    }
    disposeData(t, e = !1) {
        if (this.pendingDisposal.has(t)) return !1;
        if (!this.texData.has(t)) return !0;
        if (
            (e
                ? (this.texData.get(t).refCount = 0)
                : this.texData.get(t).refCount--,
            !e && this.texData.get(t).refCount > 0)
        )
            return !1;
        if (this.pendingRead.has(t))
            return this.pendingDisposal.add(t), this.pendingDeletes++, !1;
        this.releaseGPUData(t);
        const { complexTensorInfos: s } = this.texData.get(t);
        return (
            s != null &&
                (this.disposeData(s.real.dataId, e),
                this.disposeData(s.imag.dataId, e)),
            this.texData.delete(t),
            !0
        );
    }
    releaseGPUData(t) {
        const {
                texture: e,
                dtype: s,
                texShape: r,
                usage: o,
                isPacked: i,
                slice: a,
            } = this.texData.get(t),
            l = (a && a.origDataId) || t,
            c = this.dataRefCount.get(l);
        c > 1
            ? this.dataRefCount.set(l, c - 1)
            : (this.dataRefCount.delete(l),
              e != null &&
                  ((this.numBytesInGPU -= this.computeBytes(r, s)),
                  this.textureManager.releaseTexture(e, r, o, i)));
        const u = this.texData.get(t);
        (u.texture = null),
            (u.texShape = null),
            (u.isPacked = !1),
            (u.slice = null);
    }
    getTexture(t) {
        return this.uploadToGPU(t), this.texData.get(t).texture.texture;
    }
    getDataInfo(t) {
        return this.texData.get(t);
    }
    shouldExecuteOnCPU(t, e = l6) {
        return (
            tt().getBool('WEBGL_CPU_FORWARD') &&
            t.every(
                (s) =>
                    this.texData.get(s.dataId).texture == null &&
                    rt(s.shape) < e
            )
        );
    }
    getGPGPUContext() {
        return this.gpgpu;
    }
    where(t) {
        En(
            'tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead'
        );
        const e = t.dataSync();
        return r6(t.shape, e);
    }
    packedUnaryOp(t, e, s) {
        const r = new ir(t.shape, e),
            o = this.compileAndRun(r, [t], s);
        return ys().makeTensorFromTensorInfo(o);
    }
    abs(t) {
        if (this.shouldExecuteOnCPU([t]) && t.dtype !== 'complex64') {
            const r = oS(this.texData.get(t.dataId).values);
            return this.makeOutput(t.shape, t.dtype, r);
        }
        if (tt().getBool('WEBGL_PACK_UNARY_OPERATIONS'))
            return this.packedUnaryOp(t, sb, t.dtype);
        const e = new vs(t.shape, sb),
            s = this.compileAndRun(e, [t]);
        return ys().makeTensorFromTensorInfo(s);
    }
    makeTensorInfo(t, e, s) {
        let r;
        if (e === 'string' && s != null && s.length > 0 && sa(s[0])) {
            const o = s.map((i) => lr(i));
            r = this.write(o, t, e);
        } else r = this.write(s, t, e);
        return (
            (this.texData.get(r).usage = null),
            { dataId: r, shape: t, dtype: e }
        );
    }
    makeOutput(t, e, s) {
        return ys().makeTensorFromTensorInfo(
            this.makeTensorInfo(t, e, s),
            this
        );
    }
    unpackTensor(t) {
        const e = new s6(t.shape);
        return this.runWebGLProgram(e, [t], t.dtype);
    }
    packTensor(t) {
        const e = new VG(t.shape),
            s = !0;
        return this.runWebGLProgram(e, [t], t.dtype, null, s);
    }
    packedReshape(t, e) {
        const s = [ai(t.shape), ...li(t.shape)],
            r = { dtype: t.dtype, shape: s, dataId: t.dataId },
            o = [ai(e), ...li(e)],
            i = new lS(o, s),
            a = !0,
            l = [s],
            c = this.runWebGLProgram(i, [r], t.dtype, l, a);
        return { dataId: c.dataId, shape: e, dtype: c.dtype };
    }
    decode(t, e) {
        const s = this.texData.get(t),
            { isPacked: r, shape: o, dtype: i } = s;
        if (e != null) {
            const d = rt(o),
                p = e[0] * e[1] * 4;
            _(
                d <= p,
                () =>
                    'customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.'
            );
        }
        const a = Ll(o);
        let l;
        r ? (l = new NU(a)) : (l = new $U(a));
        const c = !0,
            u = [e ?? Dl(a)],
            h = this.runWebGLProgram(
                l,
                [{ shape: a, dtype: i, dataId: t }],
                i,
                u,
                c,
                e
            );
        return { dtype: i, shape: o, dataId: h.dataId };
    }
    runWebGLProgram(t, e, s, r, o = !1, i) {
        const a = this.makeTensorInfo(t.outputShape, s),
            l = this.texData.get(a.dataId);
        if (
            (t.packedOutput && (l.isPacked = !0),
            t.outPackingScheme === Ji.DENSE)
        ) {
            const y = i ?? Dl(t.outputShape);
            l.texShape = y.map((b) => b * 2);
        }
        if (
            (t.outTexUsage != null && (l.usage = t.outTexUsage),
            rt(a.shape) === 0)
        )
            return (l.values = Ve(a.dtype, 0)), a;
        const c = [],
            u = e.map((y) => {
                if (y.dtype === 'complex64')
                    throw new Error(
                        'GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.'
                    );
                let b = this.texData.get(y.dataId);
                if (b.texture == null) {
                    if (
                        !t.packedInputs &&
                        rt(y.shape) <=
                            tt().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')
                    )
                        return {
                            shape: y.shape,
                            texData: null,
                            isUniform: !0,
                            uniformValues: b.values,
                        };
                    t.packedInputs && ((b.isPacked = !0), (b.shape = y.shape));
                }
                if (
                    (this.uploadToGPU(y.dataId),
                    !!b.isPacked != !!t.packedInputs)
                )
                    (y = b.isPacked
                        ? this.unpackTensor(y)
                        : this.packTensor(y)),
                        c.push(y),
                        (b = this.texData.get(y.dataId));
                else if (b.isPacked && !$c(b.shape, y.shape)) {
                    const w = y,
                        x = y.shape;
                    (y.shape = b.shape),
                        (y = this.packedReshape(y, x)),
                        c.push(y),
                        (b = this.texData.get(y.dataId)),
                        (w.shape = x);
                }
                return { shape: y.shape, texData: b, isUniform: !1 };
            });
        this.uploadToGPU(a.dataId);
        const h = { shape: a.shape, texData: l, isUniform: !1 },
            d = CU(t, u, h),
            p = this.getAndSaveBinary(d, () => SU(this.gpgpu, t, u, h)),
            f = this.activeTimers != null;
        let m;
        f && (m = this.startTimer()),
            tt().get('ENGINE_COMPILE_ONLY') || IU(this.gpgpu, p, u, h, r),
            c.forEach((y) => this.disposeIntermediateTensorInfo(y)),
            f &&
                ((m = this.endTimer(m)),
                this.activeTimers.push({
                    name: t.constructor.name,
                    query: this.getQueryTime(m),
                }));
        const g = tt().getNumber('WEBGL_FLUSH_THRESHOLD');
        if (g > 0) {
            const y = on();
            y - this.lastGlFlushTime > g &&
                (this.gpgpu.gl.flush(), (this.lastGlFlushTime = y));
        }
        if (!tt().getBool('WEBGL_LAZILY_UNPACK') && l.isPacked && o === !1) {
            const y = this.unpackTensor(a);
            return this.disposeIntermediateTensorInfo(a), y;
        }
        return a;
    }
    compileAndRun(t, e, s, r, o = !1) {
        return (s = s || e[0].dtype), this.runWebGLProgram(t, e, s, r, o);
    }
    getAndSaveBinary(t, e) {
        return (
            t in this.binaryCache || (this.binaryCache[t] = e()),
            this.binaryCache[t]
        );
    }
    getTextureManager() {
        return this.textureManager;
    }
    dispose() {
        this.disposed ||
            (tt().getBool('IS_TEST') ||
                Object.keys(this.binaryCache).forEach((e) => {
                    this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),
                        delete this.binaryCache[e];
                }),
            this.textureManager.dispose(),
            this.canvas != null &&
            typeof HTMLCanvasElement < 'u' &&
            this.canvas instanceof HTMLCanvasElement
                ? this.canvas.remove()
                : (this.canvas = null),
            this.gpgpuCreatedLocally &&
                ((this.gpgpu.program = null), this.gpgpu.dispose()),
            (this.disposed = !0));
    }
    floatPrecision() {
        return (
            this.floatPrecisionValue == null &&
                (this.floatPrecisionValue = Y(() => {
                    if (!tt().get('WEBGL_RENDER_FLOAT32_ENABLED')) {
                        const t = tt().getBool('DEBUG');
                        tt().set('DEBUG', !1);
                        const e = this.abs(At(1e-8)).dataSync()[0];
                        if ((tt().set('DEBUG', t), e > 0)) return 32;
                    }
                    return 16;
                })),
            this.floatPrecisionValue
        );
    }
    epsilon() {
        return this.floatPrecision() === 32 ? o6 : i6;
    }
    uploadToGPU(t) {
        const e = this.texData.get(t),
            {
                shape: s,
                dtype: r,
                values: o,
                texture: i,
                usage: a,
                isPacked: l,
            } = e;
        if (i != null) return;
        const c = this.activeTimers != null;
        let u;
        c && (u = on());
        let h = e.texShape;
        if ((h == null && ((h = AW(s, l)), (e.texShape = h)), o != null)) {
            const d = Ll(s);
            let p,
                f = h[1],
                m = h[0];
            const g = o instanceof Uint8Array || o instanceof Uint8ClampedArray;
            (l || !g) && ([f, m] = wi(h[0], h[1])),
                l ? (p = new AU(d, g)) : (p = new Qy(d, g));
            const y = g ? [m, f] : h,
                b = this.makeTensorInfo(y, r),
                w = this.texData.get(b.dataId);
            g ? (w.usage = An.PIXELS) : (w.usage = An.UPLOAD),
                (w.texShape = y),
                this.gpgpu.uploadDenseMatrixToTexture(
                    this.getTexture(b.dataId),
                    f,
                    m,
                    o
                );
            const x = [[m, f]],
                v = !0,
                C = this.runWebGLProgram(p, [b], r, x, v),
                $ = this.texData.get(C.dataId);
            (e.texShape = $.texShape),
                (e.isPacked = $.isPacked),
                (e.usage = $.usage),
                tt().get('ENGINE_COMPILE_ONLY')
                    ? this.disposeData(C.dataId)
                    : ((e.texture = $.texture),
                      (e.values = null),
                      this.texData.delete(C.dataId)),
                this.disposeIntermediateTensorInfo(b),
                c && (this.uploadWaitMs += on() - u);
        } else {
            const d = this.acquireTexture(h, a, r, l);
            e.texture = d;
        }
    }
    convertAndCacheOnCPU(t, e) {
        const s = this.texData.get(t),
            { dtype: r } = s;
        return e != null && (s.values = h6(e, r)), s.values;
    }
    acquireTexture(t, e, s, r) {
        if (
            ((this.numBytesInGPU += this.computeBytes(t, s)),
            !this.warnedAboutMemory &&
                this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024)
        ) {
            const o = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
            (this.warnedAboutMemory = !0),
                console.warn(
                    `High memory usage in GPU: ${o} MB, most likely due to a memory leak`
                );
        }
        return this.textureManager.acquireTexture(t, e, r);
    }
    computeBytes(t, e) {
        return t[0] * t[1] * Jl(e);
    }
    checkCompileCompletion() {
        for (const [, t] of Object.entries(this.binaryCache))
            this.checkCompletion_(t);
    }
    async checkCompileCompletionAsync() {
        const t = [];
        if (this.gpgpu.parallelCompilationExtension) {
            for (const [, e] of Object.entries(this.binaryCache))
                t.push(this.checkCompletionAsync_(e));
            return Promise.all(t);
        } else {
            for (const [, e] of Object.entries(this.binaryCache)) {
                const s = new Promise((r) => {
                    try {
                        this.checkCompletion_(e), r(!0);
                    } catch (o) {
                        throw o;
                    }
                });
                t.push(s);
            }
            return Promise.all(t);
        }
    }
    async checkCompletionAsync_(t) {
        return this.gpgpu.gl.getProgramParameter(
            t.webGLProgram,
            this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR
        )
            ? this.checkCompletion_(t)
            : (await Xx(), this.checkCompletionAsync_(t));
    }
    checkCompletion_(t) {
        if (
            this.gpgpu.gl.getProgramParameter(
                t.webGLProgram,
                this.gpgpu.gl.LINK_STATUS
            ) === !1
        )
            throw (
                (console.log(this.gpgpu.gl.getProgramInfoLog(t.webGLProgram)),
                this.gpgpu.gl.getShaderParameter(
                    t.fragmentShader,
                    this.gpgpu.gl.COMPILE_STATUS
                ) === !1
                    ? (qk(
                          t.source,
                          this.gpgpu.gl.getShaderInfoLog(t.fragmentShader)
                      ),
                      new Error('Failed to compile fragment shader.'))
                    : new Error('Failed to link vertex and fragment shaders.'))
            );
        return !0;
    }
    getUniformLocations() {
        for (const t of Object.values(this.binaryCache)) {
            this.gpgpu.buildVao(t.webGLProgram);
            const {
                variablesLocations: e,
                customUniformLocations: s,
                infLoc: r,
                nanLoc: o,
                outShapeLocation: i,
                outShapeStridesLocation: a,
                outTexShapeLocation: l,
            } = Jk(this.gpgpu, t.program, t.webGLProgram);
            (t.variablesLocations = e),
                (t.customUniformLocations = s),
                (t.infLoc = r),
                (t.nanLoc = o),
                (t.outShapeLocation = i),
                (t.outShapeStridesLocation = a),
                (t.outTexShapeLocation = l);
        }
    }
    createTensorFromGPUData(t, e, s) {
        t.channels = t.channels || 'RGBA';
        const { texture: r, height: o, width: i, channels: a } = t,
            l = ys().backend;
        if (!l.gpgpu.gl.isTexture(r))
            throw new Error(
                "The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'."
            );
        const c = l.writeTexture(r, e, s, o, i, a);
        return ys().makeTensorFromDataId(c, e, s, l);
    }
}
Ih.nextDataId = 0;
function h6(n, t) {
    if (t === 'float32' || t === 'complex64') return n;
    if (t === 'int32' || t === 'bool') {
        const e =
            t === 'int32' ? new Int32Array(n.length) : new Uint8Array(n.length);
        for (let s = 0; s < e.length; ++s) e[s] = Math.round(n[s]);
        return e;
    } else throw new Error(`Unknown dtype ${t}`);
}
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ e0() && b0('webgl', () => new Ih(), 2);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const vg = `
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;
class fo {
    constructor(t, e, s) {
        (this.variableNames = ['A', 'B']),
            (this.outputShape = Dt(e, s)),
            (this.enableShapeUniforms = Ye(this.outputShape.length)),
            (this.userCode = `
      float binaryOperation(float a, float b) {
        ${t}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const $o = `
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`;
class Ci {
    constructor(t, e, s, r = !1) {
        (this.variableNames = ['A', 'B']),
            (this.supportsBroadcasting = !0),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = Dt(e, s));
        const o = this.outputShape.length;
        this.enableShapeUniforms = Ye(o);
        let i = '';
        if (r)
            if (o === 0 || rt(this.outputShape) === 1)
                i = `
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;
            else if (
                ((i = `
          ${Zt(o)} coords = getOutputCoords();
        `),
                o === 1)
            )
                this.enableShapeUniforms
                    ? (i += `
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `)
                    : (i += `
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `);
            else {
                const l = en('coords', o);
                this.enableShapeUniforms
                    ? (i += `
            bool nextRowOutOfBounds =
              (${l[o - 2]} + 1) >= outShape[${o} - 2];
            bool nextColOutOfBounds =
              (${l[o - 1]} + 1) >= outShape[${o} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `)
                    : (i += `
            bool nextRowOutOfBounds =
              (${l[o - 2]} + 1) >= ${this.outputShape[o - 2]};
            bool nextColOutOfBounds =
              (${l[o - 1]} + 1) >= ${this.outputShape[o - 1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `);
            }
        this.userCode = `
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${t}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${i}

        setOutput(result);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Cn(n) {
    const { inputs: t, backend: e } = n,
        { x: s } = t;
    return (
        e.incRef(s.dataId), { dataId: s.dataId, shape: s.shape, dtype: s.dtype }
    );
}
const d6 = { kernelName: Ia, backendName: 'webgl', kernelFunc: Cn };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Or(n) {
    const { inputs: t, backend: e } = n,
        { real: s, imag: r } = t,
        o = e.makeTensorInfo(s.shape, 'complex64'),
        i = e.texData.get(o.dataId),
        a = Cn({ inputs: { x: s }, backend: e }),
        l = Cn({ inputs: { x: r }, backend: e });
    return (i.complexTensorInfos = { real: a, imag: l }), o;
}
const p6 = { kernelName: yp, backendName: 'webgl', kernelFunc: Or };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const cS = 'return (a < 0.) ? b * a : a;',
    uS = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function f6(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { alpha: o } = s,
        i = e.makeTensorInfo([], 'float32', Ir(o, 'float32')),
        a = tt().getBool('WEBGL_PACK_BINARY_OPERATIONS')
            ? new Ci(uS, r.shape, i.shape)
            : new fo(cS, r.shape, i.shape),
        l = e.runWebGLProgram(a, [r, i], 'float32');
    return e.disposeIntermediateTensorInfo(i), l;
}
const m6 = { kernelName: nu, backendName: 'webgl', kernelFunc: f6 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const hS = 'return (a < 0.) ? b * a : a;',
    dS = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function g6(n) {
    const { inputs: t, backend: e } = n,
        { x: s, alpha: r } = t,
        o = tt().getBool('WEBGL_PACK_BINARY_OPERATIONS')
            ? new Ci(dS, s.shape, r.shape)
            : new fo(hS, s.shape, r.shape);
    return e.runWebGLProgram(o, [s, r], 'float32');
}
const y6 = { kernelName: vu, backendName: 'webgl', kernelFunc: g6 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const $i = 'if (isnan(x)) return x;';
function Kt({ opSnippet: n, packedOpSnippet: t, cpuKernelImpl: e, dtype: s }) {
    return ({ inputs: r, backend: o }) => {
        const { x: i } = r,
            a = o,
            l = s || i.dtype;
        if (a.shouldExecuteOnCPU([i]) && e != null) {
            const h = a.texData.get(i.dataId),
                d = e(h.values, l);
            return a.makeTensorInfo(i.shape, l, d);
        }
        const c = tt().getBool('WEBGL_PACK_UNARY_OPERATIONS') && t != null;
        let u;
        return (
            c ? (u = new ir(i.shape, t)) : (u = new vs(i.shape, n)),
            a.runWebGLProgram(u, [i], l)
        );
    };
}
function He({
    opSnippet: n,
    packedOpSnippet: t,
    checkOutOfBounds: e = !1,
    supportsComplex: s = !1,
    cpuKernelImpl: r,
    dtype: o,
}) {
    return ({ inputs: i, backend: a }) => {
        const { a: l, b: c } = i,
            u = a;
        if (s && l.dtype === 'complex64') {
            const f = u.texData.get(l.dataId),
                m = u.texData.get(c.dataId),
                [g, y] = [
                    [f.complexTensorInfos.real, m.complexTensorInfos.real],
                    [f.complexTensorInfos.imag, m.complexTensorInfos.imag],
                ].map((w) => {
                    const [x, v] = w,
                        C = {
                            dataId: x.dataId,
                            dtype: x.dtype,
                            shape: l.shape,
                        },
                        $ = {
                            dataId: v.dataId,
                            dtype: v.dtype,
                            shape: c.shape,
                        },
                        T = new fo(n, l.shape, c.shape);
                    return u.runWebGLProgram(T, [C, $], vn(x.dtype, v.dtype));
                }),
                b = Or({ inputs: { real: g, imag: y }, backend: u });
            return (
                u.disposeIntermediateTensorInfo(g),
                u.disposeIntermediateTensorInfo(y),
                b
            );
        }
        const h = o || vn(l.dtype, c.dtype);
        if (
            (l.dtype === 'string' ||
                c.dtype === 'string' ||
                u.shouldExecuteOnCPU([l, c])) &&
            r != null
        ) {
            const f = u.texData.get(l.dataId).values,
                m = u.texData.get(c.dataId).values,
                g = l.dtype === 'string' ? Xs(f) : f,
                y = l.dtype === 'string' ? Xs(m) : m,
                [b, w] = r(l.shape, c.shape, g, y, h),
                x = u.makeTensorInfo(w, h),
                v = u.texData.get(x.dataId);
            return (v.values = b), x;
        }
        const d = tt().getBool('WEBGL_PACK_BINARY_OPERATIONS') && t != null;
        let p;
        return (
            d
                ? (p = new Ci(t, l.shape, c.shape, e))
                : (p = new fo(n, l.shape, c.shape)),
            u.runWebGLProgram(p, [l, c], h)
        );
    };
}
function Qi(n, t = !1) {
    if (n === 'linear') return t ? JG : qG;
    if (n === 'relu') return t ? t6 : XG;
    if (n === 'elu') return t ? QG : KG;
    if (n === 'relu6') return t ? e6 : YG;
    if (n === 'prelu') return t ? dS : hS;
    if (n === 'leakyrelu') return t ? uS : cS;
    if (n === 'sigmoid') return t ? n6 : ZG;
    throw new Error(
        `Activation ${n} has not been implemented for the WebGL backend.`
    );
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class pS {
    constructor(t, e, s, r = !1, o = !1, i = !1, a = null, l = !1, c = !1) {
        (this.variableNames = ['matrixA', 'matrixB']),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = s),
            (this.enableShapeUniforms = Ye(this.outputShape.length));
        const u = r ? t[1] : t[2],
            h = Math.ceil(u / 2),
            d = r ? 'i * 2, rc.y' : 'rc.y, i * 2',
            p = o ? 'rc.z, i * 2' : 'i * 2, rc.z',
            f = r ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'],
            m = o ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];
        let g = '',
            y = '';
        a &&
            (l
                ? (g = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${a}
        }`)
                : c
                ? (g = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${a}
        }`)
                : (g = `vec4 activation(vec4 x) {
          ${a}
        }`),
            (y = 'result = activation(result);'));
        const b = i ? 'result += getBiasAtOutCoords();' : '';
        i && this.variableNames.push('bias'),
            l && this.variableNames.push('preluActivationWeights'),
            c && this.variableNames.push('leakyreluAlpha');
        let w = 'rc.x',
            x = 'rc.x';
        t[0] < e[0]
            ? (w = `imod(rc.x, ${t[0]})`)
            : e[0] < t[0] && (x = `imod(rc.x, ${e[0]})`),
            (this.userCode = `
      ${g}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${h}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        int batchA = ${w};
        int batchB = ${x};
        for (int i = 0; i < ${h}; i++) {
          vec4 a = getMatrixA(batchA, ${d});
          vec4 b = getMatrixB(batchB, ${p});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${f[0]} * ${m[0]});
          result += (${f[1]} * ${m[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${b}

        ${y}

        setOutput(result);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const rb = {
    REAL: 'return areal * breal - aimag * bimag;',
    IMAG: 'return areal * bimag + aimag * breal;',
};
class ob {
    constructor(t, e, s) {
        (this.variableNames = ['AReal', 'AImag', 'BReal', 'BImag']),
            (this.outputShape = Dt(e, s)),
            (this.userCode = `
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${t}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const ib = 'return a * b;';
function kg(n) {
    const { inputs: t, backend: e } = n,
        { a: s, b: r } = t,
        o = vn(s.dtype, r.dtype);
    if (s.dtype === 'complex64') {
        const a = e.texData.get(s.dataId),
            l = e.texData.get(r.dataId),
            c = new ob(rb.REAL, s.shape, r.shape),
            u = new ob(rb.IMAG, s.shape, r.shape),
            h = [
                {
                    dataId: a.complexTensorInfos.real.dataId,
                    dtype: a.complexTensorInfos.real.dtype,
                    shape: s.shape,
                },
                {
                    dataId: a.complexTensorInfos.imag.dataId,
                    dtype: a.complexTensorInfos.imag.dtype,
                    shape: s.shape,
                },
                {
                    dataId: l.complexTensorInfos.real.dataId,
                    dtype: l.complexTensorInfos.real.dtype,
                    shape: r.shape,
                },
                {
                    dataId: l.complexTensorInfos.imag.dataId,
                    dtype: l.complexTensorInfos.imag.dtype,
                    shape: r.shape,
                },
            ],
            d = e.runWebGLProgram(c, h, 'float32'),
            p = e.runWebGLProgram(u, h, 'float32'),
            f = Or({ inputs: { real: d, imag: p }, backend: e });
        return (
            e.disposeIntermediateTensorInfo(d),
            e.disposeIntermediateTensorInfo(p),
            f
        );
    }
    if (e.shouldExecuteOnCPU([s, r])) {
        const a = e.texData.get(s.dataId),
            l = e.texData.get(r.dataId),
            [c, u] = gG(s.shape, r.shape, a.values, l.values, o),
            h = e.makeTensorInfo(u, o),
            d = e.texData.get(h.dataId);
        return (d.values = c), h;
    }
    let i;
    return (
        tt().getBool('WEBGL_PACK_BINARY_OPERATIONS')
            ? (i = new Ci(ib, s.shape, r.shape))
            : (i = new fo(ib, s.shape, r.shape)),
        e.runWebGLProgram(i, [s, r], o)
    );
}
const b6 = { kernelName: Da, backendName: 'webgl', kernelFunc: kg };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function x6(n, t, e) {
    const s = [ai(n.shape), ...li(n.shape)],
        r = { dtype: n.dtype, shape: s, dataId: n.dataId },
        o = [ai(t), ...li(t)],
        i = new lS(o, s),
        a = !0,
        l = [s],
        c = e.runWebGLProgram(i, [r], n.dtype, l, a);
    return { dataId: c.dataId, shape: t, dtype: c.dtype };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function gt(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { shape: o } = s,
        i = e,
        a = rt(r.shape),
        l = Ab(o, a),
        c = rt(l);
    _(
        a === c,
        () =>
            `The new shape (${l}) has ${c} elements and the old shape (${r.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`
    );
    const u = i.texData.get(r.dataId);
    return u.isPacked &&
        !$c(r.shape, l) &&
        !(u.texture !== null && $c(u.shape, l))
        ? x6(r, l, i)
        : (i.incRef(r.dataId), { dataId: r.dataId, shape: l, dtype: r.dtype });
}
const w6 = { kernelName: Su, backendName: 'webgl', kernelFunc: gt };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class ab {
    constructor(t, e) {
        this.variableNames = ['x'];
        const { windowSize: s, batchSize: r, inSize: o, outSize: i } = t;
        this.outputShape = [r, i];
        const a = Math.floor(s / 4) * 4,
            l = s % 4;
        let c = 'sumValue += dot(values, ones);';
        if (e != null) {
            const h = 1 / e;
            c = `sumValue += dot(values * ${
                Ko(h) ? h.toPrecision(2) : h
            }, ones);`;
        }
        let u = '';
        o % s > 0 &&
            (u = `
        if (inIdx < 0 || inIdx >= ${o}) {
          return 0.0;
        }
      `),
            (this.userCode = `
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${u}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${s};

        float sumValue = 0.0;

        for (int i = 0; i < ${a}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${c}
        }

        int inIdx = inOffset + ${a};
        if (${l === 1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${c}
        } else if (${l === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${c}
        } else if (${l === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${c}
        }
        setOutput(sumValue);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class v6 {
    constructor(t, e) {
        this.variableNames = ['x'];
        const { windowSize: s, batchSize: r, inSize: o, outSize: i } = t;
        this.outputShape = [r, i];
        let a = '0.0',
            l = '';
        e === 'prod'
            ? (a = '1.0')
            : e === 'min'
            ? ((a = '1.0 / 1e-20'), (l = 'min'))
            : e === 'max' && ((a = '-1.0 / 1e-20'), (l = 'max'));
        let c = `${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
        e === 'sum'
            ? (c = 'sumValue')
            : e === 'prod'
            ? (c = 'prodValue')
            : e === 'all'
            ? (c = 'allValue')
            : e === 'any' && (c = 'anyValue');
        const u = Math.floor(s / 4) * 4,
            h = s % 4;
        let d = `
      if (${e === 'sum'}) {
        sumValue += dot(values, ones);
      } else if (${e === 'prod'}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${l}(values, minMaxValue);
        if (${e === 'min'} || ${e === 'max'}) {
          minMaxValue = ${l}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `,
            p = 'vec4';
        e === 'all'
            ? ((a = '1.0'),
              (d = `
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `),
              (p = 'bvec4'))
            : e === 'any' &&
              ((a = '0.0'),
              (d = `
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `),
              (p = 'bvec4'));
        let f = '';
        o % s > 0 &&
            (f = `
        if (inIdx < 0 || inIdx >= ${o}) {
          return initializationValue;
        }
      `),
            (this.userCode = `
      const float initializationValue = ${a};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${f}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${s};

        vec4 minMaxValue = vec4(${a});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${d}
        }

        int inIdx = inOffset + ${u};
        if (${h === 1}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${d}
        } else if (${h === 2}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${d}
        } else if (${h === 3}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${d}
        }
        setOutput(${c});
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function k6(n) {
    const t = [];
    for (; t.length === 0 || t[t.length - 1].outSize !== 1; ) {
        const e = t.length ? t[t.length - 1].outSize : n[1],
            s = lh(e);
        t.push({ inSize: e, windowSize: s, outSize: Math.ceil(e / s) });
    }
    return t;
}
function No(n, t, e, s) {
    const r = k6(n.shape);
    let o = n;
    for (let i = 0; i < r.length; i++) {
        const { inSize: a, windowSize: l, outSize: c } = r[i];
        let u, h;
        e === 'mean'
            ? (u =
                  i === 0
                      ? new ab(
                            {
                                windowSize: l,
                                inSize: a,
                                batchSize: n.shape[0],
                                outSize: c,
                            },
                            a
                        )
                      : new ab({
                            windowSize: l,
                            inSize: a,
                            batchSize: n.shape[0],
                            outSize: c,
                        }))
            : (u = new v6(
                  {
                      windowSize: l,
                      inSize: a,
                      batchSize: n.shape[0],
                      outSize: c,
                  },
                  e
              )),
            (h = o),
            (o = s.runWebGLProgram(u, [o], t)),
            h.dataId !== n.dataId && s.disposeIntermediateTensorInfo(h);
    }
    return o;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class S6 {
    constructor(t, e) {
        this.variableNames = ['A'];
        const s = new Array(t.length);
        for (let i = 0; i < s.length; i++) s[i] = t[e[i]];
        (this.outputShape = s), (this.rank = s.length);
        const r = Zt(this.rank),
            o = I6(e);
        this.userCode = `
    void main() {
      ${r} resRC = getOutputCoords();
      setOutput(getA(${o}));
    }
    `;
    }
}
function I6(n) {
    const t = n.length;
    if (t > 6) throw Error(`Transpose for rank ${t} is not yet supported`);
    const e = [
            'resRC.x',
            'resRC.y',
            'resRC.z',
            'resRC.w',
            'resRC.u',
            'resRC.v',
        ],
        s = new Array(t);
    for (let r = 0; r < n.length; r++) s[n[r]] = e[r];
    return s.join();
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class C6 {
    constructor(t, e) {
        (this.variableNames = ['A']),
            (this.packedInputs = !0),
            (this.packedOutput = !0);
        const s = new Array(t.length);
        for (let u = 0; u < s.length; u++) s[u] = t[e[u]];
        if (((this.outputShape = s), (this.rank = s.length), this.rank > 6))
            throw Error(
                `Packed transpose for rank ${this.rank} is not yet supported.`
            );
        const r = Zt(this.rank),
            o = aS('rc', this.rank),
            i = new Array(this.rank);
        for (let u = 0; u < e.length; u++) i[e[u]] = o[u];
        const a = `vec2(${i.slice(-2).join()})`,
            l = `++${o[this.rank - 1]} < ${s[this.rank - 1]}`,
            c = `getChannel(getA(${i.join()}), ${a})`;
        this.userCode = `
    void main() {
      ${r} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${c};
      if(${l}) {
        result[1] = ${c};
      }
      --${o[this.rank - 1]};
      if(++${o[this.rank - 2]} < ${s[this.rank - 2]}) {
        result[2] = ${c};
        if(${l}) {
          result[3] = ${c};
        }
      }
      setOutput(result);
    }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Ch(n, t, e) {
    const s = tt().getBool('WEBGL_PACK_ARRAY_OPERATIONS')
        ? new C6(n.shape, t)
        : new S6(n.shape, t);
    return e.runWebGLProgram(s, [n], n.dtype);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function $6(n, t, e, s) {
    const r = t,
        o = n.shape.length,
        i = Bt(r, n.shape);
    let a = i;
    const l = me(a, o),
        c = l != null;
    let u = n;
    c && ((u = Ch(n, l, s)), (a = we(a.length, o))), Ue('sum', a, o);
    const [h, d] = Pe(u.shape, a);
    let p = h;
    e && (p = xe(h, i));
    const f = rt(d),
        g = rt(n.shape) / f,
        y = gt({ inputs: { x: u }, attrs: { shape: [g, f] }, backend: s }),
        b = bf(n.dtype),
        w = No(y, b, 'sum', s),
        x = gt({ inputs: { x: w }, attrs: { shape: p }, backend: s });
    return (
        s.disposeIntermediateTensorInfo(y),
        s.disposeIntermediateTensorInfo(w),
        c && s.disposeIntermediateTensorInfo(u),
        x
    );
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function $h(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { axis: o, keepDims: i } = s;
    return $6(r, o, i, e);
}
const N6 = { kernelName: Eu, backendName: 'webgl', kernelFunc: $h };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function nn(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { perm: o } = s,
        i = e,
        a = r.shape.length,
        l = new Array(a);
    for (let u = 0; u < l.length; u++) l[u] = r.shape[o[u]];
    let c;
    if (i.shouldExecuteOnCPU([r])) {
        const h = i.texData.get(r.dataId).values,
            d = wg(h, r.shape, r.dtype, o, l);
        c = i.makeTensorInfo(l, r.dtype);
        const p = i.texData.get(c.dataId);
        p.values = d;
    } else c = Ch(r, o, i);
    return c;
}
const T6 = { kernelName: Vo, backendName: 'webgl', kernelFunc: nn };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const fS = 1e3;
function Nc({
    a: n,
    b: t,
    transposeA: e,
    transposeB: s,
    backend: r,
    bias: o = null,
    preluActivationWeights: i = null,
    leakyreluAlpha: a = 0,
    activation: l = null,
}) {
    const c = n.shape.length,
        u = t.shape.length,
        h = e ? n.shape[c - 2] : n.shape[c - 1],
        d = s ? t.shape[u - 1] : t.shape[u - 2],
        p = e ? n.shape[c - 1] : n.shape[c - 2],
        f = s ? t.shape[u - 2] : t.shape[u - 1],
        m = n.shape.slice(0, -2),
        g = t.shape.slice(0, -2),
        y = rt(m),
        b = rt(g),
        x = Dt(n.shape.slice(0, -2), t.shape.slice(0, -2)).concat([p, f]);
    _(
        h === d,
        () =>
            `Error in matMul: inner shapes (${h}) and (${d}) of Tensors with shapes ${n.shape} and ${t.shape} and transposeA=${e} and transposeB=${s} must match.`
    );
    const v = e ? [y, h, p] : [y, p, h],
        C = s ? [b, f, d] : [b, d, f],
        $ = gt({ inputs: { x: n }, backend: r, attrs: { shape: v } }),
        T = gt({ inputs: { x: t }, backend: r, attrs: { shape: C } }),
        N = [$, T],
        R = Math.max(y, b),
        P = e ? $.shape[1] : $.shape[2],
        E = o != null,
        O = i != null,
        S = l === 'leakyrelu',
        L = l != null ? Qi(l, !0) : null,
        q = E || O || S || L != null;
    let W;
    if ((p === 1 || f === 1) && P > fS && q === !1) {
        let G = $,
            et = T;
        e &&
            ((G = nn({
                inputs: { x: $ },
                backend: r,
                attrs: { perm: [0, 2, 1] },
            })),
            N.push(G)),
            s &&
                ((et = nn({
                    inputs: { x: T },
                    backend: r,
                    attrs: { perm: [0, 2, 1] },
                })),
                N.push(et));
        const z = f !== 1,
            M = f === 1;
        let st = G;
        z &&
            ((st = gt({
                inputs: { x: G },
                backend: r,
                attrs: { shape: [R, P, 1] },
            })),
            N.push(st));
        const nt = f === 1 ? 2 : 1;
        let J = et;
        M &&
            ((J = gt({
                inputs: { x: et },
                backend: r,
                attrs: { shape: [R, 1, P] },
            })),
            N.push(J));
        const pt = kg({ inputs: { a: st, b: J }, backend: r });
        (W = $h({
            inputs: { x: pt },
            backend: r,
            attrs: { axis: nt, keepDims: !0 },
        })),
            N.push(pt);
    } else {
        const G = vn(n.dtype, t.dtype),
            et = new pS(v, C, [R, p, f], e, s, E, L, O, S),
            z = [$, T];
        if ((o != null && z.push(o), O && z.push(i), S)) {
            const M = r.makeTensorInfo([], 'float32', Ir(a, 'float32'));
            z.push(M), N.push(M);
        }
        W = r.runWebGLProgram(et, z, G);
    }
    const X = gt({ inputs: { x: W }, backend: r, attrs: { shape: x } });
    N.push(W);
    for (const G of N) r.disposeIntermediateTensorInfo(G);
    return X;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function E6(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { a: r, b: o, bias: i, preluActivationWeights: a } = t,
        { transposeA: l, transposeB: c, activation: u, leakyreluAlpha: h } = s;
    return Nc({
        a: r,
        b: o,
        transposeA: l,
        transposeB: c,
        backend: e,
        bias: i,
        preluActivationWeights: a,
        leakyreluAlpha: h,
        activation: u,
    });
}
const _6 = { kernelName: Ql, backendName: 'webgl', kernelFunc: E6 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const lb = 'return abs(x);';
function A6(n) {
    const { inputs: t, backend: e } = n,
        { x: s } = t;
    if (e.shouldExecuteOnCPU([s]) && s.dtype !== 'complex64') {
        const o = e.texData.get(s.dataId),
            i = oS(o.values);
        return e.makeTensorInfo(s.shape, s.dtype, i);
    }
    let r;
    return (
        tt().getBool('WEBGL_PACK_UNARY_OPERATIONS')
            ? (r = new ir(s.shape, lb))
            : (r = new vs(s.shape, lb)),
        e.runWebGLProgram(r, [s], s.dtype)
    );
}
const R6 = { kernelName: Oc, backendName: 'webgl', kernelFunc: A6 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const D6 =
        ns +
        `
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`,
    O6 = Kt({ opSnippet: D6 }),
    F6 = { kernelName: ra, backendName: 'webgl', kernelFunc: O6 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const L6 =
        ns +
        `
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`,
    P6 = Kt({ opSnippet: L6 }),
    z6 = { kernelName: oa, backendName: 'webgl', kernelFunc: P6 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const cb = 'return a + b;',
    B6 = He({
        opSnippet: cb,
        packedOpSnippet: cb,
        supportsComplex: !0,
        cpuKernelImpl: XU,
    }),
    M6 = { kernelName: pi, backendName: 'webgl', kernelFunc: B6 };
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class V6 {
    constructor(t, e) {
        (this.outputShape = []),
            (this.outputShape = t),
            (this.variableNames = e.map((o, i) => `T${i}`));
        const s = [];
        this.variableNames.forEach((o) => {
            s.push(`float v${o} = get${o}AtOutCoords();`);
        });
        const r = this.variableNames.map((o) => `v${o}`).join(' + ');
        this.userCode = `
      void main() {
        ${s.join(`
        `)}

        float result = ${r};
        setOutput(result);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class W6 {
    constructor(t, e) {
        (this.outputShape = []),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = t),
            (this.variableNames = e.map((o, i) => `T${i}`));
        const s = [];
        this.variableNames.forEach((o) => {
            s.push(`vec4 v${o} = get${o}AtOutCoords();`);
        });
        const r = this.variableNames.map((o) => `v${o}`).join(' + ');
        this.userCode = `
      void main() {
        ${s.join(`
        `)}

        vec4 result = ${r};
        setOutput(result);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function jl(n) {
    const { inputs: t, backend: e } = n,
        s = t;
    if (s.length === 1) return Cn({ inputs: { x: s[0] }, backend: e });
    if (s.length > tt().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {
        const l = Math.floor(s.length / 2),
            c = jl({ inputs: s.slice(0, l), backend: e }),
            u = jl({ inputs: s.slice(l), backend: e });
        return jl({ inputs: [c, u], backend: e });
    }
    const r = s.map((l) => l.dtype).reduce((l, c) => vn(l, c)),
        o = s.map((l) => l.shape),
        a = tt().getBool('WEBGL_PACK')
            ? new W6(s[0].shape, o)
            : new V6(s[0].shape, o);
    return e.runWebGLProgram(a, s, r);
}
const U6 = { kernelName: Fc, backendName: 'webgl', kernelFunc: jl };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function G6(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { axis: o, keepDims: i } = s,
        a = r.shape.length,
        l = Bt(o, r.shape);
    let c = l;
    const u = me(c, a);
    let h = r;
    u != null &&
        ((h = nn({ inputs: { x: r }, backend: e, attrs: { perm: u } })),
        (c = we(c.length, a))),
        Ue('all', c, a);
    const [d, p] = Pe(h.shape, c),
        f = rt(p),
        m = gt({ inputs: { x: h }, backend: e, attrs: { shape: [-1, f] } }),
        g = No(m, m.dtype, 'all', e);
    let y;
    if (i) {
        const b = xe(d, l);
        y = gt({ inputs: { x: g }, backend: e, attrs: { shape: b } });
    } else y = gt({ inputs: { x: g }, backend: e, attrs: { shape: d } });
    return (
        e.disposeIntermediateTensorInfo(m),
        e.disposeIntermediateTensorInfo(g),
        u != null && e.disposeIntermediateTensorInfo(h),
        y
    );
}
const H6 = { kernelName: hp, backendName: 'webgl', kernelFunc: G6 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function j6(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { axis: o, keepDims: i } = s,
        a = r.shape.length,
        l = Bt(o, r.shape);
    let c = l;
    const u = me(c, a);
    let h = r;
    u != null &&
        ((h = nn({ inputs: { x: r }, backend: e, attrs: { perm: u } })),
        (c = we(c.length, a))),
        Ue('any', c, a);
    const [d, p] = Pe(h.shape, c),
        f = rt(p),
        m = gt({ inputs: { x: h }, backend: e, attrs: { shape: [-1, f] } }),
        g = No(m, m.dtype, 'any', e);
    let y;
    if (i) {
        const b = xe(d, l);
        y = gt({ inputs: { x: g }, backend: e, attrs: { shape: b } });
    } else y = gt({ inputs: { x: g }, backend: e, attrs: { shape: d } });
    return (
        e.disposeIntermediateTensorInfo(m),
        e.disposeIntermediateTensorInfo(g),
        u != null && e.disposeIntermediateTensorInfo(h),
        y
    );
}
const q6 = { kernelName: dp, backendName: 'webgl', kernelFunc: j6 };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class K6 {
    constructor(t, e, s) {
        this.variableNames = ['A'];
        const { windowSize: r, batchSize: o, outSize: i } = t;
        s || this.variableNames.push('bestIndicesA'),
            (this.outputShape = [o, i]);
        const a = e === 'max' ? '>' : '<',
            l = s
                ? 'inOffset + i;'
                : 'round(getBestIndicesA(batch, inOffset + i));';
        this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${r};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${r}; i++) {
          int inIdx = ${l};
          float candidate = getA(batch, inIdx);
          if (candidate ${a} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `;
    }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class X6 {
    constructor(t, e, s, r) {
        (this.variableNames = ['A']),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            _(
                t.length > 2,
                () =>
                    `Packed arg${
                        s.charAt(0).toUpperCase() + s.slice(1)
                    } supports only inputs with rank above 2.`
            );
        const o = t[t.length - 1],
            i = Math.ceil(o / e);
        (this.outputShape = t.slice(0, -1)),
            i > 1 && this.outputShape.push(i),
            r || this.variableNames.push('bestIndicesA');
        const a = this.outputShape,
            l = a.length,
            c = Zt(l),
            u = en('coords', l);
        let h, d;
        if (i === 1) {
            d = l + 1;
            const T = Zt(d);
            h = `
        ${T} sourceLocR = ${T}(${u.join()}, 0);
        ++${u[l - 1]};
        ${T} sourceLocG = ${T}(${u.join()}, 0);
        ++${u[l - 2]};
        ${T} sourceLocA = ${T}(${u.join()}, 0);
        --${u[l - 1]};
        ${T} sourceLocB = ${T}(${u.join()}, 0);
        --${u[l - 2]};`;
        } else
            (d = l),
                (h = `
        ${c} sourceLocR = coords;
        ++${u[l - 1]};
        ${c} sourceLocG = coords;
        ++${u[l - 2]};
        ${c} sourceLocA = coords;
        --${u[l - 1]};
        ${c} sourceLocB = coords;
        --${u[l - 2]};`);
        const p = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, d),
            f = '.' + p[d - 1],
            m = p.map((T) => 'int ' + T),
            g = en('sourceLocR', d - 1).concat('inIdx.r'),
            y = en('sourceLocG', d - 1).concat('inIdx.g'),
            b = en('sourceLocB', d - 1).concat('inIdx.b'),
            w = en('sourceLocA', d - 1).concat('inIdx.a'),
            x = s === 'max' ? 'greaterThan' : 'lessThan',
            v = r
                ? ''
                : `
          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),
                             getBestIndicesAChannel(${y.join()}),
                             getBestIndicesAChannel(${b.join()}),
                             getBestIndicesAChannel(${w.join()})));`,
            C = `vec4(
            getAChannel(${g.join()}),
            hasNextCol ? getAChannel(${y.join()}) : 0.,
            hasNextRow ? getAChannel(${b.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${w.join()}) : 0.)`,
            $ = r
                ? ''
                : `
      float getBestIndicesAChannel(${m.join()}) {
        return getChannel(getBestIndicesA(${p.join()}),
                                          vec2(${p.slice(-2).join()}));
      }`;
        this.userCode = `
      float getAChannel(${m.join()}) {
        return getChannel(getA(${p.join()}),
                               vec2(${p.slice(-2).join()}));
      }
      ${$}
      void main() {
        ${c} coords = getOutputCoords();
        bool hasNextCol = ${u[l - 1]} < ${a[l - 1] - 1};
        bool hasNextRow = ${u[l - 2]} < ${a[l - 2] - 1};
        ${h}
        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},
          sourceLocB${f}, sourceLocA${f}) * ${e};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${C};

        for (int i = 0; i < ${e}; i++) {
          inIdx = srcIdx;
          ${v}
          vec4 candidate = ${C};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function mS(n, t, e, s = null) {
    let r = t.shape[0],
        o = t.shape[1];
    s != null && ((r = s.shape[0]), (o = s.shape[1]));
    const i = lh(o),
        a = {
            windowSize: i,
            inSize: o,
            batchSize: r,
            outSize: Math.ceil(o / i),
        },
        l = new K6(a, e, s == null),
        c = [t];
    s != null && c.push(s);
    const u = n.runWebGLProgram(l, c, 'int32');
    if (u.shape[1] === 1) return u;
    const h = mS(n, t, e, u);
    return n.disposeIntermediateTensorInfo(u), h;
}
function gS(n, t, e, s = null) {
    const r = s != null ? s.shape : t.shape,
        o = r[r.length - 1],
        i = lh(o),
        a = new X6(r, i, e, s == null),
        l = s == null ? [t] : [t, s],
        c = n.runWebGLProgram(a, l, 'int32');
    if (c.shape.length === t.shape.length) {
        const u = gS(n, t, e, c);
        return n.disposeIntermediateTensorInfo(c), u;
    }
    return c;
}
function yS(n, t, e, s) {
    const r = [e];
    if (
        (Ue('arg' + s.charAt(0).toUpperCase() + s.slice(1), r, t.shape.length),
        !tt().getBool('WEBGL_PACK_REDUCE') || t.shape.length <= 2)
    ) {
        const o = [],
            i = n.texData.get(t.dataId),
            a = i !== null && i.isPacked;
        let l = t;
        a && ((l = n.unpackTensor(t)), o.push(l));
        const [c, u] = Pe(l.shape, r),
            h = rt(u),
            d = gt({ inputs: { x: l }, backend: n, attrs: { shape: [-1, h] } });
        o.push(d);
        const p = mS(n, d, s);
        o.push(p);
        const f = gt({ inputs: { x: p }, backend: n, attrs: { shape: c } });
        return o.forEach((m) => n.disposeIntermediateTensorInfo(m)), f;
    }
    return gS(n, t, s);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Y6(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { axis: o } = s;
    let i = Bt(o, r.shape);
    const a = me(i, r.shape.length);
    let l = r;
    const c = [];
    a != null &&
        ((l = nn({ inputs: { x: r }, backend: e, attrs: { perm: a } })),
        c.push(l),
        (i = we(i.length, l.shape.length))),
        Ue('argMax', [i[0]], l.shape.length);
    const u = yS(e, l, i[0], 'max');
    return c.forEach((h) => e.disposeIntermediateTensorInfo(h)), u;
}
const Z6 = { kernelName: Lc, backendName: 'webgl', kernelFunc: Y6 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function J6(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { axis: o } = s;
    let i = Bt(o, r.shape);
    const a = me(i, r.shape.length);
    let l = r;
    const c = [];
    a != null &&
        ((l = nn({ inputs: { x: r }, backend: e, attrs: { perm: a } })),
        c.push(l),
        (i = we(i.length, l.shape.length))),
        Ue('argMin', [i[0]], l.shape.length);
    const u = yS(e, l, i[0], 'min');
    return c.forEach((h) => e.disposeIntermediateTensorInfo(h)), u;
}
const Q6 = { kernelName: Pc, backendName: 'webgl', kernelFunc: J6 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const tH =
        ns +
        `
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`,
    eH = Kt({ opSnippet: tH }),
    nH = { kernelName: ia, backendName: 'webgl', kernelFunc: eH };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const sH = ns + 'return log(x + sqrt(x * x + 1.0));',
    rH = Kt({ opSnippet: sH }),
    oH = { kernelName: aa, backendName: 'webgl', kernelFunc: rH };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const iH =
        ns +
        `
  return atan(x);
`,
    aH = Kt({ opSnippet: iH }),
    lH = { kernelName: la, backendName: 'webgl', kernelFunc: aH };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const cH =
        vg +
        `
  return atan(a, b);
`,
    uH =
        `
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` +
        $o +
        `
  return result;
`,
    hH = He({ opSnippet: cH, packedOpSnippet: uH }),
    dH = { kernelName: ua, backendName: 'webgl', kernelFunc: hH };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const pH =
        ns +
        `
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`,
    fH = Kt({ opSnippet: pH }),
    mH = { kernelName: ca, backendName: 'webgl', kernelFunc: fH };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class ta {
    constructor(t, e, s, r = !1, o = !1) {
        if (((this.variableNames = ['x']), e === 'avg' && s))
            throw new Error('Cannot compute positions for average pool.');
        const i = t.filterWidth,
            a = t.strideHeight,
            l = t.strideWidth,
            c = t.dilationHeight,
            u = t.dilationWidth,
            h = t.effectiveFilterHeight,
            d = t.effectiveFilterWidth,
            p = t.padInfo.top,
            f = t.padInfo.left;
        this.outputShape = t.outShape;
        const m = e === 'avg',
            g = `((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`,
            y = `(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`;
        let b = '0.0';
        if ((m || (b = '-1.0 / 1e-20'), s)) {
            const T = '>=';
            this.userCode = `
        const ivec2 strides = ivec2(${a}, ${l});
        const ivec2 pads = ivec2(${p}, ${f});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${h};
              wR += ${c}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${d};
                wC += ${u}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${T} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${r ? (o ? g : y) : `wR * ${d} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
            return;
        }
        const w = 'max';
        let x = `${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
        e === 'avg' && (x = 'avgValue / max(count, 1.0)');
        const v = Math.floor(i / 4) * 4,
            C = i % 4,
            $ = `
      if (${m}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${w}(values, minMaxValue);
      }
    `;
        this.userCode = `
      const ivec2 strides = ivec2(${a}, ${l});
      const ivec2 pads = ivec2(${p}, ${f});
      const float initializationValue = ${b};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${t.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${b});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${h};
            wR += ${c}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${t.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${v}; wC += 4) {
            int xC = xCCorner + wC * ${u};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              getValue(batch, xR, xC + 3 * ${u}, d)
            );

            ${$}
          }

          int xC = xCCorner + ${v};
          if (${C === 1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${$}
          } else if (${C === 2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              initializationValue,
              initializationValue
            );

            ${$}
          } else if (${C === 3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              initializationValue
            );

            ${$}
          }
        }
        setOutput(${x});
      }
    `;
    }
}
class Sg {
    constructor(t, e, s, r = !1, o = !1) {
        if (((this.variableNames = ['x']), e === 'avg' && s))
            throw new Error('Cannot compute positions for average pool.');
        const i = t.filterWidth,
            a = t.strideDepth,
            l = t.strideHeight,
            c = t.strideWidth,
            u = t.dilationDepth,
            h = t.dilationHeight,
            d = t.dilationWidth,
            p = t.effectiveFilterDepth,
            f = t.effectiveFilterHeight,
            m = t.effectiveFilterWidth,
            g = t.padInfo.front,
            y = t.padInfo.top,
            b = t.padInfo.left;
        this.outputShape = t.outShape;
        const w = e === 'avg';
        let x = '0.0';
        if ((w || (x = '-1.0 / 1e-20'), s)) {
            const R = '>=';
            this.userCode = `
        const ivec3 strides =
            ivec3(${a}, ${l}, ${c});
        const ivec3 pads = ivec3(${g}, ${y}, ${b});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${p};
              wD += ${u}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${t.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${f};
                wR += ${h}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${t.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${m};
                  wC += ${d}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${t.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${R} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${
                      r
                          ? o
                              ? `(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`
                              : `((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`
                          : `wD * ${f} * ${m} +
                      wR * ${m} + wC`
                  };
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
            return;
        }
        const v = 'max';
        let C = `${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
        e === 'avg' && (C = 'avgValue / max(count, 1.0)');
        const $ = Math.floor(i / 4) * 4,
            T = i % 4,
            N = `
      if (${w}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${v}(values, minMaxValue);
      }
    `;
        this.userCode = `
      const ivec3 strides =
        ivec3(${a}, ${l}, ${c});
      const ivec3 pads = ivec3(${g}, ${y}, ${b});
      const float initializationValue = ${x};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${t.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${x});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${p};
            wD += ${u}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${t.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${f};
            wR += ${h}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${$}; wC += 4) {
              int xC = xCCorner + wC * ${d};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                getValue(batch, xD, xR, xC + 2 * ${d}, ch),
                getValue(batch, xD, xR, xC + 3 * ${d}, ch)
              );

              ${N}
            }

            int xC = xCCorner + ${$};
            if (${T === 1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${N}
            } else if (${T === 2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                initializationValue,
                initializationValue
              );

              ${N}
            } else if (${T === 3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                getValue(batch, xD, xR, xC + 2 * ${d}, ch),
                initializationValue
              );

              ${N}
            }
          }
        }
        setOutput(${C});
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function gH(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t;
    wl(r, 'avgPool');
    const { filterSize: o, strides: i, pad: a, dimRoundingMode: l } = s,
        c = 1;
    _(
        We(i, c),
        () =>
            `Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`
    );
    const u = ts(r.shape, o, i, c, a, l);
    if (
        u.filterWidth === 1 &&
        u.filterHeight === 1 &&
        Ut(u.inShape, u.outShape)
    )
        return Cn({ inputs: { x: r }, backend: e });
    const h = new ta(u, 'avg', !1);
    return e.runWebGLProgram(h, [r], 'float32');
}
const yH = { kernelName: zc, backendName: 'webgl', kernelFunc: gH };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function bH(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        {
            filterSize: o,
            strides: i,
            pad: a,
            dimRoundingMode: l,
            dataFormat: c,
        } = s,
        u = [1, 1, 1],
        h = Ys(r.shape, o, i, u, a, l, c),
        d = new Sg(h, 'avg', !1);
    return e.runWebGLProgram(d, [r], 'float32');
}
const xH = { kernelName: Bc, backendName: 'webgl', kernelFunc: bH };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class wH {
    constructor(t) {
        (this.variableNames = ['dy']), (this.outputShape = t.inShape);
        const e = t.filterHeight,
            s = t.filterWidth,
            r = t.strideHeight,
            o = t.strideWidth,
            i = t.dilationHeight,
            a = t.dilationWidth,
            l = t.effectiveFilterHeight,
            c = t.effectiveFilterWidth,
            u = l - 1 - t.padInfo.top,
            h = c - 1 - t.padInfo.left,
            d = 1 / (e * s);
        this.userCode = `
      const ivec2 pads = ivec2(${u}, ${h});
      const float avgMultiplier = float(${d});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${l};
            wR += ${i}) {
          float dyR = float(dyRCorner + wR) / ${r}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${c};
            wC+= ${a}) {
            float dyC = float(dyCCorner + wC) / ${o}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
class vH {
    constructor(t) {
        (this.variableNames = ['dy']), (this.outputShape = t.inShape);
        const e = t.filterDepth,
            s = t.filterHeight,
            r = t.filterWidth,
            o = t.strideDepth,
            i = t.strideHeight,
            a = t.strideWidth,
            l = t.dilationDepth,
            c = t.dilationHeight,
            u = t.dilationWidth,
            h = t.effectiveFilterDepth,
            d = t.effectiveFilterHeight,
            p = t.effectiveFilterWidth,
            f = h - 1 - t.padInfo.front,
            m = d - 1 - t.padInfo.top,
            g = p - 1 - t.padInfo.left,
            y = 1 / (e * s * r);
        this.userCode = `
      const ivec3 pads = ivec3(${f}, ${m}, ${g});
      const float avgMultiplier = float(${y});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${h};
            wD += ${l}) {
          float dyD = float(dyDCorner + wD) / ${o}.0;

          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${d};
              wR += ${c}) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${p};
                wC += ${u}) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function kH(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: r, input: o } = t,
        i = o,
        { filterSize: a, strides: l, pad: c, dimRoundingMode: u } = s,
        h = [1, 1, 1],
        d = Ys(i.shape, a, l, h, c, u),
        p = new vH(d);
    return e.runWebGLProgram(p, [r], i.dtype);
}
const SH = { kernelName: fp, backendName: 'webgl', kernelFunc: kH };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function IH(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: r, input: o } = t,
        i = o;
    wl([r, o], 'avgPoolGrad');
    const { filterSize: a, strides: l, pad: c } = s,
        u = ts(i.shape, a, l, 1, c),
        h = new wH(u);
    return e.runWebGLProgram(h, [r], i.dtype);
}
const CH = { kernelName: pp, backendName: 'webgl', kernelFunc: IH };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function $H(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { a: r, b: o } = t,
        { transposeA: i, transposeB: a } = s;
    return Nc({ a: r, b: o, transposeA: i, transposeB: a, backend: e });
}
const NH = { kernelName: Mc, backendName: 'webgl', kernelFunc: $H };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class TH {
    constructor(t, e, s, r, o, i) {
        (this.outputShape = []),
            (this.variableNames = ['x', 'mean', 'variance']),
            Dt(t, e),
            Dt(t, s);
        let a = '0.0';
        r != null &&
            (Dt(t, r),
            this.variableNames.push('offset'),
            (a = 'getOffsetAtOutCoords()'));
        let l = '1.0';
        o != null &&
            (Dt(t, o),
            this.variableNames.push('scale'),
            (l = 'getScaleAtOutCoords()')),
            (this.outputShape = t),
            (this.userCode = `
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${a};
        float scale = ${l};
        float inv = scale * inversesqrt(variance + float(${i}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class EH {
    constructor(t, e, s, r, o, i) {
        (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.variableNames = ['x', 'mean', 'variance']),
            Dt(t, e),
            Dt(t, s);
        let a = 'vec4(0.0)';
        r != null &&
            (Dt(t, r),
            this.variableNames.push('offset'),
            (a = 'getOffsetAtOutCoords()'));
        let l = 'vec4(1.0)';
        o != null &&
            (Dt(t, o),
            this.variableNames.push('scale'),
            (l = 'getScaleAtOutCoords()')),
            (this.outputShape = t),
            (this.userCode = `
      void main() {
        vec4 offset = ${a};
        vec4 scale = ${l};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${i}));

        setOutput((x - mean) * inv + offset);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const _H = ({ inputs: n, backend: t, attrs: e }) => {
        const { x: s, mean: r, variance: o, offset: i, scale: a } = n;
        _(
            r.shape.length === o.shape.length,
            () =>
                'Batch normalization gradient requires mean and variance to have equal ranks.'
        ),
            _(
                i == null || r.shape.length === i.shape.length,
                () =>
                    'Batch normalization gradient requires mean and offset to have equal ranks.'
            ),
            _(
                a == null || r.shape.length === a.shape.length,
                () =>
                    'Batch normalization gradient requires mean and scale to have equal ranks.'
            );
        let { varianceEpsilon: l } = e;
        l == null && (l = 0.001);
        const c = [s, r, o];
        let u = null;
        i != null && ((u = i.shape), c.push(i));
        let h = null;
        a != null && ((h = a.shape), c.push(a));
        const d = tt().getBool('WEBGL_PACK_NORMALIZATION')
            ? new EH(s.shape, r.shape, o.shape, u, h, l)
            : new TH(s.shape, r.shape, o.shape, u, h, l);
        return t.runWebGLProgram(d, c, c[0].dtype);
    },
    AH = { kernelName: Qc, backendName: 'webgl', kernelFunc: _H };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class RH {
    constructor(t) {
        (this.variableNames = ['source']),
            (this.outputShape = t),
            (this.rank = t.length);
        const e = Zt(this.rank);
        this.customUniforms = [
            { name: 'start', arrayIndex: this.rank, type: 'int' },
        ];
        const s = DH(this.rank);
        let r;
        const o = t.map(
            (i, a) => `sourceLoc.${Jd[a]} = start[${a}] + coords.${Jd[a]};`
        );
        (r = `
        ${e} sourceLoc;
        ${e} coords = getOutputCoords();
        ${o.join(`
`)}
      `),
            (this.userCode = `
      void main() {
        ${r}
        setOutput(getSource(${s}));
      }
    `);
    }
}
const Jd = ['x', 'y', 'z', 'w', 'u', 'v'];
function DH(n) {
    if (n === 1) return 'sourceLoc';
    if (n <= 6)
        return Jd.slice(0, n)
            .map((t) => 'sourceLoc.' + t)
            .join(',');
    throw Error(`Slicing for rank ${n} is not yet supported`);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class OH {
    constructor(t) {
        (this.variableNames = ['source']),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = t),
            (this.rank = t.length),
            (this.customUniforms = [
                { name: 'start', arrayIndex: this.rank, type: 'int' },
            ]);
        const e = Zt(this.rank),
            s = en('coords', this.rank),
            r = en('sourceLoc', this.rank),
            o = this.rank === 1 ? 'sourceLoc' : `vec2(${r.slice(-2).join()})`,
            i = `getChannel(getSource(${r.join()}), ${o})`,
            a = `
      result.x = ${i};
      if (++${s[this.rank - 1]} < ${t[this.rank - 1]}) {
        ++${r[this.rank - 1]};
        result.y = ${i};
        --${r[this.rank - 1]};
      }
    `,
            l =
                this.rank === 1
                    ? ''
                    : `
      --${s[this.rank - 1]};
      if (++${s[this.rank - 2]} < ${t[this.rank - 2]}) {
        ++${r[this.rank - 2]};
        result.z = ${i};
        if (++${s[this.rank - 1]} < ${t[this.rank - 1]}) {
          ++${r[this.rank - 1]};
          result.w = ${i};
        }
      }
    `,
            c =
                this.rank <= 4
                    ? `sourceLoc = coords +
            ${e}(${t.map((u, h) => `start[${h}]`).join()});`
                    : t.map((u, h) => `${r[h]} = ${s[h]} + start[${h}];`).join(`
`);
        this.userCode = `
      void main() {
        ${e} coords = getOutputCoords();
        ${e} sourceLoc;
        ${c}
        vec4 result = vec4(0.);
        ${a}
        ${l}
        setOutput(result);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function FH(n, t, e, s) {
    const r = s.texData.get(n.dataId),
        o = s.makeTensorInfo(e, n.dtype),
        i = s.texData.get(o.dataId);
    Object.assign(i, r), (i.refCount = 1), (i.shape = e), (i.dtype = n.dtype);
    let a = gm(t, _t(n.shape));
    r.slice && (a += r.slice.flatOffset),
        (i.slice = {
            flatOffset: a,
            origDataId: (r.slice && r.slice.origDataId) || n.dataId,
        });
    const l = s.dataRefCount.get(i.slice.origDataId) || 1;
    return s.dataRefCount.set(i.slice.origDataId, l + 1), o;
}
function Ni(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { begin: o, size: i } = s,
        [a, l] = ah(r, o, i);
    if ((pm(r, a, l), rt(l) === 0)) return e.makeTensorInfo(l, r.dtype, []);
    if (e.shouldExecuteOnCPU([r]) || r.dtype === 'string') {
        const h = e.texData.get(r.dataId),
            d = NG(h.values, a, l, r.shape, r.dtype);
        return e.makeTensorInfo(l, r.dtype, d);
    }
    const { isPacked: c } = e.texData.get(r.dataId),
        u = mm(r.shape, a, l);
    if (c || !u) {
        const h = tt().getBool('WEBGL_PACK_ARRAY_OPERATIONS')
                ? new OH(l)
                : new RH(l),
            d = [a];
        return e.runWebGLProgram(h, [r], r.dtype, d);
    }
    return e.uploadToGPU(r.dataId), FH(r, a, l, e);
}
const LH = { kernelName: Tu, backendName: 'webgl', kernelFunc: Ni };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const PH = (n) => {
        const { inputs: t, backend: e, attrs: s } = n,
            { x: r } = t,
            { blockShape: o, crops: i } = s;
        _(
            r.shape.length <= 4,
            () =>
                'batchToSpaceND for rank > 4 with a WebGL backend not implemented yet'
        );
        const a = o.reduce((b, w) => b * w),
            l = al(r.shape, o, a),
            c = ll(l.length, o.length),
            u = cl(r.shape, o, a),
            h = vm(i, o.length),
            d = km(u, i, o.length),
            p = [],
            f = gt({ inputs: { x: r }, backend: e, attrs: { shape: l } }),
            m = nn({ inputs: { x: f }, backend: e, attrs: { perm: c } }),
            g = gt({ inputs: { x: m }, backend: e, attrs: { shape: u } }),
            y = Ni({
                inputs: { x: g },
                backend: e,
                attrs: { begin: h, size: d },
            });
        return (
            p.push(f),
            p.push(m),
            p.push(g),
            p.forEach((b) => e.disposeIntermediateTensorInfo(b)),
            y
        );
    },
    zH = { kernelName: Vc, backendName: 'webgl', kernelFunc: PH };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function BH(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r, weights: o } = t,
        { size: i } = s,
        a = e.readSync(r.dataId),
        l = e.readSync(o.dataId),
        c = rS(a, l, o.dtype, o.shape, i);
    return e.makeTensorInfo([i], o.dtype, c);
}
const MH = { kernelName: mp, backendName: 'webgl', kernelFunc: BH };
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const VH = `
  int r = int(a.r) & int(b.r);
  int g = int(a.g) & int(b.g);
  int rb = int(a.b) & int(b.b);
  int ra = int(a.a) & int(b.a);
  return vec4(r, g, rb, ra);
`,
    WH = `
  return float(int(a.r) & int(b.r));
`;
function UH(n) {
    const { inputs: t, backend: e } = n,
        { a: s, b: r } = t,
        o = tt().getBool('WEBGL_PACK_BINARY_OPERATIONS'),
        i = tt().getNumber('WEBGL_VERSION');
    if (e.shouldExecuteOnCPU([s, r]) || i === 1) {
        const l = e.texData.get(s.dataId).values,
            c = e.texData.get(r.dataId).values,
            [u, h] = ZU(s.shape, r.shape, l, c, s.dtype),
            d = e.makeTensorInfo(h, s.dtype),
            p = e.texData.get(d.dataId);
        return (p.values = u), d;
    }
    let a;
    return (
        o
            ? (a = new Ci(VH, s.shape, r.shape, !1))
            : (a = new fo(WH, s.shape, r.shape)),
        e.runWebGLProgram(a, [s, r], s.dtype)
    );
}
const GH = { kernelName: Wc, backendName: 'webgl', kernelFunc: UH };
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function HH(n) {
    const { inputs: t, backend: e } = n,
        { s0: s, s1: r } = t,
        o = e.readSync(s.dataId),
        i = e.readSync(r.dataId),
        a = Dt(Array.from(o), Array.from(i));
    return e.makeTensorInfo([a.length], 'int32', Int32Array.from(a));
}
const jH = { kernelName: gp, backendName: 'webgl', kernelFunc: HH };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const qH = 'return float(a != b);',
    bS = He({ opSnippet: qH, cpuKernelImpl: bG, dtype: 'bool' }),
    KH = { kernelName: gu, backendName: 'webgl', kernelFunc: bS };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function kl(n) {
    const { inputs: t, backend: e } = n,
        { input: s } = t,
        r = e.texData.get(s.dataId);
    return Cn({ inputs: { x: r.complexTensorInfos.real }, backend: e });
}
const XH = { kernelName: Xp, backendName: 'webgl', kernelFunc: kl };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const YH = 'return float(int(x));';
function ZH(n, t) {
    const e = new vs(n.shape, YH),
        s = t.runWebGLProgram(e, [n], 'int32');
    return { dataId: s.dataId, shape: s.shape, dtype: s.dtype };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Qd(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { dtype: o } = s;
    if (o === 'complex64') {
        if (r.dtype === 'complex64')
            return Cn({ inputs: { x: r }, backend: e });
        const i = Se(r.shape),
            a = Qd({
                inputs: { x: r },
                backend: e,
                attrs: { dtype: 'float32' },
            }),
            l = Or({ inputs: { real: a, imag: i }, backend: e });
        return i.dispose(), e.disposeIntermediateTensorInfo(a), l;
    }
    if (r.dtype === 'complex64') {
        const i = kl({ inputs: { input: r }, backend: e }),
            a = Qd({ inputs: { x: i }, backend: e, attrs: { dtype: o } });
        return e.disposeIntermediateTensorInfo(i), a;
    }
    if (!Rb(r.dtype, o)) {
        const i = Cn({ inputs: { x: r }, backend: e });
        return { dataId: i.dataId, shape: i.shape, dtype: o };
    }
    if (e.shouldExecuteOnCPU([r])) {
        const i = e.texData.get(r.dataId).values,
            [a, l, c] = JU(i, r.shape, r.dtype, o);
        return e.makeTensorInfo(a, l, c);
    }
    if (o === 'int32') return ZH(r, e);
    if (o === 'bool') {
        const i = e.makeTensorInfo([], 'bool', Ve('bool', 1)),
            l = bS({ inputs: { a: r, b: i }, backend: e });
        return e.disposeIntermediateTensorInfo(i), l;
    }
    throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${o}`);
}
const JH = { kernelName: ha, backendName: 'webgl', kernelFunc: Qd };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const ub = 'return ceil(x);',
    QH = Kt({ opSnippet: ub, packedOpSnippet: ub, cpuKernelImpl: QU }),
    t5 = { kernelName: da, backendName: 'webgl', kernelFunc: QH };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class e5 {
    constructor(t) {
        (this.variableNames = ['A']),
            (this.customUniforms = [
                { name: 'minVal', type: 'float' },
                { name: 'maxVal', type: 'float' },
            ]),
            (this.outputShape = t),
            (this.userCode = `

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class n5 {
    constructor(t) {
        (this.variableNames = ['A']),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.customUniforms = [
                { name: 'minVal', type: 'float' },
                { name: 'maxVal', type: 'float' },
            ]),
            (this.outputShape = t),
            (this.userCode = `
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function s5(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { clipValueMin: o, clipValueMax: i } = s;
    let a;
    tt().getBool('WEBGL_PACK_CLIP')
        ? (a = new n5(r.shape))
        : (a = new e5(r.shape));
    const l = [[o], [i]];
    return e.runWebGLProgram(a, [r], r.dtype, l);
}
const r5 = { kernelName: pa, backendName: 'webgl', kernelFunc: s5 };
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class o5 {
    constructor(t) {
        (this.variableNames = ['real', 'imag']),
            (this.outputShape = t),
            (this.userCode = `
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function hb(n, t) {
    return { dataId: t.dataId, dtype: t.dtype, shape: n.shape };
}
function i5(n) {
    const { inputs: t, backend: e } = n,
        { x: s } = t,
        r = e.texData.get(s.dataId),
        o = new o5(s.shape),
        i = [
            hb(s, r.complexTensorInfos.real),
            hb(s, r.complexTensorInfos.imag),
        ];
    return e.runWebGLProgram(o, i, i[0].dtype);
}
const a5 = { kernelName: Uc, backendName: 'webgl', kernelFunc: i5 };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class l5 {
    constructor(t) {
        (this.outputShape = []),
            (this.outputShape = Is(t, 1)),
            (this.variableNames = t.map((i, a) => `T${a}`));
        const e = new Array(t.length - 1);
        e[0] = t[0][1];
        for (let i = 1; i < e.length; i++) e[i] = e[i - 1] + t[i][1];
        const s = [`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];
        for (let i = 1; i < e.length; i++) {
            const a = e[i - 1];
            s.push(`else if (yC < ${e[i]}) setOutput(getT${i}(yR, yC-${a}));`);
        }
        const r = e.length,
            o = e[e.length - 1];
        s.push(`else setOutput(getT${r}(yR, yC-${o}));`),
            (this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${s.join(`
        `)}
      }
    `);
    }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class c5 {
    constructor(t, e) {
        (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = []),
            (this.outputShape = Is(t, e));
        const s = this.outputShape,
            r = s.length,
            o = Zt(r),
            i = en('coords', r),
            a = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, r);
        this.variableNames = t.map((m, g) => `T${g}`);
        const l = new Array(t.length - 1);
        l[0] = t[0][e];
        for (let m = 1; m < l.length; m++) l[m] = l[m - 1] + t[m][e];
        const c = a[e],
            u = a.slice(-2),
            h = a.join();
        let d = `if (${c} < ${l[0]}) {
        return getChannel(
            getT0(${h}), vec2(${u.join()}));
        }`;
        for (let m = 1; m < l.length; m++) {
            const g = l[m - 1];
            d += `
        if (${c} < ${l[m]}  && ${c} >= ${l[m - 1]}) {
          return getChannel(
            getT${m}(${Bl(a, c, g)}),
            vec2(${Bl(u, c, g)}));
        }`;
        }
        const p = l.length,
            f = l[l.length - 1];
        (d += `
        return getChannel(
          getT${p}(${Bl(a, c, f)}),
          vec2(${Bl(u, c, f)}));`),
            (this.userCode = `
      float getValue(${a.map((m) => 'int ' + m)}) {
        ${d}
      }

      void main() {
        ${o} coords = getOutputCoords();
        vec4 result = vec4(getValue(${i}), 0., 0., 0.);

        ${i[r - 1]} = ${i[r - 1]} + 1;
        if (${i[r - 1]} < ${s[r - 1]}) {
          result.g = getValue(${i});
        }

        ${i[r - 2]} = ${i[r - 2]} + 1;
        if (${i[r - 2]} < ${s[r - 2]}) {
          result.a = getValue(${i});
        }

        ${i[r - 1]} = ${i[r - 1]} - 1;
        if (${i[r - 2]} < ${s[r - 2]} &&
            ${i[r - 1]} < ${s[r - 1]}) {
          result.b = getValue(${i});
        }
        setOutput(result);
      }
    `);
    }
}
function Bl(n, t, e) {
    const s = n.indexOf(t);
    return n.map((o, i) => (i === s ? `${o} - ${e}` : o)).join();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Nh(n) {
    const { inputs: t, backend: e } = n,
        { input: s } = t,
        r = e.texData.get(s.dataId);
    return Cn({ inputs: { x: r.complexTensorInfos.imag }, backend: e });
}
const u5 = { kernelName: Fp, backendName: 'webgl', kernelFunc: Nh };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Bi(n, t, e) {
    const s = n[0].dtype;
    if (s === 'complex64') {
        const p = n.map((b) => kl({ inputs: { input: b }, backend: e })),
            f = n.map((b) => Nh({ inputs: { input: b }, backend: e })),
            m = Bi(p, t, e),
            g = Bi(f, t, e),
            y = Or({ inputs: { real: m, imag: g }, backend: e });
        return (
            p.forEach((b) => e.disposeIntermediateTensorInfo(b)),
            f.forEach((b) => e.disposeIntermediateTensorInfo(b)),
            e.disposeIntermediateTensorInfo(m),
            e.disposeIntermediateTensorInfo(g),
            y
        );
    }
    let r = e.shouldExecuteOnCPU(n);
    if ((s === 'string' && (r = !0), r)) {
        const p = n.map((x) => {
                const C = [-1, rt(x.shape.slice(t))];
                return gt({ inputs: { x }, backend: e, attrs: { shape: C } });
            }),
            f = p.map((x) => ({ vals: e.readSync(x.dataId), shape: x.shape })),
            m = Is(
                p.map((x) => x.shape),
                1
            ),
            g = p[0].shape[0] === 1,
            y = tG(f, m, s, g),
            b = Is(
                n.map((x) => x.shape),
                t
            ),
            w = e.makeTensorInfo(b, s, y);
        return p.forEach((x) => e.disposeIntermediateTensorInfo(x)), w;
    }
    const o = n.filter((p) => rt(p.shape) > 0),
        i =
            tt().getBool('WEBGL_PACK_ARRAY_OPERATIONS') &&
            o[0].shape.length > 1;
    if (o.length === 1) {
        const p = i ? new vs(n[0].shape, nr) : new ir(n[0].shape, nr);
        return e.runWebGLProgram(p, n, s);
    }
    const a = tt().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER');
    if (o.length > a) {
        const p = [];
        for (let m = 0; m < o.length; m += a) {
            const g = o.slice(m, m + a);
            p.push(Bi(g, t, e));
        }
        const f = Bi(p, t, e);
        for (const m of p) e.disposeIntermediateTensorInfo(m);
        return f;
    }
    if (i) {
        const p = new c5(
            o.map((f) => f.shape),
            t
        );
        return e.runWebGLProgram(p, o, s);
    }
    const { tensors2D: l, outShape: c } = h5(o, t, e),
        u = new l5(l.map((p) => p.shape)),
        h = e.runWebGLProgram(u, l, s);
    l.forEach((p) => e.disposeIntermediateTensorInfo(p));
    const d = gt({ inputs: { x: h }, attrs: { shape: c }, backend: e });
    return e.disposeIntermediateTensorInfo(h), d;
}
function h5(n, t, e) {
    const s = Is(
        n.map((o) => o.shape),
        t
    );
    return {
        tensors2D: n.map((o) =>
            gt({
                inputs: { x: o },
                attrs: { shape: [-1, rt(o.shape.slice(t))] },
                backend: e,
            })
        ),
        outShape: s,
    };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function xS(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { axis: r } = s,
        o = Bt(r, t[0].shape)[0],
        i = t.map((c) => c.shape);
    bm(i, o);
    const a = Is(
        t.map((c) => c.shape),
        o
    );
    if (rt(a) === 0) return e.makeTensorInfo(a, t[0].dtype, []);
    const l = t.filter((c) => rt(c.shape) > 0);
    return l.length === 1
        ? Cn({ inputs: { x: l[0] }, backend: e })
        : Bi(l, o, e);
}
const d5 = { kernelName: Gc, backendName: 'webgl', kernelFunc: xS };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class wS {
    constructor(t, e = !1, s = null, r = !1, o = !1) {
        (this.variableNames = ['x', 'W']), (this.outputShape = t.outShape);
        const i = t.padInfo.top,
            a = t.padInfo.left,
            l = t.strideHeight,
            c = t.strideWidth,
            u = t.dilationHeight,
            h = t.dilationWidth,
            d = t.filterHeight,
            p = t.filterWidth,
            f = Math.floor(t.inChannels / 4) * 4,
            m = t.inChannels % 4,
            g = t.dataFormat === 'channelsLast',
            y = g ? 1 : 2,
            b = g ? 2 : 3,
            w = g ? 3 : 1;
        let x = '',
            v = '';
        s &&
            (r
                ? (x = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }`)
                : o
                ? (x = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }`)
                : (x = `
          float activation(float x) {
            ${s}
          }
        `),
            (v = 'result = activation(result);'));
        const C = e ? 'result += getBiasAtOutCoords();' : '';
        e && this.variableNames.push('bias'),
            r && this.variableNames.push('preluActivationWeights'),
            o && this.variableNames.push('leakyreluAlpha'),
            (this.userCode = `
      ${x}

      const ivec2 strides = ivec2(${l}, ${c});
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${w}];

        ivec2 xRCCorner =
            ivec2(coords[${y}], coords[${b}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${d}; wR++) {
          int xR = xRCorner + wR * ${u};

          if (xR < 0 || xR >= ${t.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${p}; wC++) {
            int xC = xCCorner + wC * ${h};

            if (xC < 0 || xC >= ${t.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${f}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${g}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${m === 1}) {

              if (${g}) {
                dotProd +=
                    getX(batch, xR, xC, ${f}) *
                    getW(wR, wC, ${f}, d2);
              } else {
                dotProd +=
                    getX(batch, ${f}, xR, xC) *
                    getW(wR, wC, ${f}, d2);
              }

            } else if (${m === 2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${f}, d2),
                getW(wR, wC, ${f} + 1, d2)
              );

              if (${g}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${f}),
                  getX(batch, xR, xC, ${f} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${f}, xR, xC),
                  getX(batch, ${f} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${m === 3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${f}, d2),
                getW(wR, wC, ${f} + 1, d2),
                getW(wR, wC, ${f} + 2, d2)
              );

              if (${g}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${f}),
                  getX(batch, xR, xC, ${f} + 1),
                  getX(batch, xR, xC, ${f} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${f}, xR, xC),
                  getX(batch, ${f} + 1, xR, xC),
                  getX(batch, ${f} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${C}
        ${v}
        setOutput(result);
      }
    `);
    }
}
class p5 {
    constructor(t) {
        (this.variableNames = ['x', 'W']), (this.outputShape = t.outShape);
        const e = t.padInfo.front,
            s = t.padInfo.top,
            r = t.padInfo.left,
            o = t.strideDepth,
            i = t.strideHeight,
            a = t.strideWidth,
            l = t.dilationDepth,
            c = t.dilationHeight,
            u = t.dilationWidth,
            h = t.filterDepth,
            d = t.filterHeight,
            p = t.filterWidth,
            f = Math.floor(t.inChannels / 4) * 4,
            m = t.inChannels % 4;
        this.userCode = `
      const ivec3 strides = ivec3(${o}, ${i}, ${a});
      const ivec3 pads = ivec3(${e}, ${s}, ${r});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${h}; wF++) {
          int xF = xFCorner + wF * ${l};

          if (xF < 0 || xF >= ${t.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${d}; wR++) {
            int xR = xRCorner + wR * ${c};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${p}; wC++) {
              int xC = xCCorner + wC * ${u};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${f}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${m === 1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${f}) *
                  getW(wF, wR, wC, ${f}, d2);
              } else if (${m === 2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${f}),
                  getX(batch, xF, xR, xC, ${f} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${f}, d2),
                  getW(wF, wR, wC, ${f} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${m === 3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${f}),
                  getX(batch, xF, xR, xC, ${f} + 1),
                  getX(batch, xF, xR, xC, ${f} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${f}, d2),
                  getW(wF, wR, wC, ${f} + 1, d2),
                  getW(wF, wR, wC, ${f} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class vS {
    constructor(t, e = !1, s = null, r = !1, o = !1) {
        (this.variableNames = ['x', 'W']),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.customUniforms = [
                { name: 'pads', type: 'ivec2' },
                { name: 'strides', type: 'ivec2' },
                { name: 'dilations', type: 'ivec2' },
                { name: 'inDims', type: 'ivec2' },
            ]),
            (this.outputShape = t.outShape),
            (this.enableShapeUniforms = Ye(this.outputShape.length));
        const i = t.padInfo.left,
            a = t.strideWidth,
            l = t.dilationWidth,
            c = t.filterHeight,
            u = t.filterWidth,
            h = u;
        let d = `
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;
        for (let g = 0; g < u; g++)
            d += `
           vec4 xTexelC${g * 2};
           int xTexelC${g * 2}Ready;
           vec4 xTexelC${g * 2 + 1};
           int xTexelC${g * 2 + 1}Ready;
           vec4 xC${g};`;
        d += `
     for (int r = 0; r < ${c}; r++) {
      for (int d1 = 0; d1 < ${t.inChannels}; d1 += 2) {
       `;
        for (let g = 0; g < u; g++)
            d += `
           xTexelC${g * 2} = vec4(0.0);
           xTexelC${g * 2}Ready = 0;
           xTexelC${g * 2 + 1} = vec4(0.0);
           xTexelC${g * 2 + 1}Ready = 0;
           xC${g} = vec4(0.0);`;
        d += `
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;
        for (let g = 0; g < (h + 1) / 2; g++) {
            const y = g * 2;
            if (
                ((d += `
           xC = xCCorner + ${y * l};
           `),
                a === 1)
            ) {
                if (
                    y < u &&
                    (i % 2 === 1
                        ? ((d += `
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {
                   xTexelC${y} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${y}.zw = vec2(0.0);
                   }
                   xTexelC${y}Ready = 1;
                 }
               `),
                          l === 1 && y > 0
                              ? (d += `
                 xC${y} = vec4(xTexelC${y - 2}.zw, xTexelC${y}.xy);
                 `)
                              : (d += `
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${y} = vec4(previous.zw, xTexelC${y}.xy);
                   } else {
                     xC${y} = vec4(0.0, 0.0, xTexelC${y}.xy);
                   }
                   `))
                        : (d += `
                 if (xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {
                   xTexelC${y} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${y}.zw = vec2(0.0);
                   }
                   xTexelC${y}Ready = 1;
                 }

                 xC${y} = xTexelC${y};
                 `),
                    y + 1 < u)
                ) {
                    const b = i % 2 === 0 ? lp(l) : l;
                    (l % 2 === 0 && i % 2 === 1) || (l % 2 !== 0 && i % 2 !== 1)
                        ? ((d += `
                   xCOffset = xC + imod(pads[1], 2) + ${b};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${
                       y + 1
                   }Ready == 0) {
                     xTexelC${y + 1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${y + 1}.zw = vec2(0.0);
                     }
                     xTexelC${y + 1}Ready = 1;
                   }
                   `),
                          l > 1
                              ? (d += `
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${y + 1} = vec4(previous.zw, xTexelC${y + 1}.xy);
                     } else {
                      xC${y + 1} = vec4(0.0, 0.0, xTexelC${y + 1}.xy);
                     }
                     `)
                              : (d += `
                     xC${y + 1} = vec4(xTexelC${y}.zw, xTexelC${y + 1}.xy);
                     `))
                        : b === 1
                        ? (d += `
                     xC${y + 1} = xTexelC${y};
                     `)
                        : (d += `
                     xCOffset = xC + ${b};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${
                         y + 1
                     }Ready == 0) {
                       xTexelC${y + 1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${y + 1}.zw = vec2(0.0);
                       }
                       xTexelC${y + 1}Ready = 1;
                     }

                     xC${y + 1} = xTexelC${y + 1};
                     `);
                }
            } else
                y < u &&
                    (i % 2 === 1
                        ? ((d += `
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {
                   xTexelC${y} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${y}.zw = vec2(0.0);
                   }
                   xTexelC${y}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${
                     y + 1
                 }Ready == 0) {
                   xTexelC${y + 1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${y + 1}.zw = vec2(0.0);
                   }
                   xTexelC${y + 1}Ready = 1;
                 }

                 xC${y} = vec4(xTexelC${y}.zw, xTexelC${y + 1}.zw);
               `),
                          y + 1 < u &&
                              (d += `
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${y + 1} = vec4(xTexelC${y + 1}.xy, final.xy);
                 `))
                        : ((d += `
                 if(xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {
                   xTexelC${y} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${y}.zw = vec2(0.0);
                   }
                   xTexelC${y}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${
                     y + 1
                 }Ready == 0) {
                   xTexelC${y + 1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${y + 1}.zw = vec2(0.);
                   }
                   xTexelC${y + 1}Ready = 1;
                 }

                 xC${y} = vec4(
                   xTexelC${y}.xy, xTexelC${y + 1}.xy);
               `),
                          y + 1 < u &&
                              (d += `
                   xC${y + 1} = vec4(xTexelC${y}.zw, xTexelC${y + 1}.zw);
                 `)));
            y < u &&
                ((d += `
             wTexel = getW(r, ${y}, d1, d2);
             dotProd += xC${y}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${t.inChannels}) {
               dotProd += xC${y}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `),
                y + 1 < u &&
                    (d += `
               wTexel = getW(r, ${y + 1}, d1, d2);
               dotProd += xC${y + 1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${t.inChannels}) {
                 dotProd += xC${y + 1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `));
        }
        (d += `
     }
   `),
            (d += `
     }
   `),
            (d += `
     }
   `);
        let p = '',
            f = '';
        s &&
            (r
                ? (p = `vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${s}
         }`)
                : o
                ? (p = `vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${s}
         }`)
                : (p = `vec4 activation(vec4 x) {
           ${s}
         }`),
            (f = 'result = activation(result);'));
        const m = e ? 'result += getBiasAtOutCoords();' : '';
        e && this.variableNames.push('bias'),
            r && this.variableNames.push('preluActivationWeights'),
            o && this.variableNames.push('leakyreluAlpha'),
            (this.userCode = `
       ${p}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${d}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${m}
         ${f}
         setOutput(result);
       }
     `);
    }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class f5 {
    constructor(t, e) {
        (this.variableNames = ['A']),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.customUniforms = [
                { name: 'inputShape', type: 'ivec4' },
                { name: 'pad', type: 'ivec2' },
                { name: 'stride', type: 'ivec2' },
                { name: 'dilation', type: 'ivec2' },
                { name: 'inChannels', type: 'int' },
                { name: 'itemsPerBlockRow', type: 'int' },
                { name: 'outWidth', type: 'int' },
            ]),
            (this.outputShape = t),
            (this.enableShapeUniforms = Ye(this.outputShape.length));
        const { dataFormat: s } = e,
            r = rn(),
            o = s === 'channelsLast',
            i = o ? 1 : 2,
            a = o ? 2 : 3,
            l = this.enableShapeUniforms
                ? 'if(blockIndex < outShape[2] && pos < outShape[1]) {'
                : `if(blockIndex < ${t[2]} && pos < ${t[1]}) {`;
        let c = '';
        for (let u = 0; u <= 1; u++)
            for (let h = 0; h <= 1; h++)
                c += `
          blockIndex = rc.z + ${h};
          pos = rc.y + ${u};

          ${l}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${i}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${a}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${o}) {
                  innerDims = vec2(d1, ch);
                  result[${u * 2 + h}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${u * 2 + h}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;
        this.userCode = `
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${c}

        ${r.output} = result;
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Tc(n, t) {
    const e = n.length;
    return e >= 3
        ? t
            ? [...n.slice(0, -3), n[e - 3] * n[e - 2], n[e - 1]]
            : [...n.slice(0, -3), n[e - 3], n[e - 2] * n[e - 1]]
        : !t && e === 1 && n[0] > 1
        ? [n[0], 1]
        : null;
}
function kS({
    x: n,
    filter: t,
    convInfo: e,
    backend: s,
    bias: r = null,
    preluActivationWeights: o = null,
    leakyreluAlpha: i = 0,
    activation: a = null,
}) {
    const l = n.shape,
        c = s.texData.get(n.dataId),
        u = e.inChannels,
        h = l[0] * l[1] * l[2],
        d = e.outChannels,
        p = e.dataFormat === 'channelsLast',
        f = !1,
        m = !1;
    let g;
    const y = [];
    if (o != null) {
        const x = Tc(o.shape, p);
        x != null &&
            ((o = gt({ inputs: { x: o }, backend: s, attrs: { shape: x } })),
            y.push(o));
    }
    if (r != null) {
        const x = Tc(r.shape, p);
        x != null &&
            ((r = gt({ inputs: { x: r }, backend: s, attrs: { shape: x } })),
            y.push(r));
    }
    if (
        !((h === 1 || d === 1) && u > fS) &&
        c.isPacked &&
        p &&
        c.texture != null &&
        l[2] % 2 !== 0 &&
        Ut(c.shape.slice(-3), l.slice(-3))
    ) {
        const x = l[0] * l[1] * (l[2] + 1),
            v = {
                dataId: n.dataId,
                shape: [1, x, e.inChannels],
                dtype: n.dtype,
            },
            C = c.shape;
        (c.shape = c.shape.slice()),
            c.shape[c.shape.length - 2]++,
            _(
                $c(c.shape, v.shape),
                () => `packed reshape ${c.shape} to ${v.shape} isn't free`
            );
        const $ = gt({
            inputs: { x: t },
            backend: s,
            attrs: { shape: [1, e.inChannels, e.outChannels] },
        });
        y.push($);
        const T = Nc({
                a: v,
                b: $,
                backend: s,
                transposeA: f,
                transposeB: m,
                bias: r,
                activation: a,
                preluActivationWeights: o,
                leakyreluAlpha: i,
            }),
            N = s.texData.get(T.dataId);
        _(N.isPacked, () => 'batchMatMul result is expected to be packed'),
            (c.shape = C),
            (N.shape = e.outShape),
            (g = Cn({ inputs: { x: T }, backend: s })),
            (g.shape = e.outShape),
            y.push(T);
    } else {
        const x = e.outHeight * e.outWidth,
            v = gt({
                inputs: { x: n },
                backend: s,
                attrs: {
                    shape: p
                        ? [e.batchSize, x, e.inChannels]
                        : [e.batchSize, e.inChannels, x],
                },
            }),
            C = gt({
                inputs: { x: t },
                backend: s,
                attrs: { shape: [1, e.inChannels, e.outChannels] },
            }),
            $ = Nc({
                a: p ? v : C,
                b: p ? C : v,
                transposeA: !p,
                transposeB: m,
                backend: s,
                bias: r,
                activation: a,
                preluActivationWeights: o,
                leakyreluAlpha: i,
            });
        (g = gt({
            inputs: { x: $ },
            backend: s,
            attrs: { shape: e.outShape },
        })),
            y.push(v),
            y.push(C),
            y.push($);
    }
    for (const x of y) s.disposeIntermediateTensorInfo(x);
    return g;
}
function SS({
    x: n,
    filter: t,
    convInfo: e,
    backend: s,
    bias: r = null,
    preluActivationWeights: o = null,
    leakyreluAlpha: i = 0,
    activation: a = null,
}) {
    const {
            filterWidth: l,
            filterHeight: c,
            inChannels: u,
            outWidth: h,
            outHeight: d,
            dataFormat: p,
        } = e,
        f = p === 'channelsLast',
        m = l * c * u,
        g = d * h,
        y = [e.batchSize, m, g],
        b = !0,
        w = !1,
        x = [];
    if (o != null) {
        const X = Tc(o.shape, f);
        X != null &&
            ((o = gt({ inputs: { x: o }, backend: s, attrs: { shape: X } })),
            x.push(o));
    }
    if (r != null) {
        const X = Tc(r.shape, f);
        X != null &&
            ((r = gt({ inputs: { x: r }, backend: s, attrs: { shape: X } })),
            x.push(r));
    }
    const v = gt({
        inputs: { x: t },
        backend: s,
        attrs: { shape: [1, m, rt(t.shape) / m] },
    });
    x.push(v);
    const C = new f5(y, e),
        $ = [
            n.shape,
            [e.padInfo.top, e.padInfo.left],
            [e.strideHeight, e.strideWidth],
            [e.dilationHeight, e.dilationWidth],
            [e.inChannels],
            [e.filterWidth * e.inChannels],
            [e.outWidth],
        ],
        T = s.runWebGLProgram(C, [n], 'float32', $),
        N = gt({ inputs: { x: T }, backend: s, attrs: { shape: y } });
    x.push(T), x.push(N);
    const R = r != null,
        P = o != null,
        E = a === 'leakyrelu',
        O = a ? Qi(a, !0) : null,
        S = new pS(
            f ? N.shape : v.shape,
            f ? v.shape : N.shape,
            f
                ? [e.batchSize, g, e.outChannels]
                : [e.batchSize, e.outChannels, g],
            b,
            w,
            R,
            O,
            P,
            E
        ),
        L = f ? [N, v] : [v, N];
    if ((r && L.push(r), P && L.push(o), E)) {
        const X = s.makeTensorInfo([], 'float32', Ir(i, 'float32'));
        L.push(X), x.push(X);
    }
    const q = s.runWebGLProgram(S, L, 'float32'),
        W = gt({ inputs: { x: q }, backend: s, attrs: { shape: e.outShape } });
    x.push(q);
    for (const X of x) s.disposeIntermediateTensorInfo(X);
    return W;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function m5(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r, filter: o } = t,
        {
            strides: i,
            pad: a,
            dataFormat: l,
            dilations: c,
            dimRoundingMode: u,
        } = s,
        h = Zs(l),
        d = Le(r.shape, o.shape, i, c, a, u, !1, h);
    let p;
    if (
        d.filterHeight === 1 &&
        d.filterWidth === 1 &&
        d.dilationHeight === 1 &&
        d.dilationWidth === 1 &&
        d.strideHeight === 1 &&
        d.strideWidth === 1 &&
        (d.padInfo.type === 'SAME' || d.padInfo.type === 'VALID')
    )
        p = kS({ x: r, filter: o, convInfo: d, backend: e });
    else if (
        d.strideWidth <= 2 &&
        h === 'channelsLast' &&
        tt().getBool('WEBGL_EXP_CONV')
    ) {
        const m = new vS(d),
            g = [
                [d.padInfo.top, d.padInfo.left],
                [d.strideHeight, d.strideWidth],
                [d.dilationHeight, d.dilationWidth],
                [d.inHeight, d.inWidth],
            ];
        p = e.runWebGLProgram(m, [r, o], 'float32', g);
    } else if (tt().getBool('WEBGL_CONV_IM2COL'))
        p = SS({ x: r, filter: o, convInfo: d, backend: e });
    else {
        const m = new wS(d);
        p = e.runWebGLProgram(m, [r, o], 'float32');
    }
    const f = gt({
        inputs: { x: p },
        backend: e,
        attrs: { shape: d.outShape },
    });
    return e.disposeIntermediateTensorInfo(p), f;
}
const g5 = { kernelName: Hc, backendName: 'webgl', kernelFunc: m5 };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class y5 {
    constructor(t) {
        (this.variableNames = ['x', 'dy']), (this.outputShape = t.filterShape);
        const e = t.strideHeight,
            s = t.strideWidth,
            r = t.padInfo.top,
            o = t.padInfo.left,
            i = t.dataFormat === 'channelsLast';
        this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yR = 0; yR < ${t.outHeight}; yR++) {
            int xR = wR + yR * ${e} - ${r};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${t.outWidth}; yC++) {
              int xC = wC + yC * ${s} - ${o};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              ${
                  i
                      ? `float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);`
                      : `float dyValue = getDy(b, d2, yR, yC);
              float xValue = getX(b, d1, xR, xC);
              dotProd += (xValue * dyValue);`
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
class b5 {
    constructor(t) {
        (this.variableNames = ['dy', 'W']), (this.outputShape = t.inShape);
        const e = t.filterHeight,
            s = t.filterWidth,
            r = t.strideHeight,
            o = t.strideWidth,
            i = t.dataFormat === 'channelsLast',
            a = e - 1 - t.padInfo.top,
            l = s - 1 - t.padInfo.left,
            c = i ? 1 : 2,
            u = i ? 2 : 3,
            h = i ? 3 : 1;
        this.userCode = `
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${h}];

        ivec2 dyCorner = ivec2(coords[${c}], coords[${u}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / ${r}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${s}; wC++) {
            float dyC = float(dyCCorner + wC) / ${o}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${s} - 1 - wC;

            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {

              if (${i}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
class x5 {
    constructor(t) {
        (this.variableNames = ['x', 'dy']), (this.outputShape = t.filterShape);
        const e = t.strideDepth,
            s = t.strideHeight,
            r = t.strideWidth,
            o = t.padInfo.front,
            i = t.padInfo.top,
            a = t.padInfo.left;
        this.userCode = `
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yF = 0; yF < ${t.outDepth}; yF++) {
            int xF = wF + yF * ${e} - ${o};

            if (xF < 0 || xF >= ${t.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${t.outHeight}; yR++) {
              int xR = wR + yR * ${s} - ${i};

              if (xR < 0 || xR >= ${t.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${t.outWidth}; yC++) {
                int xC = wC + yC * ${r} - ${a};

                if (xC < 0 || xC >= ${t.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
class w5 {
    constructor(t) {
        (this.variableNames = ['dy', 'W']), (this.outputShape = t.inShape);
        const e = t.filterDepth,
            s = t.filterHeight,
            r = t.filterWidth,
            o = t.strideDepth,
            i = t.strideHeight,
            a = t.strideWidth,
            l = e - 1 - t.padInfo.front,
            c = s - 1 - t.padInfo.top,
            u = r - 1 - t.padInfo.left;
        this.userCode = `
      const ivec3 pads = ivec3(${l}, ${c}, ${u});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${e}; wF++) {
          float dyF = float(dyFCorner + wF) / ${o}.0;

          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${e} - 1 - wF;

          for (int wR = 0; wR < ${s}; wR++) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${s} - 1 - wR;

            for (int wC = 0; wC < ${r}; wC++) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${r} - 1 - wC;

              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function v5(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r, dy: o } = t,
        {
            strides: i,
            pad: a,
            dataFormat: l,
            dimRoundingMode: c,
            filterShape: u,
        } = s,
        h = Zs(l),
        d = Le(r.shape, u, i, 1, a, c, !1, h),
        p = new y5(d);
    return e.runWebGLProgram(p, [r, o], 'float32');
}
const k5 = { kernelName: bp, backendName: 'webgl', kernelFunc: v5 };
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class S5 {
    constructor(t) {
        (this.variableNames = ['dy', 'W']),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.customUniforms = [{ name: 'strides', type: 'vec2' }]),
            (this.outputShape = t.inShape),
            (this.enableShapeUniforms = Ye(this.outputShape.length));
        const e = t.filterHeight,
            s = t.filterWidth,
            r = e - 1 - t.padInfo.top,
            o = s - 1 - t.padInfo.left;
        this.userCode = `
      const ivec2 pads = ivec2(${r}, ${o});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];

        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        vec4 result = vec4(0.);
        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / strides[0];
          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);
          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${s}; wC++) {
            int wCPerm = ${s} - 1 - wC;

            float dyC = float(dyCCorner + wC) / strides[1];
            bool idyCVal = (dyC >= 0.0) && (dyC < ${t.outWidth}.0)
              && (fract(dyC) == 0.0);
            int idyC = int(dyC);

            float dyC2 = float(dyCCorner + wC + 1) / strides[1];
            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${t.outWidth}.0)
              && (fract(dyC2) == 0.0);
            int idyC2 = int(dyC2);

            if (idyCVal && idyCVal2) {
              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?
                  dySample : getDy(batch, idyR, idyC2, d2);

                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));

                dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample2.xy : dySample2.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal) {
              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal2) {
              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC2, d2);
                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            }
          }
        }
        setOutput(result);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function I5(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: r, filter: o } = t,
        {
            inputShape: i,
            strides: a,
            pad: l,
            dataFormat: c,
            dimRoundingMode: u,
        } = s,
        h = Zs(c),
        d = Le(i, o.shape, a, 1, l, u, !1, h);
    if (tt().getBool('WEBGL_PACK_CONV2DTRANSPOSE') && h === 'channelsLast') {
        const p = [[d.strideHeight, d.strideWidth]],
            f = new S5(d);
        return e.runWebGLProgram(f, [r, o], 'float32', p);
    } else {
        const p = new b5(d);
        return e.runWebGLProgram(p, [r, o], 'float32');
    }
}
const C5 = { kernelName: jc, backendName: 'webgl', kernelFunc: I5 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function $5(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r, filter: o } = t,
        { strides: i, pad: a, dilations: l } = s,
        c = Nr(r.shape, o.shape, i, l, a),
        u = new p5(c);
    return e.runWebGLProgram(u, [r, o], 'float32');
}
const N5 = { kernelName: qc, backendName: 'webgl', kernelFunc: $5 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function T5(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r, dy: o } = t,
        { strides: i, pad: a, filterShape: l } = s,
        c = Nr(r.shape, l, i, 1, a),
        u = new x5(c);
    return e.runWebGLProgram(u, [r, o], 'float32');
}
const E5 = { kernelName: xp, backendName: 'webgl', kernelFunc: T5 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function _5(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: r, filter: o } = t,
        { pad: i, strides: a, inputShape: l } = s,
        c = Nr(l, o.shape, a, 1, i),
        u = new w5(c);
    return e.runWebGLProgram(u, [r, o], 'float32');
}
const A5 = { kernelName: wp, backendName: 'webgl', kernelFunc: _5 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const R5 =
        $i +
        `
  return cos(x);
`,
    D5 = `
  vec4 result = cos(x);
  bvec4 isNaN = isnan(x);
  ${$o}
  return result;
`,
    O5 = Kt({ opSnippet: R5, packedOpSnippet: D5 }),
    F5 = { kernelName: fa, backendName: 'webgl', kernelFunc: O5 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const L5 = `
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`,
    P5 = Kt({ opSnippet: L5 }),
    z5 = { kernelName: ma, backendName: 'webgl', kernelFunc: P5 };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class B5 {
    constructor(t, e, s, r, o) {
        (this.variableNames = ['Image', 'Boxes', 'BoxInd']),
            (this.outputShape = []);
        const [i, a, l, c] = t,
            [u] = e,
            [h, d] = s;
        this.outputShape = [u, h, d, c];
        const p = r === 'bilinear' ? 1 : 0,
            [f, m] = [`${a - 1}.0`, `${l - 1}.0`],
            [g, y, b] =
                h > 1
                    ? [
                          `${(a - 1) / (h - 1)}`,
                          '(y2-y1) * height_ratio',
                          `y1*${f} + float(y)*(height_scale)`,
                      ]
                    : ['0.0', '0.0', `0.5 * (y1+y2) * ${f}`],
            [w, x, v] =
                d > 1
                    ? [
                          `${(l - 1) / (d - 1)}`,
                          '(x2-x1) * width_ratio',
                          `x1*${m} + float(x)*(width_scale)`,
                      ]
                    : ['0.0', '0.0', `0.5 * (x1+x2) * ${m}`];
        this.userCode = `
      const float height_ratio = float(${g});
      const float width_ratio = float(${w});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${i}) {
          return;
        }

        float height_scale = ${y};
        float width_scale = ${x};

        float in_y = ${b};
        if( in_y < 0.0 || in_y > ${f} ) {
          setOutput(float(${o}));
          return;
        }
        float in_x = ${v};
        if( in_x < 0.0 || in_x > ${m} ) {
          setOutput(float(${o}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${p} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const M5 = (n) => {
        const { inputs: t, backend: e, attrs: s } = n,
            { image: r, boxes: o, boxInd: i } = t,
            { cropSize: a, method: l, extrapolationValue: c } = s,
            u = new B5(r.shape, o.shape, a, l, c);
        return e.runWebGLProgram(u, [r, o, i], 'float32');
    },
    V5 = { kernelName: kp, backendName: 'webgl', kernelFunc: M5 };
var ea;
(function (n) {
    (n.Prod = '*'), (n.Sum = '+');
})(ea || (ea = {}));
class db {
    constructor(t, e, s, r) {
        (this.op = t),
            (this.outputShape = e),
            (this.variableNames = ['x']),
            (this.customUniforms = [{ name: 'index', type: 'float' }]);
        const o = this.outputShape.length,
            i = this.op === ea.Prod ? '1.0' : '0.0',
            a = s ? i : `getX(${pb(o, 'coords', this.op)})`,
            l = this.outputShape[this.outputShape.length - 1];
        let c = '',
            u = '';
        s
            ? ((c = r ? `end != ${l - 1}` : 'end != 0'),
              (u = r ? 'end + 1' : 'end - 1'))
            : ((c = r ? `end + pow2 < ${l}` : 'end >= pow2'),
              (u = r ? 'end + pow2' : 'end - pow2')),
            (this.userCode = `
      void main() {
        ${Zt(o)} coords = getOutputCoords();
        int end = ${fb(o, 'coords', this.op)};
        float val = ${a};
        int pow2 = int(pow(2.0, index));
        if (${c}) {
          int idx = ${u};
          ${fb(o, 'coords', this.op)} = idx;
          val ${this.op}= getX(${pb(o, 'coords', this.op)});
        }
        setOutput(val);
      }
    `);
    }
}
function pb(n, t, e) {
    if (n === 1) return `${t}`;
    if (n === 2) return `${t}.x, ${t}.y`;
    if (n === 3) return `${t}.x, ${t}.y, ${t}.z`;
    if (n === 4) return `${t}.x, ${t}.y, ${t}.z, ${t}.w`;
    throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`);
}
function fb(n, t, e) {
    if (n === 1) return `${t}`;
    if (n === 2) return `${t}.y`;
    if (n === 3) return `${t}.z`;
    if (n === 4) return `${t}.w`;
    throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`);
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function IS(n, t, e, s, r, o) {
    const i = t.shape.length,
        a = me([s], i);
    let l = t;
    a != null && (l = nn({ inputs: { x: t }, backend: e, attrs: { perm: a } }));
    const c = we(1, i)[0];
    if (c !== i - 1)
        throw new Error(
            `WebGL cumprod shader expects an inner-most axis=${
                t.shape.length - 1
            } but got axis=${s}`
        );
    const u = l.shape[c];
    let h = Cn({ inputs: { x: l }, backend: e });
    for (let d = 0; d <= Math.ceil(Math.log2(u)) - 1; d++) {
        const p = new db(n, l.shape, !1, o),
            f = [[d]],
            m = h;
        (h = e.runWebGLProgram(p, [h], h.dtype, f)),
            e.disposeIntermediateTensorInfo(m);
    }
    if (r) {
        const d = new db(n, l.shape, r, o),
            p = h;
        (h = e.runWebGLProgram(d, [h], h.dtype)),
            e.disposeIntermediateTensorInfo(p);
    }
    if (a != null) {
        const d = Tr(a),
            p = nn({ inputs: { x: h }, backend: e, attrs: { perm: d } });
        return (
            e.disposeIntermediateTensorInfo(h),
            e.disposeIntermediateTensorInfo(l),
            p
        );
    }
    return h;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function W5(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { axis: o, exclusive: i, reverse: a } = s;
    return IS(ea.Prod, r, e, o, i, a);
}
const U5 = { kernelName: vp, backendName: 'webgl', kernelFunc: W5 };
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function G5(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { axis: o, exclusive: i, reverse: a } = s;
    return IS(ea.Sum, r, e, o, i, a);
}
const H5 = { kernelName: Kc, backendName: 'webgl', kernelFunc: G5 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function j5(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r, weights: o } = t,
        { size: i, binaryOutput: a } = s;
    if (r.shape.length === 1) {
        const l = e.readSync(r.dataId),
            c = e.readSync(o.dataId),
            u = rS(l, c, o.dtype, o.shape, i);
        return e.makeTensorInfo([i], o.dtype, u);
    } else if (r.shape.length === 2) {
        const l = e.bufferSync(r),
            c = e.bufferSync(o),
            u = YU(l, c, i, a);
        return e.makeTensorInfo(u.shape, o.dtype, u.values);
    }
    throw new Error(
        `Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`
    );
}
const q5 = { kernelName: Sp, backendName: 'webgl', kernelFunc: j5 };
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class K5 {
    constructor(t, e, s) {
        (this.variableNames = ['x']),
            (this.outputShape = []),
            (this.outputShape = t),
            (this.blockSize = e),
            (this.dataFormat = s),
            (this.userCode = `
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${e};
      int offset_h = imod(h, ${e});
      int in_w = w / ${e};
      int offset_w = imod(w, ${e});
      int offset_d = (offset_h * ${e} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `);
    }
    getHeightCoordString() {
        return this.dataFormat === 'NHWC' ? 'coords[1]' : 'coords[2]';
    }
    getWidthCoordString() {
        return this.dataFormat === 'NHWC' ? 'coords[2]' : 'coords[3]';
    }
    getDepthCoordString() {
        return this.dataFormat === 'NHWC' ? 'coords[3]' : 'coords[1]';
    }
    getOutputDepthSize() {
        return this.dataFormat === 'NHWC'
            ? this.outputShape[3]
            : this.outputShape[1];
    }
    getInputSamplingString() {
        return this.dataFormat === 'NHWC'
            ? 'getX(b, in_h, in_w, in_d)'
            : 'getX(b, in_d, in_h, in_w)';
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function X5(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { blockSize: o, dataFormat: i } = s,
        a = r.shape[0],
        l = i === 'NHWC' ? r.shape[1] : r.shape[2],
        c = i === 'NHWC' ? r.shape[2] : r.shape[3],
        u = i === 'NHWC' ? r.shape[3] : r.shape[1],
        h = l * o,
        d = c * o,
        p = u / (o * o),
        f = i === 'NHWC' ? [a, h, d, p] : [a, p, h, d],
        m = new K5(f, o, i);
    return e.runWebGLProgram(m, [r], r.dtype);
}
const Y5 = { kernelName: Ip, backendName: 'webgl', kernelFunc: X5 };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class CS {
    constructor(t, e = !1, s = null, r = !1, o = !1) {
        (this.variableNames = ['x', 'W']),
            (this.customUniforms = [
                { name: 'pads', type: 'ivec2' },
                { name: 'strides', type: 'ivec2' },
                { name: 'dilations', type: 'ivec2' },
                { name: 'inDims', type: 'ivec2' },
            ]),
            (this.outputShape = t.outShape),
            (this.enableShapeUniforms = Ye(this.outputShape.length));
        const i = t.filterHeight,
            a = t.filterWidth,
            l = t.outChannels / t.inChannels;
        let c = '',
            u = '';
        s &&
            (r
                ? (c = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }`)
                : o
                ? (c = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }`)
                : (c = `
          float activation(float x) {
            ${s}
          }
        `),
            (u = 'result = activation(result);'));
        const h = e ? 'result += getBiasAtOutCoords();' : '';
        e && this.variableNames.push('bias'),
            r && this.variableNames.push('preluActivationWeights'),
            o && this.variableNames.push('leakyreluAlpha'),
            (this.userCode = `
      ${c}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${l};
        int q = d2 - d1 * ${l};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${i}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${a}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${h}
        ${u}
        setOutput(result);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class $S {
    constructor(t, e = !1, s = null, r = !1, o = !1) {
        (this.variableNames = ['x', 'W']),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.customUniforms = [
                { name: 'pads', type: 'ivec2' },
                { name: 'strides', type: 'ivec2' },
                { name: 'dilations', type: 'ivec2' },
                { name: 'inDims', type: 'ivec2' },
            ]),
            (this.outputShape = t.outShape),
            (this.enableShapeUniforms = Ye(this.outputShape.length));
        const i = t.outChannels / t.inChannels,
            a = t.padInfo.left,
            l = t.strideWidth,
            c = t.dilationWidth,
            u = t.filterHeight,
            h = t.filterWidth,
            d = h;
        let p = `
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;
        for (let y = 0; y < h; y++)
            p += `
          vec4 xTexelC${y * 2};
          int xTexelC${y * 2}Ready;
          vec4 xTexelC${y * 2 + 1};
          int xTexelC${y * 2 + 1}Ready;
          vec4 xC${y};`;
        p += `
    for (int r = 0; r < ${u}; r++) {
      `;
        for (let y = 0; y < h; y++)
            p += `
          xTexelC${y * 2} = vec4(0.0);
          xTexelC${y * 2}Ready = 0;
          xTexelC${y * 2 + 1} = vec4(0.0);
          xTexelC${y * 2 + 1}Ready = 0;
          xC${y} = vec4(0.0);`;
        p += `
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;
        for (let y = 0; y < (d + 1) / 2; y++) {
            const b = y * 2;
            if (
                ((p += `
          xC = xCCorner + ${b * c};
          `),
                l === 1)
            ) {
                if (
                    b < h &&
                    (a % 2 === 1
                        ? ((p += `
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }
              `),
                          c === 1 && b > 0
                              ? (p += `
                xC${b} = vec4(xTexelC${b - 2}.zw, xTexelC${b}.xy);
                `)
                              : (p += `
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${b} = vec4(previous.zw, xTexelC${b}.xy);
                  } else {
                    xC${b} = vec4(0.0, 0.0, xTexelC${b}.xy);
                  }
                  `))
                        : (p += `
                if (xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xC${b} = xTexelC${b};
                `),
                    b + 1 < h)
                ) {
                    const w = a % 2 === 0 ? lp(c) : c;
                    (c % 2 === 0 && a % 2 === 1) || (c % 2 !== 0 && a % 2 !== 1)
                        ? ((p += `
                  xCOffset = xC + imod(pads[1], 2) + ${w};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${
                      b + 1
                  }Ready == 0) {
                    xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${b + 1}.zw = vec2(0.0);
                    }
                    xTexelC${b + 1}Ready = 1;
                  }
                  `),
                          c > 1
                              ? (p += `
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${b + 1} = vec4(previous.zw, xTexelC${b + 1}.xy);
                    } else {
                     xC${b + 1} = vec4(0.0, 0.0, xTexelC${b + 1}.xy);
                    }
                    `)
                              : (p += `
                    xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.xy);
                    `))
                        : w === 1
                        ? (p += `
                    xC${b + 1} = xTexelC${b};
                    `)
                        : (p += `
                    xCOffset = xC + ${w};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${
                        b + 1
                    }Ready == 0) {
                      xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${b + 1}.zw = vec2(0.0);
                      }
                      xTexelC${b + 1}Ready = 1;
                    }

                    xC${b + 1} = xTexelC${b + 1};
                    `);
                }
            } else
                b < h &&
                    (a % 2 === 1
                        ? ((p += `
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${
                    b + 1
                }Ready == 0) {
                  xTexelC${b + 1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${b + 1}.zw = vec2(0.0);
                  }
                  xTexelC${b + 1}Ready = 1;
                }

                xC${b} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
              `),
                          b + 1 < h &&
                              (p += `
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${b + 1} = vec4(xTexelC${b + 1}.xy, final.xy);
                `))
                        : ((p += `
                if(xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${
                    b + 1
                }Ready == 0) {
                  xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b + 1}.zw = vec2(0.);
                  }
                  xTexelC${b + 1}Ready = 1;
                }

                xC${b} = vec4(
                  xTexelC${b}.xy, xTexelC${b + 1}.xy);
              `),
                          b + 1 < h &&
                              (p += `
                  xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
                `)));
            b < h &&
                ((p += `
            wTexel = getW(r, ${b}, d1, q);
            dotProd += xC${b} * vec4(wTexel.xz, wTexel.xz);
          `),
                b + 1 < h &&
                    (p += `
              wTexel = getW(r, ${b + 1}, d1, q);
              dotProd += xC${b + 1} * vec4(wTexel.xz, wTexel.xz);
            `));
        }
        (p += `
    }
  `),
            (p += `
      }
    `);
        let f = '',
            m = '';
        s &&
            (r
                ? (f = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }`)
                : o
                ? (f = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }`)
                : (f = `vec4 activation(vec4 x) {
          ${s}
        }`),
            (m = 'result = activation(result);'));
        const g = e ? 'result += getBiasAtOutCoords();' : '';
        e && this.variableNames.push('bias'),
            r && this.variableNames.push('preluActivationWeights'),
            o && this.variableNames.push('leakyreluAlpha'),
            (this.userCode = `
      ${f}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${i};
        int q = d2 - d1 * ${i};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${p}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${g}
        ${m}
        setOutput(result);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Z5(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r, filter: o } = t,
        { strides: i, pad: a, dilations: l, dimRoundingMode: c } = s;
    let u = l;
    u == null && (u = [1, 1]),
        _(
            We(i, u),
            () =>
                `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`
        );
    const h = Le(r.shape, o.shape, i, u, a, c, !0);
    let d;
    tt().getBool('WEBGL_PACK_DEPTHWISECONV') &&
    h.strideWidth <= 2 &&
    h.outChannels / h.inChannels === 1
        ? (d = new $S(h))
        : (d = new CS(h));
    const p = [
        [h.padInfo.top, h.padInfo.left],
        [h.strideHeight, h.strideWidth],
        [h.dilationHeight, h.dilationWidth],
        [h.inHeight, h.inWidth],
    ];
    return e.runWebGLProgram(d, [r, o], 'float32', p);
}
const J5 = { kernelName: Xc, backendName: 'webgl', kernelFunc: Z5 };
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class Q5 {
    constructor(t) {
        (this.variableNames = ['x', 'dy']), (this.outputShape = t.filterShape);
        const e = t.strideHeight,
            s = t.strideWidth,
            r = t.padInfo.top,
            o = t.padInfo.left,
            i = t.outChannels / t.inChannels;
        this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${i} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yR = 0; yR < ${t.outHeight}; yR++) {
            int xR = wR + yR * ${e} - ${r};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${t.outWidth}; yC++) {
              int xC = wC + yC * ${s} - ${o};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
class tj {
    constructor(t) {
        (this.variableNames = ['dy', 'W']), (this.outputShape = t.inShape);
        const e = t.filterHeight,
            s = t.filterWidth,
            r = t.strideHeight,
            o = t.strideWidth,
            i = e - 1 - t.padInfo.top,
            a = s - 1 - t.padInfo.left,
            l = t.outChannels / t.inChannels;
        this.userCode = `
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / ${r}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${s}; wC++) {
            float dyC = float(dyCCorner + wC) / ${o}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${s} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${l}; dm++) {
              int d2 = d1 * ${l} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function ej(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r, dy: o } = t,
        {
            strides: i,
            dilations: a,
            pad: l,
            dimRoundingMode: c,
            filterShape: u,
        } = s,
        h = Le(r.shape, u, i, a, l, c, !0),
        d = new Q5(h);
    return e.runWebGLProgram(d, [r, o], 'float32');
}
const nj = { kernelName: Cp, backendName: 'webgl', kernelFunc: ej };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function sj(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: r, filter: o } = t,
        {
            strides: i,
            dilations: a,
            pad: l,
            dimRoundingMode: c,
            inputShape: u,
        } = s,
        h = Le(u, o.shape, i, a, l, c, !0),
        d = new tj(h);
    return e.runWebGLProgram(d, [r, o], 'float32');
}
const rj = { kernelName: $p, backendName: 'webgl', kernelFunc: sj };
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class oj {
    constructor(t) {
        (this.variableNames = ['X']),
            (this.outputShape = [t, t]),
            (this.userCode = `
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function ij(n) {
    const { inputs: t, backend: e } = n,
        { x: s } = t,
        r = [...s.shape, ...s.shape],
        o = rt(s.shape),
        i = gt({ inputs: { x: s }, backend: e, attrs: { shape: [o] } }),
        a = new oj(o),
        l = e.runWebGLProgram(a, [i], i.dtype),
        c = gt({ inputs: { x: l }, backend: e, attrs: { shape: r } });
    return (
        e.disposeIntermediateTensorInfo(i),
        e.disposeIntermediateTensorInfo(l),
        c
    );
}
const aj = { kernelName: Np, backendName: 'webgl', kernelFunc: ij };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class lj {
    constructor(t) {
        (this.variableNames = ['x', 'W']), (this.outputShape = t.outShape);
        const {
                inHeight: e,
                inWidth: s,
                padInfo: r,
                strideHeight: o,
                strideWidth: i,
                filterHeight: a,
                filterWidth: l,
                dilationHeight: c,
                dilationWidth: u,
            } = t,
            { top: h, left: d } = r;
        this.userCode = `
      const ivec2 strides = ivec2(${o}, ${i});
      const ivec2 pads = ivec2(${h}, ${d});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${a}; h++) {
          int hIn = hBeg + h * ${c};

          if (hIn >= 0 && hIn < ${e}) {
            for (int w = 0; w < ${l}; w++) {
              int wIn = wBeg + w * ${u};

              if (wIn >= 0 && wIn < ${s}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function cj(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r, filter: o } = t,
        { strides: i, pad: a, dilations: l } = s,
        c = tl(r.shape, o.shape, i, a, 'NHWC', l);
    let u;
    const h = new lj(c);
    u = e.runWebGLProgram(h, [r, o], 'float32');
    const d = gt({
        inputs: { x: u },
        backend: e,
        attrs: { shape: c.outShape },
    });
    return e.disposeIntermediateTensorInfo(u), d;
}
const uj = { kernelName: Yc, backendName: 'webgl', kernelFunc: cj };
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function hj(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { equation: r } = s,
        o = t,
        { allDims: i, summedDims: a, idDims: l } = _m(r, o.length);
    Rm(i.length, l, o);
    const { path: c, steps: u } = Dm(a, l),
        h = u.length;
    let d = null,
        p = i.length;
    const f = [];
    for (let m = 0; m < h; ++m) {
        for (const g of u[m]) {
            const { permutationIndices: y, expandDims: b } = Am(p, l[g]);
            let w;
            Om(y)
                ? (w = o[g])
                : ((w = nn({
                      inputs: { x: o[g] },
                      backend: e,
                      attrs: { perm: y },
                  })),
                  f.push(w));
            const x = w.shape.slice();
            for (let v = 0; v < b.length; ++v) x.splice(b[v], 0, 1);
            Ut(w.shape, x) ||
                ((w = gt({
                    inputs: { x: w },
                    backend: e,
                    attrs: { shape: x },
                })),
                f.push(w)),
                d === null
                    ? (d = w)
                    : ((d = kg({ inputs: { a: w, b: d }, backend: e })),
                      f.push(d));
        }
        m < h - 1 &&
            (c[m] >= 0 &&
                ((d = $h({
                    inputs: { x: d },
                    backend: e,
                    attrs: { axis: c[m] - (i.length - p), keepDims: !1 },
                })),
                f.push(d)),
            p--);
    }
    for (const m of f) m !== d && e.disposeIntermediateTensorInfo(m);
    return d;
}
const dj = { kernelName: Tp, backendName: 'webgl', kernelFunc: hj };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const pj = 'return (x >= 0.0) ? x : (exp(x) - 1.0);',
    fj = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,
    mj = Kt({ opSnippet: pj, packedOpSnippet: fj }),
    gj = { kernelName: ya, backendName: 'webgl', kernelFunc: mj };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const yj = 'return (b >= 0.0) ? a : a * (b + 1.0);',
    bj = `
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`,
    xj = (n) => {
        const { inputs: t, backend: e } = n,
            { dy: s, y: r } = t,
            o = tt().getBool('WEBGL_PACK_BINARY_OPERATIONS')
                ? new Ci(bj, s.shape, r.shape)
                : new fo(yj, s.shape, r.shape);
        return e.runWebGLProgram(o, [s, r], s.dtype);
    },
    wj = { kernelName: Ep, backendName: 'webgl', kernelFunc: xj };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const vj = `
  return vec4(equal(a, b));
`,
    kj = 'return float(a == b);',
    Sj = He({
        opSnippet: kj,
        packedOpSnippet: vj,
        dtype: 'bool',
        cpuKernelImpl: eG,
    }),
    Ij = { kernelName: Zc, backendName: 'webgl', kernelFunc: Sj };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Cj = `
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${Sm};
  float a1 = ${Im};
  float a2 = ${Cm};
  float a3 = ${$m};
  float a4 = ${Nm};
  float a5 = ${Tm};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`,
    $j = Kt({ opSnippet: Cj }),
    Nj = { kernelName: ba, backendName: 'webgl', kernelFunc: $j };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Tj =
        $i +
        `
  return exp(x);
`,
    Ej = `
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,
    NS = Kt({
        opSnippet: Tj,
        packedOpSnippet: Ej,
        cpuKernelImpl: nG,
        dtype: 'float32',
    }),
    _j = { kernelName: xa, backendName: 'webgl', kernelFunc: NS };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function tp(n) {
    const { inputs: t, attrs: e, backend: s } = n,
        { dim: r } = e,
        { input: o } = t,
        i = o.shape.length,
        a = o.shape.slice();
    let l = r;
    return (
        r < 0 &&
            (_(
                -(i + 1) <= r,
                () => `Axis must be in the interval [${-(i + 1)}, ${i}]`
            ),
            (l = i + r + 1)),
        a.splice(l, 0, 1),
        gt({ inputs: { x: o }, backend: s, attrs: { shape: a } })
    );
}
const Aj = { kernelName: Jc, backendName: 'webgl', kernelFunc: tp };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const mb = 'return exp(x) - 1.0;',
    Rj = Kt({ opSnippet: mb, packedOpSnippet: mb, cpuKernelImpl: sG }),
    Dj = { kernelName: wa, backendName: 'webgl', kernelFunc: Rj };
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class gb {
    constructor(t, e, s) {
        this.variableNames = ['real', 'imag'];
        const r = e[1];
        this.outputShape = e;
        const o = s ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`,
            i = s ? `${r}.0` : '1.0';
        let a;
        if (t === 'real') a = 'return real * expR - imag * expI;';
        else if (t === 'imag') a = 'return real * expI + imag * expR;';
        else
            throw new Error(
                `FFT component must be either "real" or "imag", got ${t}.`
            );
        this.userCode = `
      const float exponentMultiplier = ${o};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${a}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${r});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${r}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${i};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function TS(n, t, e) {
    const s = e.texData.get(n.dataId),
        r = rt(n.shape),
        o = n.shape[n.shape.length - 1],
        i = r / o,
        a = gt({ inputs: { x: n }, backend: e, attrs: { shape: [i, o] } }),
        l = a.shape,
        c = new gb('real', l, t),
        u = new gb('imag', l, t),
        h = [
            {
                dataId: s.complexTensorInfos.real.dataId,
                dtype: s.complexTensorInfos.real.dtype,
                shape: l,
            },
            {
                dataId: s.complexTensorInfos.imag.dataId,
                dtype: s.complexTensorInfos.imag.dtype,
                shape: l,
            },
        ],
        d = e.runWebGLProgram(c, h, 'float32'),
        p = e.runWebGLProgram(u, h, 'float32'),
        f = Or({ inputs: { real: d, imag: p }, backend: e });
    e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(p);
    const m = gt({ inputs: { x: f }, backend: e, attrs: { shape: n.shape } });
    return (
        e.disposeIntermediateTensorInfo(a),
        e.disposeIntermediateTensorInfo(f),
        m
    );
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Oj(n) {
    const { inputs: t, backend: e } = n,
        { input: s } = t;
    return TS(s, !1, e);
}
const Fj = { kernelName: _p, backendName: 'webgl', kernelFunc: Oj };
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class Lj {
    constructor(t, e) {
        (this.outputShape = []),
            (this.customUniforms = [{ name: 'value', type: 'float' }]),
            (this.variableNames = ['x']),
            (this.outputShape = t),
            (this.userCode = `
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Sl(n) {
    const { backend: t, attrs: e } = n,
        { shape: s, value: r } = e;
    let { dtype: o } = e;
    if (((o = o || hi(r)), o === 'string')) {
        const i = be(o, rt(s));
        return i.fill(r), t.makeTensorInfo(s, o, i);
    } else {
        const i = new Lj(s, r),
            a = [[r]];
        return t.runWebGLProgram(i, [], o, a);
    }
}
const Pj = { kernelName: Ap, backendName: 'webgl', kernelFunc: Sl };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class zj {
    constructor(t) {
        (this.variableNames = ['Image']), (this.outputShape = []);
        const e = t[2];
        (this.outputShape = t),
            (this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${e} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${e}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Bj = {
    kernelName: Rp,
    backendName: 'webgl',
    kernelFunc: ({ inputs: n, backend: t }) => {
        const { image: e } = n,
            s = t,
            r = new zj(e.shape);
        return s.runWebGLProgram(r, [e], e.dtype);
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const yb = 'return floor(x);',
    Mj = Kt({ opSnippet: yb, packedOpSnippet: yb, cpuKernelImpl: rG }),
    Vj = { kernelName: va, backendName: 'webgl', kernelFunc: Mj };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Wj = `
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`,
    Uj = `
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`,
    Gj = He({ opSnippet: Wj, packedOpSnippet: Uj, dtype: 'int32' }),
    Hj = { kernelName: ka, backendName: 'webgl', kernelFunc: Gj };
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class jj {
    constructor(t) {
        this.variableNames = ['A'];
        const e = rn(),
            [s, r] = t;
        (this.outputShape = t),
            (this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${s}.0);

        vec4 values = ${e.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `);
    }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class qj {
    constructor(t) {
        (this.variableNames = ['A']),
            (this.packedInputs = !1),
            (this.packedOutput = !0);
        const e = rn(),
            [s, r] = t;
        (this.outputShape = t),
            (this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${r}.0, ${s}.0);
            vec4 values = ${e.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${e.output} = result;
      }
    `);
    }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Kj = { kernelName: ld, backendName: 'webgl', kernelFunc: Xj };
let Do,
    Jh = tt().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');
function Xj(n) {
    const { inputs: t, backend: e, attrs: s } = n;
    let { pixels: r } = t;
    const { numChannels: o } = s,
        i = typeof HTMLVideoElement < 'u' && r instanceof HTMLVideoElement,
        a = typeof HTMLImageElement < 'u' && r instanceof HTMLImageElement,
        [l, c] = i ? [r.videoWidth, r.videoHeight] : [r.width, r.height],
        u = [c, l],
        h = [c, l, o];
    if (a || i) {
        const m = tt().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');
        (Do == null || m !== Jh) &&
            ((Jh = m),
            (Do = document
                .createElement('canvas')
                .getContext('2d', { willReadFrequently: Jh }))),
            (Do.canvas.width = l),
            (Do.canvas.height = c),
            Do.drawImage(r, 0, 0, l, c),
            (r = Do.canvas);
    }
    const d = e.makeTensorInfo(u, 'int32');
    (e.texData.get(d.dataId).usage = An.PIXELS),
        e.gpgpu.uploadPixelDataToTexture(e.getTexture(d.dataId), r);
    const p = tt().getBool('WEBGL_PACK') ? new qj(h) : new jj(h),
        f = e.runWebGLProgram(p, [d], 'int32');
    return e.disposeData(d.dataId), f;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Yj(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r, filter: o, bias: i, preluActivationWeights: a } = t,
        {
            strides: l,
            pad: c,
            dataFormat: u,
            dilations: h,
            dimRoundingMode: d,
            activation: p,
            leakyreluAlpha: f,
        } = s,
        m = Zs(u),
        g = Le(r.shape, o.shape, l, h, c, d, !1, m);
    let y;
    const b = [],
        w = i != null,
        x = a != null,
        v = p === 'leakyrelu',
        C = () => {
            const T = [r, o],
                N = (R, P) => {
                    if (
                        P === 'NCHW' &&
                        R.shape.length === 1 &&
                        R.shape[0] !== 1
                    ) {
                        const E = gt({
                            inputs: { x: R },
                            backend: e,
                            attrs: { shape: [R.shape[0], 1, 1] },
                        });
                        return b.push(E), E;
                    }
                    return R;
                };
            if ((w && T.push(N(i, u)), x && T.push(N(a, u)), v)) {
                const R = e.makeTensorInfo([], 'float32', Ir(f, 'float32'));
                T.push(R), b.push(R);
            }
            return T;
        };
    if (
        g.filterHeight === 1 &&
        g.filterWidth === 1 &&
        g.dilationHeight === 1 &&
        g.dilationWidth === 1 &&
        g.strideHeight === 1 &&
        g.strideWidth === 1 &&
        (g.padInfo.type === 'SAME' || g.padInfo.type === 'VALID')
    )
        y = kS({
            x: r,
            filter: o,
            convInfo: g,
            backend: e,
            bias: i,
            activation: p,
            preluActivationWeights: a,
            leakyreluAlpha: f,
        });
    else if (
        g.strideWidth <= 2 &&
        m === 'channelsLast' &&
        tt().getBool('WEBGL_EXP_CONV')
    ) {
        const T = p ? Qi(p, !0) : null,
            N = new vS(g, w, T, x, v),
            R = [
                [g.padInfo.top, g.padInfo.left],
                [g.strideHeight, g.strideWidth],
                [g.dilationHeight, g.dilationWidth],
                [g.inHeight, g.inWidth],
            ],
            P = C();
        y = e.runWebGLProgram(N, P, 'float32', R);
    } else if (tt().getBool('WEBGL_CONV_IM2COL'))
        y = SS({
            x: r,
            filter: o,
            convInfo: g,
            backend: e,
            bias: i,
            activation: p,
            preluActivationWeights: a,
            leakyreluAlpha: f,
        });
    else {
        const T = p ? Qi(p, !1) : null,
            N = new wS(g, w, T, x, v),
            R = C();
        y = e.runWebGLProgram(N, R, 'float32');
    }
    const $ = gt({
        inputs: { x: y },
        backend: e,
        attrs: { shape: g.outShape },
    });
    return b.push(y), b.forEach((T) => e.disposeIntermediateTensorInfo(T)), $;
}
const Zj = { kernelName: tc, backendName: 'webgl', kernelFunc: Yj };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Jj(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r, filter: o, bias: i, preluActivationWeights: a } = t,
        {
            strides: l,
            pad: c,
            dilations: u,
            dimRoundingMode: h,
            activation: d,
            leakyreluAlpha: p,
        } = s,
        f = [];
    let m = u;
    m == null && (m = [1, 1]),
        _(
            We(l, m),
            () =>
                `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`
        );
    const g = Le(r.shape, o.shape, l, m, c, h, !0),
        y =
            tt().getBool('WEBGL_PACK_DEPTHWISECONV') &&
            g.strideWidth <= 2 &&
            g.outChannels / g.inChannels === 1,
        b = d ? Qi(d, y) : null,
        w = [r, o],
        x = i != null,
        v = a != null,
        C = d === 'leakyrelu';
    if ((x && w.push(i), v && w.push(a), C)) {
        const R = e.makeTensorInfo([], 'float32', Ir(p, 'float32'));
        w.push(R), f.push(R);
    }
    let $;
    y ? ($ = new $S(g, x, b, v, C)) : ($ = new CS(g, x, b, v, C));
    const T = [
            [g.padInfo.top, g.padInfo.left],
            [g.strideHeight, g.strideWidth],
            [g.dilationHeight, g.dilationWidth],
            [g.inHeight, g.inWidth],
        ],
        N = e.runWebGLProgram($, w, 'float32', T);
    return f.forEach((R) => e.disposeIntermediateTensorInfo(R)), N;
}
const Qj = { kernelName: ec, backendName: 'webgl', kernelFunc: Jj };
class t8 {
    constructor(t, e, s, r) {
        (this.sliceDim = t),
            (this.strides = e),
            (this.paramsShape = r),
            (this.variableNames = ['x', 'indices']),
            (this.outputShape = s);
        const o = Zt(s.length);
        let i = `
    int index;`;
        for (let a = 0; a < this.sliceDim; a++)
            i += `
          index = round(getIndices(coords[0], ${a}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[a]};
          flattenIndex += index * ${this.strides[a]};`;
        this.userCode = `
         void main() {
          ${o} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${i}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function e8(n) {
    const { inputs: t, backend: e } = n,
        { params: s, indices: r } = t,
        o = r.shape,
        i = o[o.length - 1],
        a = rt(s.shape),
        [l, c, u, h] = dm(s, r),
        d = gt({ inputs: { x: r }, backend: e, attrs: { shape: [c, i] } }),
        p = gt({
            inputs: { x: s },
            backend: e,
            attrs: { shape: [rt(s.shape) / u, u] },
        });
    if (e.shouldExecuteOnCPU([s, r]) || s.dtype === 'string') {
        const y = e.readSync(r.dataId),
            b = e.bufferSync(s),
            w = oG(y, b, s.dtype, c, i, u, h, s.shape, a);
        return e.makeTensorInfo(l, s.dtype, w.values);
    }
    const f = new t8(i, h, [c, u], s.shape),
        m = e.runWebGLProgram(f, [p, d], p.dtype),
        g = gt({ inputs: { x: m }, backend: e, attrs: { shape: l } });
    return (
        e.disposeIntermediateTensorInfo(d),
        e.disposeIntermediateTensorInfo(p),
        e.disposeIntermediateTensorInfo(m),
        g
    );
}
const n8 = { kernelName: Dp, backendName: 'webgl', kernelFunc: e8 };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class s8 {
    constructor(t, e) {
        (this.variableNames = ['A', 'indices']),
            (this.outputShape = e),
            (this.rank = e.length);
        const s = Zt(this.rank),
            r = r8(t);
        this.userCode = `
      void main() {
        ${s} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${t[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${r}));
      }
    `;
    }
}
function r8(n, t) {
    const e = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'],
        s = [];
    for (let r = 0; r < n.length; r++)
        r === 2 ? s.push('index') : s.push(`${e[r]}`);
    return s.join();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function ES(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r, indices: o } = t,
        { axis: i, batchDims: a } = s,
        l = Bt(i, r.shape)[0];
    if (tt().get('DEBUG')) {
        const b = e.readSync(o.dataId),
            w = r.shape[l];
        for (let x = 0; x < b.length; ++x) {
            const v = b[x];
            _(
                v <= w - 1 && v >= 0,
                () => `GatherV2: the index value ${v} is not in [0, ${w - 1}]`
            );
        }
    }
    const c = Lm(r, o, l, a),
        u = rt(o.shape),
        h = [],
        d = gt({
            inputs: { x: r },
            backend: e,
            attrs: {
                shape: [c.batchSize, c.outerSize, c.dimSize, c.sliceSize],
            },
        }),
        p = gt({
            inputs: { x: o },
            backend: e,
            attrs: { shape: [c.batchSize, u / c.batchSize] },
        });
    h.push(d), h.push(p);
    const f = [c.batchSize, c.outerSize, u / c.batchSize, c.sliceSize];
    if (e.shouldExecuteOnCPU([r, o]) || r.dtype === 'string') {
        const b = e.bufferSync(p),
            w = e.bufferSync(d),
            x = iG(w, b, f);
        return (
            h.forEach((v) => e.disposeIntermediateTensorInfo(v)),
            e.makeTensorInfo(c.outputShape, x.dtype, x.values)
        );
    }
    const m = new s8(d.shape, f),
        g = e.runWebGLProgram(m, [d, p], d.dtype);
    h.push(g);
    const y = gt({
        inputs: { x: g },
        backend: e,
        attrs: { shape: c.outputShape },
    });
    return h.forEach((b) => e.disposeIntermediateTensorInfo(b)), y;
}
const o8 = { kernelName: tu, backendName: 'webgl', kernelFunc: ES };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const i8 = 'return float(a > b);',
    a8 = `
  return vec4(greaterThan(a, b));
`,
    l8 = He({
        opSnippet: i8,
        packedOpSnippet: a8,
        cpuKernelImpl: aG,
        dtype: 'bool',
    }),
    c8 = { kernelName: eu, backendName: 'webgl', kernelFunc: l8 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const u8 = 'return float(a >= b);',
    h8 = `
  return vec4(greaterThanEqual(a, b));
`,
    d8 = He({
        opSnippet: u8,
        packedOpSnippet: h8,
        dtype: 'bool',
        cpuKernelImpl: lG,
    }),
    p8 = { kernelName: Sa, backendName: 'webgl', kernelFunc: d8 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function f8(n) {
    const { inputs: t, backend: e } = n,
        { input: s } = t;
    return TS(s, !0, e);
}
const m8 = { kernelName: Op, backendName: 'webgl', kernelFunc: f8 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const g8 = 'return float(!isnan(x) && !isinf(x));',
    y8 = Kt({ opSnippet: g8, dtype: 'bool' }),
    b8 = { kernelName: Ca, backendName: 'webgl', kernelFunc: y8 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const x8 = 'return float(isinf(x));',
    w8 = Kt({ opSnippet: x8, dtype: 'bool' }),
    v8 = { kernelName: $a, backendName: 'webgl', kernelFunc: w8 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const k8 = 'return float(isnan(x));',
    S8 = Kt({ opSnippet: k8, dtype: 'bool' }),
    I8 = { kernelName: Na, backendName: 'webgl', kernelFunc: S8 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const C8 = 'return float(a < b);',
    $8 = `
  return vec4(lessThan(a, b));
`,
    N8 = He({
        opSnippet: C8,
        packedOpSnippet: $8,
        cpuKernelImpl: cG,
        dtype: 'bool',
    }),
    T8 = { kernelName: su, backendName: 'webgl', kernelFunc: N8 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const E8 = 'return float(a <= b);',
    _8 = `
  return vec4(lessThanEqual(a, b));
`,
    A8 = He({
        opSnippet: E8,
        packedOpSnippet: _8,
        cpuKernelImpl: uG,
        dtype: 'bool',
    }),
    R8 = { kernelName: ru, backendName: 'webgl', kernelFunc: A8 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function D8(n) {
    const { backend: t, attrs: e } = n,
        { start: s, stop: r, num: o } = e,
        i = hG(s, r, o);
    return t.makeTensorInfo([i.length], 'float32', i);
}
const O8 = { kernelName: Lp, backendName: 'webgl', kernelFunc: D8 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const F8 =
        $i +
        `
  return x < 0.0 ? 0./0. : log(x);
`,
    L8 = `
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`,
    P8 = Kt({ opSnippet: F8, packedOpSnippet: L8, cpuKernelImpl: dG }),
    z8 = { kernelName: Ta, backendName: 'webgl', kernelFunc: P8 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const B8 =
        $i +
        `
  return log(1.0 + x);
`,
    M8 = Kt({ opSnippet: B8 }),
    V8 = { kernelName: Ea, backendName: 'webgl', kernelFunc: M8 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const W8 = 'return float(a >= 1.0 && b >= 1.0);',
    U8 = `
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`,
    G8 = He({ opSnippet: W8, packedOpSnippet: U8, dtype: 'bool' }),
    H8 = { kernelName: ou, backendName: 'webgl', kernelFunc: G8 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const j8 = 'return float(!(x >= 1.0));',
    q8 = Kt({ opSnippet: j8 }),
    K8 = { kernelName: iu, backendName: 'webgl', kernelFunc: q8 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const X8 = 'return float(a >= 1.0 || b >= 1.0);',
    Y8 = `
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`,
    Z8 = He({ opSnippet: X8, packedOpSnippet: Y8, dtype: 'bool' }),
    J8 = { kernelName: au, backendName: 'webgl', kernelFunc: Z8 };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class Q8 {
    constructor(t, e, s, r, o) {
        (this.variableNames = ['x']), (this.outputShape = []);
        const i = e,
            a = t[3] - 1;
        this.outputShape = t;
        let l;
        const c = `float(${s}) + float(${r}) * sum`;
        o === 0.5
            ? (l = `inversesqrt(${c})`)
            : o === 1
            ? (l = `1.0/(${c})`)
            : (l = `exp(log(${c}) * float(-${o}));`),
            (this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${i}; j <= ${i}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${a}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${l};
        setOutput(val);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class tq {
    constructor(t, e, s, r, o) {
        (this.variableNames = ['x']),
            (this.outputShape = []),
            (this.packedInputs = !0),
            (this.packedOutput = !0);
        const i = e,
            a = t[3] - 1;
        this.outputShape = t;
        let l;
        const c = `float(${s}) + float(${r}) * sum`;
        o === 0.5
            ? (l = `inversesqrt(${c})`)
            : o === 1
            ? (l = `1.0/(${c})`)
            : (l = `exp(log(${c}) * float(-${o}));`),
            (this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${i};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${i}; j <= ${i}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${a}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${l};
        setOutput(result);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const eq = (n) => {
        const { inputs: t, backend: e, attrs: s } = n,
            { x: r } = t,
            { depthRadius: o, bias: i, alpha: a, beta: l } = s,
            c = tt().getBool('WEBGL_PACK_NORMALIZATION')
                ? new tq(r.shape, o, i, a, l)
                : new Q8(r.shape, o, i, a, l);
        return e.runWebGLProgram(c, [r], r.dtype);
    },
    nq = { kernelName: lu, backendName: 'webgl', kernelFunc: eq };
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class sq {
    constructor(t, e, s, r, o) {
        (this.variableNames = ['inputImage', 'outputImage', 'dy']),
            (this.outputShape = []),
            (this.outputShape = t),
            (this.depth = t[3]),
            (this.depthRadius = e),
            (this.bias = s),
            (this.alpha = r),
            (this.beta = o),
            (this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${e})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${e} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${r}) * norm + float(${s});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${r})
                * float(${o})
                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${o});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const rq = (n) => {
        const { inputs: t, backend: e, attrs: s } = n,
            { x: r, y: o, dy: i } = t,
            { depthRadius: a, bias: l, alpha: c, beta: u } = s,
            h = new sq(r.shape, a, l, c, u);
        return e.runWebGLProgram(h, [r, o, i], r.dtype);
    },
    oq = { kernelName: Pp, backendName: 'webgl', kernelFunc: rq };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function iq(n, t, e, s) {
    const r = rt(t),
        i = rt(n.shape) / r,
        a = gt({ inputs: { x: n }, attrs: { shape: [i, r] }, backend: s }),
        l = No(a, n.dtype, 'max', s),
        c = gt({ inputs: { x: l }, attrs: { shape: e }, backend: s });
    return (
        s.disposeIntermediateTensorInfo(a),
        s.disposeIntermediateTensorInfo(l),
        c
    );
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function _S(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { reductionIndices: o, keepDims: i } = s,
        a = r.shape.length,
        l = Bt(o, r.shape);
    let c = l;
    const u = me(c, a),
        h = u != null,
        d = e.shouldExecuteOnCPU([r]);
    let p = r;
    if (h) {
        if (d) {
            const w = e.texData.get(p.dataId).values,
                x = new Array(a);
            for (let $ = 0; $ < x.length; $++) x[$] = r.shape[u[$]];
            const v = wg(w, r.shape, r.dtype, u, x);
            p = e.makeTensorInfo(x, r.dtype);
            const C = e.texData.get(p.dataId);
            C.values = v;
        } else p = Ch(r, u, e);
        c = we(c.length, a);
    }
    Ue('max', c, a);
    const [f, m] = Pe(p.shape, c);
    let g = f;
    i && (g = xe(f, l));
    let y;
    if (d) {
        const w = e.texData.get(p.dataId).values,
            x = pG(w, rt(m), g, r.dtype);
        y = e.makeTensorInfo(g, r.dtype);
        const v = e.texData.get(y.dataId);
        v.values = x;
    } else y = iq(p, m, g, e);
    return h && e.disposeIntermediateTensorInfo(p), y;
}
const aq = { kernelName: cu, backendName: 'webgl', kernelFunc: _S };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const lq =
        vg +
        `
  return max(a, b);
`,
    cq =
        `
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` +
        $o +
        `
  return result;
`,
    uq = He({ opSnippet: lq, packedOpSnippet: cq, cpuKernelImpl: fG }),
    hq = { kernelName: _a, backendName: 'webgl', kernelFunc: uq };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function dq(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t;
    wl(r, 'maxPool');
    const { filterSize: o, strides: i, pad: a, dimRoundingMode: l } = s,
        c = 1;
    _(
        We(i, c),
        () =>
            `Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`
    );
    const u = ts(r.shape, o, i, c, a, l);
    if (
        u.filterWidth === 1 &&
        u.filterHeight === 1 &&
        Ut(u.inShape, u.outShape)
    )
        return Cn({ inputs: { x: r }, backend: e });
    const h = new ta(u, 'max', !1);
    return e.runWebGLProgram(h, [r], r.dtype);
}
const pq = { kernelName: uu, backendName: 'webgl', kernelFunc: dq };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function fq(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        {
            filterSize: o,
            strides: i,
            pad: a,
            dataFormat: l,
            dimRoundingMode: c,
        } = s,
        u = [1, 1, 1],
        h = Ys(r.shape, o, i, u, a, c, l),
        d = new Sg(h, 'max', !1);
    return e.runWebGLProgram(d, [r], r.dtype);
}
const mq = { kernelName: hu, backendName: 'webgl', kernelFunc: fq };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class gq {
    constructor(t) {
        (this.variableNames = ['dy', 'maxPos']), (this.outputShape = t.inShape);
        const e = t.strideHeight,
            s = t.strideWidth,
            r = t.dilationHeight,
            o = t.effectiveFilterHeight,
            i = t.effectiveFilterWidth,
            a = o - 1 - t.padInfo.top,
            l = i - 1 - t.padInfo.left,
            c = o * i - 1;
        this.userCode = `
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${o};
          wR += ${r}) {
          float dyR = float(dyRCorner + wR) / ${e}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${i}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${c} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${i} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
class yq {
    constructor(t) {
        (this.variableNames = ['dy', 'maxPos']), (this.outputShape = t.inShape);
        const e = t.strideDepth,
            s = t.strideHeight,
            r = t.strideWidth,
            o = t.dilationDepth,
            i = t.dilationHeight,
            a = t.dilationWidth,
            l = t.effectiveFilterDepth,
            c = t.effectiveFilterHeight,
            u = t.effectiveFilterWidth,
            h = l - 1 - t.padInfo.front,
            d = c - 1 - t.padInfo.top,
            p = u - 1 - t.padInfo.left,
            f = l * c * u - 1;
        this.userCode = `
      const ivec3 pads = ivec3(${h}, ${d}, ${p});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${l};
           wD += ${o}) {
          float dyD = float(dyDCorner + wD) / ${e}.0;

          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${c};
              wR += ${i}) {
            float dyR = float(dyRCorner + wR) / ${s}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${u};
                wC += ${a}) {
              float dyC = float(dyCCorner + wC) / ${r}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${f} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${c} * ${u} +
                  wR * ${u} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function bq(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: r, input: o } = t,
        i = o,
        { filterSize: a, strides: l, pad: c, dimRoundingMode: u } = s,
        h = [1, 1, 1],
        d = Ys(i.shape, a, l, h, c, u),
        p = new Sg(d, 'max', !0),
        f = e.runWebGLProgram(p, [i], i.dtype),
        m = new yq(d),
        g = e.runWebGLProgram(m, [r, f], i.dtype);
    return e.disposeIntermediateTensorInfo(f), g;
}
const xq = { kernelName: Bp, backendName: 'webgl', kernelFunc: bq };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function wq(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { dy: r, input: o, output: i } = t,
        a = o;
    wl([o, i], 'maxPoolGrad');
    const { filterSize: l, strides: c, pad: u, dimRoundingMode: h } = s,
        d = ts(a.shape, l, c, 1, u, h),
        p = !0,
        f = new ta(d, 'max', p),
        m = e.runWebGLProgram(f, [a], a.dtype),
        g = new gq(d),
        y = e.runWebGLProgram(g, [r, m], a.dtype);
    return e.disposeIntermediateTensorInfo(m), y;
}
const vq = { kernelName: zp, backendName: 'webgl', kernelFunc: wq };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function kq(n, t, e, s) {
    let r = new ta(e, 'max', !1);
    const o = s.runWebGLProgram(r, [n], 'float32');
    r = new ta(e, 'max', !0, !0, t);
    const i = s.runWebGLProgram(r, [n], 'float32');
    return [o, i];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Sq = {
    kernelName: Mp,
    backendName: 'webgl',
    kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
        const { x: s } = n,
            { filterSize: r, strides: o, pad: i, includeBatchInIndex: a } = t,
            l = e;
        _(
            s.shape.length === 4,
            () =>
                `Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`
        );
        const c = [1, 1];
        _(
            We(o, c),
            () =>
                `Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`
        );
        const u = ts(s.shape, r, o, c, i),
            [h, d] = kq(s, a, u, l);
        return [h, d];
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Iq(n, t, e, s) {
    const r = rt(t),
        i = rt(n.shape) / r,
        a = gt({ inputs: { x: n }, attrs: { shape: [i, r] }, backend: s }),
        l = No(a, 'float32', 'mean', s),
        c = gt({ inputs: { x: l }, attrs: { shape: e }, backend: s });
    return (
        s.disposeIntermediateTensorInfo(a),
        s.disposeIntermediateTensorInfo(l),
        c
    );
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Cq = {
    kernelName: du,
    backendName: 'webgl',
    kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
        const { x: s } = n,
            { keepDims: r, axis: o } = t,
            i = e,
            a = s.shape.length,
            l = Bt(o, s.shape);
        let c = l;
        const u = me(c, a),
            h = u != null,
            d = i.shouldExecuteOnCPU([s]),
            p = [];
        let f = s;
        if (h) {
            if (d) {
                const x = i.texData.get(f.dataId).values,
                    v = new Array(a);
                for (let T = 0; T < v.length; T++) v[T] = s.shape[u[T]];
                const C = wg(x, s.shape, s.dtype, u, v);
                f = i.makeTensorInfo(v, s.dtype);
                const $ = i.texData.get(f.dataId);
                $.values = C;
            } else f = Ch(s, u, i);
            p.push(f), (c = we(c.length, a));
        }
        Ue('sum', c, a);
        const [m, g] = Pe(f.shape, c);
        let y = m;
        r && (y = xe(m, l));
        const b = Iq(f, g, y, i);
        for (const w of p) i.disposeIntermediateTensorInfo(w);
        return b;
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function $q(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { axis: o, keepDims: i } = s,
        a = r.shape.length,
        l = Bt(o, r.shape);
    let c = l;
    const u = me(c, a);
    let h = r;
    u != null &&
        ((h = nn({ inputs: { x: r }, backend: e, attrs: { perm: u } })),
        (c = we(c.length, r.shape.length))),
        Ue('min', c, a);
    const [d, p] = Pe(h.shape, c),
        f = rt(p),
        m = gt({ inputs: { x: h }, backend: e, attrs: { shape: [-1, f] } }),
        g = No(m, m.dtype, 'min', e);
    let y;
    if (i) {
        const b = xe(d, l);
        y = gt({ inputs: { x: g }, backend: e, attrs: { shape: b } });
    } else y = gt({ inputs: { x: g }, backend: e, attrs: { shape: d } });
    return (
        e.disposeIntermediateTensorInfo(m),
        e.disposeIntermediateTensorInfo(g),
        u != null && e.disposeIntermediateTensorInfo(h),
        y
    );
}
const Nq = { kernelName: pu, backendName: 'webgl', kernelFunc: $q };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Tq =
        vg +
        `
  return min(a, b);
`,
    Eq =
        `
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` +
        $o +
        `
  return result;
`,
    _q = He({ opSnippet: Tq, packedOpSnippet: Eq, cpuKernelImpl: mG }),
    Aq = { kernelName: Aa, backendName: 'webgl', kernelFunc: _q };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class Rq {
    constructor(t, e, s) {
        (this.variableNames = ['x']),
            (this.outputShape = e.map((u, h) => u[0] + t[h] + u[1]));
        const r = t.length,
            o = Zt(r),
            i = e.map((u) => u[0]).join(','),
            a = e.map((u, h) => u[0] + t[h]).join(','),
            l = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(
                0,
                r
            ),
            c = s === 'reflect' ? 0 : 1;
        if (r === 1) {
            this.userCode = `
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${c};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${c};
          }
          setOutput(getX(outC - start));
        }
      `;
            return;
        }
        this.userCode = `
      ${o} start = ${o}(${i});
      ${o} end = ${o}(${a});

      void main() {
        ${o} outC = getOutputCoords();
        for (int i = 0; i < ${r}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${c};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${c};
          }
        }
        ${o} coords = outC - start;
        setOutput(getX(${l}));
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class Dq {
    constructor(t, e, s) {
        (this.variableNames = ['x']),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = e.map((f, m) => f[0] + t[m] + f[1]));
        const r = t.length,
            o = Zt(r),
            i = e.map((f) => f[0]).join(','),
            a = e.map((f, m) => f[0] + t[m]).join(','),
            l = en('rc', r),
            c = en('source', r),
            u = `${l[r - 1]} < ${this.outputShape[r - 1]}`,
            h = r === 1 ? 'source' : `vec2(${c.slice(-2).join()})`,
            d = s === 'reflect' ? 0 : 1;
        let p = '';
        if (r === 1) {
            const f = `
        ${o} source = rc;
        if (source < start) {
          source = start * 2 - source - ${d};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${d};
        }
        source -= start;
      `;
            p = `
        ${o} rc = outputLoc;
        ${f}
        result[0] = getChannel(getX(${c.join()}), ${h});
        ${l[r - 1]} += 1;
        if(${u}) {
          ${f}
          result[1] = getChannel(getX(${c.join()}), ${h});
        }
      `;
        } else {
            const f = `
        ${o} source = rc;
        ${o} lt = ${o}(lessThan(source, start));
        ${o} gte = ${o}(greaterThanEqual(source, end));
        ${o} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${d}) +
                gte * ((end - 1) * 2 - source + ${d});
        source -= start;
      `;
            p = `
        ${o} rc = outputLoc;
        ${f}
        result[0] = getChannel(getX(${c.join()}), ${h});
        ${l[r - 1]} += 1;
        if(${u}) {
          ${f}
          result[1] = getChannel(getX(${c.join()}), ${h});
        }
        rc = outputLoc;
        ${l[r - 2]} += 1;
        if(${l[r - 2]} < ${this.outputShape[r - 2]}) {
          ${f}
          result[2] = getChannel(getX(${c.join()}), ${h});
          ${l[r - 1]} += 1;
          if(${u}) {
            ${f}
            result[3] = getChannel(getX(${c.join()}), ${h});
          }
        }
      `;
        }
        this.userCode = `
      const ${o} start = ${o}(${i});
      const ${o} end = ${o}(${a});

      void main() {
        ${o} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${p}
        setOutput(result);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Oq = ({ inputs: n, backend: t, attrs: e }) => {
        const { x: s } = n,
            { paddings: r, mode: o } = e,
            i = tt().getBool('WEBGL_PACK_ARRAY_OPERATIONS')
                ? new Dq(s.shape, r, o)
                : new Rq(s.shape, r, o);
        return t.runWebGLProgram(i, [s], s.dtype);
    },
    Fq = { kernelName: fu, backendName: 'webgl', kernelFunc: Oq };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Lq = `if (b == 0.0) return NAN;
  return mod(a, b);`,
    Pq =
        `
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  ` +
        $o +
        `
  return result;
`,
    zq = He({ opSnippet: Lq, packedOpSnippet: Pq }),
    Bq = { kernelName: Ra, backendName: 'webgl', kernelFunc: zq };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class Mq {
    constructor(t, e, s) {
        (this.variableNames = ['probs']),
            (this.customUniforms = [{ name: 'seed', type: 'float' }]),
            (this.outputShape = [t, s]),
            (this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${e - 1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${e - 1}));
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Vq = `
if (a == b) {
  return 1.0;
};
return a / b;`,
    Wq = `
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`,
    AS = He({ opSnippet: Vq, packedOpSnippet: Wq, checkOutOfBounds: !0 }),
    Uq = { kernelName: ga, backendName: 'webgl', kernelFunc: AS };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const bb = 'return a - b;',
    RS = He({
        opSnippet: bb,
        packedOpSnippet: bb,
        supportsComplex: !0,
        cpuKernelImpl: LG,
    }),
    Gq = { kernelName: Ka, backendName: 'webgl', kernelFunc: RS };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function DS(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { logits: r } = t,
        { dim: o } = s,
        i = Bt([o], r.shape),
        a = _S({
            inputs: { x: r },
            backend: e,
            attrs: { reductionIndices: i, keepDims: !1 },
        }),
        l = xe(a.shape, i),
        c = gt({ inputs: { x: a }, backend: e, attrs: { shape: l } }),
        u = RS({ inputs: { a: r, b: c }, backend: e }),
        h = NS({ inputs: { x: u }, backend: e }),
        d = $h({
            inputs: { x: h },
            backend: e,
            attrs: { axis: i, keepDims: !1 },
        }),
        p = gt({ inputs: { x: d }, backend: e, attrs: { shape: l } }),
        f = AS({ inputs: { a: h, b: p }, backend: e });
    return (
        e.disposeIntermediateTensorInfo(a),
        e.disposeIntermediateTensorInfo(c),
        e.disposeIntermediateTensorInfo(u),
        e.disposeIntermediateTensorInfo(h),
        e.disposeIntermediateTensorInfo(d),
        e.disposeIntermediateTensorInfo(p),
        f
    );
}
const Hq = { kernelName: Ru, backendName: 'webgl', kernelFunc: DS };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function jq(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { logits: r } = t,
        { numSamples: o, seed: i, normalized: a } = s,
        l = a
            ? r
            : DS({
                  inputs: { logits: r },
                  backend: e,
                  attrs: { dim: r.shape.length - 1 },
              }),
        c = l.shape[0],
        u = l.shape[1],
        h = new Mq(c, u, o),
        d = [[i]],
        p = e.runWebGLProgram(h, [l], 'int32', d);
    return a || e.disposeIntermediateTensorInfo(l), p;
}
const qq = { kernelName: Vp, backendName: 'webgl', kernelFunc: jq };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Kq =
        ns +
        `
  return -x;
`,
    Xq = `
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
function Yq(n) {
    const { inputs: t, backend: e } = n,
        { x: s } = t;
    if (e.shouldExecuteOnCPU([s])) {
        const o = e.texData.get(s.dataId),
            [i, a] = yG(o.values, s.shape, s.dtype);
        return e.makeTensorInfo(a, s.dtype, i);
    }
    let r;
    return (
        tt().getBool('WEBGL_PACK_UNARY_OPERATIONS')
            ? (r = new ir(s.shape, Xq))
            : (r = new vs(s.shape, Kq)),
        e.runWebGLProgram(r, [s], s.dtype)
    );
}
const Zq = { kernelName: mu, backendName: 'webgl', kernelFunc: Yq };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const Jq = om;
function Qq(n) {
    En(
        'tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead'
    );
    const { inputs: t, backend: e, attrs: s } = n,
        { boxes: r, scores: o } = t,
        { maxOutputSize: i, iouThreshold: a, scoreThreshold: l } = s,
        c = e.readSync(r.dataId),
        u = e.readSync(o.dataId),
        { selectedIndices: h } = Jq(c, u, i, a, l);
    return e.makeTensorInfo([h.length], 'int32', new Int32Array(h));
}
const tK = { kernelName: Wp, backendName: 'webgl', kernelFunc: Qq };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const eK = im;
function nK(n) {
    En(
        'tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead'
    );
    const { inputs: t, backend: e, attrs: s } = n,
        { boxes: r, scores: o } = t,
        {
            maxOutputSize: i,
            iouThreshold: a,
            scoreThreshold: l,
            padToMaxOutputSize: c,
        } = s,
        u = e.readSync(r.dataId),
        h = e.readSync(o.dataId),
        { selectedIndices: d, validOutputs: p } = eK(u, h, i, a, l, c);
    return [
        e.makeTensorInfo([d.length], 'int32', new Int32Array(d)),
        e.makeTensorInfo([], 'int32', new Int32Array([p])),
    ];
}
const sK = { kernelName: Up, backendName: 'webgl', kernelFunc: nK };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const rK = am;
function oK(n) {
    En(
        'tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead'
    );
    const { inputs: t, backend: e, attrs: s } = n,
        { boxes: r, scores: o } = t,
        {
            maxOutputSize: i,
            iouThreshold: a,
            scoreThreshold: l,
            softNmsSigma: c,
        } = s,
        u = e.readSync(r.dataId),
        h = e.readSync(o.dataId),
        d = i,
        p = a,
        f = l,
        m = c,
        { selectedIndices: g, selectedScores: y } = rK(u, h, d, p, f, m);
    return [
        e.makeTensorInfo([g.length], 'int32', new Int32Array(g)),
        e.makeTensorInfo([y.length], 'float32', new Float32Array(y)),
    ];
}
const iK = { kernelName: Gp, backendName: 'webgl', kernelFunc: oK };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class aK {
    constructor(t, e, s, r) {
        (this.variableNames = ['indices']),
            (this.outputShape = [t, e]),
            (this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${r}), float(${s}),
                      float(index == coords.y)));
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const lK = (n) => {
        const { inputs: t, backend: e, attrs: s } = n,
            { indices: r } = t,
            { dtype: o, depth: i, onValue: a, offValue: l } = s,
            c = rt(r.shape),
            u = new aK(c, i, a, l),
            h = gt({ inputs: { x: r }, backend: e, attrs: { shape: [c] } }),
            d = e.runWebGLProgram(u, [h], o);
        e.disposeIntermediateTensorInfo(h);
        const p = [...r.shape, i],
            f = gt({ inputs: { x: d }, backend: e, attrs: { shape: p } });
        return e.disposeIntermediateTensorInfo(d), f;
    },
    cK = { kernelName: bu, backendName: 'webgl', kernelFunc: lK };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Ec(n) {
    const { inputs: t, backend: e } = n,
        { x: s } = t;
    if (s.dtype === 'complex64') {
        const r = kl({ inputs: { input: s }, backend: e }),
            o = Ec({ inputs: { x: r }, backend: e }),
            i = Nh({ inputs: { input: s }, backend: e }),
            a = Ec({ inputs: { x: i }, backend: e }),
            l = Or({ inputs: { real: o, imag: a }, backend: e });
        return (
            e.disposeIntermediateTensorInfo(r),
            e.disposeIntermediateTensorInfo(o),
            e.disposeIntermediateTensorInfo(i),
            e.disposeIntermediateTensorInfo(a),
            l
        );
    } else
        return Sl({
            attrs: {
                shape: s.shape,
                dtype: s.dtype,
                value: s.dtype === 'string' ? '' : 0,
            },
            backend: e,
        });
}
const uK = { kernelName: Lu, backendName: 'webgl', kernelFunc: Ec };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function OS(n) {
    const { inputs: t, backend: e } = n,
        { x: s } = t;
    if (s.dtype === 'string')
        throw new Error('onesLike is not supported under string dtype');
    if (s.dtype === 'complex64') {
        const r = kl({ inputs: { input: s }, backend: e }),
            o = OS({ inputs: { x: r }, backend: e }),
            i = Nh({ inputs: { input: s }, backend: e }),
            a = Ec({ inputs: { x: i }, backend: e }),
            l = Or({ inputs: { real: o, imag: a }, backend: e });
        return (
            e.disposeIntermediateTensorInfo(r),
            e.disposeIntermediateTensorInfo(o),
            e.disposeIntermediateTensorInfo(i),
            e.disposeIntermediateTensorInfo(a),
            l
        );
    } else
        return Sl({
            attrs: { shape: s.shape, dtype: s.dtype, value: 1 },
            backend: e,
        });
}
const hK = { kernelName: yu, backendName: 'webgl', kernelFunc: OS };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function dK(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { axis: r } = s;
    if (t.length === 1)
        return tp({ inputs: { input: t[0] }, backend: e, attrs: { dim: r } });
    const o = t[0].shape,
        i = t[0].dtype;
    t.forEach((u) => {
        $n(o, u.shape, 'All tensors passed to stack must have matching shapes'),
            _(
                i === u.dtype,
                () => 'All tensors passed to stack must have matching dtypes'
            );
    });
    const a = [],
        l = t.map((u) => {
            const h = tp({
                inputs: { input: u },
                backend: e,
                attrs: { dim: r },
            });
            return a.push(h), h;
        }),
        c = xS({ inputs: l, backend: e, attrs: { axis: r } });
    return a.forEach((u) => e.disposeIntermediateTensorInfo(u)), c;
}
const pK = { kernelName: xu, backendName: 'webgl', kernelFunc: dK };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class fK {
    constructor(t, e, s) {
        (this.variableNames = ['x']),
            (this.customUniforms = [{ name: 'value', type: 'float' }]),
            (this.outputShape = e.map((c, u) => c[0] + t[u] + c[1]));
        const r = t.length,
            o = Zt(r),
            i = e.map((c) => c[0]).join(','),
            a = e.map((c, u) => c[0] + t[u]).join(','),
            l = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(
                0,
                r
            );
        if (r === 1) {
            this.userCode = `
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;
            return;
        }
        this.userCode = `
      ${o} start = ${o}(${i});
      ${o} end = ${o}(${a});

      void main() {
        ${o} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${o} coords = outC - start;
          setOutput(getX(${l}));
        }
      }
    `;
    }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class mK {
    constructor(t, e, s) {
        (this.variableNames = ['x']),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.customUniforms = [{ name: 'value', type: 'float' }]),
            (this.outputShape = e.map((m, g) => m[0] + t[g] + m[1]));
        const r = t.length,
            o = Zt(r),
            i = e.map((m) => m[0]).join(','),
            a = e.map((m, g) => m[0] + t[g]).join(','),
            l = en('rc', r),
            c = en('source', r),
            u = `${l[r - 1]} < ${this.outputShape[r - 1]}`,
            h = r === 1 ? 'source' : `vec2(${c.slice(-2).join()})`,
            d = [
                `${o} rc = outputLoc;`,
                `${l[r - 1]} += 1;
       if(${u}) {
      `,
                r === 1
                    ? ''
                    : `}
       rc = outputLoc;
       ${l[r - 2]} += 1;
       if(${l[r - 2]} < ${this.outputShape[r - 2]}) {`,
                r === 1
                    ? ''
                    : `  ${l[r - 1]} += 1;
         if(${u}) {`,
            ],
            p =
                r === 1
                    ? 'rc < start || rc >= end'
                    : 'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';
        let f = '';
        for (let m = 0, g = r === 1 ? 2 : 4; m < g; m++)
            f += `
        ${d[m]}
        if (${p}) {
          result[${m}] = float(value);
        } else {
          ${o} source = rc - start;
          result[${m}] = getChannel(getX(${c.join()}), ${h});
        }
      `;
        (f += r === 1 ? '} ' : '}}'),
            (this.userCode = `
      const ${o} start = ${o}(${i});
      const ${o} end = ${o}(${a});

      void main() {
        ${o} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${f}
        setOutput(result);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const FS = (n) => {
        const { inputs: t, backend: e, attrs: s } = n,
            { x: r } = t,
            { paddings: o, constantValue: i } = s;
        if (rt(r.shape) === 0) {
            const c = o.map((u, h) => u[0] + r.shape[h] + u[1]);
            return Sl({
                backend: e,
                attrs: { shape: c, value: i, dtype: r.dtype },
            });
        }
        const a = tt().getBool('WEBGL_PACK_ARRAY_OPERATIONS')
                ? new mK(r.shape, o, i)
                : new fK(r.shape, o, i),
            l = [[i]];
        return e.runWebGLProgram(a, [r], r.dtype, l);
    },
    gK = { kernelName: wu, backendName: 'webgl', kernelFunc: FS };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const yK = `
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`,
    bK =
        `
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  ` +
        $o +
        `
  return result;
`,
    xK = He({ opSnippet: yK, packedOpSnippet: bK }),
    wK = { kernelName: Oa, backendName: 'webgl', kernelFunc: xK };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function vK(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { axis: o, keepDims: i } = s,
        a = r.shape.length,
        l = [],
        c = Bt(o, r.shape);
    let u = c;
    const h = me(u, a);
    let d = r;
    h != null &&
        ((d = nn({ inputs: { x: r }, backend: e, attrs: { perm: h } })),
        (u = we(u.length, a)),
        l.push(d)),
        Ue('prod', u, a);
    let p;
    if (e.shouldExecuteOnCPU([d])) {
        const f = e.texData.get(d.dataId).values,
            {
                outVals: m,
                outShape: g,
                outDtype: y,
            } = xG(d.shape, d.dtype, f, u);
        p = e.makeTensorInfo(g, y, m);
    } else {
        const [f, m] = Pe(d.shape, u),
            g = rt(m),
            y = gt({ inputs: { x: d }, backend: e, attrs: { shape: [-1, g] } }),
            b = bf(r.dtype),
            w = No(y, b, 'prod', e);
        (p = gt({ inputs: { x: w }, backend: e, attrs: { shape: f } })),
            l.push(y),
            l.push(w);
    }
    if (i) {
        l.push(p);
        const f = xe(p.shape, c);
        p = gt({ inputs: { x: p }, backend: e, attrs: { shape: f } });
    }
    return l.forEach((f) => e.disposeIntermediateTensorInfo(f)), p;
}
const kK = { kernelName: ku, backendName: 'webgl', kernelFunc: vK };
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function SK(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { paramsNestedSplits: r, paramsDenseValues: o, indices: i } = t,
        { outputRaggedRank: a } = s,
        l = r.map((y) => e.readSync(y.dataId)),
        c = r.map((y) => y.shape),
        u = e.readSync(o.dataId),
        h = e.readSync(i.dataId),
        [d, p, f] = wG(l, c, u, o.shape, o.dtype, h, i.shape, a),
        m = d.map((y) => e.makeTensorInfo([y.length], 'int32', y)),
        g = e.makeTensorInfo(f, o.dtype, p);
    return m.concat([g]);
}
const IK = { kernelName: Hp, backendName: 'webgl', kernelFunc: SK };
/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function CK(n) {
    const { inputs: t, backend: e } = n,
        { starts: s, limits: r, deltas: o } = t,
        i = e.readSync(s.dataId),
        a = e.readSync(r.dataId),
        l = e.readSync(o.dataId),
        [c, u] = vG(i, s.shape, s.dtype, a, r.shape, l, o.shape),
        h = e.makeTensorInfo([c.length], 'int32', c),
        d = e.makeTensorInfo([u.length], s.dtype, u);
    return [h, d];
}
const $K = { kernelName: jp, backendName: 'webgl', kernelFunc: CK };
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function NK(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { shape: r, values: o, defaultValue: i, rowPartitionTensors: a } = t,
        { rowPartitionTypes: l } = s,
        c = e.readSync(r.dataId),
        u = e.readSync(o.dataId),
        h = e.readSync(i.dataId),
        d = a.map((g) => e.readSync(g.dataId)),
        p = a.map((g) => g.shape),
        [f, m] = kG(c, r.shape, u, o.shape, o.dtype, h, i.shape, d, p, l);
    return e.makeTensorInfo(f, o.dtype, m);
}
const TK = { kernelName: qp, backendName: 'webgl', kernelFunc: NK };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const LS = (n) => {
        const { backend: t, attrs: e } = n,
            { start: s, stop: r, step: o, dtype: i } = e,
            a = SG(s, r, o, i);
        return t.makeTensorInfo([a.length], i, a);
    },
    EK = { kernelName: Kp, backendName: 'webgl', kernelFunc: LS };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const _K = 'return 1.0 / x;',
    AK = Kt({ opSnippet: _K }),
    RK = { kernelName: Fa, backendName: 'webgl', kernelFunc: AK };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const DK =
        ns +
        `
  return (x < 0.0) ? 0.0 : x;
`,
    OK = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,
    FK = Kt({ opSnippet: DK, packedOpSnippet: OK }),
    LK = { kernelName: La, backendName: 'webgl', kernelFunc: FK };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const PK =
        ns +
        `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,
    zK = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,
    BK = Kt({ opSnippet: PK, packedOpSnippet: zK }),
    MK = { kernelName: Pa, backendName: 'webgl', kernelFunc: BK };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class VK {
    constructor(t, e, s, r, o) {
        (this.variableNames = ['A']), (this.outputShape = []);
        const [i, a, l, c] = t;
        this.outputShape = [i, e, s, c];
        const u = [r && e > 1 ? a - 1 : a, r && s > 1 ? l - 1 : l],
            h = [r && e > 1 ? e - 1 : e, r && s > 1 ? s - 1 : s];
        let d;
        o
            ? (d =
                  '(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)')
            : (d = 'vec2(yRC) * effectiveInputOverOutputRatioRC'),
            (this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0] / h[0]},
          ${u[1] / h[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${d};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class WK {
    constructor(t, e, s, r, o) {
        (this.variableNames = ['A']),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = []);
        const [i, a, l, c] = t;
        this.outputShape = [i, e, s, c];
        const u = [r && e > 1 ? a - 1 : a, r && s > 1 ? l - 1 : l],
            h = [r && e > 1 ? e - 1 : e, r && s > 1 ? s - 1 : s];
        let d;
        o
            ? (d =
                  '(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)')
            : (d = 'vec3(yRC) * effectiveInputOverOutputRatioRC'),
            (this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0] / h[0]},
          ${u[1] / h[1]},
          ${u[1] / h[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${d};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${c - 1};
        bool hasNextRow = coords.z < ${s - 1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function UK(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { images: r } = t,
        { alignCorners: o, halfPixelCenters: i, size: a } = s,
        [l, c] = a,
        u = tt().getBool('WEBGL_PACK_IMAGE_OPERATIONS')
            ? new WK(r.shape, l, c, o, i)
            : new VK(r.shape, l, c, o, i);
    return e.runWebGLProgram(u, [r], 'float32');
}
const GK = { kernelName: Cu, backendName: 'webgl', kernelFunc: UK };
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class HK {
    constructor(t, e, s) {
        (this.variableNames = ['dy']),
            (this.outputShape = []),
            (this.outputShape = e);
        const [, r, o] = e,
            [, i, a] = t,
            l = [s && i > 1 ? r - 1 : r, s && a > 1 ? o - 1 : o],
            c = [s && i > 1 ? i - 1 : i, s && a > 1 ? a - 1 : a],
            u = l[0] / c[0],
            h = l[1] / c[1],
            d = 1 / u,
            p = 1 / h,
            f = Math.ceil(d) * 2 + 2,
            m = Math.ceil(p) * 2 + 2;
        this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${h});

        const float invHeightScale = float(${d});
        const float invWidthScale = float(${p});

        const int winHeight = int(${f});
        const int winWidth = int(${m});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${r - 1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${o - 1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function jK(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { images: r, dy: o } = t,
        { alignCorners: i } = s,
        a = new HK(o.shape, r.shape, i);
    return e.runWebGLProgram(a, [o], o.dtype);
}
const qK = { kernelName: Zp, backendName: 'webgl', kernelFunc: jK };
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class KK {
    constructor(t, e, s, r, o) {
        (this.variableNames = ['A']), (this.outputShape = []);
        const [i, a, l, c] = t;
        this.outputShape = [i, e, s, c];
        const u = [r && e > 1 ? a - 1 : a, r && s > 1 ? l - 1 : l],
            h = [r && e > 1 ? e - 1 : e, r && s > 1 ? s - 1 : s],
            d = r ? '0.5' : '0.0';
        let p;
        o
            ? (p =
                  'max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))')
            : (p = 'vec2(yRC) * effectiveInputOverOutputRatioRC'),
            (this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0] / h[0]},
          ${u[1] / h[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${p};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class XK {
    constructor(t, e, s, r, o) {
        (this.variableNames = ['A']),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = []);
        const [i, a, l, c] = t;
        this.outputShape = [i, e, s, c];
        const u = [r && e > 1 ? a - 1 : a, r && s > 1 ? l - 1 : l],
            h = [r && e > 1 ? e - 1 : e, r && s > 1 ? s - 1 : s],
            d = r ? '0.5' : '0.0';
        let p;
        o
            ? (p =
                  'max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))')
            : (p = 'vec3(yRC) * effectiveInputOverOutputRatioRC'),
            (this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0] / h[0]},
          ${u[1] / h[1]},
          ${u[1] / h[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${p};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${c - 1};
        bool hasNextRow = coords.z < ${s - 1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function YK(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { images: r } = t,
        { alignCorners: o, halfPixelCenters: i, size: a } = s,
        [l, c] = a,
        u = tt().getBool('WEBGL_PACK_IMAGE_OPERATIONS')
            ? new XK(r.shape, l, c, o, i)
            : new KK(r.shape, l, c, o, i);
    return e.runWebGLProgram(u, [r], r.dtype);
}
const ZK = { kernelName: Iu, backendName: 'webgl', kernelFunc: YK };
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class JK {
    constructor(t, e, s) {
        (this.variableNames = ['dy']),
            (this.outputShape = []),
            (this.outputShape = e);
        const [, r, o] = e,
            [, i, a] = t,
            l = [s && i > 1 ? r - 1 : r, s && a > 1 ? o - 1 : o],
            c = [s && i > 1 ? i - 1 : i, s && a > 1 ? a - 1 : a],
            u = l[0] / c[0],
            h = l[1] / c[1],
            d = 1 / u,
            p = 1 / h,
            f = Math.ceil(d) * 2 + 2,
            m = Math.ceil(p) * 2 + 2;
        this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${h});

        const float invHeightScale = float(${d});
        const float invWidthScale = float(${p});

        const int winHeight = int(${f});
        const int winWidth = int(${m});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float sourceFracRow =
              float(${l[0]}) *
                (float(dyR) / float(${c[0]}));

            float sourceFracCol =
                float(${l[1]}) *
                  (float(dyC) / float(${c[1]}));

            int sourceNearestRow = int(min(
                float(int(${r}) - 1),
                ${s} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${o}) - 1),
                ${s} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function QK(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { images: r, dy: o } = t,
        { alignCorners: i } = s,
        a = new JK(o.shape, r.shape, i);
    return e.runWebGLProgram(a, [o], o.dtype);
}
const tX = { kernelName: Yp, backendName: 'webgl', kernelFunc: QK };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class eX {
    constructor(t, e) {
        this.variableNames = ['x'];
        const s = t.length;
        if (s > 4)
            throw new Error(
                `WebGL backend: Reverse of rank-${s} tensor is not yet supported`
            );
        if (((this.outputShape = t), s === 1)) {
            this.userCode = `
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${t[0]} - coord - 1));
        }
      `;
            return;
        }
        const r = (a) =>
                e.indexOf(a) !== -1 && t[a] !== 1
                    ? `${t[a]} - coords[${a}] - 1`
                    : `coords[${a}]`,
            o = t.map((a, l) => r(l)).join(','),
            i = Zt(s);
        this.userCode = `
      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${o}));
      }
    `;
    }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class nX {
    constructor(t, e) {
        (this.variableNames = ['x']),
            (this.packedInputs = !0),
            (this.packedOutput = !0);
        const s = t.length;
        if (s > 4)
            throw new Error(
                `WebGL backend: Reverse of rank-${s} tensor is not yet supported`
            );
        this.outputShape = t;
        const r = en('rc', s),
            o = `${r[s - 1]} + 1 < ${this.outputShape[s - 1]}`,
            i = `${r[s - 2]} + 1 < ${this.outputShape[s - 2]}`,
            a = Zt(s);
        s === 1
            ? (this.userCode = `
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${t[0]} - rc - 1),
            ${t[0]} - rc - 1);
          if(${o}){
              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),
                ${t[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      `)
            : (this.userCode = `
        void main() {
          ${a} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${l(r.slice())};
          if(${o}){
            result.g = ${c(r.slice())};
          }
          if(${i}) {
            result.b = ${u(r.slice())};
            if(${o}) {
              result.a = ${h(r.slice())};
            }
          }
          setOutput(result);
        }
    `);
        function l(f) {
            return d(f);
        }
        function c(f) {
            return (f[s - 1] = '(' + f[s - 1] + ' + 1)'), d(f);
        }
        function u(f) {
            return (f[s - 2] = '(' + f[s - 2] + ' + 1)'), d(f);
        }
        function h(f) {
            return (
                (f[s - 1] = '(' + f[s - 1] + ' + 1)'),
                (f[s - 2] = '(' + f[s - 2] + ' + 1)'),
                d(f)
            );
        }
        function d(f) {
            const m = t.map((b, w) => p(w, f)),
                g = m.join(','),
                y = m.slice(-2).join(',');
            return `getChannel(getX(${g}), vec2(${y}))`;
        }
        function p(f, m) {
            return e.indexOf(f) !== -1 && t[f] !== 1
                ? `${t[f]} - ${m[f]} - 1`
                : `${m[f]}`;
        }
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function sX(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { dims: o } = s,
        i = r.shape.length,
        a = Bt(o, r.shape);
    if (i === 0) return Cn({ inputs: { x: r }, backend: e });
    const l = tt().getBool('WEBGL_PACK_ARRAY_OPERATIONS')
        ? new nX(r.shape, a)
        : new eX(r.shape, a);
    return e.runWebGLProgram(l, [r], r.dtype);
}
const rX = { kernelName: $u, backendName: 'webgl', kernelFunc: sX };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class oX {
    constructor(t, e) {
        (this.variableNames = ['Image']),
            (this.outputShape = []),
            (this.customUniforms = [{ name: 'params', type: 'vec4' }]);
        const s = t[1],
            r = t[2];
        this.outputShape = t;
        let o = '';
        typeof e == 'number'
            ? (o = `float outputValue = ${e.toFixed(2)};`)
            : (o = `
        vec3 fill = vec3(${e.join(',')});
        float outputValue = fill[coords[3]];`),
            (this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${o}
          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${s}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const iX = {
    kernelName: mf,
    backendName: 'webgl',
    kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
        const { image: s } = n,
            { radians: r, fillValue: o, center: i } = t,
            a = e,
            l = new oX(s.shape, o),
            [c, u] = wm(i, s.shape[1], s.shape[2]),
            h = [[c, u, Math.sin(r), Math.cos(r)]];
        return a.runWebGLProgram(l, [s], s.dtype, h);
    },
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const aX = `
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`,
    lX = Kt({ opSnippet: aX }),
    cX = { kernelName: za, backendName: 'webgl', kernelFunc: lX };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const uX = 'return inversesqrt(x);',
    hX = Kt({ opSnippet: uX, cpuKernelImpl: IG }),
    dX = { kernelName: Ba, backendName: 'webgl', kernelFunc: hX };
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class Ig {
    constructor(t, e, s, r, o, i, a = !0, l = !1) {
        (this.variableNames = ['updates', 'indices', 'defaultValue']),
            (this.outputShape = i);
        const c = Zt(o.length),
            u = Zt(i.length);
        let h = '';
        s === 1 ? (h = 'i') : s === 2 && (h = 'i, j');
        const d = `getIndices(${h})`;
        let p = '';
        r === 1 ? (p = 'i') : r === 2 && (p = 'i, coords[1]');
        const f = `getUpdates(${p})`;
        let m = '';
        l && (m = 'coords[0], coords[1]');
        const g = `getDefaultValue(${m})`,
            y = e > 1 ? 'strides[j]' : 'strides';
        this.userCode = `
        ${c} strides = ${c}(${o});

        void main() {
          ${u} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${t}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${e}; j++) {
              int index = round(${d});
              flattenedIndex += index * ${y};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${f};
              found = true;
            }
          }
          setOutput(mix(${g}, sum, float(found)));
        }
      `;
    }
}
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class pX {
    constructor(t, e, s, r, o, i, a = !0, l = !1) {
        (this.variableNames = ['updates', 'indices', 'defaultValue']),
            (this.packedInputs = !0),
            (this.packedOutput = !0),
            (this.outputShape = i);
        const c = Zt(o.length),
            u = Zt(i.length);
        let h = '';
        s === 1 ? (h = 'i') : s === 2 && (h = 'i, j');
        const d = `getIndices(${h})`;
        let p = '';
        r === 1 ? (p = 'i') : r === 2 && (p = 'i, coords[1]');
        const f = `getUpdates(${p})`;
        let m = '';
        l && (m = 'coords[0], coords[1]');
        const g = `getDefaultValue(${m})`,
            y = e > 1 ? 'strides[j]' : 'strides',
            b = e > 1 ? 'strides[j + 1]' : 'strides';
        this.userCode = `
        ${c} strides = ${c}(${o});

        void main() {
          ${u} coords = getOutputCoords();
          vec4 sum = vec4(0.);
          vec4 found = vec4(0.);
          for (int i = 0; i < ${t}; i+=2) {
            ivec2 flattenedIndex = ivec2(0);
            for (int j = 0; j < ${e}; j+=2) {
              ivec4 index = round(${d});
              flattenedIndex += index.xz * ${y};
              if (j + 1 < ${e}) {
                flattenedIndex += index.yw * ${b};
              }
            }
            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||
                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {
              vec4 updVals = ${f};
              if (flattenedIndex[0] == coords[0]) {
                sum.xy += updVals.xy;
                found.xy = vec2(1.);
              } else if (flattenedIndex[0] == coords[0] + 1) {
                sum.zw += updVals.xy;
                found.zw = vec2(1.);
              }
              if (flattenedIndex[1] == coords[0]) {
                sum.xy += updVals.zw;
                found.xy = vec2(1.);
              } else if (flattenedIndex[1] == coords[0] + 1) {
                sum.zw += updVals.zw;
                found.zw = vec2(1.);
              }
            }
          }
          setOutput(mix(${g}, sum, found));
        }
      `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function fX(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { indices: r, updates: o } = t,
        { shape: i } = s,
        {
            sliceRank: a,
            numUpdates: l,
            sliceSize: c,
            strides: u,
            outputSize: h,
        } = vo(o, r, i),
        d = [h / c, c];
    if (h === 0) return e.makeTensorInfo(i, r.dtype);
    const p = gt({ inputs: { x: r }, backend: e, attrs: { shape: [l, a] } }),
        f = gt({ inputs: { x: o }, backend: e, attrs: { shape: [l, c] } }),
        m = e.makeTensorInfo([], 'float32', new Float32Array([0]));
    let g;
    tt().getBool('WEBGL_PACK')
        ? (g = new pX(l, a, p.shape.length, f.shape.length, u, d))
        : (g = new Ig(l, a, p.shape.length, f.shape.length, u, d));
    const y = e.runWebGLProgram(g, [f, p, m], f.dtype),
        b = gt({ inputs: { x: y }, backend: e, attrs: { shape: i } });
    return (
        e.disposeIntermediateTensorInfo(p),
        e.disposeIntermediateTensorInfo(f),
        e.disposeIntermediateTensorInfo(y),
        e.disposeIntermediateTensorInfo(m),
        b
    );
}
const mX = { kernelName: Jp, backendName: 'webgl', kernelFunc: fX };
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class gX {
    constructor(t, e, s, r) {
        (this.variableNames = ['sortedSequence', 'values']),
            (this.customUniforms = [{ name: 'numInputs', type: 'int' }]),
            (this.outputShape = [t, s]);
        const o = 'while (left < right) {',
            i = `for (int i = 0; i < ${Math.ceil(
                Math.log2(e + 1)
            )}; ++i) { if (left >= right) break;`,
            a = tt().getNumber('WEBGL_VERSION') === 2 ? o : i,
            l = r === 'left' ? '<' : '<=';
        this.userCode = `
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${a}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${l} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `;
    }
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function yX(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { sortedSequence: r, values: o } = t,
        { side: i } = s,
        a = new gX(r.shape[0], r.shape[1], o.shape[1], i),
        l = [[r.shape[1]]];
    return e.runWebGLProgram(a, [r, o], 'int32', l);
}
const bX = { kernelName: tf, backendName: 'webgl', kernelFunc: yX };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class xX {
    constructor(t, e, s) {
        (this.variableNames = ['c', 'a', 'b']), (this.outputShape = e);
        let r, o;
        if (s > 4) throw Error(`Where for rank ${s} is not yet supported`);
        if (s === 1) (o = 'resRC'), (r = 'resRC');
        else {
            const a = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'],
                l = [],
                c = [];
            for (let u = 0; u < e.length; u++)
                c.push(`${a[u]}`), u < t && l.push(`${a[u]}`);
            (r = l.join()), (o = c.join());
        }
        const i = Zt(s);
        this.userCode = `
      void main() {
        ${i} resRC = getOutputCoords();
        float cVal = getC(${r});
        if (cVal >= 1.0) {
          setOutput(getA(${o}));
        } else {
          setOutput(getB(${o}));
        }
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function wX(n) {
    const { inputs: t, backend: e } = n,
        { condition: s, t: r, e: o } = t,
        i = new xX(s.shape.length, r.shape, r.shape.length);
    return e.runWebGLProgram(i, [s, r, o], vn(r.dtype, o.dtype));
}
const vX = { kernelName: Nu, backendName: 'webgl', kernelFunc: wX };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const kX = `
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${ch};
  float scale = ${uh};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`,
    SX = Kt({ opSnippet: kX }),
    IX = { kernelName: Ma, backendName: 'webgl', kernelFunc: SX };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const CX =
        $i +
        `
  return 1.0 / (1.0 + exp(-1.0 * x));
`,
    $X = `
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,
    NX = Kt({ opSnippet: CX, packedOpSnippet: $X, cpuKernelImpl: $G }),
    TX = { kernelName: Ga, backendName: 'webgl', kernelFunc: NX };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const EX = `
  if (isnan(x)) { return 0.0; }
  return sign(x);
`,
    _X = Kt({ opSnippet: EX }),
    AX = { kernelName: Ua, backendName: 'webgl', kernelFunc: _X };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const RX =
        $i +
        `
  return sin(x);
`,
    DX = `
  vec4 result = sin(x);
  bvec4 isNaN = isnan(x);
  ${$o}
  return result;
`,
    OX = Kt({ opSnippet: RX, packedOpSnippet: DX }),
    FX = { kernelName: Va, backendName: 'webgl', kernelFunc: OX };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const LX = `
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`,
    PX = Kt({ opSnippet: LX }),
    zX = { kernelName: Wa, backendName: 'webgl', kernelFunc: PX };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const BX = `
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`,
    MX = Kt({ opSnippet: BX }),
    VX = { kernelName: Ha, backendName: 'webgl', kernelFunc: MX };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const WX = (n) => {
        const { inputs: t, backend: e, attrs: s } = n,
            { x: r } = t,
            { blockShape: o, paddings: i } = s;
        _(
            r.shape.length <= 4,
            () =>
                'spaceToBatchND for rank > 4 with a WebGL backend not implemented yet'
        );
        const a = o.reduce((y, b) => y * b),
            l = [[0, 0]];
        l.push(...i);
        for (let y = 1 + o.length; y < r.shape.length; ++y) l.push([0, 0]);
        const c = [],
            u = FS({
                inputs: { x: r },
                backend: e,
                attrs: { paddings: l, constantValue: 0 },
            }),
            h = al(u.shape, o, a, !1),
            d = ll(h.length, o.length, !1),
            p = cl(u.shape, o, a, !1),
            f = gt({ inputs: { x: u }, backend: e, attrs: { shape: h } }),
            m = nn({ inputs: { x: f }, backend: e, attrs: { perm: d } }),
            g = gt({ inputs: { x: m }, backend: e, attrs: { shape: p } });
        return (
            c.push(u),
            c.push(f),
            c.push(m),
            c.forEach((y) => e.disposeIntermediateTensorInfo(y)),
            g
        );
    },
    UX = { kernelName: _u, backendName: 'webgl', kernelFunc: WX };
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function GX(n) {
    const { inputs: t, backend: e } = n,
        { indices: s, values: r, denseShape: o, defaultValue: i } = t;
    if (o.shape.length !== 1)
        throw new Error(`Dense shape must be a vector, saw:
         ${o.shape}`);
    if (s.shape.length !== 2)
        throw new Error(`Indices must be a matrix, saw:
         ${s.shape}`);
    if (r.shape.length !== 1)
        throw new Error(`Values must be a vector, saw:
         ${r.shape}`);
    if (i.shape.length !== 0)
        throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);
    const a = e.readSync(s.dataId),
        l = e.readSync(r.dataId),
        c = e.readSync(o.dataId),
        u = e.readSync(i.dataId)[0],
        [h, d, p, f, m] = TG(a, s.shape, s.dtype, l, r.dtype, c, u);
    return [
        e.makeTensorInfo(d, s.dtype, h),
        e.makeTensorInfo([d[0]], r.dtype, p),
        e.makeTensorInfo(
            [f.length],
            'bool',
            new Uint8Array(f.map((g) => Number(g)))
        ),
        e.makeTensorInfo([m.length], s.dtype, new Int32Array(m)),
    ];
}
const HX = { kernelName: ef, backendName: 'webgl', kernelFunc: GX };
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function jX(n) {
    const { inputs: t, backend: e } = n,
        { inputIndices: s, inputShape: r, newShape: o } = t;
    if (s.shape.length !== 2)
        throw new Error(
            `Input indices should be a matrix but received shape ${s.shape}`
        );
    if (r.shape.length !== 1)
        throw new Error(
            `Input shape should be a vector but received shape ${r.shape}`
        );
    if (o.shape.length !== 1)
        throw new Error(
            `Target shape should be a vector but received shape ${o.shape}`
        );
    const i = Array.from(e.readSync(r.dataId)),
        a = e.readSync(s.dataId),
        l = Array.from(e.readSync(o.dataId)),
        [c, u, h] = EG(a, s.shape, s.dtype, i, l);
    return [
        e.makeTensorInfo(u, s.dtype, c),
        e.makeTensorInfo([h.length], o.dtype, new Int32Array(h)),
    ];
}
const qX = { kernelName: nf, backendName: 'webgl', kernelFunc: jX };
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function KX(n) {
    const { inputs: t, backend: e } = n,
        { data: s, indices: r, segmentIds: o } = t;
    if (s.shape.length < 1)
        throw new Error(
            'Data should be at least 1 dimensional but received scalar'
        );
    if (r.shape.length !== 1)
        throw new Error(`Indices should be a vector but received shape
              ${r.shape}`);
    if (o.shape.length !== 1)
        throw new Error(`Segment ids should be a vector but received shape
              ${o.shape}`);
    const i = e.readSync(s.dataId),
        a = e.readSync(r.dataId),
        l = e.readSync(o.dataId),
        [c, u] = iS(i, s.shape, s.dtype, a, l, !0);
    return e.makeTensorInfo(u, s.dtype, c);
}
const XX = { kernelName: sf, backendName: 'webgl', kernelFunc: KX };
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function YX(n) {
    const { inputs: t, backend: e } = n,
        { data: s, indices: r, segmentIds: o } = t;
    if (s.shape.length < 1)
        throw new Error(
            'Data should be at least 1 dimensional but received scalar'
        );
    if (r.shape.length !== 1)
        throw new Error(`Indices should be a vector but received shape
             ${r.shape}`);
    if (o.shape.length !== 1)
        throw new Error(`Segment ids should be a vector but received shape
             ${o.shape}`);
    const i = e.readSync(s.dataId),
        a = e.readSync(r.dataId),
        l = e.readSync(o.dataId),
        [c, u] = iS(i, s.shape, s.dtype, a, l);
    return e.makeTensorInfo(u, s.dtype, c);
}
const ZX = { kernelName: rf, backendName: 'webgl', kernelFunc: YX };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function JX(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { sparseIndices: r, sparseValues: o, defaultValue: i } = t,
        { outputShape: a } = s,
        {
            sliceRank: l,
            numUpdates: c,
            sliceSize: u,
            strides: h,
            outputSize: d,
        } = vo(o, r, a),
        p = !1;
    if (o.dtype === 'string') {
        const y = e.bufferSync(r),
            b = e.bufferSync(o),
            w = dr(e.readSync(i.dataId)[0]),
            x = CG(y, b, a, d, u, c, l, h, w, p);
        return e.makeTensorInfo(a, x.dtype, x.values);
    }
    const f = new Ig(c, l, r.shape.length, o.shape.length, h, [d, 1], p),
        m = e.runWebGLProgram(f, [o, r, i], o.dtype),
        g = gt({ inputs: { x: m }, backend: e, attrs: { shape: a } });
    return e.disposeIntermediateTensorInfo(m), g;
}
const QX = { kernelName: of, backendName: 'webgl', kernelFunc: JX };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function t7(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { numOrSizeSplits: o, axis: i } = s,
        a = Bt(i, r.shape)[0],
        l = Fm(r, o, a),
        c = r.shape.length,
        u = new Array(c).fill(0),
        h = r.shape.slice();
    return l.map((d) => {
        const p = [...h];
        p[a] = d;
        const f = Ni({
            inputs: { x: r },
            backend: e,
            attrs: { begin: u, size: p },
        });
        return (u[a] += d), f;
    });
}
const e7 = { kernelName: Au, backendName: 'webgl', kernelFunc: t7 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const xb = 'return sqrt(x);',
    n7 = Kt({ opSnippet: xb, packedOpSnippet: xb, cpuKernelImpl: _G }),
    s7 = { kernelName: ja, backendName: 'webgl', kernelFunc: n7 };
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const r7 = 'return x * x;',
    o7 = Kt({ opSnippet: r7 }),
    i7 = { kernelName: af, backendName: 'webgl', kernelFunc: o7 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const wb = 'return (a - b) * (a - b);',
    a7 = He({ opSnippet: wb, packedOpSnippet: wb }),
    l7 = { kernelName: qa, backendName: 'webgl', kernelFunc: a7 };
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function c7(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t;
    if (r.dtype !== 'string')
        throw new Error('Input must be of datatype string');
    const o = e.readSync(r.dataId),
        i = Xs(o),
        a = AG(i, 'string', s);
    return e.makeTensorInfo(r.shape, 'string', a);
}
const u7 = { kernelName: Du, backendName: 'webgl', kernelFunc: c7 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function h7({ inputs: n, attrs: t, backend: e }) {
    const { x: s } = n,
        r =
            ns +
            `
    return x > 0.0 ? 1.0 : float(${t.alpha});
  `,
        o = new vs(s.shape, r);
    return e.runWebGLProgram(o, [s], s.dtype);
}
const d7 = { kernelName: Ja, backendName: 'webgl', kernelFunc: h7 };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class p7 {
    constructor(t, e, s) {
        (this.variableNames = ['x']), (this.outputShape = s);
        const r = s.length,
            o = Zt(s.length),
            i = Zt(s.length);
        let a = '';
        if (r === 1) a = 'coords * strides + begin';
        else {
            let l = 0;
            a = s
                .map(
                    (c, u) => (
                        l++,
                        s.length === 1
                            ? `coords * strides[${u}] + begin[${u}]`
                            : `coords[${l - 1}] * strides[${u}] + begin[${u}]`
                    )
                )
                .join(',');
        }
        this.userCode = `
      ${o} begin = ${o}(${t});
      ${o} strides = ${o}(${e});

      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${a}));
      }
    `;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function f7(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        {
            begin: o,
            end: i,
            strides: a,
            beginMask: l,
            endMask: c,
            ellipsisMask: u,
            newAxisMask: h,
            shrinkAxisMask: d,
        } = s,
        {
            finalShapeSparse: p,
            finalShape: f,
            isIdentity: m,
            sliceDim0: g,
            isSimpleSlice: y,
            begin: b,
            end: w,
            strides: x,
        } = ym(r.shape, o, i, a, l, c, u, h, d);
    let v;
    if (m) v = gt({ inputs: { x: r }, backend: e, attrs: { shape: f } });
    else if (g || y) {
        _(
            r.shape.length >= 1,
            () => `Input must have rank at least 1, got: ${r.shape.length}`
        );
        const $ = fm(b, w, x),
            T = Ni({
                inputs: { x: r },
                backend: e,
                attrs: { begin: b, size: $ },
            });
        (v = gt({ inputs: { x: T }, backend: e, attrs: { shape: f } })),
            e.disposeIntermediateTensorInfo(T);
    } else if (e.shouldExecuteOnCPU([r])) {
        const T = e.readSync(r.dataId),
            N = Pt(r.shape, r.dtype, T),
            R = RG(p, N, x, b);
        v = e.makeTensorInfo(f, r.dtype, R.values);
    } else {
        const T = new p7(b, x, p);
        v = e.runWebGLProgram(T, [r], r.dtype);
    }
    const C = gt({ inputs: { x: v }, backend: e, attrs: { shape: f } });
    return e.disposeIntermediateTensorInfo(v), C;
}
const m7 = { kernelName: lf, backendName: 'webgl', kernelFunc: f7 };
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function g7(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        {
            separator: r,
            nGramWidths: o,
            leftPad: i,
            rightPad: a,
            padWidth: l,
            preserveShortSequences: c,
        } = s,
        { data: u, dataSplits: h } = t,
        d = e.readSync(u.dataId),
        p = e.readSync(h.dataId),
        [f, m] = DG(d, p, r, o, i, a, l, c);
    return [
        e.makeTensorInfo([f.length], 'string', f),
        e.makeTensorInfo(h.shape, 'int32', m),
    ];
}
const y7 = { kernelName: cf, backendName: 'webgl', kernelFunc: g7 };
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function b7(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { skipEmpty: r } = s,
        { input: o, delimiter: i } = t;
    if (o.dtype !== 'string')
        throw new Error('Input must be of datatype string');
    if (o.shape.length !== 1)
        throw new Error(`Input must be a vector, got shape: ${o.shape}`);
    if (i.shape.length !== 0)
        throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);
    const a = e.readSync(o.dataId),
        l = e.readSync(i.dataId)[0],
        [c, u, h] = OG(a, l, r),
        d = u.length;
    return [
        e.makeTensorInfo([d, 2], 'int32', c),
        e.makeTensorInfo([d], 'string', u),
        e.makeTensorInfo([2], 'int32', new Int32Array(h)),
    ];
}
const x7 = { kernelName: uf, backendName: 'webgl', kernelFunc: b7 };
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function w7(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { numBuckets: r } = s,
        { input: o } = t;
    if (o.dtype !== 'string')
        throw new Error('Input must be of datatype string');
    if (r <= 0) throw new Error('Number of buckets must be at least 1');
    const i = e.readSync(o.dataId),
        a = FG(i, r);
    return e.makeTensorInfo(o.shape, 'int32', a);
}
const v7 = { kernelName: hf, backendName: 'webgl', kernelFunc: w7 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const k7 = 'return tan(x);',
    S7 = Kt({ opSnippet: k7 }),
    I7 = { kernelName: Xa, backendName: 'webgl', kernelFunc: S7 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const C7 = `
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`,
    $7 = Kt({ opSnippet: C7 }),
    N7 = { kernelName: Ya, backendName: 'webgl', kernelFunc: $7 };
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function T7(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { tensor: r, indices: o, updates: i } = t,
        {
            sliceRank: a,
            numUpdates: l,
            sliceSize: c,
            strides: u,
            outputSize: h,
        } = vo(i, o, r.shape),
        d = [h / c, c];
    if (h === 0) return e.makeTensorInfo(r.shape, o.dtype);
    const p = gt({ inputs: { x: o }, backend: e, attrs: { shape: [l, a] } }),
        f = gt({ inputs: { x: i }, backend: e, attrs: { shape: [l, c] } }),
        m = gt({ inputs: { x: r }, backend: e, attrs: { shape: d } }),
        g = new Ig(l, a, p.shape.length, f.shape.length, u, d, !1, !0),
        y = e.runWebGLProgram(g, [f, p, m], m.dtype),
        b = gt({ inputs: { x: y }, backend: e, attrs: { shape: r.shape } });
    return (
        e.disposeIntermediateTensorInfo(p),
        e.disposeIntermediateTensorInfo(f),
        e.disposeIntermediateTensorInfo(m),
        e.disposeIntermediateTensorInfo(y),
        b
    );
}
const E7 = { kernelName: Qp, backendName: 'webgl', kernelFunc: T7 };
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class _7 {
    constructor(t, e) {
        this.variableNames = ['A'];
        const s = new Array(t.length);
        for (let i = 0; i < s.length; i++) s[i] = t[i] * e[i];
        (this.outputShape = s), (this.rank = s.length);
        const r = Zt(this.rank),
            o = A7(t);
        this.userCode = `
      void main() {
        ${r} resRC = getOutputCoords();
        setOutput(getA(${o}));
      }
    `;
    }
}
function A7(n) {
    const t = n.length;
    if (t > 5) throw Error(`Tile for rank ${t} is not yet supported`);
    if (t === 1) return `imod(resRC, ${n[0]})`;
    const e = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'],
        s = [];
    for (let r = 0; r < n.length; r++) s.push(`imod(${e[r]}, ${n[r]})`);
    return s.join();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function PS(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { reps: o } = s;
    if (r.dtype === 'string' || r.shape.length > 5) {
        const l = e.readSync(r.dataId),
            c = r.dtype === 'string' ? l.map((d) => dr(d)) : l,
            u = Pt(r.shape, r.dtype, c),
            h = PG(u, o);
        return e.makeTensorInfo(h.shape, h.dtype, h.values);
    }
    const i = new _7(r.shape, o);
    return e.runWebGLProgram(i, [r], r.dtype);
}
const R7 = { kernelName: Za, backendName: 'webgl', kernelFunc: PS };
class D7 {
    constructor(t) {
        (this.variableNames = ['x', 'indices']),
            (this.customUniforms = [
                { name: 'n', type: 'int' },
                { name: 'firstPass', type: 'int' },
                { name: 'negativeInf', type: 'float' },
                { name: 'dir', type: 'int' },
                { name: 'inc', type: 'int' },
            ]),
            (this.outputShape = t),
            (this.userCode = `
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `);
    }
}
class O7 {
    constructor(t) {
        (this.variableNames = ['x', 'indices']),
            (this.customUniforms = [
                { name: 'n', type: 'int' },
                { name: 'firstPass', type: 'int' },
                { name: 'k', type: 'int' },
            ]),
            (this.outputShape = t),
            (this.userCode = `
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function Br(n, t) {
    t !== null && n.disposeIntermediateTensorInfo(t);
}
function vb(n) {
    let t = 1;
    for (; t < n; ) t *= 2;
    return t;
}
function F7(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r } = t,
        { k: o, sorted: i } = s,
        a = tt().getNumber('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD'),
        l = tt().getNumber('TOPK_K_CPU_HANDOFF_THRESHOLD'),
        c = r.shape,
        u = c[c.length - 1];
    if (e.shouldExecuteOnCPU([r]) || u < a || o > l) {
        const R = e.readSync(r.dataId),
            [P, E] = zG(R, c, r.dtype, o, i);
        return [
            e.makeTensorInfo(P.shape, P.dtype, P.values),
            e.makeTensorInfo(E.shape, E.dtype, E.values),
        ];
    }
    if (o === 0)
        return (
            (c[c.length - 1] = 0),
            [e.makeTensorInfo(c, r.dtype, []), e.makeTensorInfo(c, 'int32', [])]
        );
    if (u === 1)
        return [
            r,
            Sl({ attrs: { shape: c, dtype: 'int32', value: 0 }, backend: e }),
        ];
    const h = e.texData.get(r.dataId),
        d = h !== null && h.isPacked,
        p = d ? e.unpackTensor(r) : r,
        m = rt(c) / u,
        g = gt({ inputs: { x: p }, attrs: { shape: [m, u] }, backend: e });
    d && Br(e, p);
    const y = vb(o),
        b = vb(u);
    let w = null;
    const x = () => (w === null ? [g, g] : [g, w]),
        v = (R, P, E) => {
            const O = x(),
                S = new D7(E),
                q = [
                    [u],
                    [w === null ? 1 : 0],
                    [Number.NEGATIVE_INFINITY],
                    [R],
                    [P],
                ],
                W = w;
            (w = e.runWebGLProgram(S, O, 'int32', q)), Br(e, W);
        };
    for (let R = 1; R < y; R *= 2) {
        const P = R * 2;
        for (let E = R; E >= 1; E /= 2) v(P, E, [m, b]);
    }
    for (let R = b; R > y; R /= 2) {
        const P = x(),
            E = new O7([m, R / 2]),
            S = [[u], [w === null ? 1 : 0], [y]],
            L = w;
        (w = e.runWebGLProgram(E, P, 'int32', S)), Br(e, L);
        const q = y / 2,
            W = q * 2;
        for (let X = q; X >= 1; X /= 2) v(W, X, w.shape);
    }
    let C = w;
    (w = Ni({
        inputs: { x: w },
        backend: e,
        attrs: { begin: 0, size: [m, o] },
    })),
        Br(e, C);
    let $ = ES({
        inputs: { x: g, indices: w },
        backend: e,
        attrs: { axis: 1, batchDims: 1 },
    });
    Br(e, g);
    const T = c.slice(0, -1);
    T.push(o),
        (C = w),
        (w = gt({ inputs: { x: w }, attrs: { shape: T }, backend: e })),
        Br(e, C);
    const N = $;
    return (
        ($ = gt({ inputs: { x: $ }, attrs: { shape: T }, backend: e })),
        Br(e, N),
        [$, w]
    );
}
const L7 = { kernelName: df, backendName: 'webgl', kernelFunc: F7 };
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class P7 {
    constructor(t, e, s, r, o, i) {
        (this.variableNames = ['Image', 'Transforms']), (this.outputShape = i);
        const a = s === 'nearest' ? 1 : 2;
        let l;
        switch (r) {
            case 'constant':
                l = 1;
                break;
            case 'reflect':
                l = 2;
                break;
            case 'wrap':
                l = 3;
                break;
            case 'nearest':
                l = 4;
                break;
            default:
                l = 1;
                break;
        }
        this.userCode = `
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${l} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${t} && 0 <= coordX && coordX < ${e}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${o});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${o});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${e}));
                float mapY = mapCoord(inY, float(${t}));

                if (${a} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `;
    }
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function z7(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { image: r, transforms: o } = t,
        { interpolation: i, fillMode: a, fillValue: l, outputShape: c } = s,
        [u, h, d, p] = r.shape,
        [f, m] = c ?? [h, d],
        g = [u, f, m, p],
        y = new P7(h, d, i, a, l, g);
    return e.runWebGLProgram(y, [r, o], 'float32');
}
const B7 = { kernelName: pf, backendName: 'webgl', kernelFunc: z7 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function M7(n) {
    const { inputs: t, attrs: e, backend: s } = n,
        { axis: r } = e,
        { x: o } = t;
    wl(o, 'unique'),
        console.warn(
            'WARNING: ',
            'UI might be locked temporarily as data is being downloaded'
        );
    const i = s.readSync(o.dataId),
        {
            outputValues: a,
            outputShape: l,
            indices: c,
        } = BG(i, r, o.shape, o.dtype);
    return [
        s.makeTensorInfo(l, o.dtype, a),
        s.makeTensorInfo([c.length], 'int32', c),
    ];
}
const V7 = { kernelName: ff, backendName: 'webgl', kernelFunc: M7 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function W7(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { value: r } = t;
    let { axis: o } = s;
    o < 0 && (o += r.shape.length);
    const i = r,
        a = i.shape.length,
        l = r.shape[o],
        c = new Array(a - 1);
    let u = 0;
    for (let m = 0; m < a; m++) m !== o && (c[u++] = i.shape[m]);
    const h = [],
        d = new Array(a).fill(0),
        p = i.shape.slice();
    p[o] = 1;
    const f = new Array(l);
    for (let m = 0; m < f.length; m++) {
        d[o] = m;
        const g = Ni({
                inputs: { x: i },
                backend: e,
                attrs: { begin: d, size: p },
            }),
            y = gt({ inputs: { x: g }, backend: e, attrs: { shape: c } });
        (f[m] = y), h.push(g);
    }
    return h.forEach((m) => e.disposeIntermediateTensorInfo(m)), f;
}
const U7 = { kernelName: Ou, backendName: 'webgl', kernelFunc: W7 };
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ class G7 {
    constructor(t, e) {
        this.variableNames = ['x', 'segmentIds'];
        const s = t.windowSize,
            r = t.batchSize,
            o = t.inSize,
            i = t.numSegments,
            a = i * Math.ceil(o / s);
        this.outputShape = [r, a];
        const l = '0.0',
            c = 'sumValue',
            u = Math.floor(s / 4) * 4,
            h = s % 4,
            d = `
        sumValue += dot(values, segFilter);
    `;
        let p = '';
        o % s > 0 &&
            (p = `
        if (inIdx < 0 || inIdx >= ${o}) {
          return initializationValue;
        }
      `);
        let f = '';
        o % s > 0 &&
            (f = `
        if (inIdx < 0 || inIdx >= ${o}) {
          return -1.0;
        }
      `),
            (this.userCode = `
      const float initializationValue = ${l};

      float getValue(int batch, int inIdx) {
        ${p}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${f}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${i})) * float(${s}));
        int currentSeg = int(mod(float(outIdx), float(${i})));

        float sumValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${d}
        }

        int inIdx = inOffset + ${u};
        if (${h === 1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${d}
        } else if (${h === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${d}
        } else if (${h === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${d}
        }
        setOutput(${c});
      }
    `);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ function H7(n) {
    const { inputs: t, backend: e, attrs: s } = n,
        { x: r, segmentIds: o } = t,
        { numSegments: i } = s,
        a = r.shape.length,
        l = [];
    let c = 0;
    const u = me([c], a);
    let h = r;
    u != null &&
        ((h = nn({ inputs: { x: r }, backend: e, attrs: { perm: u } })),
        l.push(h),
        (c = we(1, a)[0]));
    const d = b1(h.shape, c, i),
        p = rt([h.shape[c]]),
        f = gt({ inputs: { x: h }, backend: e, attrs: { shape: [-1, p] } });
    l.push(f);
    const m = bf(r.dtype),
        g = (x, v, C, $, T) => {
            const N = x.shape[0],
                R = x.shape[1],
                P = y1(R, T),
                E = { windowSize: P, inSize: R, batchSize: N, numSegments: T },
                O = new G7(E, v),
                S = e.compileAndRun(O, [x, C], $);
            if ((l.push(S), S.shape[1] === T)) return S;
            const L = LS({
                    backend: e,
                    attrs: { start: 0, stop: T, step: 1, dtype: 'float32' },
                }),
                q = PS({
                    inputs: { x: L },
                    backend: e,
                    attrs: { reps: [R / P] },
                });
            return l.push(L), l.push(q), g(S, v, q, $, T);
        },
        y = g(f, 'unsortedSegmentSum', o, m, i),
        b = gt({ inputs: { x: y }, backend: e, attrs: { shape: d } });
    let w = b;
    if (u != null) {
        l.push(b);
        const x = Tr(u);
        w = nn({ inputs: { x: w }, backend: e, attrs: { perm: x } });
    }
    return l.forEach((x) => e.disposeIntermediateTensorInfo(x)), w;
}
const j7 = { kernelName: Fu, backendName: 'webgl', kernelFunc: H7 };
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ const q7 = [
    _6,
    R6,
    F6,
    z6,
    M6,
    U6,
    H6,
    q6,
    Z6,
    Q6,
    nH,
    oH,
    lH,
    dH,
    mH,
    yH,
    xH,
    SH,
    CH,
    NH,
    AH,
    zH,
    MH,
    GH,
    jH,
    JH,
    t5,
    r5,
    p6,
    a5,
    d5,
    g5,
    k5,
    C5,
    N5,
    E5,
    A5,
    F5,
    z5,
    V5,
    U5,
    H5,
    q5,
    Y5,
    J5,
    nj,
    rj,
    aj,
    uj,
    dj,
    gj,
    wj,
    Ij,
    Nj,
    _j,
    Aj,
    Dj,
    Fj,
    Pj,
    Bj,
    Vj,
    Hj,
    Kj,
    Zj,
    Qj,
    n8,
    o8,
    c8,
    p8,
    d6,
    m8,
    u5,
    b8,
    v8,
    I8,
    m6,
    T8,
    R8,
    O8,
    z8,
    V8,
    H8,
    K8,
    J8,
    nq,
    oq,
    aq,
    hq,
    pq,
    mq,
    xq,
    vq,
    Sq,
    Cq,
    Nq,
    Aq,
    Fq,
    Bq,
    qq,
    b6,
    Zq,
    tK,
    sK,
    iK,
    KH,
    cK,
    hK,
    pK,
    gK,
    wK,
    y6,
    kK,
    IK,
    $K,
    TK,
    EK,
    XH,
    Uq,
    RK,
    LK,
    MK,
    w6,
    GK,
    qK,
    ZK,
    tX,
    rX,
    iX,
    cX,
    dX,
    mX,
    bX,
    vX,
    IX,
    TX,
    AX,
    FX,
    zX,
    LH,
    Hq,
    VX,
    UX,
    HX,
    qX,
    XX,
    ZX,
    QX,
    e7,
    s7,
    i7,
    l7,
    u7,
    d7,
    m7,
    y7,
    x7,
    v7,
    Gq,
    N6,
    I7,
    N7,
    E7,
    R7,
    L7,
    B7,
    T6,
    V7,
    U7,
    j7,
    uK,
];
for (const n of q7) Pb(n);
const Jt = (n) => document.querySelector(n),
    K7 = (n) => document.querySelectorAll(n);
let zS = !1,
    ep = [];
const BS = (n) => (zS = n);
function MS() {
    zS &&
        (Y(function () {
            const n = Rn.getValidationVideo(),
                t = kI(n),
                e = Xr.predict(t.expandDims()).squeeze(),
                s = e.argMax().arraySync(),
                r = e.arraySync();
            ep.push(r),
                Rn.setAcuracyText(
                    'Predição: <strong>' +
                        pe.classNames[s] +
                        '</strong> com ' +
                        Math.floor(r[s] * 100) +
                        '% confiança'
                ),
                _n.highlightCard(s);
        }),
        window.requestAnimationFrame(MS));
}
function VS(n) {
    Rn.disablePredictionButton(n),
        Rn.disableInputValidationVideoFile(n),
        Rn.disableExportButton(n);
}
async function X7() {
    Rn.setPredictStatus(!0),
        VS(!0),
        Rn.startValidationPlayVideo(),
        (pe.videoPlaying = !0),
        Fr('Realizando Predição'),
        Ts(
            'Mantenha esta janela aberta e visível para processar o vídeo!',
            0,
            to.WARNING
        ),
        MS();
}
function Y7() {
    const n = ep.join(`
`);
    return (ep = []), n;
}
function Ml(n) {
    throw new Error(
        'Could not dynamically require "' +
            n +
            '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.'
    );
}
var WS = { exports: {} };
/*!

JSZip v3.10.1 - A JavaScript class for generating and reading zip files
<http://stuartk.com/jszip>

(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>
Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/main/LICENSE.markdown.

JSZip uses the library pako released under the MIT license :
https://github.com/nodeca/pako/blob/main/LICENSE
*/ (function (n, t) {
    (function (e) {
        n.exports = e();
    })(function () {
        return (function e(s, r, o) {
            function i(c, u) {
                if (!r[c]) {
                    if (!s[c]) {
                        var h = typeof Ml == 'function' && Ml;
                        if (!u && h) return h(c, !0);
                        if (a) return a(c, !0);
                        var d = new Error("Cannot find module '" + c + "'");
                        throw ((d.code = 'MODULE_NOT_FOUND'), d);
                    }
                    var p = (r[c] = { exports: {} });
                    s[c][0].call(
                        p.exports,
                        function (f) {
                            var m = s[c][1][f];
                            return i(m || f);
                        },
                        p,
                        p.exports,
                        e,
                        s,
                        r,
                        o
                    );
                }
                return r[c].exports;
            }
            for (
                var a = typeof Ml == 'function' && Ml, l = 0;
                l < o.length;
                l++
            )
                i(o[l]);
            return i;
        })(
            {
                1: [
                    function (e, s, r) {
                        var o = e('./utils'),
                            i = e('./support'),
                            a =
                                'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
                        (r.encode = function (l) {
                            for (
                                var c,
                                    u,
                                    h,
                                    d,
                                    p,
                                    f,
                                    m,
                                    g = [],
                                    y = 0,
                                    b = l.length,
                                    w = b,
                                    x = o.getTypeOf(l) !== 'string';
                                y < l.length;

                            )
                                (w = b - y),
                                    (h = x
                                        ? ((c = l[y++]),
                                          (u = y < b ? l[y++] : 0),
                                          y < b ? l[y++] : 0)
                                        : ((c = l.charCodeAt(y++)),
                                          (u = y < b ? l.charCodeAt(y++) : 0),
                                          y < b ? l.charCodeAt(y++) : 0)),
                                    (d = c >> 2),
                                    (p = ((3 & c) << 4) | (u >> 4)),
                                    (f =
                                        1 < w
                                            ? ((15 & u) << 2) | (h >> 6)
                                            : 64),
                                    (m = 2 < w ? 63 & h : 64),
                                    g.push(
                                        a.charAt(d) +
                                            a.charAt(p) +
                                            a.charAt(f) +
                                            a.charAt(m)
                                    );
                            return g.join('');
                        }),
                            (r.decode = function (l) {
                                var c,
                                    u,
                                    h,
                                    d,
                                    p,
                                    f,
                                    m = 0,
                                    g = 0,
                                    y = 'data:';
                                if (l.substr(0, y.length) === y)
                                    throw new Error(
                                        'Invalid base64 input, it looks like a data url.'
                                    );
                                var b,
                                    w =
                                        (3 *
                                            (l = l.replace(
                                                /[^A-Za-z0-9+/=]/g,
                                                ''
                                            )).length) /
                                        4;
                                if (
                                    (l.charAt(l.length - 1) === a.charAt(64) &&
                                        w--,
                                    l.charAt(l.length - 2) === a.charAt(64) &&
                                        w--,
                                    w % 1 != 0)
                                )
                                    throw new Error(
                                        'Invalid base64 input, bad content length.'
                                    );
                                for (
                                    b = i.uint8array
                                        ? new Uint8Array(0 | w)
                                        : new Array(0 | w);
                                    m < l.length;

                                )
                                    (c =
                                        (a.indexOf(l.charAt(m++)) << 2) |
                                        ((d = a.indexOf(l.charAt(m++))) >> 4)),
                                        (u =
                                            ((15 & d) << 4) |
                                            ((p = a.indexOf(l.charAt(m++))) >>
                                                2)),
                                        (h =
                                            ((3 & p) << 6) |
                                            (f = a.indexOf(l.charAt(m++)))),
                                        (b[g++] = c),
                                        p !== 64 && (b[g++] = u),
                                        f !== 64 && (b[g++] = h);
                                return b;
                            });
                    },
                    { './support': 30, './utils': 32 },
                ],
                2: [
                    function (e, s, r) {
                        var o = e('./external'),
                            i = e('./stream/DataWorker'),
                            a = e('./stream/Crc32Probe'),
                            l = e('./stream/DataLengthProbe');
                        function c(u, h, d, p, f) {
                            (this.compressedSize = u),
                                (this.uncompressedSize = h),
                                (this.crc32 = d),
                                (this.compression = p),
                                (this.compressedContent = f);
                        }
                        (c.prototype = {
                            getContentWorker: function () {
                                var u = new i(
                                        o.Promise.resolve(
                                            this.compressedContent
                                        )
                                    )
                                        .pipe(
                                            this.compression.uncompressWorker()
                                        )
                                        .pipe(new l('data_length')),
                                    h = this;
                                return (
                                    u.on('end', function () {
                                        if (
                                            this.streamInfo.data_length !==
                                            h.uncompressedSize
                                        )
                                            throw new Error(
                                                'Bug : uncompressed data size mismatch'
                                            );
                                    }),
                                    u
                                );
                            },
                            getCompressedWorker: function () {
                                return new i(
                                    o.Promise.resolve(this.compressedContent)
                                )
                                    .withStreamInfo(
                                        'compressedSize',
                                        this.compressedSize
                                    )
                                    .withStreamInfo(
                                        'uncompressedSize',
                                        this.uncompressedSize
                                    )
                                    .withStreamInfo('crc32', this.crc32)
                                    .withStreamInfo(
                                        'compression',
                                        this.compression
                                    );
                            },
                        }),
                            (c.createWorkerFrom = function (u, h, d) {
                                return u
                                    .pipe(new a())
                                    .pipe(new l('uncompressedSize'))
                                    .pipe(h.compressWorker(d))
                                    .pipe(new l('compressedSize'))
                                    .withStreamInfo('compression', h);
                            }),
                            (s.exports = c);
                    },
                    {
                        './external': 6,
                        './stream/Crc32Probe': 25,
                        './stream/DataLengthProbe': 26,
                        './stream/DataWorker': 27,
                    },
                ],
                3: [
                    function (e, s, r) {
                        var o = e('./stream/GenericWorker');
                        (r.STORE = {
                            magic: '\0\0',
                            compressWorker: function () {
                                return new o('STORE compression');
                            },
                            uncompressWorker: function () {
                                return new o('STORE decompression');
                            },
                        }),
                            (r.DEFLATE = e('./flate'));
                    },
                    { './flate': 7, './stream/GenericWorker': 28 },
                ],
                4: [
                    function (e, s, r) {
                        var o = e('./utils'),
                            i = (function () {
                                for (var a, l = [], c = 0; c < 256; c++) {
                                    a = c;
                                    for (var u = 0; u < 8; u++)
                                        a =
                                            1 & a
                                                ? 3988292384 ^ (a >>> 1)
                                                : a >>> 1;
                                    l[c] = a;
                                }
                                return l;
                            })();
                        s.exports = function (a, l) {
                            return a !== void 0 && a.length
                                ? o.getTypeOf(a) !== 'string'
                                    ? (function (c, u, h, d) {
                                          var p = i,
                                              f = d + h;
                                          c ^= -1;
                                          for (var m = d; m < f; m++)
                                              c =
                                                  (c >>> 8) ^
                                                  p[255 & (c ^ u[m])];
                                          return -1 ^ c;
                                      })(0 | l, a, a.length, 0)
                                    : (function (c, u, h, d) {
                                          var p = i,
                                              f = d + h;
                                          c ^= -1;
                                          for (var m = d; m < f; m++)
                                              c =
                                                  (c >>> 8) ^
                                                  p[
                                                      255 &
                                                          (c ^ u.charCodeAt(m))
                                                  ];
                                          return -1 ^ c;
                                      })(0 | l, a, a.length, 0)
                                : 0;
                        };
                    },
                    { './utils': 32 },
                ],
                5: [
                    function (e, s, r) {
                        (r.base64 = !1),
                            (r.binary = !1),
                            (r.dir = !1),
                            (r.createFolders = !0),
                            (r.date = null),
                            (r.compression = null),
                            (r.compressionOptions = null),
                            (r.comment = null),
                            (r.unixPermissions = null),
                            (r.dosPermissions = null);
                    },
                    {},
                ],
                6: [
                    function (e, s, r) {
                        var o = null;
                        (o = typeof Promise < 'u' ? Promise : e('lie')),
                            (s.exports = { Promise: o });
                    },
                    { lie: 37 },
                ],
                7: [
                    function (e, s, r) {
                        var o =
                                typeof Uint8Array < 'u' &&
                                typeof Uint16Array < 'u' &&
                                typeof Uint32Array < 'u',
                            i = e('pako'),
                            a = e('./utils'),
                            l = e('./stream/GenericWorker'),
                            c = o ? 'uint8array' : 'array';
                        function u(h, d) {
                            l.call(this, 'FlateWorker/' + h),
                                (this._pako = null),
                                (this._pakoAction = h),
                                (this._pakoOptions = d),
                                (this.meta = {});
                        }
                        (r.magic = '\b\0'),
                            a.inherits(u, l),
                            (u.prototype.processChunk = function (h) {
                                (this.meta = h.meta),
                                    this._pako === null && this._createPako(),
                                    this._pako.push(
                                        a.transformTo(c, h.data),
                                        !1
                                    );
                            }),
                            (u.prototype.flush = function () {
                                l.prototype.flush.call(this),
                                    this._pako === null && this._createPako(),
                                    this._pako.push([], !0);
                            }),
                            (u.prototype.cleanUp = function () {
                                l.prototype.cleanUp.call(this),
                                    (this._pako = null);
                            }),
                            (u.prototype._createPako = function () {
                                this._pako = new i[this._pakoAction]({
                                    raw: !0,
                                    level: this._pakoOptions.level || -1,
                                });
                                var h = this;
                                this._pako.onData = function (d) {
                                    h.push({ data: d, meta: h.meta });
                                };
                            }),
                            (r.compressWorker = function (h) {
                                return new u('Deflate', h);
                            }),
                            (r.uncompressWorker = function () {
                                return new u('Inflate', {});
                            });
                    },
                    { './stream/GenericWorker': 28, './utils': 32, pako: 38 },
                ],
                8: [
                    function (e, s, r) {
                        function o(p, f) {
                            var m,
                                g = '';
                            for (m = 0; m < f; m++)
                                (g += String.fromCharCode(255 & p)), (p >>>= 8);
                            return g;
                        }
                        function i(p, f, m, g, y, b) {
                            var w,
                                x,
                                v = p.file,
                                C = p.compression,
                                $ = b !== c.utf8encode,
                                T = a.transformTo('string', b(v.name)),
                                N = a.transformTo(
                                    'string',
                                    c.utf8encode(v.name)
                                ),
                                R = v.comment,
                                P = a.transformTo('string', b(R)),
                                E = a.transformTo('string', c.utf8encode(R)),
                                O = N.length !== v.name.length,
                                S = E.length !== R.length,
                                L = '',
                                q = '',
                                W = '',
                                X = v.dir,
                                G = v.date,
                                et = {
                                    crc32: 0,
                                    compressedSize: 0,
                                    uncompressedSize: 0,
                                };
                            (f && !m) ||
                                ((et.crc32 = p.crc32),
                                (et.compressedSize = p.compressedSize),
                                (et.uncompressedSize = p.uncompressedSize));
                            var z = 0;
                            f && (z |= 8), $ || (!O && !S) || (z |= 2048);
                            var M = 0,
                                st = 0;
                            X && (M |= 16),
                                y === 'UNIX'
                                    ? ((st = 798),
                                      (M |= (function (J, pt) {
                                          var wt = J;
                                          return (
                                              J || (wt = pt ? 16893 : 33204),
                                              (65535 & wt) << 16
                                          );
                                      })(v.unixPermissions, X)))
                                    : ((st = 20),
                                      (M |= (function (J) {
                                          return 63 & (J || 0);
                                      })(v.dosPermissions))),
                                (w = G.getUTCHours()),
                                (w <<= 6),
                                (w |= G.getUTCMinutes()),
                                (w <<= 5),
                                (w |= G.getUTCSeconds() / 2),
                                (x = G.getUTCFullYear() - 1980),
                                (x <<= 4),
                                (x |= G.getUTCMonth() + 1),
                                (x <<= 5),
                                (x |= G.getUTCDate()),
                                O &&
                                    ((q = o(1, 1) + o(u(T), 4) + N),
                                    (L += 'up' + o(q.length, 2) + q)),
                                S &&
                                    ((W = o(1, 1) + o(u(P), 4) + E),
                                    (L += 'uc' + o(W.length, 2) + W));
                            var nt = '';
                            return (
                                (nt += `
\0`),
                                (nt += o(z, 2)),
                                (nt += C.magic),
                                (nt += o(w, 2)),
                                (nt += o(x, 2)),
                                (nt += o(et.crc32, 4)),
                                (nt += o(et.compressedSize, 4)),
                                (nt += o(et.uncompressedSize, 4)),
                                (nt += o(T.length, 2)),
                                (nt += o(L.length, 2)),
                                {
                                    fileRecord:
                                        h.LOCAL_FILE_HEADER + nt + T + L,
                                    dirRecord:
                                        h.CENTRAL_FILE_HEADER +
                                        o(st, 2) +
                                        nt +
                                        o(P.length, 2) +
                                        '\0\0\0\0' +
                                        o(M, 4) +
                                        o(g, 4) +
                                        T +
                                        L +
                                        P,
                                }
                            );
                        }
                        var a = e('../utils'),
                            l = e('../stream/GenericWorker'),
                            c = e('../utf8'),
                            u = e('../crc32'),
                            h = e('../signature');
                        function d(p, f, m, g) {
                            l.call(this, 'ZipFileWorker'),
                                (this.bytesWritten = 0),
                                (this.zipComment = f),
                                (this.zipPlatform = m),
                                (this.encodeFileName = g),
                                (this.streamFiles = p),
                                (this.accumulate = !1),
                                (this.contentBuffer = []),
                                (this.dirRecords = []),
                                (this.currentSourceOffset = 0),
                                (this.entriesCount = 0),
                                (this.currentFile = null),
                                (this._sources = []);
                        }
                        a.inherits(d, l),
                            (d.prototype.push = function (p) {
                                var f = p.meta.percent || 0,
                                    m = this.entriesCount,
                                    g = this._sources.length;
                                this.accumulate
                                    ? this.contentBuffer.push(p)
                                    : ((this.bytesWritten += p.data.length),
                                      l.prototype.push.call(this, {
                                          data: p.data,
                                          meta: {
                                              currentFile: this.currentFile,
                                              percent: m
                                                  ? (f + 100 * (m - g - 1)) / m
                                                  : 100,
                                          },
                                      }));
                            }),
                            (d.prototype.openedSource = function (p) {
                                (this.currentSourceOffset = this.bytesWritten),
                                    (this.currentFile = p.file.name);
                                var f = this.streamFiles && !p.file.dir;
                                if (f) {
                                    var m = i(
                                        p,
                                        f,
                                        !1,
                                        this.currentSourceOffset,
                                        this.zipPlatform,
                                        this.encodeFileName
                                    );
                                    this.push({
                                        data: m.fileRecord,
                                        meta: { percent: 0 },
                                    });
                                } else this.accumulate = !0;
                            }),
                            (d.prototype.closedSource = function (p) {
                                this.accumulate = !1;
                                var f = this.streamFiles && !p.file.dir,
                                    m = i(
                                        p,
                                        f,
                                        !0,
                                        this.currentSourceOffset,
                                        this.zipPlatform,
                                        this.encodeFileName
                                    );
                                if ((this.dirRecords.push(m.dirRecord), f))
                                    this.push({
                                        data: (function (g) {
                                            return (
                                                h.DATA_DESCRIPTOR +
                                                o(g.crc32, 4) +
                                                o(g.compressedSize, 4) +
                                                o(g.uncompressedSize, 4)
                                            );
                                        })(p),
                                        meta: { percent: 100 },
                                    });
                                else
                                    for (
                                        this.push({
                                            data: m.fileRecord,
                                            meta: { percent: 0 },
                                        });
                                        this.contentBuffer.length;

                                    )
                                        this.push(this.contentBuffer.shift());
                                this.currentFile = null;
                            }),
                            (d.prototype.flush = function () {
                                for (
                                    var p = this.bytesWritten, f = 0;
                                    f < this.dirRecords.length;
                                    f++
                                )
                                    this.push({
                                        data: this.dirRecords[f],
                                        meta: { percent: 100 },
                                    });
                                var m = this.bytesWritten - p,
                                    g = (function (y, b, w, x, v) {
                                        var C = a.transformTo('string', v(x));
                                        return (
                                            h.CENTRAL_DIRECTORY_END +
                                            '\0\0\0\0' +
                                            o(y, 2) +
                                            o(y, 2) +
                                            o(b, 4) +
                                            o(w, 4) +
                                            o(C.length, 2) +
                                            C
                                        );
                                    })(
                                        this.dirRecords.length,
                                        m,
                                        p,
                                        this.zipComment,
                                        this.encodeFileName
                                    );
                                this.push({ data: g, meta: { percent: 100 } });
                            }),
                            (d.prototype.prepareNextSource = function () {
                                (this.previous = this._sources.shift()),
                                    this.openedSource(this.previous.streamInfo),
                                    this.isPaused
                                        ? this.previous.pause()
                                        : this.previous.resume();
                            }),
                            (d.prototype.registerPrevious = function (p) {
                                this._sources.push(p);
                                var f = this;
                                return (
                                    p.on('data', function (m) {
                                        f.processChunk(m);
                                    }),
                                    p.on('end', function () {
                                        f.closedSource(f.previous.streamInfo),
                                            f._sources.length
                                                ? f.prepareNextSource()
                                                : f.end();
                                    }),
                                    p.on('error', function (m) {
                                        f.error(m);
                                    }),
                                    this
                                );
                            }),
                            (d.prototype.resume = function () {
                                return (
                                    !!l.prototype.resume.call(this) &&
                                    (!this.previous && this._sources.length
                                        ? (this.prepareNextSource(), !0)
                                        : this.previous ||
                                          this._sources.length ||
                                          this.generatedError
                                        ? void 0
                                        : (this.end(), !0))
                                );
                            }),
                            (d.prototype.error = function (p) {
                                var f = this._sources;
                                if (!l.prototype.error.call(this, p)) return !1;
                                for (var m = 0; m < f.length; m++)
                                    try {
                                        f[m].error(p);
                                    } catch {}
                                return !0;
                            }),
                            (d.prototype.lock = function () {
                                l.prototype.lock.call(this);
                                for (
                                    var p = this._sources, f = 0;
                                    f < p.length;
                                    f++
                                )
                                    p[f].lock();
                            }),
                            (s.exports = d);
                    },
                    {
                        '../crc32': 4,
                        '../signature': 23,
                        '../stream/GenericWorker': 28,
                        '../utf8': 31,
                        '../utils': 32,
                    },
                ],
                9: [
                    function (e, s, r) {
                        var o = e('../compressions'),
                            i = e('./ZipFileWorker');
                        r.generateWorker = function (a, l, c) {
                            var u = new i(
                                    l.streamFiles,
                                    c,
                                    l.platform,
                                    l.encodeFileName
                                ),
                                h = 0;
                            try {
                                a.forEach(function (d, p) {
                                    h++;
                                    var f = (function (b, w) {
                                            var x = b || w,
                                                v = o[x];
                                            if (!v)
                                                throw new Error(
                                                    x +
                                                        ' is not a valid compression method !'
                                                );
                                            return v;
                                        })(
                                            p.options.compression,
                                            l.compression
                                        ),
                                        m =
                                            p.options.compressionOptions ||
                                            l.compressionOptions ||
                                            {},
                                        g = p.dir,
                                        y = p.date;
                                    p._compressWorker(f, m)
                                        .withStreamInfo('file', {
                                            name: d,
                                            dir: g,
                                            date: y,
                                            comment: p.comment || '',
                                            unixPermissions: p.unixPermissions,
                                            dosPermissions: p.dosPermissions,
                                        })
                                        .pipe(u);
                                }),
                                    (u.entriesCount = h);
                            } catch (d) {
                                u.error(d);
                            }
                            return u;
                        };
                    },
                    { '../compressions': 3, './ZipFileWorker': 8 },
                ],
                10: [
                    function (e, s, r) {
                        function o() {
                            if (!(this instanceof o)) return new o();
                            if (arguments.length)
                                throw new Error(
                                    'The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.'
                                );
                            (this.files = Object.create(null)),
                                (this.comment = null),
                                (this.root = ''),
                                (this.clone = function () {
                                    var i = new o();
                                    for (var a in this)
                                        typeof this[a] != 'function' &&
                                            (i[a] = this[a]);
                                    return i;
                                });
                        }
                        ((o.prototype = e('./object')).loadAsync = e('./load')),
                            (o.support = e('./support')),
                            (o.defaults = e('./defaults')),
                            (o.version = '3.10.1'),
                            (o.loadAsync = function (i, a) {
                                return new o().loadAsync(i, a);
                            }),
                            (o.external = e('./external')),
                            (s.exports = o);
                    },
                    {
                        './defaults': 5,
                        './external': 6,
                        './load': 11,
                        './object': 15,
                        './support': 30,
                    },
                ],
                11: [
                    function (e, s, r) {
                        var o = e('./utils'),
                            i = e('./external'),
                            a = e('./utf8'),
                            l = e('./zipEntries'),
                            c = e('./stream/Crc32Probe'),
                            u = e('./nodejsUtils');
                        function h(d) {
                            return new i.Promise(function (p, f) {
                                var m = d.decompressed
                                    .getContentWorker()
                                    .pipe(new c());
                                m.on('error', function (g) {
                                    f(g);
                                })
                                    .on('end', function () {
                                        m.streamInfo.crc32 !==
                                        d.decompressed.crc32
                                            ? f(
                                                  new Error(
                                                      'Corrupted zip : CRC32 mismatch'
                                                  )
                                              )
                                            : p();
                                    })
                                    .resume();
                            });
                        }
                        s.exports = function (d, p) {
                            var f = this;
                            return (
                                (p = o.extend(p || {}, {
                                    base64: !1,
                                    checkCRC32: !1,
                                    optimizedBinaryString: !1,
                                    createFolders: !1,
                                    decodeFileName: a.utf8decode,
                                })),
                                u.isNode && u.isStream(d)
                                    ? i.Promise.reject(
                                          new Error(
                                              "JSZip can't accept a stream when loading a zip file."
                                          )
                                      )
                                    : o
                                          .prepareContent(
                                              'the loaded zip file',
                                              d,
                                              !0,
                                              p.optimizedBinaryString,
                                              p.base64
                                          )
                                          .then(function (m) {
                                              var g = new l(p);
                                              return g.load(m), g;
                                          })
                                          .then(function (m) {
                                              var g = [i.Promise.resolve(m)],
                                                  y = m.files;
                                              if (p.checkCRC32)
                                                  for (
                                                      var b = 0;
                                                      b < y.length;
                                                      b++
                                                  )
                                                      g.push(h(y[b]));
                                              return i.Promise.all(g);
                                          })
                                          .then(function (m) {
                                              for (
                                                  var g = m.shift(),
                                                      y = g.files,
                                                      b = 0;
                                                  b < y.length;
                                                  b++
                                              ) {
                                                  var w = y[b],
                                                      x = w.fileNameStr,
                                                      v = o.resolve(
                                                          w.fileNameStr
                                                      );
                                                  f.file(v, w.decompressed, {
                                                      binary: !0,
                                                      optimizedBinaryString: !0,
                                                      date: w.date,
                                                      dir: w.dir,
                                                      comment: w.fileCommentStr
                                                          .length
                                                          ? w.fileCommentStr
                                                          : null,
                                                      unixPermissions:
                                                          w.unixPermissions,
                                                      dosPermissions:
                                                          w.dosPermissions,
                                                      createFolders:
                                                          p.createFolders,
                                                  }),
                                                      w.dir ||
                                                          (f.file(
                                                              v
                                                          ).unsafeOriginalName =
                                                              x);
                                              }
                                              return (
                                                  g.zipComment.length &&
                                                      (f.comment =
                                                          g.zipComment),
                                                  f
                                              );
                                          })
                            );
                        };
                    },
                    {
                        './external': 6,
                        './nodejsUtils': 14,
                        './stream/Crc32Probe': 25,
                        './utf8': 31,
                        './utils': 32,
                        './zipEntries': 33,
                    },
                ],
                12: [
                    function (e, s, r) {
                        var o = e('../utils'),
                            i = e('../stream/GenericWorker');
                        function a(l, c) {
                            i.call(
                                this,
                                'Nodejs stream input adapter for ' + l
                            ),
                                (this._upstreamEnded = !1),
                                this._bindStream(c);
                        }
                        o.inherits(a, i),
                            (a.prototype._bindStream = function (l) {
                                var c = this;
                                (this._stream = l).pause(),
                                    l
                                        .on('data', function (u) {
                                            c.push({
                                                data: u,
                                                meta: { percent: 0 },
                                            });
                                        })
                                        .on('error', function (u) {
                                            c.isPaused
                                                ? (this.generatedError = u)
                                                : c.error(u);
                                        })
                                        .on('end', function () {
                                            c.isPaused
                                                ? (c._upstreamEnded = !0)
                                                : c.end();
                                        });
                            }),
                            (a.prototype.pause = function () {
                                return (
                                    !!i.prototype.pause.call(this) &&
                                    (this._stream.pause(), !0)
                                );
                            }),
                            (a.prototype.resume = function () {
                                return (
                                    !!i.prototype.resume.call(this) &&
                                    (this._upstreamEnded
                                        ? this.end()
                                        : this._stream.resume(),
                                    !0)
                                );
                            }),
                            (s.exports = a);
                    },
                    { '../stream/GenericWorker': 28, '../utils': 32 },
                ],
                13: [
                    function (e, s, r) {
                        var o = e('readable-stream').Readable;
                        function i(a, l, c) {
                            o.call(this, l), (this._helper = a);
                            var u = this;
                            a.on('data', function (h, d) {
                                u.push(h) || u._helper.pause(), c && c(d);
                            })
                                .on('error', function (h) {
                                    u.emit('error', h);
                                })
                                .on('end', function () {
                                    u.push(null);
                                });
                        }
                        e('../utils').inherits(i, o),
                            (i.prototype._read = function () {
                                this._helper.resume();
                            }),
                            (s.exports = i);
                    },
                    { '../utils': 32, 'readable-stream': 16 },
                ],
                14: [
                    function (e, s, r) {
                        s.exports = {
                            isNode: typeof Buffer < 'u',
                            newBufferFrom: function (o, i) {
                                if (
                                    Buffer.from &&
                                    Buffer.from !== Uint8Array.from
                                )
                                    return Buffer.from(o, i);
                                if (typeof o == 'number')
                                    throw new Error(
                                        'The "data" argument must not be a number'
                                    );
                                return new Buffer(o, i);
                            },
                            allocBuffer: function (o) {
                                if (Buffer.alloc) return Buffer.alloc(o);
                                var i = new Buffer(o);
                                return i.fill(0), i;
                            },
                            isBuffer: function (o) {
                                return Buffer.isBuffer(o);
                            },
                            isStream: function (o) {
                                return (
                                    o &&
                                    typeof o.on == 'function' &&
                                    typeof o.pause == 'function' &&
                                    typeof o.resume == 'function'
                                );
                            },
                        };
                    },
                    {},
                ],
                15: [
                    function (e, s, r) {
                        function o(v, C, $) {
                            var T,
                                N = a.getTypeOf(C),
                                R = a.extend($ || {}, u);
                            (R.date = R.date || new Date()),
                                R.compression !== null &&
                                    (R.compression =
                                        R.compression.toUpperCase()),
                                typeof R.unixPermissions == 'string' &&
                                    (R.unixPermissions = parseInt(
                                        R.unixPermissions,
                                        8
                                    )),
                                R.unixPermissions &&
                                    16384 & R.unixPermissions &&
                                    (R.dir = !0),
                                R.dosPermissions &&
                                    16 & R.dosPermissions &&
                                    (R.dir = !0),
                                R.dir && (v = y(v)),
                                R.createFolders &&
                                    (T = g(v)) &&
                                    b.call(this, T, !0);
                            var P =
                                N === 'string' &&
                                R.binary === !1 &&
                                R.base64 === !1;
                            ($ && $.binary !== void 0) || (R.binary = !P),
                                ((C instanceof h && C.uncompressedSize === 0) ||
                                    R.dir ||
                                    !C ||
                                    C.length === 0) &&
                                    ((R.base64 = !1),
                                    (R.binary = !0),
                                    (C = ''),
                                    (R.compression = 'STORE'),
                                    (N = 'string'));
                            var E = null;
                            E =
                                C instanceof h || C instanceof l
                                    ? C
                                    : f.isNode && f.isStream(C)
                                    ? new m(v, C)
                                    : a.prepareContent(
                                          v,
                                          C,
                                          R.binary,
                                          R.optimizedBinaryString,
                                          R.base64
                                      );
                            var O = new d(v, E, R);
                            this.files[v] = O;
                        }
                        var i = e('./utf8'),
                            a = e('./utils'),
                            l = e('./stream/GenericWorker'),
                            c = e('./stream/StreamHelper'),
                            u = e('./defaults'),
                            h = e('./compressedObject'),
                            d = e('./zipObject'),
                            p = e('./generate'),
                            f = e('./nodejsUtils'),
                            m = e('./nodejs/NodejsStreamInputAdapter'),
                            g = function (v) {
                                v.slice(-1) === '/' &&
                                    (v = v.substring(0, v.length - 1));
                                var C = v.lastIndexOf('/');
                                return 0 < C ? v.substring(0, C) : '';
                            },
                            y = function (v) {
                                return v.slice(-1) !== '/' && (v += '/'), v;
                            },
                            b = function (v, C) {
                                return (
                                    (C = C !== void 0 ? C : u.createFolders),
                                    (v = y(v)),
                                    this.files[v] ||
                                        o.call(this, v, null, {
                                            dir: !0,
                                            createFolders: C,
                                        }),
                                    this.files[v]
                                );
                            };
                        function w(v) {
                            return (
                                Object.prototype.toString.call(v) ===
                                '[object RegExp]'
                            );
                        }
                        var x = {
                            load: function () {
                                throw new Error(
                                    'This method has been removed in JSZip 3.0, please check the upgrade guide.'
                                );
                            },
                            forEach: function (v) {
                                var C, $, T;
                                for (C in this.files)
                                    (T = this.files[C]),
                                        ($ = C.slice(
                                            this.root.length,
                                            C.length
                                        )) &&
                                            C.slice(0, this.root.length) ===
                                                this.root &&
                                            v($, T);
                            },
                            filter: function (v) {
                                var C = [];
                                return (
                                    this.forEach(function ($, T) {
                                        v($, T) && C.push(T);
                                    }),
                                    C
                                );
                            },
                            file: function (v, C, $) {
                                if (arguments.length !== 1)
                                    return (
                                        (v = this.root + v),
                                        o.call(this, v, C, $),
                                        this
                                    );
                                if (w(v)) {
                                    var T = v;
                                    return this.filter(function (R, P) {
                                        return !P.dir && T.test(R);
                                    });
                                }
                                var N = this.files[this.root + v];
                                return N && !N.dir ? N : null;
                            },
                            folder: function (v) {
                                if (!v) return this;
                                if (w(v))
                                    return this.filter(function (N, R) {
                                        return R.dir && v.test(N);
                                    });
                                var C = this.root + v,
                                    $ = b.call(this, C),
                                    T = this.clone();
                                return (T.root = $.name), T;
                            },
                            remove: function (v) {
                                v = this.root + v;
                                var C = this.files[v];
                                if (
                                    (C ||
                                        (v.slice(-1) !== '/' && (v += '/'),
                                        (C = this.files[v])),
                                    C && !C.dir)
                                )
                                    delete this.files[v];
                                else
                                    for (
                                        var $ = this.filter(function (N, R) {
                                                return (
                                                    R.name.slice(
                                                        0,
                                                        v.length
                                                    ) === v
                                                );
                                            }),
                                            T = 0;
                                        T < $.length;
                                        T++
                                    )
                                        delete this.files[$[T].name];
                                return this;
                            },
                            generate: function () {
                                throw new Error(
                                    'This method has been removed in JSZip 3.0, please check the upgrade guide.'
                                );
                            },
                            generateInternalStream: function (v) {
                                var C,
                                    $ = {};
                                try {
                                    if (
                                        ((($ = a.extend(v || {}, {
                                            streamFiles: !1,
                                            compression: 'STORE',
                                            compressionOptions: null,
                                            type: '',
                                            platform: 'DOS',
                                            comment: null,
                                            mimeType: 'application/zip',
                                            encodeFileName: i.utf8encode,
                                        })).type = $.type.toLowerCase()),
                                        ($.compression =
                                            $.compression.toUpperCase()),
                                        $.type === 'binarystring' &&
                                            ($.type = 'string'),
                                        !$.type)
                                    )
                                        throw new Error(
                                            'No output type specified.'
                                        );
                                    a.checkSupport($.type),
                                        ($.platform !== 'darwin' &&
                                            $.platform !== 'freebsd' &&
                                            $.platform !== 'linux' &&
                                            $.platform !== 'sunos') ||
                                            ($.platform = 'UNIX'),
                                        $.platform === 'win32' &&
                                            ($.platform = 'DOS');
                                    var T = $.comment || this.comment || '';
                                    C = p.generateWorker(this, $, T);
                                } catch (N) {
                                    (C = new l('error')).error(N);
                                }
                                return new c(C, $.type || 'string', $.mimeType);
                            },
                            generateAsync: function (v, C) {
                                return this.generateInternalStream(
                                    v
                                ).accumulate(C);
                            },
                            generateNodeStream: function (v, C) {
                                return (
                                    (v = v || {}).type ||
                                        (v.type = 'nodebuffer'),
                                    this.generateInternalStream(
                                        v
                                    ).toNodejsStream(C)
                                );
                            },
                        };
                        s.exports = x;
                    },
                    {
                        './compressedObject': 2,
                        './defaults': 5,
                        './generate': 9,
                        './nodejs/NodejsStreamInputAdapter': 12,
                        './nodejsUtils': 14,
                        './stream/GenericWorker': 28,
                        './stream/StreamHelper': 29,
                        './utf8': 31,
                        './utils': 32,
                        './zipObject': 35,
                    },
                ],
                16: [
                    function (e, s, r) {
                        s.exports = e('stream');
                    },
                    { stream: void 0 },
                ],
                17: [
                    function (e, s, r) {
                        var o = e('./DataReader');
                        function i(a) {
                            o.call(this, a);
                            for (var l = 0; l < this.data.length; l++)
                                a[l] = 255 & a[l];
                        }
                        e('../utils').inherits(i, o),
                            (i.prototype.byteAt = function (a) {
                                return this.data[this.zero + a];
                            }),
                            (i.prototype.lastIndexOfSignature = function (a) {
                                for (
                                    var l = a.charCodeAt(0),
                                        c = a.charCodeAt(1),
                                        u = a.charCodeAt(2),
                                        h = a.charCodeAt(3),
                                        d = this.length - 4;
                                    0 <= d;
                                    --d
                                )
                                    if (
                                        this.data[d] === l &&
                                        this.data[d + 1] === c &&
                                        this.data[d + 2] === u &&
                                        this.data[d + 3] === h
                                    )
                                        return d - this.zero;
                                return -1;
                            }),
                            (i.prototype.readAndCheckSignature = function (a) {
                                var l = a.charCodeAt(0),
                                    c = a.charCodeAt(1),
                                    u = a.charCodeAt(2),
                                    h = a.charCodeAt(3),
                                    d = this.readData(4);
                                return (
                                    l === d[0] &&
                                    c === d[1] &&
                                    u === d[2] &&
                                    h === d[3]
                                );
                            }),
                            (i.prototype.readData = function (a) {
                                if ((this.checkOffset(a), a === 0)) return [];
                                var l = this.data.slice(
                                    this.zero + this.index,
                                    this.zero + this.index + a
                                );
                                return (this.index += a), l;
                            }),
                            (s.exports = i);
                    },
                    { '../utils': 32, './DataReader': 18 },
                ],
                18: [
                    function (e, s, r) {
                        var o = e('../utils');
                        function i(a) {
                            (this.data = a),
                                (this.length = a.length),
                                (this.index = 0),
                                (this.zero = 0);
                        }
                        (i.prototype = {
                            checkOffset: function (a) {
                                this.checkIndex(this.index + a);
                            },
                            checkIndex: function (a) {
                                if (this.length < this.zero + a || a < 0)
                                    throw new Error(
                                        'End of data reached (data length = ' +
                                            this.length +
                                            ', asked index = ' +
                                            a +
                                            '). Corrupted zip ?'
                                    );
                            },
                            setIndex: function (a) {
                                this.checkIndex(a), (this.index = a);
                            },
                            skip: function (a) {
                                this.setIndex(this.index + a);
                            },
                            byteAt: function () {},
                            readInt: function (a) {
                                var l,
                                    c = 0;
                                for (
                                    this.checkOffset(a), l = this.index + a - 1;
                                    l >= this.index;
                                    l--
                                )
                                    c = (c << 8) + this.byteAt(l);
                                return (this.index += a), c;
                            },
                            readString: function (a) {
                                return o.transformTo(
                                    'string',
                                    this.readData(a)
                                );
                            },
                            readData: function () {},
                            lastIndexOfSignature: function () {},
                            readAndCheckSignature: function () {},
                            readDate: function () {
                                var a = this.readInt(4);
                                return new Date(
                                    Date.UTC(
                                        1980 + ((a >> 25) & 127),
                                        ((a >> 21) & 15) - 1,
                                        (a >> 16) & 31,
                                        (a >> 11) & 31,
                                        (a >> 5) & 63,
                                        (31 & a) << 1
                                    )
                                );
                            },
                        }),
                            (s.exports = i);
                    },
                    { '../utils': 32 },
                ],
                19: [
                    function (e, s, r) {
                        var o = e('./Uint8ArrayReader');
                        function i(a) {
                            o.call(this, a);
                        }
                        e('../utils').inherits(i, o),
                            (i.prototype.readData = function (a) {
                                this.checkOffset(a);
                                var l = this.data.slice(
                                    this.zero + this.index,
                                    this.zero + this.index + a
                                );
                                return (this.index += a), l;
                            }),
                            (s.exports = i);
                    },
                    { '../utils': 32, './Uint8ArrayReader': 21 },
                ],
                20: [
                    function (e, s, r) {
                        var o = e('./DataReader');
                        function i(a) {
                            o.call(this, a);
                        }
                        e('../utils').inherits(i, o),
                            (i.prototype.byteAt = function (a) {
                                return this.data.charCodeAt(this.zero + a);
                            }),
                            (i.prototype.lastIndexOfSignature = function (a) {
                                return this.data.lastIndexOf(a) - this.zero;
                            }),
                            (i.prototype.readAndCheckSignature = function (a) {
                                return a === this.readData(4);
                            }),
                            (i.prototype.readData = function (a) {
                                this.checkOffset(a);
                                var l = this.data.slice(
                                    this.zero + this.index,
                                    this.zero + this.index + a
                                );
                                return (this.index += a), l;
                            }),
                            (s.exports = i);
                    },
                    { '../utils': 32, './DataReader': 18 },
                ],
                21: [
                    function (e, s, r) {
                        var o = e('./ArrayReader');
                        function i(a) {
                            o.call(this, a);
                        }
                        e('../utils').inherits(i, o),
                            (i.prototype.readData = function (a) {
                                if ((this.checkOffset(a), a === 0))
                                    return new Uint8Array(0);
                                var l = this.data.subarray(
                                    this.zero + this.index,
                                    this.zero + this.index + a
                                );
                                return (this.index += a), l;
                            }),
                            (s.exports = i);
                    },
                    { '../utils': 32, './ArrayReader': 17 },
                ],
                22: [
                    function (e, s, r) {
                        var o = e('../utils'),
                            i = e('../support'),
                            a = e('./ArrayReader'),
                            l = e('./StringReader'),
                            c = e('./NodeBufferReader'),
                            u = e('./Uint8ArrayReader');
                        s.exports = function (h) {
                            var d = o.getTypeOf(h);
                            return (
                                o.checkSupport(d),
                                d !== 'string' || i.uint8array
                                    ? d === 'nodebuffer'
                                        ? new c(h)
                                        : i.uint8array
                                        ? new u(o.transformTo('uint8array', h))
                                        : new a(o.transformTo('array', h))
                                    : new l(h)
                            );
                        };
                    },
                    {
                        '../support': 30,
                        '../utils': 32,
                        './ArrayReader': 17,
                        './NodeBufferReader': 19,
                        './StringReader': 20,
                        './Uint8ArrayReader': 21,
                    },
                ],
                23: [
                    function (e, s, r) {
                        (r.LOCAL_FILE_HEADER = 'PK'),
                            (r.CENTRAL_FILE_HEADER = 'PK'),
                            (r.CENTRAL_DIRECTORY_END = 'PK'),
                            (r.ZIP64_CENTRAL_DIRECTORY_LOCATOR = 'PK\x07'),
                            (r.ZIP64_CENTRAL_DIRECTORY_END = 'PK'),
                            (r.DATA_DESCRIPTOR = 'PK\x07\b');
                    },
                    {},
                ],
                24: [
                    function (e, s, r) {
                        var o = e('./GenericWorker'),
                            i = e('../utils');
                        function a(l) {
                            o.call(this, 'ConvertWorker to ' + l),
                                (this.destType = l);
                        }
                        i.inherits(a, o),
                            (a.prototype.processChunk = function (l) {
                                this.push({
                                    data: i.transformTo(this.destType, l.data),
                                    meta: l.meta,
                                });
                            }),
                            (s.exports = a);
                    },
                    { '../utils': 32, './GenericWorker': 28 },
                ],
                25: [
                    function (e, s, r) {
                        var o = e('./GenericWorker'),
                            i = e('../crc32');
                        function a() {
                            o.call(this, 'Crc32Probe'),
                                this.withStreamInfo('crc32', 0);
                        }
                        e('../utils').inherits(a, o),
                            (a.prototype.processChunk = function (l) {
                                (this.streamInfo.crc32 = i(
                                    l.data,
                                    this.streamInfo.crc32 || 0
                                )),
                                    this.push(l);
                            }),
                            (s.exports = a);
                    },
                    { '../crc32': 4, '../utils': 32, './GenericWorker': 28 },
                ],
                26: [
                    function (e, s, r) {
                        var o = e('../utils'),
                            i = e('./GenericWorker');
                        function a(l) {
                            i.call(this, 'DataLengthProbe for ' + l),
                                (this.propName = l),
                                this.withStreamInfo(l, 0);
                        }
                        o.inherits(a, i),
                            (a.prototype.processChunk = function (l) {
                                if (l) {
                                    var c = this.streamInfo[this.propName] || 0;
                                    this.streamInfo[this.propName] =
                                        c + l.data.length;
                                }
                                i.prototype.processChunk.call(this, l);
                            }),
                            (s.exports = a);
                    },
                    { '../utils': 32, './GenericWorker': 28 },
                ],
                27: [
                    function (e, s, r) {
                        var o = e('../utils'),
                            i = e('./GenericWorker');
                        function a(l) {
                            i.call(this, 'DataWorker');
                            var c = this;
                            (this.dataIsReady = !1),
                                (this.index = 0),
                                (this.max = 0),
                                (this.data = null),
                                (this.type = ''),
                                (this._tickScheduled = !1),
                                l.then(
                                    function (u) {
                                        (c.dataIsReady = !0),
                                            (c.data = u),
                                            (c.max = (u && u.length) || 0),
                                            (c.type = o.getTypeOf(u)),
                                            c.isPaused || c._tickAndRepeat();
                                    },
                                    function (u) {
                                        c.error(u);
                                    }
                                );
                        }
                        o.inherits(a, i),
                            (a.prototype.cleanUp = function () {
                                i.prototype.cleanUp.call(this),
                                    (this.data = null);
                            }),
                            (a.prototype.resume = function () {
                                return (
                                    !!i.prototype.resume.call(this) &&
                                    (!this._tickScheduled &&
                                        this.dataIsReady &&
                                        ((this._tickScheduled = !0),
                                        o.delay(this._tickAndRepeat, [], this)),
                                    !0)
                                );
                            }),
                            (a.prototype._tickAndRepeat = function () {
                                (this._tickScheduled = !1),
                                    this.isPaused ||
                                        this.isFinished ||
                                        (this._tick(),
                                        this.isFinished ||
                                            (o.delay(
                                                this._tickAndRepeat,
                                                [],
                                                this
                                            ),
                                            (this._tickScheduled = !0)));
                            }),
                            (a.prototype._tick = function () {
                                if (this.isPaused || this.isFinished) return !1;
                                var l = null,
                                    c = Math.min(this.max, this.index + 16384);
                                if (this.index >= this.max) return this.end();
                                switch (this.type) {
                                    case 'string':
                                        l = this.data.substring(this.index, c);
                                        break;
                                    case 'uint8array':
                                        l = this.data.subarray(this.index, c);
                                        break;
                                    case 'array':
                                    case 'nodebuffer':
                                        l = this.data.slice(this.index, c);
                                }
                                return (
                                    (this.index = c),
                                    this.push({
                                        data: l,
                                        meta: {
                                            percent: this.max
                                                ? (this.index / this.max) * 100
                                                : 0,
                                        },
                                    })
                                );
                            }),
                            (s.exports = a);
                    },
                    { '../utils': 32, './GenericWorker': 28 },
                ],
                28: [
                    function (e, s, r) {
                        function o(i) {
                            (this.name = i || 'default'),
                                (this.streamInfo = {}),
                                (this.generatedError = null),
                                (this.extraStreamInfo = {}),
                                (this.isPaused = !0),
                                (this.isFinished = !1),
                                (this.isLocked = !1),
                                (this._listeners = {
                                    data: [],
                                    end: [],
                                    error: [],
                                }),
                                (this.previous = null);
                        }
                        (o.prototype = {
                            push: function (i) {
                                this.emit('data', i);
                            },
                            end: function () {
                                if (this.isFinished) return !1;
                                this.flush();
                                try {
                                    this.emit('end'),
                                        this.cleanUp(),
                                        (this.isFinished = !0);
                                } catch (i) {
                                    this.emit('error', i);
                                }
                                return !0;
                            },
                            error: function (i) {
                                return (
                                    !this.isFinished &&
                                    (this.isPaused
                                        ? (this.generatedError = i)
                                        : ((this.isFinished = !0),
                                          this.emit('error', i),
                                          this.previous &&
                                              this.previous.error(i),
                                          this.cleanUp()),
                                    !0)
                                );
                            },
                            on: function (i, a) {
                                return this._listeners[i].push(a), this;
                            },
                            cleanUp: function () {
                                (this.streamInfo =
                                    this.generatedError =
                                    this.extraStreamInfo =
                                        null),
                                    (this._listeners = []);
                            },
                            emit: function (i, a) {
                                if (this._listeners[i])
                                    for (
                                        var l = 0;
                                        l < this._listeners[i].length;
                                        l++
                                    )
                                        this._listeners[i][l].call(this, a);
                            },
                            pipe: function (i) {
                                return i.registerPrevious(this);
                            },
                            registerPrevious: function (i) {
                                if (this.isLocked)
                                    throw new Error(
                                        "The stream '" +
                                            this +
                                            "' has already been used."
                                    );
                                (this.streamInfo = i.streamInfo),
                                    this.mergeStreamInfo(),
                                    (this.previous = i);
                                var a = this;
                                return (
                                    i.on('data', function (l) {
                                        a.processChunk(l);
                                    }),
                                    i.on('end', function () {
                                        a.end();
                                    }),
                                    i.on('error', function (l) {
                                        a.error(l);
                                    }),
                                    this
                                );
                            },
                            pause: function () {
                                return (
                                    !this.isPaused &&
                                    !this.isFinished &&
                                    ((this.isPaused = !0),
                                    this.previous && this.previous.pause(),
                                    !0)
                                );
                            },
                            resume: function () {
                                if (!this.isPaused || this.isFinished)
                                    return !1;
                                var i = (this.isPaused = !1);
                                return (
                                    this.generatedError &&
                                        (this.error(this.generatedError),
                                        (i = !0)),
                                    this.previous && this.previous.resume(),
                                    !i
                                );
                            },
                            flush: function () {},
                            processChunk: function (i) {
                                this.push(i);
                            },
                            withStreamInfo: function (i, a) {
                                return (
                                    (this.extraStreamInfo[i] = a),
                                    this.mergeStreamInfo(),
                                    this
                                );
                            },
                            mergeStreamInfo: function () {
                                for (var i in this.extraStreamInfo)
                                    Object.prototype.hasOwnProperty.call(
                                        this.extraStreamInfo,
                                        i
                                    ) &&
                                        (this.streamInfo[i] =
                                            this.extraStreamInfo[i]);
                            },
                            lock: function () {
                                if (this.isLocked)
                                    throw new Error(
                                        "The stream '" +
                                            this +
                                            "' has already been used."
                                    );
                                (this.isLocked = !0),
                                    this.previous && this.previous.lock();
                            },
                            toString: function () {
                                var i = 'Worker ' + this.name;
                                return this.previous
                                    ? this.previous + ' -> ' + i
                                    : i;
                            },
                        }),
                            (s.exports = o);
                    },
                    {},
                ],
                29: [
                    function (e, s, r) {
                        var o = e('../utils'),
                            i = e('./ConvertWorker'),
                            a = e('./GenericWorker'),
                            l = e('../base64'),
                            c = e('../support'),
                            u = e('../external'),
                            h = null;
                        if (c.nodestream)
                            try {
                                h = e('../nodejs/NodejsStreamOutputAdapter');
                            } catch {}
                        function d(f, m) {
                            return new u.Promise(function (g, y) {
                                var b = [],
                                    w = f._internalType,
                                    x = f._outputType,
                                    v = f._mimeType;
                                f.on('data', function (C, $) {
                                    b.push(C), m && m($);
                                })
                                    .on('error', function (C) {
                                        (b = []), y(C);
                                    })
                                    .on('end', function () {
                                        try {
                                            var C = (function ($, T, N) {
                                                switch ($) {
                                                    case 'blob':
                                                        return o.newBlob(
                                                            o.transformTo(
                                                                'arraybuffer',
                                                                T
                                                            ),
                                                            N
                                                        );
                                                    case 'base64':
                                                        return l.encode(T);
                                                    default:
                                                        return o.transformTo(
                                                            $,
                                                            T
                                                        );
                                                }
                                            })(
                                                x,
                                                (function ($, T) {
                                                    var N,
                                                        R = 0,
                                                        P = null,
                                                        E = 0;
                                                    for (
                                                        N = 0;
                                                        N < T.length;
                                                        N++
                                                    )
                                                        E += T[N].length;
                                                    switch ($) {
                                                        case 'string':
                                                            return T.join('');
                                                        case 'array':
                                                            return Array.prototype.concat.apply(
                                                                [],
                                                                T
                                                            );
                                                        case 'uint8array':
                                                            for (
                                                                P =
                                                                    new Uint8Array(
                                                                        E
                                                                    ),
                                                                    N = 0;
                                                                N < T.length;
                                                                N++
                                                            )
                                                                P.set(T[N], R),
                                                                    (R +=
                                                                        T[N]
                                                                            .length);
                                                            return P;
                                                        case 'nodebuffer':
                                                            return Buffer.concat(
                                                                T
                                                            );
                                                        default:
                                                            throw new Error(
                                                                "concat : unsupported type '" +
                                                                    $ +
                                                                    "'"
                                                            );
                                                    }
                                                })(w, b),
                                                v
                                            );
                                            g(C);
                                        } catch ($) {
                                            y($);
                                        }
                                        b = [];
                                    })
                                    .resume();
                            });
                        }
                        function p(f, m, g) {
                            var y = m;
                            switch (m) {
                                case 'blob':
                                case 'arraybuffer':
                                    y = 'uint8array';
                                    break;
                                case 'base64':
                                    y = 'string';
                            }
                            try {
                                (this._internalType = y),
                                    (this._outputType = m),
                                    (this._mimeType = g),
                                    o.checkSupport(y),
                                    (this._worker = f.pipe(new i(y))),
                                    f.lock();
                            } catch (b) {
                                (this._worker = new a('error')),
                                    this._worker.error(b);
                            }
                        }
                        (p.prototype = {
                            accumulate: function (f) {
                                return d(this, f);
                            },
                            on: function (f, m) {
                                var g = this;
                                return (
                                    f === 'data'
                                        ? this._worker.on(f, function (y) {
                                              m.call(g, y.data, y.meta);
                                          })
                                        : this._worker.on(f, function () {
                                              o.delay(m, arguments, g);
                                          }),
                                    this
                                );
                            },
                            resume: function () {
                                return (
                                    o.delay(
                                        this._worker.resume,
                                        [],
                                        this._worker
                                    ),
                                    this
                                );
                            },
                            pause: function () {
                                return this._worker.pause(), this;
                            },
                            toNodejsStream: function (f) {
                                if (
                                    (o.checkSupport('nodestream'),
                                    this._outputType !== 'nodebuffer')
                                )
                                    throw new Error(
                                        this._outputType +
                                            ' is not supported by this method'
                                    );
                                return new h(
                                    this,
                                    {
                                        objectMode:
                                            this._outputType !== 'nodebuffer',
                                    },
                                    f
                                );
                            },
                        }),
                            (s.exports = p);
                    },
                    {
                        '../base64': 1,
                        '../external': 6,
                        '../nodejs/NodejsStreamOutputAdapter': 13,
                        '../support': 30,
                        '../utils': 32,
                        './ConvertWorker': 24,
                        './GenericWorker': 28,
                    },
                ],
                30: [
                    function (e, s, r) {
                        if (
                            ((r.base64 = !0),
                            (r.array = !0),
                            (r.string = !0),
                            (r.arraybuffer =
                                typeof ArrayBuffer < 'u' &&
                                typeof Uint8Array < 'u'),
                            (r.nodebuffer = typeof Buffer < 'u'),
                            (r.uint8array = typeof Uint8Array < 'u'),
                            typeof ArrayBuffer > 'u')
                        )
                            r.blob = !1;
                        else {
                            var o = new ArrayBuffer(0);
                            try {
                                r.blob =
                                    new Blob([o], { type: 'application/zip' })
                                        .size === 0;
                            } catch {
                                try {
                                    var i = new (self.BlobBuilder ||
                                        self.WebKitBlobBuilder ||
                                        self.MozBlobBuilder ||
                                        self.MSBlobBuilder)();
                                    i.append(o),
                                        (r.blob =
                                            i.getBlob('application/zip')
                                                .size === 0);
                                } catch {
                                    r.blob = !1;
                                }
                            }
                        }
                        try {
                            r.nodestream = !!e('readable-stream').Readable;
                        } catch {
                            r.nodestream = !1;
                        }
                    },
                    { 'readable-stream': 16 },
                ],
                31: [
                    function (e, s, r) {
                        for (
                            var o = e('./utils'),
                                i = e('./support'),
                                a = e('./nodejsUtils'),
                                l = e('./stream/GenericWorker'),
                                c = new Array(256),
                                u = 0;
                            u < 256;
                            u++
                        )
                            c[u] =
                                252 <= u
                                    ? 6
                                    : 248 <= u
                                    ? 5
                                    : 240 <= u
                                    ? 4
                                    : 224 <= u
                                    ? 3
                                    : 192 <= u
                                    ? 2
                                    : 1;
                        c[254] = c[254] = 1;
                        function h() {
                            l.call(this, 'utf-8 decode'),
                                (this.leftOver = null);
                        }
                        function d() {
                            l.call(this, 'utf-8 encode');
                        }
                        (r.utf8encode = function (p) {
                            return i.nodebuffer
                                ? a.newBufferFrom(p, 'utf-8')
                                : (function (f) {
                                      var m,
                                          g,
                                          y,
                                          b,
                                          w,
                                          x = f.length,
                                          v = 0;
                                      for (b = 0; b < x; b++)
                                          (64512 & (g = f.charCodeAt(b))) ==
                                              55296 &&
                                              b + 1 < x &&
                                              (64512 &
                                                  (y = f.charCodeAt(b + 1))) ==
                                                  56320 &&
                                              ((g =
                                                  65536 +
                                                  ((g - 55296) << 10) +
                                                  (y - 56320)),
                                              b++),
                                              (v +=
                                                  g < 128
                                                      ? 1
                                                      : g < 2048
                                                      ? 2
                                                      : g < 65536
                                                      ? 3
                                                      : 4);
                                      for (
                                          m = i.uint8array
                                              ? new Uint8Array(v)
                                              : new Array(v),
                                              b = w = 0;
                                          w < v;
                                          b++
                                      )
                                          (64512 & (g = f.charCodeAt(b))) ==
                                              55296 &&
                                              b + 1 < x &&
                                              (64512 &
                                                  (y = f.charCodeAt(b + 1))) ==
                                                  56320 &&
                                              ((g =
                                                  65536 +
                                                  ((g - 55296) << 10) +
                                                  (y - 56320)),
                                              b++),
                                              g < 128
                                                  ? (m[w++] = g)
                                                  : (g < 2048
                                                        ? (m[w++] =
                                                              192 | (g >>> 6))
                                                        : (g < 65536
                                                              ? (m[w++] =
                                                                    224 |
                                                                    (g >>> 12))
                                                              : ((m[w++] =
                                                                    240 |
                                                                    (g >>> 18)),
                                                                (m[w++] =
                                                                    128 |
                                                                    ((g >>>
                                                                        12) &
                                                                        63))),
                                                          (m[w++] =
                                                              128 |
                                                              ((g >>> 6) &
                                                                  63))),
                                                    (m[w++] = 128 | (63 & g)));
                                      return m;
                                  })(p);
                        }),
                            (r.utf8decode = function (p) {
                                return i.nodebuffer
                                    ? o
                                          .transformTo('nodebuffer', p)
                                          .toString('utf-8')
                                    : (function (f) {
                                          var m,
                                              g,
                                              y,
                                              b,
                                              w = f.length,
                                              x = new Array(2 * w);
                                          for (m = g = 0; m < w; )
                                              if ((y = f[m++]) < 128)
                                                  x[g++] = y;
                                              else if (4 < (b = c[y]))
                                                  (x[g++] = 65533),
                                                      (m += b - 1);
                                              else {
                                                  for (
                                                      y &=
                                                          b === 2
                                                              ? 31
                                                              : b === 3
                                                              ? 15
                                                              : 7;
                                                      1 < b && m < w;

                                                  )
                                                      (y =
                                                          (y << 6) |
                                                          (63 & f[m++])),
                                                          b--;
                                                  1 < b
                                                      ? (x[g++] = 65533)
                                                      : y < 65536
                                                      ? (x[g++] = y)
                                                      : ((y -= 65536),
                                                        (x[g++] =
                                                            55296 |
                                                            ((y >> 10) & 1023)),
                                                        (x[g++] =
                                                            56320 |
                                                            (1023 & y)));
                                              }
                                          return (
                                              x.length !== g &&
                                                  (x.subarray
                                                      ? (x = x.subarray(0, g))
                                                      : (x.length = g)),
                                              o.applyFromCharCode(x)
                                          );
                                      })(
                                          (p = o.transformTo(
                                              i.uint8array
                                                  ? 'uint8array'
                                                  : 'array',
                                              p
                                          ))
                                      );
                            }),
                            o.inherits(h, l),
                            (h.prototype.processChunk = function (p) {
                                var f = o.transformTo(
                                    i.uint8array ? 'uint8array' : 'array',
                                    p.data
                                );
                                if (this.leftOver && this.leftOver.length) {
                                    if (i.uint8array) {
                                        var m = f;
                                        (f = new Uint8Array(
                                            m.length + this.leftOver.length
                                        )).set(this.leftOver, 0),
                                            f.set(m, this.leftOver.length);
                                    } else f = this.leftOver.concat(f);
                                    this.leftOver = null;
                                }
                                var g = (function (b, w) {
                                        var x;
                                        for (
                                            (w = w || b.length) > b.length &&
                                                (w = b.length),
                                                x = w - 1;
                                            0 <= x && (192 & b[x]) == 128;

                                        )
                                            x--;
                                        return x < 0 || x === 0
                                            ? w
                                            : x + c[b[x]] > w
                                            ? x
                                            : w;
                                    })(f),
                                    y = f;
                                g !== f.length &&
                                    (i.uint8array
                                        ? ((y = f.subarray(0, g)),
                                          (this.leftOver = f.subarray(
                                              g,
                                              f.length
                                          )))
                                        : ((y = f.slice(0, g)),
                                          (this.leftOver = f.slice(
                                              g,
                                              f.length
                                          )))),
                                    this.push({
                                        data: r.utf8decode(y),
                                        meta: p.meta,
                                    });
                            }),
                            (h.prototype.flush = function () {
                                this.leftOver &&
                                    this.leftOver.length &&
                                    (this.push({
                                        data: r.utf8decode(this.leftOver),
                                        meta: {},
                                    }),
                                    (this.leftOver = null));
                            }),
                            (r.Utf8DecodeWorker = h),
                            o.inherits(d, l),
                            (d.prototype.processChunk = function (p) {
                                this.push({
                                    data: r.utf8encode(p.data),
                                    meta: p.meta,
                                });
                            }),
                            (r.Utf8EncodeWorker = d);
                    },
                    {
                        './nodejsUtils': 14,
                        './stream/GenericWorker': 28,
                        './support': 30,
                        './utils': 32,
                    },
                ],
                32: [
                    function (e, s, r) {
                        var o = e('./support'),
                            i = e('./base64'),
                            a = e('./nodejsUtils'),
                            l = e('./external');
                        function c(m) {
                            return m;
                        }
                        function u(m, g) {
                            for (var y = 0; y < m.length; ++y)
                                g[y] = 255 & m.charCodeAt(y);
                            return g;
                        }
                        e('setimmediate'),
                            (r.newBlob = function (m, g) {
                                r.checkSupport('blob');
                                try {
                                    return new Blob([m], { type: g });
                                } catch {
                                    try {
                                        var y = new (self.BlobBuilder ||
                                            self.WebKitBlobBuilder ||
                                            self.MozBlobBuilder ||
                                            self.MSBlobBuilder)();
                                        return y.append(m), y.getBlob(g);
                                    } catch {
                                        throw new Error(
                                            "Bug : can't construct the Blob."
                                        );
                                    }
                                }
                            });
                        var h = {
                            stringifyByChunk: function (m, g, y) {
                                var b = [],
                                    w = 0,
                                    x = m.length;
                                if (x <= y)
                                    return String.fromCharCode.apply(null, m);
                                for (; w < x; )
                                    g === 'array' || g === 'nodebuffer'
                                        ? b.push(
                                              String.fromCharCode.apply(
                                                  null,
                                                  m.slice(w, Math.min(w + y, x))
                                              )
                                          )
                                        : b.push(
                                              String.fromCharCode.apply(
                                                  null,
                                                  m.subarray(
                                                      w,
                                                      Math.min(w + y, x)
                                                  )
                                              )
                                          ),
                                        (w += y);
                                return b.join('');
                            },
                            stringifyByChar: function (m) {
                                for (var g = '', y = 0; y < m.length; y++)
                                    g += String.fromCharCode(m[y]);
                                return g;
                            },
                            applyCanBeUsed: {
                                uint8array: (function () {
                                    try {
                                        return (
                                            o.uint8array &&
                                            String.fromCharCode.apply(
                                                null,
                                                new Uint8Array(1)
                                            ).length === 1
                                        );
                                    } catch {
                                        return !1;
                                    }
                                })(),
                                nodebuffer: (function () {
                                    try {
                                        return (
                                            o.nodebuffer &&
                                            String.fromCharCode.apply(
                                                null,
                                                a.allocBuffer(1)
                                            ).length === 1
                                        );
                                    } catch {
                                        return !1;
                                    }
                                })(),
                            },
                        };
                        function d(m) {
                            var g = 65536,
                                y = r.getTypeOf(m),
                                b = !0;
                            if (
                                (y === 'uint8array'
                                    ? (b = h.applyCanBeUsed.uint8array)
                                    : y === 'nodebuffer' &&
                                      (b = h.applyCanBeUsed.nodebuffer),
                                b)
                            )
                                for (; 1 < g; )
                                    try {
                                        return h.stringifyByChunk(m, y, g);
                                    } catch {
                                        g = Math.floor(g / 2);
                                    }
                            return h.stringifyByChar(m);
                        }
                        function p(m, g) {
                            for (var y = 0; y < m.length; y++) g[y] = m[y];
                            return g;
                        }
                        r.applyFromCharCode = d;
                        var f = {};
                        (f.string = {
                            string: c,
                            array: function (m) {
                                return u(m, new Array(m.length));
                            },
                            arraybuffer: function (m) {
                                return f.string.uint8array(m).buffer;
                            },
                            uint8array: function (m) {
                                return u(m, new Uint8Array(m.length));
                            },
                            nodebuffer: function (m) {
                                return u(m, a.allocBuffer(m.length));
                            },
                        }),
                            (f.array = {
                                string: d,
                                array: c,
                                arraybuffer: function (m) {
                                    return new Uint8Array(m).buffer;
                                },
                                uint8array: function (m) {
                                    return new Uint8Array(m);
                                },
                                nodebuffer: function (m) {
                                    return a.newBufferFrom(m);
                                },
                            }),
                            (f.arraybuffer = {
                                string: function (m) {
                                    return d(new Uint8Array(m));
                                },
                                array: function (m) {
                                    return p(
                                        new Uint8Array(m),
                                        new Array(m.byteLength)
                                    );
                                },
                                arraybuffer: c,
                                uint8array: function (m) {
                                    return new Uint8Array(m);
                                },
                                nodebuffer: function (m) {
                                    return a.newBufferFrom(new Uint8Array(m));
                                },
                            }),
                            (f.uint8array = {
                                string: d,
                                array: function (m) {
                                    return p(m, new Array(m.length));
                                },
                                arraybuffer: function (m) {
                                    return m.buffer;
                                },
                                uint8array: c,
                                nodebuffer: function (m) {
                                    return a.newBufferFrom(m);
                                },
                            }),
                            (f.nodebuffer = {
                                string: d,
                                array: function (m) {
                                    return p(m, new Array(m.length));
                                },
                                arraybuffer: function (m) {
                                    return f.nodebuffer.uint8array(m).buffer;
                                },
                                uint8array: function (m) {
                                    return p(m, new Uint8Array(m.length));
                                },
                                nodebuffer: c,
                            }),
                            (r.transformTo = function (m, g) {
                                if (((g = g || ''), !m)) return g;
                                r.checkSupport(m);
                                var y = r.getTypeOf(g);
                                return f[y][m](g);
                            }),
                            (r.resolve = function (m) {
                                for (
                                    var g = m.split('/'), y = [], b = 0;
                                    b < g.length;
                                    b++
                                ) {
                                    var w = g[b];
                                    w === '.' ||
                                        (w === '' &&
                                            b !== 0 &&
                                            b !== g.length - 1) ||
                                        (w === '..' ? y.pop() : y.push(w));
                                }
                                return y.join('/');
                            }),
                            (r.getTypeOf = function (m) {
                                return typeof m == 'string'
                                    ? 'string'
                                    : Object.prototype.toString.call(m) ===
                                      '[object Array]'
                                    ? 'array'
                                    : o.nodebuffer && a.isBuffer(m)
                                    ? 'nodebuffer'
                                    : o.uint8array && m instanceof Uint8Array
                                    ? 'uint8array'
                                    : o.arraybuffer && m instanceof ArrayBuffer
                                    ? 'arraybuffer'
                                    : void 0;
                            }),
                            (r.checkSupport = function (m) {
                                if (!o[m.toLowerCase()])
                                    throw new Error(
                                        m + ' is not supported by this platform'
                                    );
                            }),
                            (r.MAX_VALUE_16BITS = 65535),
                            (r.MAX_VALUE_32BITS = -1),
                            (r.pretty = function (m) {
                                var g,
                                    y,
                                    b = '';
                                for (y = 0; y < (m || '').length; y++)
                                    b +=
                                        '\\x' +
                                        ((g = m.charCodeAt(y)) < 16
                                            ? '0'
                                            : '') +
                                        g.toString(16).toUpperCase();
                                return b;
                            }),
                            (r.delay = function (m, g, y) {
                                setImmediate(function () {
                                    m.apply(y || null, g || []);
                                });
                            }),
                            (r.inherits = function (m, g) {
                                function y() {}
                                (y.prototype = g.prototype),
                                    (m.prototype = new y());
                            }),
                            (r.extend = function () {
                                var m,
                                    g,
                                    y = {};
                                for (m = 0; m < arguments.length; m++)
                                    for (g in arguments[m])
                                        Object.prototype.hasOwnProperty.call(
                                            arguments[m],
                                            g
                                        ) &&
                                            y[g] === void 0 &&
                                            (y[g] = arguments[m][g]);
                                return y;
                            }),
                            (r.prepareContent = function (m, g, y, b, w) {
                                return l.Promise.resolve(g)
                                    .then(function (x) {
                                        return o.blob &&
                                            (x instanceof Blob ||
                                                [
                                                    '[object File]',
                                                    '[object Blob]',
                                                ].indexOf(
                                                    Object.prototype.toString.call(
                                                        x
                                                    )
                                                ) !== -1) &&
                                            typeof FileReader < 'u'
                                            ? new l.Promise(function (v, C) {
                                                  var $ = new FileReader();
                                                  ($.onload = function (T) {
                                                      v(T.target.result);
                                                  }),
                                                      ($.onerror = function (
                                                          T
                                                      ) {
                                                          C(T.target.error);
                                                      }),
                                                      $.readAsArrayBuffer(x);
                                              })
                                            : x;
                                    })
                                    .then(function (x) {
                                        var v = r.getTypeOf(x);
                                        return v
                                            ? (v === 'arraybuffer'
                                                  ? (x = r.transformTo(
                                                        'uint8array',
                                                        x
                                                    ))
                                                  : v === 'string' &&
                                                    (w
                                                        ? (x = i.decode(x))
                                                        : y &&
                                                          b !== !0 &&
                                                          (x = (function (C) {
                                                              return u(
                                                                  C,
                                                                  o.uint8array
                                                                      ? new Uint8Array(
                                                                            C.length
                                                                        )
                                                                      : new Array(
                                                                            C.length
                                                                        )
                                                              );
                                                          })(x))),
                                              x)
                                            : l.Promise.reject(
                                                  new Error(
                                                      "Can't read the data of '" +
                                                          m +
                                                          "'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"
                                                  )
                                              );
                                    });
                            });
                    },
                    {
                        './base64': 1,
                        './external': 6,
                        './nodejsUtils': 14,
                        './support': 30,
                        setimmediate: 54,
                    },
                ],
                33: [
                    function (e, s, r) {
                        var o = e('./reader/readerFor'),
                            i = e('./utils'),
                            a = e('./signature'),
                            l = e('./zipEntry'),
                            c = e('./support');
                        function u(h) {
                            (this.files = []), (this.loadOptions = h);
                        }
                        (u.prototype = {
                            checkSignature: function (h) {
                                if (!this.reader.readAndCheckSignature(h)) {
                                    this.reader.index -= 4;
                                    var d = this.reader.readString(4);
                                    throw new Error(
                                        'Corrupted zip or bug: unexpected signature (' +
                                            i.pretty(d) +
                                            ', expected ' +
                                            i.pretty(h) +
                                            ')'
                                    );
                                }
                            },
                            isSignature: function (h, d) {
                                var p = this.reader.index;
                                this.reader.setIndex(h);
                                var f = this.reader.readString(4) === d;
                                return this.reader.setIndex(p), f;
                            },
                            readBlockEndOfCentral: function () {
                                (this.diskNumber = this.reader.readInt(2)),
                                    (this.diskWithCentralDirStart =
                                        this.reader.readInt(2)),
                                    (this.centralDirRecordsOnThisDisk =
                                        this.reader.readInt(2)),
                                    (this.centralDirRecords =
                                        this.reader.readInt(2)),
                                    (this.centralDirSize =
                                        this.reader.readInt(4)),
                                    (this.centralDirOffset =
                                        this.reader.readInt(4)),
                                    (this.zipCommentLength =
                                        this.reader.readInt(2));
                                var h = this.reader.readData(
                                        this.zipCommentLength
                                    ),
                                    d = c.uint8array ? 'uint8array' : 'array',
                                    p = i.transformTo(d, h);
                                this.zipComment =
                                    this.loadOptions.decodeFileName(p);
                            },
                            readBlockZip64EndOfCentral: function () {
                                (this.zip64EndOfCentralSize =
                                    this.reader.readInt(8)),
                                    this.reader.skip(4),
                                    (this.diskNumber = this.reader.readInt(4)),
                                    (this.diskWithCentralDirStart =
                                        this.reader.readInt(4)),
                                    (this.centralDirRecordsOnThisDisk =
                                        this.reader.readInt(8)),
                                    (this.centralDirRecords =
                                        this.reader.readInt(8)),
                                    (this.centralDirSize =
                                        this.reader.readInt(8)),
                                    (this.centralDirOffset =
                                        this.reader.readInt(8)),
                                    (this.zip64ExtensibleData = {});
                                for (
                                    var h,
                                        d,
                                        p,
                                        f = this.zip64EndOfCentralSize - 44;
                                    0 < f;

                                )
                                    (h = this.reader.readInt(2)),
                                        (d = this.reader.readInt(4)),
                                        (p = this.reader.readData(d)),
                                        (this.zip64ExtensibleData[h] = {
                                            id: h,
                                            length: d,
                                            value: p,
                                        });
                            },
                            readBlockZip64EndOfCentralLocator: function () {
                                if (
                                    ((this.diskWithZip64CentralDirStart =
                                        this.reader.readInt(4)),
                                    (this.relativeOffsetEndOfZip64CentralDir =
                                        this.reader.readInt(8)),
                                    (this.disksCount = this.reader.readInt(4)),
                                    1 < this.disksCount)
                                )
                                    throw new Error(
                                        'Multi-volumes zip are not supported'
                                    );
                            },
                            readLocalFiles: function () {
                                var h, d;
                                for (h = 0; h < this.files.length; h++)
                                    (d = this.files[h]),
                                        this.reader.setIndex(
                                            d.localHeaderOffset
                                        ),
                                        this.checkSignature(
                                            a.LOCAL_FILE_HEADER
                                        ),
                                        d.readLocalPart(this.reader),
                                        d.handleUTF8(),
                                        d.processAttributes();
                            },
                            readCentralDir: function () {
                                var h;
                                for (
                                    this.reader.setIndex(this.centralDirOffset);
                                    this.reader.readAndCheckSignature(
                                        a.CENTRAL_FILE_HEADER
                                    );

                                )
                                    (h = new l(
                                        { zip64: this.zip64 },
                                        this.loadOptions
                                    )).readCentralPart(this.reader),
                                        this.files.push(h);
                                if (
                                    this.centralDirRecords !==
                                        this.files.length &&
                                    this.centralDirRecords !== 0 &&
                                    this.files.length === 0
                                )
                                    throw new Error(
                                        'Corrupted zip or bug: expected ' +
                                            this.centralDirRecords +
                                            ' records in central dir, got ' +
                                            this.files.length
                                    );
                            },
                            readEndOfCentral: function () {
                                var h = this.reader.lastIndexOfSignature(
                                    a.CENTRAL_DIRECTORY_END
                                );
                                if (h < 0)
                                    throw this.isSignature(
                                        0,
                                        a.LOCAL_FILE_HEADER
                                    )
                                        ? new Error(
                                              "Corrupted zip: can't find end of central directory"
                                          )
                                        : new Error(
                                              "Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html"
                                          );
                                this.reader.setIndex(h);
                                var d = h;
                                if (
                                    (this.checkSignature(
                                        a.CENTRAL_DIRECTORY_END
                                    ),
                                    this.readBlockEndOfCentral(),
                                    this.diskNumber === i.MAX_VALUE_16BITS ||
                                        this.diskWithCentralDirStart ===
                                            i.MAX_VALUE_16BITS ||
                                        this.centralDirRecordsOnThisDisk ===
                                            i.MAX_VALUE_16BITS ||
                                        this.centralDirRecords ===
                                            i.MAX_VALUE_16BITS ||
                                        this.centralDirSize ===
                                            i.MAX_VALUE_32BITS ||
                                        this.centralDirOffset ===
                                            i.MAX_VALUE_32BITS)
                                ) {
                                    if (
                                        ((this.zip64 = !0),
                                        (h = this.reader.lastIndexOfSignature(
                                            a.ZIP64_CENTRAL_DIRECTORY_LOCATOR
                                        )) < 0)
                                    )
                                        throw new Error(
                                            "Corrupted zip: can't find the ZIP64 end of central directory locator"
                                        );
                                    if (
                                        (this.reader.setIndex(h),
                                        this.checkSignature(
                                            a.ZIP64_CENTRAL_DIRECTORY_LOCATOR
                                        ),
                                        this.readBlockZip64EndOfCentralLocator(),
                                        !this.isSignature(
                                            this
                                                .relativeOffsetEndOfZip64CentralDir,
                                            a.ZIP64_CENTRAL_DIRECTORY_END
                                        ) &&
                                            ((this.relativeOffsetEndOfZip64CentralDir =
                                                this.reader.lastIndexOfSignature(
                                                    a.ZIP64_CENTRAL_DIRECTORY_END
                                                )),
                                            this
                                                .relativeOffsetEndOfZip64CentralDir <
                                                0))
                                    )
                                        throw new Error(
                                            "Corrupted zip: can't find the ZIP64 end of central directory"
                                        );
                                    this.reader.setIndex(
                                        this.relativeOffsetEndOfZip64CentralDir
                                    ),
                                        this.checkSignature(
                                            a.ZIP64_CENTRAL_DIRECTORY_END
                                        ),
                                        this.readBlockZip64EndOfCentral();
                                }
                                var p =
                                    this.centralDirOffset + this.centralDirSize;
                                this.zip64 &&
                                    ((p += 20),
                                    (p += 12 + this.zip64EndOfCentralSize));
                                var f = d - p;
                                if (0 < f)
                                    this.isSignature(
                                        d,
                                        a.CENTRAL_FILE_HEADER
                                    ) || (this.reader.zero = f);
                                else if (f < 0)
                                    throw new Error(
                                        'Corrupted zip: missing ' +
                                            Math.abs(f) +
                                            ' bytes.'
                                    );
                            },
                            prepareReader: function (h) {
                                this.reader = o(h);
                            },
                            load: function (h) {
                                this.prepareReader(h),
                                    this.readEndOfCentral(),
                                    this.readCentralDir(),
                                    this.readLocalFiles();
                            },
                        }),
                            (s.exports = u);
                    },
                    {
                        './reader/readerFor': 22,
                        './signature': 23,
                        './support': 30,
                        './utils': 32,
                        './zipEntry': 34,
                    },
                ],
                34: [
                    function (e, s, r) {
                        var o = e('./reader/readerFor'),
                            i = e('./utils'),
                            a = e('./compressedObject'),
                            l = e('./crc32'),
                            c = e('./utf8'),
                            u = e('./compressions'),
                            h = e('./support');
                        function d(p, f) {
                            (this.options = p), (this.loadOptions = f);
                        }
                        (d.prototype = {
                            isEncrypted: function () {
                                return (1 & this.bitFlag) == 1;
                            },
                            useUTF8: function () {
                                return (2048 & this.bitFlag) == 2048;
                            },
                            readLocalPart: function (p) {
                                var f, m;
                                if (
                                    (p.skip(22),
                                    (this.fileNameLength = p.readInt(2)),
                                    (m = p.readInt(2)),
                                    (this.fileName = p.readData(
                                        this.fileNameLength
                                    )),
                                    p.skip(m),
                                    this.compressedSize === -1 ||
                                        this.uncompressedSize === -1)
                                )
                                    throw new Error(
                                        "Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)"
                                    );
                                if (
                                    (f = (function (g) {
                                        for (var y in u)
                                            if (
                                                Object.prototype.hasOwnProperty.call(
                                                    u,
                                                    y
                                                ) &&
                                                u[y].magic === g
                                            )
                                                return u[y];
                                        return null;
                                    })(this.compressionMethod)) === null
                                )
                                    throw new Error(
                                        'Corrupted zip : compression ' +
                                            i.pretty(this.compressionMethod) +
                                            ' unknown (inner file : ' +
                                            i.transformTo(
                                                'string',
                                                this.fileName
                                            ) +
                                            ')'
                                    );
                                this.decompressed = new a(
                                    this.compressedSize,
                                    this.uncompressedSize,
                                    this.crc32,
                                    f,
                                    p.readData(this.compressedSize)
                                );
                            },
                            readCentralPart: function (p) {
                                (this.versionMadeBy = p.readInt(2)),
                                    p.skip(2),
                                    (this.bitFlag = p.readInt(2)),
                                    (this.compressionMethod = p.readString(2)),
                                    (this.date = p.readDate()),
                                    (this.crc32 = p.readInt(4)),
                                    (this.compressedSize = p.readInt(4)),
                                    (this.uncompressedSize = p.readInt(4));
                                var f = p.readInt(2);
                                if (
                                    ((this.extraFieldsLength = p.readInt(2)),
                                    (this.fileCommentLength = p.readInt(2)),
                                    (this.diskNumberStart = p.readInt(2)),
                                    (this.internalFileAttributes =
                                        p.readInt(2)),
                                    (this.externalFileAttributes =
                                        p.readInt(4)),
                                    (this.localHeaderOffset = p.readInt(4)),
                                    this.isEncrypted())
                                )
                                    throw new Error(
                                        'Encrypted zip are not supported'
                                    );
                                p.skip(f),
                                    this.readExtraFields(p),
                                    this.parseZIP64ExtraField(p),
                                    (this.fileComment = p.readData(
                                        this.fileCommentLength
                                    ));
                            },
                            processAttributes: function () {
                                (this.unixPermissions = null),
                                    (this.dosPermissions = null);
                                var p = this.versionMadeBy >> 8;
                                (this.dir = !!(
                                    16 & this.externalFileAttributes
                                )),
                                    p == 0 &&
                                        (this.dosPermissions =
                                            63 & this.externalFileAttributes),
                                    p == 3 &&
                                        (this.unixPermissions =
                                            (this.externalFileAttributes >>
                                                16) &
                                            65535),
                                    this.dir ||
                                        this.fileNameStr.slice(-1) !== '/' ||
                                        (this.dir = !0);
                            },
                            parseZIP64ExtraField: function () {
                                if (this.extraFields[1]) {
                                    var p = o(this.extraFields[1].value);
                                    this.uncompressedSize ===
                                        i.MAX_VALUE_32BITS &&
                                        (this.uncompressedSize = p.readInt(8)),
                                        this.compressedSize ===
                                            i.MAX_VALUE_32BITS &&
                                            (this.compressedSize =
                                                p.readInt(8)),
                                        this.localHeaderOffset ===
                                            i.MAX_VALUE_32BITS &&
                                            (this.localHeaderOffset =
                                                p.readInt(8)),
                                        this.diskNumberStart ===
                                            i.MAX_VALUE_32BITS &&
                                            (this.diskNumberStart =
                                                p.readInt(4));
                                }
                            },
                            readExtraFields: function (p) {
                                var f,
                                    m,
                                    g,
                                    y = p.index + this.extraFieldsLength;
                                for (
                                    this.extraFields || (this.extraFields = {});
                                    p.index + 4 < y;

                                )
                                    (f = p.readInt(2)),
                                        (m = p.readInt(2)),
                                        (g = p.readData(m)),
                                        (this.extraFields[f] = {
                                            id: f,
                                            length: m,
                                            value: g,
                                        });
                                p.setIndex(y);
                            },
                            handleUTF8: function () {
                                var p = h.uint8array ? 'uint8array' : 'array';
                                if (this.useUTF8())
                                    (this.fileNameStr = c.utf8decode(
                                        this.fileName
                                    )),
                                        (this.fileCommentStr = c.utf8decode(
                                            this.fileComment
                                        ));
                                else {
                                    var f = this.findExtraFieldUnicodePath();
                                    if (f !== null) this.fileNameStr = f;
                                    else {
                                        var m = i.transformTo(p, this.fileName);
                                        this.fileNameStr =
                                            this.loadOptions.decodeFileName(m);
                                    }
                                    var g = this.findExtraFieldUnicodeComment();
                                    if (g !== null) this.fileCommentStr = g;
                                    else {
                                        var y = i.transformTo(
                                            p,
                                            this.fileComment
                                        );
                                        this.fileCommentStr =
                                            this.loadOptions.decodeFileName(y);
                                    }
                                }
                            },
                            findExtraFieldUnicodePath: function () {
                                var p = this.extraFields[28789];
                                if (p) {
                                    var f = o(p.value);
                                    return f.readInt(1) !== 1 ||
                                        l(this.fileName) !== f.readInt(4)
                                        ? null
                                        : c.utf8decode(
                                              f.readData(p.length - 5)
                                          );
                                }
                                return null;
                            },
                            findExtraFieldUnicodeComment: function () {
                                var p = this.extraFields[25461];
                                if (p) {
                                    var f = o(p.value);
                                    return f.readInt(1) !== 1 ||
                                        l(this.fileComment) !== f.readInt(4)
                                        ? null
                                        : c.utf8decode(
                                              f.readData(p.length - 5)
                                          );
                                }
                                return null;
                            },
                        }),
                            (s.exports = d);
                    },
                    {
                        './compressedObject': 2,
                        './compressions': 3,
                        './crc32': 4,
                        './reader/readerFor': 22,
                        './support': 30,
                        './utf8': 31,
                        './utils': 32,
                    },
                ],
                35: [
                    function (e, s, r) {
                        function o(f, m, g) {
                            (this.name = f),
                                (this.dir = g.dir),
                                (this.date = g.date),
                                (this.comment = g.comment),
                                (this.unixPermissions = g.unixPermissions),
                                (this.dosPermissions = g.dosPermissions),
                                (this._data = m),
                                (this._dataBinary = g.binary),
                                (this.options = {
                                    compression: g.compression,
                                    compressionOptions: g.compressionOptions,
                                });
                        }
                        var i = e('./stream/StreamHelper'),
                            a = e('./stream/DataWorker'),
                            l = e('./utf8'),
                            c = e('./compressedObject'),
                            u = e('./stream/GenericWorker');
                        o.prototype = {
                            internalStream: function (f) {
                                var m = null,
                                    g = 'string';
                                try {
                                    if (!f)
                                        throw new Error(
                                            'No output type specified.'
                                        );
                                    var y =
                                        (g = f.toLowerCase()) === 'string' ||
                                        g === 'text';
                                    (g !== 'binarystring' && g !== 'text') ||
                                        (g = 'string'),
                                        (m = this._decompressWorker());
                                    var b = !this._dataBinary;
                                    b &&
                                        !y &&
                                        (m = m.pipe(new l.Utf8EncodeWorker())),
                                        !b &&
                                            y &&
                                            (m = m.pipe(
                                                new l.Utf8DecodeWorker()
                                            ));
                                } catch (w) {
                                    (m = new u('error')).error(w);
                                }
                                return new i(m, g, '');
                            },
                            async: function (f, m) {
                                return this.internalStream(f).accumulate(m);
                            },
                            nodeStream: function (f, m) {
                                return this.internalStream(
                                    f || 'nodebuffer'
                                ).toNodejsStream(m);
                            },
                            _compressWorker: function (f, m) {
                                if (
                                    this._data instanceof c &&
                                    this._data.compression.magic === f.magic
                                )
                                    return this._data.getCompressedWorker();
                                var g = this._decompressWorker();
                                return (
                                    this._dataBinary ||
                                        (g = g.pipe(new l.Utf8EncodeWorker())),
                                    c.createWorkerFrom(g, f, m)
                                );
                            },
                            _decompressWorker: function () {
                                return this._data instanceof c
                                    ? this._data.getContentWorker()
                                    : this._data instanceof u
                                    ? this._data
                                    : new a(this._data);
                            },
                        };
                        for (
                            var h = [
                                    'asText',
                                    'asBinary',
                                    'asNodeBuffer',
                                    'asUint8Array',
                                    'asArrayBuffer',
                                ],
                                d = function () {
                                    throw new Error(
                                        'This method has been removed in JSZip 3.0, please check the upgrade guide.'
                                    );
                                },
                                p = 0;
                            p < h.length;
                            p++
                        )
                            o.prototype[h[p]] = d;
                        s.exports = o;
                    },
                    {
                        './compressedObject': 2,
                        './stream/DataWorker': 27,
                        './stream/GenericWorker': 28,
                        './stream/StreamHelper': 29,
                        './utf8': 31,
                    },
                ],
                36: [
                    function (e, s, r) {
                        (function (o) {
                            var i,
                                a,
                                l =
                                    o.MutationObserver ||
                                    o.WebKitMutationObserver;
                            if (l) {
                                var c = 0,
                                    u = new l(f),
                                    h = o.document.createTextNode('');
                                u.observe(h, { characterData: !0 }),
                                    (i = function () {
                                        h.data = c = ++c % 2;
                                    });
                            } else if (
                                o.setImmediate ||
                                o.MessageChannel === void 0
                            )
                                i =
                                    'document' in o &&
                                    'onreadystatechange' in
                                        o.document.createElement('script')
                                        ? function () {
                                              var m =
                                                  o.document.createElement(
                                                      'script'
                                                  );
                                              (m.onreadystatechange =
                                                  function () {
                                                      f(),
                                                          (m.onreadystatechange =
                                                              null),
                                                          m.parentNode.removeChild(
                                                              m
                                                          ),
                                                          (m = null);
                                                  }),
                                                  o.document.documentElement.appendChild(
                                                      m
                                                  );
                                          }
                                        : function () {
                                              setTimeout(f, 0);
                                          };
                            else {
                                var d = new o.MessageChannel();
                                (d.port1.onmessage = f),
                                    (i = function () {
                                        d.port2.postMessage(0);
                                    });
                            }
                            var p = [];
                            function f() {
                                var m, g;
                                a = !0;
                                for (var y = p.length; y; ) {
                                    for (g = p, p = [], m = -1; ++m < y; )
                                        g[m]();
                                    y = p.length;
                                }
                                a = !1;
                            }
                            s.exports = function (m) {
                                p.push(m) !== 1 || a || i();
                            };
                        }).call(
                            this,
                            typeof tn < 'u'
                                ? tn
                                : typeof self < 'u'
                                ? self
                                : typeof window < 'u'
                                ? window
                                : {}
                        );
                    },
                    {},
                ],
                37: [
                    function (e, s, r) {
                        var o = e('immediate');
                        function i() {}
                        var a = {},
                            l = ['REJECTED'],
                            c = ['FULFILLED'],
                            u = ['PENDING'];
                        function h(y) {
                            if (typeof y != 'function')
                                throw new TypeError(
                                    'resolver must be a function'
                                );
                            (this.state = u),
                                (this.queue = []),
                                (this.outcome = void 0),
                                y !== i && m(this, y);
                        }
                        function d(y, b, w) {
                            (this.promise = y),
                                typeof b == 'function' &&
                                    ((this.onFulfilled = b),
                                    (this.callFulfilled =
                                        this.otherCallFulfilled)),
                                typeof w == 'function' &&
                                    ((this.onRejected = w),
                                    (this.callRejected =
                                        this.otherCallRejected));
                        }
                        function p(y, b, w) {
                            o(function () {
                                var x;
                                try {
                                    x = b(w);
                                } catch (v) {
                                    return a.reject(y, v);
                                }
                                x === y
                                    ? a.reject(
                                          y,
                                          new TypeError(
                                              'Cannot resolve promise with itself'
                                          )
                                      )
                                    : a.resolve(y, x);
                            });
                        }
                        function f(y) {
                            var b = y && y.then;
                            if (
                                y &&
                                (typeof y == 'object' ||
                                    typeof y == 'function') &&
                                typeof b == 'function'
                            )
                                return function () {
                                    b.apply(y, arguments);
                                };
                        }
                        function m(y, b) {
                            var w = !1;
                            function x($) {
                                w || ((w = !0), a.reject(y, $));
                            }
                            function v($) {
                                w || ((w = !0), a.resolve(y, $));
                            }
                            var C = g(function () {
                                b(v, x);
                            });
                            C.status === 'error' && x(C.value);
                        }
                        function g(y, b) {
                            var w = {};
                            try {
                                (w.value = y(b)), (w.status = 'success');
                            } catch (x) {
                                (w.status = 'error'), (w.value = x);
                            }
                            return w;
                        }
                        ((s.exports = h).prototype.finally = function (y) {
                            if (typeof y != 'function') return this;
                            var b = this.constructor;
                            return this.then(
                                function (w) {
                                    return b.resolve(y()).then(function () {
                                        return w;
                                    });
                                },
                                function (w) {
                                    return b.resolve(y()).then(function () {
                                        throw w;
                                    });
                                }
                            );
                        }),
                            (h.prototype.catch = function (y) {
                                return this.then(null, y);
                            }),
                            (h.prototype.then = function (y, b) {
                                if (
                                    (typeof y != 'function' &&
                                        this.state === c) ||
                                    (typeof b != 'function' && this.state === l)
                                )
                                    return this;
                                var w = new this.constructor(i);
                                return (
                                    this.state !== u
                                        ? p(
                                              w,
                                              this.state === c ? y : b,
                                              this.outcome
                                          )
                                        : this.queue.push(new d(w, y, b)),
                                    w
                                );
                            }),
                            (d.prototype.callFulfilled = function (y) {
                                a.resolve(this.promise, y);
                            }),
                            (d.prototype.otherCallFulfilled = function (y) {
                                p(this.promise, this.onFulfilled, y);
                            }),
                            (d.prototype.callRejected = function (y) {
                                a.reject(this.promise, y);
                            }),
                            (d.prototype.otherCallRejected = function (y) {
                                p(this.promise, this.onRejected, y);
                            }),
                            (a.resolve = function (y, b) {
                                var w = g(f, b);
                                if (w.status === 'error')
                                    return a.reject(y, w.value);
                                var x = w.value;
                                if (x) m(y, x);
                                else {
                                    (y.state = c), (y.outcome = b);
                                    for (
                                        var v = -1, C = y.queue.length;
                                        ++v < C;

                                    )
                                        y.queue[v].callFulfilled(b);
                                }
                                return y;
                            }),
                            (a.reject = function (y, b) {
                                (y.state = l), (y.outcome = b);
                                for (var w = -1, x = y.queue.length; ++w < x; )
                                    y.queue[w].callRejected(b);
                                return y;
                            }),
                            (h.resolve = function (y) {
                                return y instanceof this
                                    ? y
                                    : a.resolve(new this(i), y);
                            }),
                            (h.reject = function (y) {
                                var b = new this(i);
                                return a.reject(b, y);
                            }),
                            (h.all = function (y) {
                                var b = this;
                                if (
                                    Object.prototype.toString.call(y) !==
                                    '[object Array]'
                                )
                                    return this.reject(
                                        new TypeError('must be an array')
                                    );
                                var w = y.length,
                                    x = !1;
                                if (!w) return this.resolve([]);
                                for (
                                    var v = new Array(w),
                                        C = 0,
                                        $ = -1,
                                        T = new this(i);
                                    ++$ < w;

                                )
                                    N(y[$], $);
                                return T;
                                function N(R, P) {
                                    b.resolve(R).then(
                                        function (E) {
                                            (v[P] = E),
                                                ++C !== w ||
                                                    x ||
                                                    ((x = !0), a.resolve(T, v));
                                        },
                                        function (E) {
                                            x || ((x = !0), a.reject(T, E));
                                        }
                                    );
                                }
                            }),
                            (h.race = function (y) {
                                var b = this;
                                if (
                                    Object.prototype.toString.call(y) !==
                                    '[object Array]'
                                )
                                    return this.reject(
                                        new TypeError('must be an array')
                                    );
                                var w = y.length,
                                    x = !1;
                                if (!w) return this.resolve([]);
                                for (var v = -1, C = new this(i); ++v < w; )
                                    ($ = y[v]),
                                        b.resolve($).then(
                                            function (T) {
                                                x ||
                                                    ((x = !0), a.resolve(C, T));
                                            },
                                            function (T) {
                                                x || ((x = !0), a.reject(C, T));
                                            }
                                        );
                                var $;
                                return C;
                            });
                    },
                    { immediate: 36 },
                ],
                38: [
                    function (e, s, r) {
                        var o = {};
                        (0, e('./lib/utils/common').assign)(
                            o,
                            e('./lib/deflate'),
                            e('./lib/inflate'),
                            e('./lib/zlib/constants')
                        ),
                            (s.exports = o);
                    },
                    {
                        './lib/deflate': 39,
                        './lib/inflate': 40,
                        './lib/utils/common': 41,
                        './lib/zlib/constants': 44,
                    },
                ],
                39: [
                    function (e, s, r) {
                        var o = e('./zlib/deflate'),
                            i = e('./utils/common'),
                            a = e('./utils/strings'),
                            l = e('./zlib/messages'),
                            c = e('./zlib/zstream'),
                            u = Object.prototype.toString,
                            h = 0,
                            d = -1,
                            p = 0,
                            f = 8;
                        function m(y) {
                            if (!(this instanceof m)) return new m(y);
                            this.options = i.assign(
                                {
                                    level: d,
                                    method: f,
                                    chunkSize: 16384,
                                    windowBits: 15,
                                    memLevel: 8,
                                    strategy: p,
                                    to: '',
                                },
                                y || {}
                            );
                            var b = this.options;
                            b.raw && 0 < b.windowBits
                                ? (b.windowBits = -b.windowBits)
                                : b.gzip &&
                                  0 < b.windowBits &&
                                  b.windowBits < 16 &&
                                  (b.windowBits += 16),
                                (this.err = 0),
                                (this.msg = ''),
                                (this.ended = !1),
                                (this.chunks = []),
                                (this.strm = new c()),
                                (this.strm.avail_out = 0);
                            var w = o.deflateInit2(
                                this.strm,
                                b.level,
                                b.method,
                                b.windowBits,
                                b.memLevel,
                                b.strategy
                            );
                            if (w !== h) throw new Error(l[w]);
                            if (
                                (b.header &&
                                    o.deflateSetHeader(this.strm, b.header),
                                b.dictionary)
                            ) {
                                var x;
                                if (
                                    ((x =
                                        typeof b.dictionary == 'string'
                                            ? a.string2buf(b.dictionary)
                                            : u.call(b.dictionary) ===
                                              '[object ArrayBuffer]'
                                            ? new Uint8Array(b.dictionary)
                                            : b.dictionary),
                                    (w = o.deflateSetDictionary(
                                        this.strm,
                                        x
                                    )) !== h)
                                )
                                    throw new Error(l[w]);
                                this._dict_set = !0;
                            }
                        }
                        function g(y, b) {
                            var w = new m(b);
                            if ((w.push(y, !0), w.err)) throw w.msg || l[w.err];
                            return w.result;
                        }
                        (m.prototype.push = function (y, b) {
                            var w,
                                x,
                                v = this.strm,
                                C = this.options.chunkSize;
                            if (this.ended) return !1;
                            (x = b === ~~b ? b : b === !0 ? 4 : 0),
                                typeof y == 'string'
                                    ? (v.input = a.string2buf(y))
                                    : u.call(y) === '[object ArrayBuffer]'
                                    ? (v.input = new Uint8Array(y))
                                    : (v.input = y),
                                (v.next_in = 0),
                                (v.avail_in = v.input.length);
                            do {
                                if (
                                    (v.avail_out === 0 &&
                                        ((v.output = new i.Buf8(C)),
                                        (v.next_out = 0),
                                        (v.avail_out = C)),
                                    (w = o.deflate(v, x)) !== 1 && w !== h)
                                )
                                    return this.onEnd(w), !(this.ended = !0);
                                (v.avail_out !== 0 &&
                                    (v.avail_in !== 0 ||
                                        (x !== 4 && x !== 2))) ||
                                    (this.options.to === 'string'
                                        ? this.onData(
                                              a.buf2binstring(
                                                  i.shrinkBuf(
                                                      v.output,
                                                      v.next_out
                                                  )
                                              )
                                          )
                                        : this.onData(
                                              i.shrinkBuf(v.output, v.next_out)
                                          ));
                            } while (
                                (0 < v.avail_in || v.avail_out === 0) &&
                                w !== 1
                            );
                            return x === 4
                                ? ((w = o.deflateEnd(this.strm)),
                                  this.onEnd(w),
                                  (this.ended = !0),
                                  w === h)
                                : x !== 2 ||
                                      (this.onEnd(h), !(v.avail_out = 0));
                        }),
                            (m.prototype.onData = function (y) {
                                this.chunks.push(y);
                            }),
                            (m.prototype.onEnd = function (y) {
                                y === h &&
                                    (this.options.to === 'string'
                                        ? (this.result = this.chunks.join(''))
                                        : (this.result = i.flattenChunks(
                                              this.chunks
                                          ))),
                                    (this.chunks = []),
                                    (this.err = y),
                                    (this.msg = this.strm.msg);
                            }),
                            (r.Deflate = m),
                            (r.deflate = g),
                            (r.deflateRaw = function (y, b) {
                                return ((b = b || {}).raw = !0), g(y, b);
                            }),
                            (r.gzip = function (y, b) {
                                return ((b = b || {}).gzip = !0), g(y, b);
                            });
                    },
                    {
                        './utils/common': 41,
                        './utils/strings': 42,
                        './zlib/deflate': 46,
                        './zlib/messages': 51,
                        './zlib/zstream': 53,
                    },
                ],
                40: [
                    function (e, s, r) {
                        var o = e('./zlib/inflate'),
                            i = e('./utils/common'),
                            a = e('./utils/strings'),
                            l = e('./zlib/constants'),
                            c = e('./zlib/messages'),
                            u = e('./zlib/zstream'),
                            h = e('./zlib/gzheader'),
                            d = Object.prototype.toString;
                        function p(m) {
                            if (!(this instanceof p)) return new p(m);
                            this.options = i.assign(
                                { chunkSize: 16384, windowBits: 0, to: '' },
                                m || {}
                            );
                            var g = this.options;
                            g.raw &&
                                0 <= g.windowBits &&
                                g.windowBits < 16 &&
                                ((g.windowBits = -g.windowBits),
                                g.windowBits === 0 && (g.windowBits = -15)),
                                !(0 <= g.windowBits && g.windowBits < 16) ||
                                    (m && m.windowBits) ||
                                    (g.windowBits += 32),
                                15 < g.windowBits &&
                                    g.windowBits < 48 &&
                                    !(15 & g.windowBits) &&
                                    (g.windowBits |= 15),
                                (this.err = 0),
                                (this.msg = ''),
                                (this.ended = !1),
                                (this.chunks = []),
                                (this.strm = new u()),
                                (this.strm.avail_out = 0);
                            var y = o.inflateInit2(this.strm, g.windowBits);
                            if (y !== l.Z_OK) throw new Error(c[y]);
                            (this.header = new h()),
                                o.inflateGetHeader(this.strm, this.header);
                        }
                        function f(m, g) {
                            var y = new p(g);
                            if ((y.push(m, !0), y.err)) throw y.msg || c[y.err];
                            return y.result;
                        }
                        (p.prototype.push = function (m, g) {
                            var y,
                                b,
                                w,
                                x,
                                v,
                                C,
                                $ = this.strm,
                                T = this.options.chunkSize,
                                N = this.options.dictionary,
                                R = !1;
                            if (this.ended) return !1;
                            (b =
                                g === ~~g
                                    ? g
                                    : g === !0
                                    ? l.Z_FINISH
                                    : l.Z_NO_FLUSH),
                                typeof m == 'string'
                                    ? ($.input = a.binstring2buf(m))
                                    : d.call(m) === '[object ArrayBuffer]'
                                    ? ($.input = new Uint8Array(m))
                                    : ($.input = m),
                                ($.next_in = 0),
                                ($.avail_in = $.input.length);
                            do {
                                if (
                                    ($.avail_out === 0 &&
                                        (($.output = new i.Buf8(T)),
                                        ($.next_out = 0),
                                        ($.avail_out = T)),
                                    (y = o.inflate($, l.Z_NO_FLUSH)) ===
                                        l.Z_NEED_DICT &&
                                        N &&
                                        ((C =
                                            typeof N == 'string'
                                                ? a.string2buf(N)
                                                : d.call(N) ===
                                                  '[object ArrayBuffer]'
                                                ? new Uint8Array(N)
                                                : N),
                                        (y = o.inflateSetDictionary(
                                            this.strm,
                                            C
                                        ))),
                                    y === l.Z_BUF_ERROR &&
                                        R === !0 &&
                                        ((y = l.Z_OK), (R = !1)),
                                    y !== l.Z_STREAM_END && y !== l.Z_OK)
                                )
                                    return this.onEnd(y), !(this.ended = !0);
                                $.next_out &&
                                    (($.avail_out !== 0 &&
                                        y !== l.Z_STREAM_END &&
                                        ($.avail_in !== 0 ||
                                            (b !== l.Z_FINISH &&
                                                b !== l.Z_SYNC_FLUSH))) ||
                                        (this.options.to === 'string'
                                            ? ((w = a.utf8border(
                                                  $.output,
                                                  $.next_out
                                              )),
                                              (x = $.next_out - w),
                                              (v = a.buf2string($.output, w)),
                                              ($.next_out = x),
                                              ($.avail_out = T - x),
                                              x &&
                                                  i.arraySet(
                                                      $.output,
                                                      $.output,
                                                      w,
                                                      x,
                                                      0
                                                  ),
                                              this.onData(v))
                                            : this.onData(
                                                  i.shrinkBuf(
                                                      $.output,
                                                      $.next_out
                                                  )
                                              ))),
                                    $.avail_in === 0 &&
                                        $.avail_out === 0 &&
                                        (R = !0);
                            } while (
                                (0 < $.avail_in || $.avail_out === 0) &&
                                y !== l.Z_STREAM_END
                            );
                            return (
                                y === l.Z_STREAM_END && (b = l.Z_FINISH),
                                b === l.Z_FINISH
                                    ? ((y = o.inflateEnd(this.strm)),
                                      this.onEnd(y),
                                      (this.ended = !0),
                                      y === l.Z_OK)
                                    : b !== l.Z_SYNC_FLUSH ||
                                      (this.onEnd(l.Z_OK), !($.avail_out = 0))
                            );
                        }),
                            (p.prototype.onData = function (m) {
                                this.chunks.push(m);
                            }),
                            (p.prototype.onEnd = function (m) {
                                m === l.Z_OK &&
                                    (this.options.to === 'string'
                                        ? (this.result = this.chunks.join(''))
                                        : (this.result = i.flattenChunks(
                                              this.chunks
                                          ))),
                                    (this.chunks = []),
                                    (this.err = m),
                                    (this.msg = this.strm.msg);
                            }),
                            (r.Inflate = p),
                            (r.inflate = f),
                            (r.inflateRaw = function (m, g) {
                                return ((g = g || {}).raw = !0), f(m, g);
                            }),
                            (r.ungzip = f);
                    },
                    {
                        './utils/common': 41,
                        './utils/strings': 42,
                        './zlib/constants': 44,
                        './zlib/gzheader': 47,
                        './zlib/inflate': 49,
                        './zlib/messages': 51,
                        './zlib/zstream': 53,
                    },
                ],
                41: [
                    function (e, s, r) {
                        var o =
                            typeof Uint8Array < 'u' &&
                            typeof Uint16Array < 'u' &&
                            typeof Int32Array < 'u';
                        (r.assign = function (l) {
                            for (
                                var c = Array.prototype.slice.call(
                                    arguments,
                                    1
                                );
                                c.length;

                            ) {
                                var u = c.shift();
                                if (u) {
                                    if (typeof u != 'object')
                                        throw new TypeError(
                                            u + 'must be non-object'
                                        );
                                    for (var h in u)
                                        u.hasOwnProperty(h) && (l[h] = u[h]);
                                }
                            }
                            return l;
                        }),
                            (r.shrinkBuf = function (l, c) {
                                return l.length === c
                                    ? l
                                    : l.subarray
                                    ? l.subarray(0, c)
                                    : ((l.length = c), l);
                            });
                        var i = {
                                arraySet: function (l, c, u, h, d) {
                                    if (c.subarray && l.subarray)
                                        l.set(c.subarray(u, u + h), d);
                                    else
                                        for (var p = 0; p < h; p++)
                                            l[d + p] = c[u + p];
                                },
                                flattenChunks: function (l) {
                                    var c, u, h, d, p, f;
                                    for (c = h = 0, u = l.length; c < u; c++)
                                        h += l[c].length;
                                    for (
                                        f = new Uint8Array(h),
                                            c = d = 0,
                                            u = l.length;
                                        c < u;
                                        c++
                                    )
                                        (p = l[c]),
                                            f.set(p, d),
                                            (d += p.length);
                                    return f;
                                },
                            },
                            a = {
                                arraySet: function (l, c, u, h, d) {
                                    for (var p = 0; p < h; p++)
                                        l[d + p] = c[u + p];
                                },
                                flattenChunks: function (l) {
                                    return [].concat.apply([], l);
                                },
                            };
                        (r.setTyped = function (l) {
                            l
                                ? ((r.Buf8 = Uint8Array),
                                  (r.Buf16 = Uint16Array),
                                  (r.Buf32 = Int32Array),
                                  r.assign(r, i))
                                : ((r.Buf8 = Array),
                                  (r.Buf16 = Array),
                                  (r.Buf32 = Array),
                                  r.assign(r, a));
                        }),
                            r.setTyped(o);
                    },
                    {},
                ],
                42: [
                    function (e, s, r) {
                        var o = e('./common'),
                            i = !0,
                            a = !0;
                        try {
                            String.fromCharCode.apply(null, [0]);
                        } catch {
                            i = !1;
                        }
                        try {
                            String.fromCharCode.apply(null, new Uint8Array(1));
                        } catch {
                            a = !1;
                        }
                        for (var l = new o.Buf8(256), c = 0; c < 256; c++)
                            l[c] =
                                252 <= c
                                    ? 6
                                    : 248 <= c
                                    ? 5
                                    : 240 <= c
                                    ? 4
                                    : 224 <= c
                                    ? 3
                                    : 192 <= c
                                    ? 2
                                    : 1;
                        function u(h, d) {
                            if (
                                d < 65537 &&
                                ((h.subarray && a) || (!h.subarray && i))
                            )
                                return String.fromCharCode.apply(
                                    null,
                                    o.shrinkBuf(h, d)
                                );
                            for (var p = '', f = 0; f < d; f++)
                                p += String.fromCharCode(h[f]);
                            return p;
                        }
                        (l[254] = l[254] = 1),
                            (r.string2buf = function (h) {
                                var d,
                                    p,
                                    f,
                                    m,
                                    g,
                                    y = h.length,
                                    b = 0;
                                for (m = 0; m < y; m++)
                                    (64512 & (p = h.charCodeAt(m))) == 55296 &&
                                        m + 1 < y &&
                                        (64512 & (f = h.charCodeAt(m + 1))) ==
                                            56320 &&
                                        ((p =
                                            65536 +
                                            ((p - 55296) << 10) +
                                            (f - 56320)),
                                        m++),
                                        (b +=
                                            p < 128
                                                ? 1
                                                : p < 2048
                                                ? 2
                                                : p < 65536
                                                ? 3
                                                : 4);
                                for (d = new o.Buf8(b), m = g = 0; g < b; m++)
                                    (64512 & (p = h.charCodeAt(m))) == 55296 &&
                                        m + 1 < y &&
                                        (64512 & (f = h.charCodeAt(m + 1))) ==
                                            56320 &&
                                        ((p =
                                            65536 +
                                            ((p - 55296) << 10) +
                                            (f - 56320)),
                                        m++),
                                        p < 128
                                            ? (d[g++] = p)
                                            : (p < 2048
                                                  ? (d[g++] = 192 | (p >>> 6))
                                                  : (p < 65536
                                                        ? (d[g++] =
                                                              224 | (p >>> 12))
                                                        : ((d[g++] =
                                                              240 | (p >>> 18)),
                                                          (d[g++] =
                                                              128 |
                                                              ((p >>> 12) &
                                                                  63))),
                                                    (d[g++] =
                                                        128 |
                                                        ((p >>> 6) & 63))),
                                              (d[g++] = 128 | (63 & p)));
                                return d;
                            }),
                            (r.buf2binstring = function (h) {
                                return u(h, h.length);
                            }),
                            (r.binstring2buf = function (h) {
                                for (
                                    var d = new o.Buf8(h.length),
                                        p = 0,
                                        f = d.length;
                                    p < f;
                                    p++
                                )
                                    d[p] = h.charCodeAt(p);
                                return d;
                            }),
                            (r.buf2string = function (h, d) {
                                var p,
                                    f,
                                    m,
                                    g,
                                    y = d || h.length,
                                    b = new Array(2 * y);
                                for (p = f = 0; p < y; )
                                    if ((m = h[p++]) < 128) b[f++] = m;
                                    else if (4 < (g = l[m]))
                                        (b[f++] = 65533), (p += g - 1);
                                    else {
                                        for (
                                            m &=
                                                g === 2 ? 31 : g === 3 ? 15 : 7;
                                            1 < g && p < y;

                                        )
                                            (m = (m << 6) | (63 & h[p++])), g--;
                                        1 < g
                                            ? (b[f++] = 65533)
                                            : m < 65536
                                            ? (b[f++] = m)
                                            : ((m -= 65536),
                                              (b[f++] =
                                                  55296 | ((m >> 10) & 1023)),
                                              (b[f++] = 56320 | (1023 & m)));
                                    }
                                return u(b, f);
                            }),
                            (r.utf8border = function (h, d) {
                                var p;
                                for (
                                    (d = d || h.length) > h.length &&
                                        (d = h.length),
                                        p = d - 1;
                                    0 <= p && (192 & h[p]) == 128;

                                )
                                    p--;
                                return p < 0 || p === 0
                                    ? d
                                    : p + l[h[p]] > d
                                    ? p
                                    : d;
                            });
                    },
                    { './common': 41 },
                ],
                43: [
                    function (e, s, r) {
                        s.exports = function (o, i, a, l) {
                            for (
                                var c = (65535 & o) | 0,
                                    u = ((o >>> 16) & 65535) | 0,
                                    h = 0;
                                a !== 0;

                            ) {
                                for (
                                    a -= h = 2e3 < a ? 2e3 : a;
                                    (u = (u + (c = (c + i[l++]) | 0)) | 0), --h;

                                );
                                (c %= 65521), (u %= 65521);
                            }
                            return c | (u << 16) | 0;
                        };
                    },
                    {},
                ],
                44: [
                    function (e, s, r) {
                        s.exports = {
                            Z_NO_FLUSH: 0,
                            Z_PARTIAL_FLUSH: 1,
                            Z_SYNC_FLUSH: 2,
                            Z_FULL_FLUSH: 3,
                            Z_FINISH: 4,
                            Z_BLOCK: 5,
                            Z_TREES: 6,
                            Z_OK: 0,
                            Z_STREAM_END: 1,
                            Z_NEED_DICT: 2,
                            Z_ERRNO: -1,
                            Z_STREAM_ERROR: -2,
                            Z_DATA_ERROR: -3,
                            Z_BUF_ERROR: -5,
                            Z_NO_COMPRESSION: 0,
                            Z_BEST_SPEED: 1,
                            Z_BEST_COMPRESSION: 9,
                            Z_DEFAULT_COMPRESSION: -1,
                            Z_FILTERED: 1,
                            Z_HUFFMAN_ONLY: 2,
                            Z_RLE: 3,
                            Z_FIXED: 4,
                            Z_DEFAULT_STRATEGY: 0,
                            Z_BINARY: 0,
                            Z_TEXT: 1,
                            Z_UNKNOWN: 2,
                            Z_DEFLATED: 8,
                        };
                    },
                    {},
                ],
                45: [
                    function (e, s, r) {
                        var o = (function () {
                            for (var i, a = [], l = 0; l < 256; l++) {
                                i = l;
                                for (var c = 0; c < 8; c++)
                                    i =
                                        1 & i
                                            ? 3988292384 ^ (i >>> 1)
                                            : i >>> 1;
                                a[l] = i;
                            }
                            return a;
                        })();
                        s.exports = function (i, a, l, c) {
                            var u = o,
                                h = c + l;
                            i ^= -1;
                            for (var d = c; d < h; d++)
                                i = (i >>> 8) ^ u[255 & (i ^ a[d])];
                            return -1 ^ i;
                        };
                    },
                    {},
                ],
                46: [
                    function (e, s, r) {
                        var o,
                            i = e('../utils/common'),
                            a = e('./trees'),
                            l = e('./adler32'),
                            c = e('./crc32'),
                            u = e('./messages'),
                            h = 0,
                            d = 4,
                            p = 0,
                            f = -2,
                            m = -1,
                            g = 4,
                            y = 2,
                            b = 8,
                            w = 9,
                            x = 286,
                            v = 30,
                            C = 19,
                            $ = 2 * x + 1,
                            T = 15,
                            N = 3,
                            R = 258,
                            P = R + N + 1,
                            E = 42,
                            O = 113,
                            S = 1,
                            L = 2,
                            q = 3,
                            W = 4;
                        function X(I, ot) {
                            return (I.msg = u[ot]), ot;
                        }
                        function G(I) {
                            return (I << 1) - (4 < I ? 9 : 0);
                        }
                        function et(I) {
                            for (var ot = I.length; 0 <= --ot; ) I[ot] = 0;
                        }
                        function z(I) {
                            var ot = I.state,
                                Q = ot.pending;
                            Q > I.avail_out && (Q = I.avail_out),
                                Q !== 0 &&
                                    (i.arraySet(
                                        I.output,
                                        ot.pending_buf,
                                        ot.pending_out,
                                        Q,
                                        I.next_out
                                    ),
                                    (I.next_out += Q),
                                    (ot.pending_out += Q),
                                    (I.total_out += Q),
                                    (I.avail_out -= Q),
                                    (ot.pending -= Q),
                                    ot.pending === 0 && (ot.pending_out = 0));
                        }
                        function M(I, ot) {
                            a._tr_flush_block(
                                I,
                                0 <= I.block_start ? I.block_start : -1,
                                I.strstart - I.block_start,
                                ot
                            ),
                                (I.block_start = I.strstart),
                                z(I.strm);
                        }
                        function st(I, ot) {
                            I.pending_buf[I.pending++] = ot;
                        }
                        function nt(I, ot) {
                            (I.pending_buf[I.pending++] = (ot >>> 8) & 255),
                                (I.pending_buf[I.pending++] = 255 & ot);
                        }
                        function J(I, ot) {
                            var Q,
                                F,
                                D = I.max_chain_length,
                                K = I.strstart,
                                at = I.prev_length,
                                lt = I.nice_match,
                                Z =
                                    I.strstart > I.w_size - P
                                        ? I.strstart - (I.w_size - P)
                                        : 0,
                                ht = I.window,
                                xt = I.w_mask,
                                dt = I.prev,
                                Tt = I.strstart + R,
                                qt = ht[K + at - 1],
                                Ot = ht[K + at];
                            I.prev_length >= I.good_match && (D >>= 2),
                                lt > I.lookahead && (lt = I.lookahead);
                            do
                                if (
                                    ht[(Q = ot) + at] === Ot &&
                                    ht[Q + at - 1] === qt &&
                                    ht[Q] === ht[K] &&
                                    ht[++Q] === ht[K + 1]
                                ) {
                                    (K += 2), Q++;
                                    do;
                                    while (
                                        ht[++K] === ht[++Q] &&
                                        ht[++K] === ht[++Q] &&
                                        ht[++K] === ht[++Q] &&
                                        ht[++K] === ht[++Q] &&
                                        ht[++K] === ht[++Q] &&
                                        ht[++K] === ht[++Q] &&
                                        ht[++K] === ht[++Q] &&
                                        ht[++K] === ht[++Q] &&
                                        K < Tt
                                    );
                                    if (
                                        ((F = R - (Tt - K)),
                                        (K = Tt - R),
                                        at < F)
                                    ) {
                                        if (
                                            ((I.match_start = ot),
                                            lt <= (at = F))
                                        )
                                            break;
                                        (qt = ht[K + at - 1]),
                                            (Ot = ht[K + at]);
                                    }
                                }
                            while ((ot = dt[ot & xt]) > Z && --D != 0);
                            return at <= I.lookahead ? at : I.lookahead;
                        }
                        function pt(I) {
                            var ot,
                                Q,
                                F,
                                D,
                                K,
                                at,
                                lt,
                                Z,
                                ht,
                                xt,
                                dt = I.w_size;
                            do {
                                if (
                                    ((D =
                                        I.window_size -
                                        I.lookahead -
                                        I.strstart),
                                    I.strstart >= dt + (dt - P))
                                ) {
                                    for (
                                        i.arraySet(
                                            I.window,
                                            I.window,
                                            dt,
                                            dt,
                                            0
                                        ),
                                            I.match_start -= dt,
                                            I.strstart -= dt,
                                            I.block_start -= dt,
                                            ot = Q = I.hash_size;
                                        (F = I.head[--ot]),
                                            (I.head[ot] = dt <= F ? F - dt : 0),
                                            --Q;

                                    );
                                    for (
                                        ot = Q = dt;
                                        (F = I.prev[--ot]),
                                            (I.prev[ot] = dt <= F ? F - dt : 0),
                                            --Q;

                                    );
                                    D += dt;
                                }
                                if (I.strm.avail_in === 0) break;
                                if (
                                    ((at = I.strm),
                                    (lt = I.window),
                                    (Z = I.strstart + I.lookahead),
                                    (ht = D),
                                    (xt = void 0),
                                    (xt = at.avail_in),
                                    ht < xt && (xt = ht),
                                    (Q =
                                        xt === 0
                                            ? 0
                                            : ((at.avail_in -= xt),
                                              i.arraySet(
                                                  lt,
                                                  at.input,
                                                  at.next_in,
                                                  xt,
                                                  Z
                                              ),
                                              at.state.wrap === 1
                                                  ? (at.adler = l(
                                                        at.adler,
                                                        lt,
                                                        xt,
                                                        Z
                                                    ))
                                                  : at.state.wrap === 2 &&
                                                    (at.adler = c(
                                                        at.adler,
                                                        lt,
                                                        xt,
                                                        Z
                                                    )),
                                              (at.next_in += xt),
                                              (at.total_in += xt),
                                              xt)),
                                    (I.lookahead += Q),
                                    I.lookahead + I.insert >= N)
                                )
                                    for (
                                        K = I.strstart - I.insert,
                                            I.ins_h = I.window[K],
                                            I.ins_h =
                                                ((I.ins_h << I.hash_shift) ^
                                                    I.window[K + 1]) &
                                                I.hash_mask;
                                        I.insert &&
                                        ((I.ins_h =
                                            ((I.ins_h << I.hash_shift) ^
                                                I.window[K + N - 1]) &
                                            I.hash_mask),
                                        (I.prev[K & I.w_mask] =
                                            I.head[I.ins_h]),
                                        (I.head[I.ins_h] = K),
                                        K++,
                                        I.insert--,
                                        !(I.lookahead + I.insert < N));

                                    );
                            } while (I.lookahead < P && I.strm.avail_in !== 0);
                        }
                        function wt(I, ot) {
                            for (var Q, F; ; ) {
                                if (I.lookahead < P) {
                                    if ((pt(I), I.lookahead < P && ot === h))
                                        return S;
                                    if (I.lookahead === 0) break;
                                }
                                if (
                                    ((Q = 0),
                                    I.lookahead >= N &&
                                        ((I.ins_h =
                                            ((I.ins_h << I.hash_shift) ^
                                                I.window[I.strstart + N - 1]) &
                                            I.hash_mask),
                                        (Q = I.prev[I.strstart & I.w_mask] =
                                            I.head[I.ins_h]),
                                        (I.head[I.ins_h] = I.strstart)),
                                    Q !== 0 &&
                                        I.strstart - Q <= I.w_size - P &&
                                        (I.match_length = J(I, Q)),
                                    I.match_length >= N)
                                )
                                    if (
                                        ((F = a._tr_tally(
                                            I,
                                            I.strstart - I.match_start,
                                            I.match_length - N
                                        )),
                                        (I.lookahead -= I.match_length),
                                        I.match_length <= I.max_lazy_match &&
                                            I.lookahead >= N)
                                    ) {
                                        for (
                                            I.match_length--;
                                            I.strstart++,
                                                (I.ins_h =
                                                    ((I.ins_h << I.hash_shift) ^
                                                        I.window[
                                                            I.strstart + N - 1
                                                        ]) &
                                                    I.hash_mask),
                                                (Q = I.prev[
                                                    I.strstart & I.w_mask
                                                ] =
                                                    I.head[I.ins_h]),
                                                (I.head[I.ins_h] = I.strstart),
                                                --I.match_length != 0;

                                        );
                                        I.strstart++;
                                    } else
                                        (I.strstart += I.match_length),
                                            (I.match_length = 0),
                                            (I.ins_h = I.window[I.strstart]),
                                            (I.ins_h =
                                                ((I.ins_h << I.hash_shift) ^
                                                    I.window[I.strstart + 1]) &
                                                I.hash_mask);
                                else
                                    (F = a._tr_tally(
                                        I,
                                        0,
                                        I.window[I.strstart]
                                    )),
                                        I.lookahead--,
                                        I.strstart++;
                                if (F && (M(I, !1), I.strm.avail_out === 0))
                                    return S;
                            }
                            return (
                                (I.insert =
                                    I.strstart < N - 1 ? I.strstart : N - 1),
                                ot === d
                                    ? (M(I, !0), I.strm.avail_out === 0 ? q : W)
                                    : I.last_lit &&
                                      (M(I, !1), I.strm.avail_out === 0)
                                    ? S
                                    : L
                            );
                        }
                        function ft(I, ot) {
                            for (var Q, F, D; ; ) {
                                if (I.lookahead < P) {
                                    if ((pt(I), I.lookahead < P && ot === h))
                                        return S;
                                    if (I.lookahead === 0) break;
                                }
                                if (
                                    ((Q = 0),
                                    I.lookahead >= N &&
                                        ((I.ins_h =
                                            ((I.ins_h << I.hash_shift) ^
                                                I.window[I.strstart + N - 1]) &
                                            I.hash_mask),
                                        (Q = I.prev[I.strstart & I.w_mask] =
                                            I.head[I.ins_h]),
                                        (I.head[I.ins_h] = I.strstart)),
                                    (I.prev_length = I.match_length),
                                    (I.prev_match = I.match_start),
                                    (I.match_length = N - 1),
                                    Q !== 0 &&
                                        I.prev_length < I.max_lazy_match &&
                                        I.strstart - Q <= I.w_size - P &&
                                        ((I.match_length = J(I, Q)),
                                        I.match_length <= 5 &&
                                            (I.strategy === 1 ||
                                                (I.match_length === N &&
                                                    4096 <
                                                        I.strstart -
                                                            I.match_start)) &&
                                            (I.match_length = N - 1)),
                                    I.prev_length >= N &&
                                        I.match_length <= I.prev_length)
                                ) {
                                    for (
                                        D = I.strstart + I.lookahead - N,
                                            F = a._tr_tally(
                                                I,
                                                I.strstart - 1 - I.prev_match,
                                                I.prev_length - N
                                            ),
                                            I.lookahead -= I.prev_length - 1,
                                            I.prev_length -= 2;
                                        ++I.strstart <= D &&
                                            ((I.ins_h =
                                                ((I.ins_h << I.hash_shift) ^
                                                    I.window[
                                                        I.strstart + N - 1
                                                    ]) &
                                                I.hash_mask),
                                            (Q = I.prev[I.strstart & I.w_mask] =
                                                I.head[I.ins_h]),
                                            (I.head[I.ins_h] = I.strstart)),
                                            --I.prev_length != 0;

                                    );
                                    if (
                                        ((I.match_available = 0),
                                        (I.match_length = N - 1),
                                        I.strstart++,
                                        F && (M(I, !1), I.strm.avail_out === 0))
                                    )
                                        return S;
                                } else if (I.match_available) {
                                    if (
                                        ((F = a._tr_tally(
                                            I,
                                            0,
                                            I.window[I.strstart - 1]
                                        )) && M(I, !1),
                                        I.strstart++,
                                        I.lookahead--,
                                        I.strm.avail_out === 0)
                                    )
                                        return S;
                                } else
                                    (I.match_available = 1),
                                        I.strstart++,
                                        I.lookahead--;
                            }
                            return (
                                I.match_available &&
                                    ((F = a._tr_tally(
                                        I,
                                        0,
                                        I.window[I.strstart - 1]
                                    )),
                                    (I.match_available = 0)),
                                (I.insert =
                                    I.strstart < N - 1 ? I.strstart : N - 1),
                                ot === d
                                    ? (M(I, !0), I.strm.avail_out === 0 ? q : W)
                                    : I.last_lit &&
                                      (M(I, !1), I.strm.avail_out === 0)
                                    ? S
                                    : L
                            );
                        }
                        function mt(I, ot, Q, F, D) {
                            (this.good_length = I),
                                (this.max_lazy = ot),
                                (this.nice_length = Q),
                                (this.max_chain = F),
                                (this.func = D);
                        }
                        function Nt() {
                            (this.strm = null),
                                (this.status = 0),
                                (this.pending_buf = null),
                                (this.pending_buf_size = 0),
                                (this.pending_out = 0),
                                (this.pending = 0),
                                (this.wrap = 0),
                                (this.gzhead = null),
                                (this.gzindex = 0),
                                (this.method = b),
                                (this.last_flush = -1),
                                (this.w_size = 0),
                                (this.w_bits = 0),
                                (this.w_mask = 0),
                                (this.window = null),
                                (this.window_size = 0),
                                (this.prev = null),
                                (this.head = null),
                                (this.ins_h = 0),
                                (this.hash_size = 0),
                                (this.hash_bits = 0),
                                (this.hash_mask = 0),
                                (this.hash_shift = 0),
                                (this.block_start = 0),
                                (this.match_length = 0),
                                (this.prev_match = 0),
                                (this.match_available = 0),
                                (this.strstart = 0),
                                (this.match_start = 0),
                                (this.lookahead = 0),
                                (this.prev_length = 0),
                                (this.max_chain_length = 0),
                                (this.max_lazy_match = 0),
                                (this.level = 0),
                                (this.strategy = 0),
                                (this.good_match = 0),
                                (this.nice_match = 0),
                                (this.dyn_ltree = new i.Buf16(2 * $)),
                                (this.dyn_dtree = new i.Buf16(2 * (2 * v + 1))),
                                (this.bl_tree = new i.Buf16(2 * (2 * C + 1))),
                                et(this.dyn_ltree),
                                et(this.dyn_dtree),
                                et(this.bl_tree),
                                (this.l_desc = null),
                                (this.d_desc = null),
                                (this.bl_desc = null),
                                (this.bl_count = new i.Buf16(T + 1)),
                                (this.heap = new i.Buf16(2 * x + 1)),
                                et(this.heap),
                                (this.heap_len = 0),
                                (this.heap_max = 0),
                                (this.depth = new i.Buf16(2 * x + 1)),
                                et(this.depth),
                                (this.l_buf = 0),
                                (this.lit_bufsize = 0),
                                (this.last_lit = 0),
                                (this.d_buf = 0),
                                (this.opt_len = 0),
                                (this.static_len = 0),
                                (this.matches = 0),
                                (this.insert = 0),
                                (this.bi_buf = 0),
                                (this.bi_valid = 0);
                        }
                        function $t(I) {
                            var ot;
                            return I && I.state
                                ? ((I.total_in = I.total_out = 0),
                                  (I.data_type = y),
                                  ((ot = I.state).pending = 0),
                                  (ot.pending_out = 0),
                                  ot.wrap < 0 && (ot.wrap = -ot.wrap),
                                  (ot.status = ot.wrap ? E : O),
                                  (I.adler = ot.wrap === 2 ? 0 : 1),
                                  (ot.last_flush = h),
                                  a._tr_init(ot),
                                  p)
                                : X(I, f);
                        }
                        function zt(I) {
                            var ot = $t(I);
                            return (
                                ot === p &&
                                    (function (Q) {
                                        (Q.window_size = 2 * Q.w_size),
                                            et(Q.head),
                                            (Q.max_lazy_match =
                                                o[Q.level].max_lazy),
                                            (Q.good_match =
                                                o[Q.level].good_length),
                                            (Q.nice_match =
                                                o[Q.level].nice_length),
                                            (Q.max_chain_length =
                                                o[Q.level].max_chain),
                                            (Q.strstart = 0),
                                            (Q.block_start = 0),
                                            (Q.lookahead = 0),
                                            (Q.insert = 0),
                                            (Q.match_length = Q.prev_length =
                                                N - 1),
                                            (Q.match_available = 0),
                                            (Q.ins_h = 0);
                                    })(I.state),
                                ot
                            );
                        }
                        function Vt(I, ot, Q, F, D, K) {
                            if (!I) return f;
                            var at = 1;
                            if (
                                (ot === m && (ot = 6),
                                F < 0
                                    ? ((at = 0), (F = -F))
                                    : 15 < F && ((at = 2), (F -= 16)),
                                D < 1 ||
                                    w < D ||
                                    Q !== b ||
                                    F < 8 ||
                                    15 < F ||
                                    ot < 0 ||
                                    9 < ot ||
                                    K < 0 ||
                                    g < K)
                            )
                                return X(I, f);
                            F === 8 && (F = 9);
                            var lt = new Nt();
                            return (
                                ((I.state = lt).strm = I),
                                (lt.wrap = at),
                                (lt.gzhead = null),
                                (lt.w_bits = F),
                                (lt.w_size = 1 << lt.w_bits),
                                (lt.w_mask = lt.w_size - 1),
                                (lt.hash_bits = D + 7),
                                (lt.hash_size = 1 << lt.hash_bits),
                                (lt.hash_mask = lt.hash_size - 1),
                                (lt.hash_shift = ~~(
                                    (lt.hash_bits + N - 1) /
                                    N
                                )),
                                (lt.window = new i.Buf8(2 * lt.w_size)),
                                (lt.head = new i.Buf16(lt.hash_size)),
                                (lt.prev = new i.Buf16(lt.w_size)),
                                (lt.lit_bufsize = 1 << (D + 6)),
                                (lt.pending_buf_size = 4 * lt.lit_bufsize),
                                (lt.pending_buf = new i.Buf8(
                                    lt.pending_buf_size
                                )),
                                (lt.d_buf = 1 * lt.lit_bufsize),
                                (lt.l_buf = 3 * lt.lit_bufsize),
                                (lt.level = ot),
                                (lt.strategy = K),
                                (lt.method = Q),
                                zt(I)
                            );
                        }
                        (o = [
                            new mt(0, 0, 0, 0, function (I, ot) {
                                var Q = 65535;
                                for (
                                    Q > I.pending_buf_size - 5 &&
                                    (Q = I.pending_buf_size - 5);
                                    ;

                                ) {
                                    if (I.lookahead <= 1) {
                                        if (
                                            (pt(I),
                                            I.lookahead === 0 && ot === h)
                                        )
                                            return S;
                                        if (I.lookahead === 0) break;
                                    }
                                    (I.strstart += I.lookahead),
                                        (I.lookahead = 0);
                                    var F = I.block_start + Q;
                                    if (
                                        ((I.strstart === 0 ||
                                            I.strstart >= F) &&
                                            ((I.lookahead = I.strstart - F),
                                            (I.strstart = F),
                                            M(I, !1),
                                            I.strm.avail_out === 0)) ||
                                        (I.strstart - I.block_start >=
                                            I.w_size - P &&
                                            (M(I, !1), I.strm.avail_out === 0))
                                    )
                                        return S;
                                }
                                return (
                                    (I.insert = 0),
                                    ot === d
                                        ? (M(I, !0),
                                          I.strm.avail_out === 0 ? q : W)
                                        : (I.strstart > I.block_start &&
                                              (M(I, !1), I.strm.avail_out),
                                          S)
                                );
                            }),
                            new mt(4, 4, 8, 4, wt),
                            new mt(4, 5, 16, 8, wt),
                            new mt(4, 6, 32, 32, wt),
                            new mt(4, 4, 16, 16, ft),
                            new mt(8, 16, 32, 32, ft),
                            new mt(8, 16, 128, 128, ft),
                            new mt(8, 32, 128, 256, ft),
                            new mt(32, 128, 258, 1024, ft),
                            new mt(32, 258, 258, 4096, ft),
                        ]),
                            (r.deflateInit = function (I, ot) {
                                return Vt(I, ot, b, 15, 8, 0);
                            }),
                            (r.deflateInit2 = Vt),
                            (r.deflateReset = zt),
                            (r.deflateResetKeep = $t),
                            (r.deflateSetHeader = function (I, ot) {
                                return I && I.state
                                    ? I.state.wrap !== 2
                                        ? f
                                        : ((I.state.gzhead = ot), p)
                                    : f;
                            }),
                            (r.deflate = function (I, ot) {
                                var Q, F, D, K;
                                if (!I || !I.state || 5 < ot || ot < 0)
                                    return I ? X(I, f) : f;
                                if (
                                    ((F = I.state),
                                    !I.output ||
                                        (!I.input && I.avail_in !== 0) ||
                                        (F.status === 666 && ot !== d))
                                )
                                    return X(I, I.avail_out === 0 ? -5 : f);
                                if (
                                    ((F.strm = I),
                                    (Q = F.last_flush),
                                    (F.last_flush = ot),
                                    F.status === E)
                                )
                                    if (F.wrap === 2)
                                        (I.adler = 0),
                                            st(F, 31),
                                            st(F, 139),
                                            st(F, 8),
                                            F.gzhead
                                                ? (st(
                                                      F,
                                                      (F.gzhead.text ? 1 : 0) +
                                                          (F.gzhead.hcrc
                                                              ? 2
                                                              : 0) +
                                                          (F.gzhead.extra
                                                              ? 4
                                                              : 0) +
                                                          (F.gzhead.name
                                                              ? 8
                                                              : 0) +
                                                          (F.gzhead.comment
                                                              ? 16
                                                              : 0)
                                                  ),
                                                  st(F, 255 & F.gzhead.time),
                                                  st(
                                                      F,
                                                      (F.gzhead.time >> 8) & 255
                                                  ),
                                                  st(
                                                      F,
                                                      (F.gzhead.time >> 16) &
                                                          255
                                                  ),
                                                  st(
                                                      F,
                                                      (F.gzhead.time >> 24) &
                                                          255
                                                  ),
                                                  st(
                                                      F,
                                                      F.level === 9
                                                          ? 2
                                                          : 2 <= F.strategy ||
                                                            F.level < 2
                                                          ? 4
                                                          : 0
                                                  ),
                                                  st(F, 255 & F.gzhead.os),
                                                  F.gzhead.extra &&
                                                      F.gzhead.extra.length &&
                                                      (st(
                                                          F,
                                                          255 &
                                                              F.gzhead.extra
                                                                  .length
                                                      ),
                                                      st(
                                                          F,
                                                          (F.gzhead.extra
                                                              .length >>
                                                              8) &
                                                              255
                                                      )),
                                                  F.gzhead.hcrc &&
                                                      (I.adler = c(
                                                          I.adler,
                                                          F.pending_buf,
                                                          F.pending,
                                                          0
                                                      )),
                                                  (F.gzindex = 0),
                                                  (F.status = 69))
                                                : (st(F, 0),
                                                  st(F, 0),
                                                  st(F, 0),
                                                  st(F, 0),
                                                  st(F, 0),
                                                  st(
                                                      F,
                                                      F.level === 9
                                                          ? 2
                                                          : 2 <= F.strategy ||
                                                            F.level < 2
                                                          ? 4
                                                          : 0
                                                  ),
                                                  st(F, 3),
                                                  (F.status = O));
                                    else {
                                        var at =
                                            (b + ((F.w_bits - 8) << 4)) << 8;
                                        (at |=
                                            (2 <= F.strategy || F.level < 2
                                                ? 0
                                                : F.level < 6
                                                ? 1
                                                : F.level === 6
                                                ? 2
                                                : 3) << 6),
                                            F.strstart !== 0 && (at |= 32),
                                            (at += 31 - (at % 31)),
                                            (F.status = O),
                                            nt(F, at),
                                            F.strstart !== 0 &&
                                                (nt(F, I.adler >>> 16),
                                                nt(F, 65535 & I.adler)),
                                            (I.adler = 1);
                                    }
                                if (F.status === 69)
                                    if (F.gzhead.extra) {
                                        for (
                                            D = F.pending;
                                            F.gzindex <
                                                (65535 &
                                                    F.gzhead.extra.length) &&
                                            (F.pending !== F.pending_buf_size ||
                                                (F.gzhead.hcrc &&
                                                    F.pending > D &&
                                                    (I.adler = c(
                                                        I.adler,
                                                        F.pending_buf,
                                                        F.pending - D,
                                                        D
                                                    )),
                                                z(I),
                                                (D = F.pending),
                                                F.pending !==
                                                    F.pending_buf_size));

                                        )
                                            st(
                                                F,
                                                255 & F.gzhead.extra[F.gzindex]
                                            ),
                                                F.gzindex++;
                                        F.gzhead.hcrc &&
                                            F.pending > D &&
                                            (I.adler = c(
                                                I.adler,
                                                F.pending_buf,
                                                F.pending - D,
                                                D
                                            )),
                                            F.gzindex ===
                                                F.gzhead.extra.length &&
                                                ((F.gzindex = 0),
                                                (F.status = 73));
                                    } else F.status = 73;
                                if (F.status === 73)
                                    if (F.gzhead.name) {
                                        D = F.pending;
                                        do {
                                            if (
                                                F.pending ===
                                                    F.pending_buf_size &&
                                                (F.gzhead.hcrc &&
                                                    F.pending > D &&
                                                    (I.adler = c(
                                                        I.adler,
                                                        F.pending_buf,
                                                        F.pending - D,
                                                        D
                                                    )),
                                                z(I),
                                                (D = F.pending),
                                                F.pending ===
                                                    F.pending_buf_size)
                                            ) {
                                                K = 1;
                                                break;
                                            }
                                            (K =
                                                F.gzindex < F.gzhead.name.length
                                                    ? 255 &
                                                      F.gzhead.name.charCodeAt(
                                                          F.gzindex++
                                                      )
                                                    : 0),
                                                st(F, K);
                                        } while (K !== 0);
                                        F.gzhead.hcrc &&
                                            F.pending > D &&
                                            (I.adler = c(
                                                I.adler,
                                                F.pending_buf,
                                                F.pending - D,
                                                D
                                            )),
                                            K === 0 &&
                                                ((F.gzindex = 0),
                                                (F.status = 91));
                                    } else F.status = 91;
                                if (F.status === 91)
                                    if (F.gzhead.comment) {
                                        D = F.pending;
                                        do {
                                            if (
                                                F.pending ===
                                                    F.pending_buf_size &&
                                                (F.gzhead.hcrc &&
                                                    F.pending > D &&
                                                    (I.adler = c(
                                                        I.adler,
                                                        F.pending_buf,
                                                        F.pending - D,
                                                        D
                                                    )),
                                                z(I),
                                                (D = F.pending),
                                                F.pending ===
                                                    F.pending_buf_size)
                                            ) {
                                                K = 1;
                                                break;
                                            }
                                            (K =
                                                F.gzindex <
                                                F.gzhead.comment.length
                                                    ? 255 &
                                                      F.gzhead.comment.charCodeAt(
                                                          F.gzindex++
                                                      )
                                                    : 0),
                                                st(F, K);
                                        } while (K !== 0);
                                        F.gzhead.hcrc &&
                                            F.pending > D &&
                                            (I.adler = c(
                                                I.adler,
                                                F.pending_buf,
                                                F.pending - D,
                                                D
                                            )),
                                            K === 0 && (F.status = 103);
                                    } else F.status = 103;
                                if (
                                    (F.status === 103 &&
                                        (F.gzhead.hcrc
                                            ? (F.pending + 2 >
                                                  F.pending_buf_size && z(I),
                                              F.pending + 2 <=
                                                  F.pending_buf_size &&
                                                  (st(F, 255 & I.adler),
                                                  st(F, (I.adler >> 8) & 255),
                                                  (I.adler = 0),
                                                  (F.status = O)))
                                            : (F.status = O)),
                                    F.pending !== 0)
                                ) {
                                    if ((z(I), I.avail_out === 0))
                                        return (F.last_flush = -1), p;
                                } else if (
                                    I.avail_in === 0 &&
                                    G(ot) <= G(Q) &&
                                    ot !== d
                                )
                                    return X(I, -5);
                                if (F.status === 666 && I.avail_in !== 0)
                                    return X(I, -5);
                                if (
                                    I.avail_in !== 0 ||
                                    F.lookahead !== 0 ||
                                    (ot !== h && F.status !== 666)
                                ) {
                                    var lt =
                                        F.strategy === 2
                                            ? (function (Z, ht) {
                                                  for (var xt; ; ) {
                                                      if (
                                                          Z.lookahead === 0 &&
                                                          (pt(Z),
                                                          Z.lookahead === 0)
                                                      ) {
                                                          if (ht === h)
                                                              return S;
                                                          break;
                                                      }
                                                      if (
                                                          ((Z.match_length = 0),
                                                          (xt = a._tr_tally(
                                                              Z,
                                                              0,
                                                              Z.window[
                                                                  Z.strstart
                                                              ]
                                                          )),
                                                          Z.lookahead--,
                                                          Z.strstart++,
                                                          xt &&
                                                              (M(Z, !1),
                                                              Z.strm
                                                                  .avail_out ===
                                                                  0))
                                                      )
                                                          return S;
                                                  }
                                                  return (
                                                      (Z.insert = 0),
                                                      ht === d
                                                          ? (M(Z, !0),
                                                            Z.strm.avail_out ===
                                                            0
                                                                ? q
                                                                : W)
                                                          : Z.last_lit &&
                                                            (M(Z, !1),
                                                            Z.strm.avail_out ===
                                                                0)
                                                          ? S
                                                          : L
                                                  );
                                              })(F, ot)
                                            : F.strategy === 3
                                            ? (function (Z, ht) {
                                                  for (
                                                      var xt,
                                                          dt,
                                                          Tt,
                                                          qt,
                                                          Ot = Z.window;
                                                      ;

                                                  ) {
                                                      if (Z.lookahead <= R) {
                                                          if (
                                                              (pt(Z),
                                                              Z.lookahead <=
                                                                  R && ht === h)
                                                          )
                                                              return S;
                                                          if (Z.lookahead === 0)
                                                              break;
                                                      }
                                                      if (
                                                          ((Z.match_length = 0),
                                                          Z.lookahead >= N &&
                                                              0 < Z.strstart &&
                                                              (dt =
                                                                  Ot[
                                                                      (Tt =
                                                                          Z.strstart -
                                                                          1)
                                                                  ]) ===
                                                                  Ot[++Tt] &&
                                                              dt === Ot[++Tt] &&
                                                              dt === Ot[++Tt])
                                                      ) {
                                                          qt = Z.strstart + R;
                                                          do;
                                                          while (
                                                              dt === Ot[++Tt] &&
                                                              dt === Ot[++Tt] &&
                                                              dt === Ot[++Tt] &&
                                                              dt === Ot[++Tt] &&
                                                              dt === Ot[++Tt] &&
                                                              dt === Ot[++Tt] &&
                                                              dt === Ot[++Tt] &&
                                                              dt === Ot[++Tt] &&
                                                              Tt < qt
                                                          );
                                                          (Z.match_length =
                                                              R - (qt - Tt)),
                                                              Z.match_length >
                                                                  Z.lookahead &&
                                                                  (Z.match_length =
                                                                      Z.lookahead);
                                                      }
                                                      if (
                                                          (Z.match_length >= N
                                                              ? ((xt =
                                                                    a._tr_tally(
                                                                        Z,
                                                                        1,
                                                                        Z.match_length -
                                                                            N
                                                                    )),
                                                                (Z.lookahead -=
                                                                    Z.match_length),
                                                                (Z.strstart +=
                                                                    Z.match_length),
                                                                (Z.match_length = 0))
                                                              : ((xt =
                                                                    a._tr_tally(
                                                                        Z,
                                                                        0,
                                                                        Z
                                                                            .window[
                                                                            Z
                                                                                .strstart
                                                                        ]
                                                                    )),
                                                                Z.lookahead--,
                                                                Z.strstart++),
                                                          xt &&
                                                              (M(Z, !1),
                                                              Z.strm
                                                                  .avail_out ===
                                                                  0))
                                                      )
                                                          return S;
                                                  }
                                                  return (
                                                      (Z.insert = 0),
                                                      ht === d
                                                          ? (M(Z, !0),
                                                            Z.strm.avail_out ===
                                                            0
                                                                ? q
                                                                : W)
                                                          : Z.last_lit &&
                                                            (M(Z, !1),
                                                            Z.strm.avail_out ===
                                                                0)
                                                          ? S
                                                          : L
                                                  );
                                              })(F, ot)
                                            : o[F.level].func(F, ot);
                                    if (
                                        ((lt !== q && lt !== W) ||
                                            (F.status = 666),
                                        lt === S || lt === q)
                                    )
                                        return (
                                            I.avail_out === 0 &&
                                                (F.last_flush = -1),
                                            p
                                        );
                                    if (
                                        lt === L &&
                                        (ot === 1
                                            ? a._tr_align(F)
                                            : ot !== 5 &&
                                              (a._tr_stored_block(F, 0, 0, !1),
                                              ot === 3 &&
                                                  (et(F.head),
                                                  F.lookahead === 0 &&
                                                      ((F.strstart = 0),
                                                      (F.block_start = 0),
                                                      (F.insert = 0)))),
                                        z(I),
                                        I.avail_out === 0)
                                    )
                                        return (F.last_flush = -1), p;
                                }
                                return ot !== d
                                    ? p
                                    : F.wrap <= 0
                                    ? 1
                                    : (F.wrap === 2
                                          ? (st(F, 255 & I.adler),
                                            st(F, (I.adler >> 8) & 255),
                                            st(F, (I.adler >> 16) & 255),
                                            st(F, (I.adler >> 24) & 255),
                                            st(F, 255 & I.total_in),
                                            st(F, (I.total_in >> 8) & 255),
                                            st(F, (I.total_in >> 16) & 255),
                                            st(F, (I.total_in >> 24) & 255))
                                          : (nt(F, I.adler >>> 16),
                                            nt(F, 65535 & I.adler)),
                                      z(I),
                                      0 < F.wrap && (F.wrap = -F.wrap),
                                      F.pending !== 0 ? p : 1);
                            }),
                            (r.deflateEnd = function (I) {
                                var ot;
                                return I && I.state
                                    ? (ot = I.state.status) !== E &&
                                      ot !== 69 &&
                                      ot !== 73 &&
                                      ot !== 91 &&
                                      ot !== 103 &&
                                      ot !== O &&
                                      ot !== 666
                                        ? X(I, f)
                                        : ((I.state = null),
                                          ot === O ? X(I, -3) : p)
                                    : f;
                            }),
                            (r.deflateSetDictionary = function (I, ot) {
                                var Q,
                                    F,
                                    D,
                                    K,
                                    at,
                                    lt,
                                    Z,
                                    ht,
                                    xt = ot.length;
                                if (
                                    !I ||
                                    !I.state ||
                                    (K = (Q = I.state).wrap) === 2 ||
                                    (K === 1 && Q.status !== E) ||
                                    Q.lookahead
                                )
                                    return f;
                                for (
                                    K === 1 &&
                                        (I.adler = l(I.adler, ot, xt, 0)),
                                        Q.wrap = 0,
                                        xt >= Q.w_size &&
                                            (K === 0 &&
                                                (et(Q.head),
                                                (Q.strstart = 0),
                                                (Q.block_start = 0),
                                                (Q.insert = 0)),
                                            (ht = new i.Buf8(Q.w_size)),
                                            i.arraySet(
                                                ht,
                                                ot,
                                                xt - Q.w_size,
                                                Q.w_size,
                                                0
                                            ),
                                            (ot = ht),
                                            (xt = Q.w_size)),
                                        at = I.avail_in,
                                        lt = I.next_in,
                                        Z = I.input,
                                        I.avail_in = xt,
                                        I.next_in = 0,
                                        I.input = ot,
                                        pt(Q);
                                    Q.lookahead >= N;

                                ) {
                                    for (
                                        F = Q.strstart,
                                            D = Q.lookahead - (N - 1);
                                        (Q.ins_h =
                                            ((Q.ins_h << Q.hash_shift) ^
                                                Q.window[F + N - 1]) &
                                            Q.hash_mask),
                                            (Q.prev[F & Q.w_mask] =
                                                Q.head[Q.ins_h]),
                                            (Q.head[Q.ins_h] = F),
                                            F++,
                                            --D;

                                    );
                                    (Q.strstart = F),
                                        (Q.lookahead = N - 1),
                                        pt(Q);
                                }
                                return (
                                    (Q.strstart += Q.lookahead),
                                    (Q.block_start = Q.strstart),
                                    (Q.insert = Q.lookahead),
                                    (Q.lookahead = 0),
                                    (Q.match_length = Q.prev_length = N - 1),
                                    (Q.match_available = 0),
                                    (I.next_in = lt),
                                    (I.input = Z),
                                    (I.avail_in = at),
                                    (Q.wrap = K),
                                    p
                                );
                            }),
                            (r.deflateInfo =
                                'pako deflate (from Nodeca project)');
                    },
                    {
                        '../utils/common': 41,
                        './adler32': 43,
                        './crc32': 45,
                        './messages': 51,
                        './trees': 52,
                    },
                ],
                47: [
                    function (e, s, r) {
                        s.exports = function () {
                            (this.text = 0),
                                (this.time = 0),
                                (this.xflags = 0),
                                (this.os = 0),
                                (this.extra = null),
                                (this.extra_len = 0),
                                (this.name = ''),
                                (this.comment = ''),
                                (this.hcrc = 0),
                                (this.done = !1);
                        };
                    },
                    {},
                ],
                48: [
                    function (e, s, r) {
                        s.exports = function (o, i) {
                            var a,
                                l,
                                c,
                                u,
                                h,
                                d,
                                p,
                                f,
                                m,
                                g,
                                y,
                                b,
                                w,
                                x,
                                v,
                                C,
                                $,
                                T,
                                N,
                                R,
                                P,
                                E,
                                O,
                                S,
                                L;
                            (a = o.state),
                                (l = o.next_in),
                                (S = o.input),
                                (c = l + (o.avail_in - 5)),
                                (u = o.next_out),
                                (L = o.output),
                                (h = u - (i - o.avail_out)),
                                (d = u + (o.avail_out - 257)),
                                (p = a.dmax),
                                (f = a.wsize),
                                (m = a.whave),
                                (g = a.wnext),
                                (y = a.window),
                                (b = a.hold),
                                (w = a.bits),
                                (x = a.lencode),
                                (v = a.distcode),
                                (C = (1 << a.lenbits) - 1),
                                ($ = (1 << a.distbits) - 1);
                            t: do {
                                w < 15 &&
                                    ((b += S[l++] << w),
                                    (w += 8),
                                    (b += S[l++] << w),
                                    (w += 8)),
                                    (T = x[b & C]);
                                e: for (;;) {
                                    if (
                                        ((b >>>= N = T >>> 24),
                                        (w -= N),
                                        (N = (T >>> 16) & 255) === 0)
                                    )
                                        L[u++] = 65535 & T;
                                    else {
                                        if (!(16 & N)) {
                                            if (!(64 & N)) {
                                                T =
                                                    x[
                                                        (65535 & T) +
                                                            (b & ((1 << N) - 1))
                                                    ];
                                                continue e;
                                            }
                                            if (32 & N) {
                                                a.mode = 12;
                                                break t;
                                            }
                                            (o.msg =
                                                'invalid literal/length code'),
                                                (a.mode = 30);
                                            break t;
                                        }
                                        (R = 65535 & T),
                                            (N &= 15) &&
                                                (w < N &&
                                                    ((b += S[l++] << w),
                                                    (w += 8)),
                                                (R += b & ((1 << N) - 1)),
                                                (b >>>= N),
                                                (w -= N)),
                                            w < 15 &&
                                                ((b += S[l++] << w),
                                                (w += 8),
                                                (b += S[l++] << w),
                                                (w += 8)),
                                            (T = v[b & $]);
                                        n: for (;;) {
                                            if (
                                                ((b >>>= N = T >>> 24),
                                                (w -= N),
                                                !(16 & (N = (T >>> 16) & 255)))
                                            ) {
                                                if (!(64 & N)) {
                                                    T =
                                                        v[
                                                            (65535 & T) +
                                                                (b &
                                                                    ((1 << N) -
                                                                        1))
                                                        ];
                                                    continue n;
                                                }
                                                (o.msg =
                                                    'invalid distance code'),
                                                    (a.mode = 30);
                                                break t;
                                            }
                                            if (
                                                ((P = 65535 & T),
                                                w < (N &= 15) &&
                                                    ((b += S[l++] << w),
                                                    (w += 8) < N &&
                                                        ((b += S[l++] << w),
                                                        (w += 8))),
                                                p < (P += b & ((1 << N) - 1)))
                                            ) {
                                                (o.msg =
                                                    'invalid distance too far back'),
                                                    (a.mode = 30);
                                                break t;
                                            }
                                            if (
                                                ((b >>>= N),
                                                (w -= N),
                                                (N = u - h) < P)
                                            ) {
                                                if (m < (N = P - N) && a.sane) {
                                                    (o.msg =
                                                        'invalid distance too far back'),
                                                        (a.mode = 30);
                                                    break t;
                                                }
                                                if (((O = y), (E = 0) === g)) {
                                                    if (((E += f - N), N < R)) {
                                                        for (
                                                            R -= N;
                                                            (L[u++] = y[E++]),
                                                                --N;

                                                        );
                                                        (E = u - P), (O = L);
                                                    }
                                                } else if (g < N) {
                                                    if (
                                                        ((E += f + g - N),
                                                        (N -= g) < R)
                                                    ) {
                                                        for (
                                                            R -= N;
                                                            (L[u++] = y[E++]),
                                                                --N;

                                                        );
                                                        if (((E = 0), g < R)) {
                                                            for (
                                                                R -= N = g;
                                                                (L[u++] =
                                                                    y[E++]),
                                                                    --N;

                                                            );
                                                            (E = u - P),
                                                                (O = L);
                                                        }
                                                    }
                                                } else if (
                                                    ((E += g - N), N < R)
                                                ) {
                                                    for (
                                                        R -= N;
                                                        (L[u++] = y[E++]), --N;

                                                    );
                                                    (E = u - P), (O = L);
                                                }
                                                for (; 2 < R; )
                                                    (L[u++] = O[E++]),
                                                        (L[u++] = O[E++]),
                                                        (L[u++] = O[E++]),
                                                        (R -= 3);
                                                R &&
                                                    ((L[u++] = O[E++]),
                                                    1 < R && (L[u++] = O[E++]));
                                            } else {
                                                for (
                                                    E = u - P;
                                                    (L[u++] = L[E++]),
                                                        (L[u++] = L[E++]),
                                                        (L[u++] = L[E++]),
                                                        2 < (R -= 3);

                                                );
                                                R &&
                                                    ((L[u++] = L[E++]),
                                                    1 < R && (L[u++] = L[E++]));
                                            }
                                            break;
                                        }
                                    }
                                    break;
                                }
                            } while (l < c && u < d);
                            (l -= R = w >> 3),
                                (b &= (1 << (w -= R << 3)) - 1),
                                (o.next_in = l),
                                (o.next_out = u),
                                (o.avail_in = l < c ? c - l + 5 : 5 - (l - c)),
                                (o.avail_out =
                                    u < d ? d - u + 257 : 257 - (u - d)),
                                (a.hold = b),
                                (a.bits = w);
                        };
                    },
                    {},
                ],
                49: [
                    function (e, s, r) {
                        var o = e('../utils/common'),
                            i = e('./adler32'),
                            a = e('./crc32'),
                            l = e('./inffast'),
                            c = e('./inftrees'),
                            u = 1,
                            h = 2,
                            d = 0,
                            p = -2,
                            f = 1,
                            m = 852,
                            g = 592;
                        function y(E) {
                            return (
                                ((E >>> 24) & 255) +
                                ((E >>> 8) & 65280) +
                                ((65280 & E) << 8) +
                                ((255 & E) << 24)
                            );
                        }
                        function b() {
                            (this.mode = 0),
                                (this.last = !1),
                                (this.wrap = 0),
                                (this.havedict = !1),
                                (this.flags = 0),
                                (this.dmax = 0),
                                (this.check = 0),
                                (this.total = 0),
                                (this.head = null),
                                (this.wbits = 0),
                                (this.wsize = 0),
                                (this.whave = 0),
                                (this.wnext = 0),
                                (this.window = null),
                                (this.hold = 0),
                                (this.bits = 0),
                                (this.length = 0),
                                (this.offset = 0),
                                (this.extra = 0),
                                (this.lencode = null),
                                (this.distcode = null),
                                (this.lenbits = 0),
                                (this.distbits = 0),
                                (this.ncode = 0),
                                (this.nlen = 0),
                                (this.ndist = 0),
                                (this.have = 0),
                                (this.next = null),
                                (this.lens = new o.Buf16(320)),
                                (this.work = new o.Buf16(288)),
                                (this.lendyn = null),
                                (this.distdyn = null),
                                (this.sane = 0),
                                (this.back = 0),
                                (this.was = 0);
                        }
                        function w(E) {
                            var O;
                            return E && E.state
                                ? ((O = E.state),
                                  (E.total_in = E.total_out = O.total = 0),
                                  (E.msg = ''),
                                  O.wrap && (E.adler = 1 & O.wrap),
                                  (O.mode = f),
                                  (O.last = 0),
                                  (O.havedict = 0),
                                  (O.dmax = 32768),
                                  (O.head = null),
                                  (O.hold = 0),
                                  (O.bits = 0),
                                  (O.lencode = O.lendyn = new o.Buf32(m)),
                                  (O.distcode = O.distdyn = new o.Buf32(g)),
                                  (O.sane = 1),
                                  (O.back = -1),
                                  d)
                                : p;
                        }
                        function x(E) {
                            var O;
                            return E && E.state
                                ? (((O = E.state).wsize = 0),
                                  (O.whave = 0),
                                  (O.wnext = 0),
                                  w(E))
                                : p;
                        }
                        function v(E, O) {
                            var S, L;
                            return E && E.state
                                ? ((L = E.state),
                                  O < 0
                                      ? ((S = 0), (O = -O))
                                      : ((S = 1 + (O >> 4)),
                                        O < 48 && (O &= 15)),
                                  O && (O < 8 || 15 < O)
                                      ? p
                                      : (L.window !== null &&
                                            L.wbits !== O &&
                                            (L.window = null),
                                        (L.wrap = S),
                                        (L.wbits = O),
                                        x(E)))
                                : p;
                        }
                        function C(E, O) {
                            var S, L;
                            return E
                                ? ((L = new b()),
                                  ((E.state = L).window = null),
                                  (S = v(E, O)) !== d && (E.state = null),
                                  S)
                                : p;
                        }
                        var $,
                            T,
                            N = !0;
                        function R(E) {
                            if (N) {
                                var O;
                                for (
                                    $ = new o.Buf32(512),
                                        T = new o.Buf32(32),
                                        O = 0;
                                    O < 144;

                                )
                                    E.lens[O++] = 8;
                                for (; O < 256; ) E.lens[O++] = 9;
                                for (; O < 280; ) E.lens[O++] = 7;
                                for (; O < 288; ) E.lens[O++] = 8;
                                for (
                                    c(u, E.lens, 0, 288, $, 0, E.work, {
                                        bits: 9,
                                    }),
                                        O = 0;
                                    O < 32;

                                )
                                    E.lens[O++] = 5;
                                c(h, E.lens, 0, 32, T, 0, E.work, { bits: 5 }),
                                    (N = !1);
                            }
                            (E.lencode = $),
                                (E.lenbits = 9),
                                (E.distcode = T),
                                (E.distbits = 5);
                        }
                        function P(E, O, S, L) {
                            var q,
                                W = E.state;
                            return (
                                W.window === null &&
                                    ((W.wsize = 1 << W.wbits),
                                    (W.wnext = 0),
                                    (W.whave = 0),
                                    (W.window = new o.Buf8(W.wsize))),
                                L >= W.wsize
                                    ? (o.arraySet(
                                          W.window,
                                          O,
                                          S - W.wsize,
                                          W.wsize,
                                          0
                                      ),
                                      (W.wnext = 0),
                                      (W.whave = W.wsize))
                                    : (L < (q = W.wsize - W.wnext) && (q = L),
                                      o.arraySet(
                                          W.window,
                                          O,
                                          S - L,
                                          q,
                                          W.wnext
                                      ),
                                      (L -= q)
                                          ? (o.arraySet(
                                                W.window,
                                                O,
                                                S - L,
                                                L,
                                                0
                                            ),
                                            (W.wnext = L),
                                            (W.whave = W.wsize))
                                          : ((W.wnext += q),
                                            W.wnext === W.wsize &&
                                                (W.wnext = 0),
                                            W.whave < W.wsize &&
                                                (W.whave += q))),
                                0
                            );
                        }
                        (r.inflateReset = x),
                            (r.inflateReset2 = v),
                            (r.inflateResetKeep = w),
                            (r.inflateInit = function (E) {
                                return C(E, 15);
                            }),
                            (r.inflateInit2 = C),
                            (r.inflate = function (E, O) {
                                var S,
                                    L,
                                    q,
                                    W,
                                    X,
                                    G,
                                    et,
                                    z,
                                    M,
                                    st,
                                    nt,
                                    J,
                                    pt,
                                    wt,
                                    ft,
                                    mt,
                                    Nt,
                                    $t,
                                    zt,
                                    Vt,
                                    I,
                                    ot,
                                    Q,
                                    F,
                                    D = 0,
                                    K = new o.Buf8(4),
                                    at = [
                                        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4,
                                        12, 3, 13, 2, 14, 1, 15,
                                    ];
                                if (
                                    !E ||
                                    !E.state ||
                                    !E.output ||
                                    (!E.input && E.avail_in !== 0)
                                )
                                    return p;
                                (S = E.state).mode === 12 && (S.mode = 13),
                                    (X = E.next_out),
                                    (q = E.output),
                                    (et = E.avail_out),
                                    (W = E.next_in),
                                    (L = E.input),
                                    (G = E.avail_in),
                                    (z = S.hold),
                                    (M = S.bits),
                                    (st = G),
                                    (nt = et),
                                    (ot = d);
                                t: for (;;)
                                    switch (S.mode) {
                                        case f:
                                            if (S.wrap === 0) {
                                                S.mode = 13;
                                                break;
                                            }
                                            for (; M < 16; ) {
                                                if (G === 0) break t;
                                                G--,
                                                    (z += L[W++] << M),
                                                    (M += 8);
                                            }
                                            if (2 & S.wrap && z === 35615) {
                                                (K[(S.check = 0)] = 255 & z),
                                                    (K[1] = (z >>> 8) & 255),
                                                    (S.check = a(
                                                        S.check,
                                                        K,
                                                        2,
                                                        0
                                                    )),
                                                    (M = z = 0),
                                                    (S.mode = 2);
                                                break;
                                            }
                                            if (
                                                ((S.flags = 0),
                                                S.head && (S.head.done = !1),
                                                !(1 & S.wrap) ||
                                                    (((255 & z) << 8) +
                                                        (z >> 8)) %
                                                        31)
                                            ) {
                                                (E.msg =
                                                    'incorrect header check'),
                                                    (S.mode = 30);
                                                break;
                                            }
                                            if ((15 & z) != 8) {
                                                (E.msg =
                                                    'unknown compression method'),
                                                    (S.mode = 30);
                                                break;
                                            }
                                            if (
                                                ((M -= 4),
                                                (I = 8 + (15 & (z >>>= 4))),
                                                S.wbits === 0)
                                            )
                                                S.wbits = I;
                                            else if (I > S.wbits) {
                                                (E.msg = 'invalid window size'),
                                                    (S.mode = 30);
                                                break;
                                            }
                                            (S.dmax = 1 << I),
                                                (E.adler = S.check = 1),
                                                (S.mode = 512 & z ? 10 : 12),
                                                (M = z = 0);
                                            break;
                                        case 2:
                                            for (; M < 16; ) {
                                                if (G === 0) break t;
                                                G--,
                                                    (z += L[W++] << M),
                                                    (M += 8);
                                            }
                                            if (
                                                ((S.flags = z),
                                                (255 & S.flags) != 8)
                                            ) {
                                                (E.msg =
                                                    'unknown compression method'),
                                                    (S.mode = 30);
                                                break;
                                            }
                                            if (57344 & S.flags) {
                                                (E.msg =
                                                    'unknown header flags set'),
                                                    (S.mode = 30);
                                                break;
                                            }
                                            S.head &&
                                                (S.head.text = (z >> 8) & 1),
                                                512 & S.flags &&
                                                    ((K[0] = 255 & z),
                                                    (K[1] = (z >>> 8) & 255),
                                                    (S.check = a(
                                                        S.check,
                                                        K,
                                                        2,
                                                        0
                                                    ))),
                                                (M = z = 0),
                                                (S.mode = 3);
                                        case 3:
                                            for (; M < 32; ) {
                                                if (G === 0) break t;
                                                G--,
                                                    (z += L[W++] << M),
                                                    (M += 8);
                                            }
                                            S.head && (S.head.time = z),
                                                512 & S.flags &&
                                                    ((K[0] = 255 & z),
                                                    (K[1] = (z >>> 8) & 255),
                                                    (K[2] = (z >>> 16) & 255),
                                                    (K[3] = (z >>> 24) & 255),
                                                    (S.check = a(
                                                        S.check,
                                                        K,
                                                        4,
                                                        0
                                                    ))),
                                                (M = z = 0),
                                                (S.mode = 4);
                                        case 4:
                                            for (; M < 16; ) {
                                                if (G === 0) break t;
                                                G--,
                                                    (z += L[W++] << M),
                                                    (M += 8);
                                            }
                                            S.head &&
                                                ((S.head.xflags = 255 & z),
                                                (S.head.os = z >> 8)),
                                                512 & S.flags &&
                                                    ((K[0] = 255 & z),
                                                    (K[1] = (z >>> 8) & 255),
                                                    (S.check = a(
                                                        S.check,
                                                        K,
                                                        2,
                                                        0
                                                    ))),
                                                (M = z = 0),
                                                (S.mode = 5);
                                        case 5:
                                            if (1024 & S.flags) {
                                                for (; M < 16; ) {
                                                    if (G === 0) break t;
                                                    G--,
                                                        (z += L[W++] << M),
                                                        (M += 8);
                                                }
                                                (S.length = z),
                                                    S.head &&
                                                        (S.head.extra_len = z),
                                                    512 & S.flags &&
                                                        ((K[0] = 255 & z),
                                                        (K[1] =
                                                            (z >>> 8) & 255),
                                                        (S.check = a(
                                                            S.check,
                                                            K,
                                                            2,
                                                            0
                                                        ))),
                                                    (M = z = 0);
                                            } else
                                                S.head && (S.head.extra = null);
                                            S.mode = 6;
                                        case 6:
                                            if (
                                                1024 & S.flags &&
                                                (G < (J = S.length) && (J = G),
                                                J &&
                                                    (S.head &&
                                                        ((I =
                                                            S.head.extra_len -
                                                            S.length),
                                                        S.head.extra ||
                                                            (S.head.extra =
                                                                new Array(
                                                                    S.head.extra_len
                                                                )),
                                                        o.arraySet(
                                                            S.head.extra,
                                                            L,
                                                            W,
                                                            J,
                                                            I
                                                        )),
                                                    512 & S.flags &&
                                                        (S.check = a(
                                                            S.check,
                                                            L,
                                                            J,
                                                            W
                                                        )),
                                                    (G -= J),
                                                    (W += J),
                                                    (S.length -= J)),
                                                S.length)
                                            )
                                                break t;
                                            (S.length = 0), (S.mode = 7);
                                        case 7:
                                            if (2048 & S.flags) {
                                                if (G === 0) break t;
                                                for (
                                                    J = 0;
                                                    (I = L[W + J++]),
                                                        S.head &&
                                                            I &&
                                                            S.length < 65536 &&
                                                            (S.head.name +=
                                                                String.fromCharCode(
                                                                    I
                                                                )),
                                                        I && J < G;

                                                );
                                                if (
                                                    (512 & S.flags &&
                                                        (S.check = a(
                                                            S.check,
                                                            L,
                                                            J,
                                                            W
                                                        )),
                                                    (G -= J),
                                                    (W += J),
                                                    I)
                                                )
                                                    break t;
                                            } else
                                                S.head && (S.head.name = null);
                                            (S.length = 0), (S.mode = 8);
                                        case 8:
                                            if (4096 & S.flags) {
                                                if (G === 0) break t;
                                                for (
                                                    J = 0;
                                                    (I = L[W + J++]),
                                                        S.head &&
                                                            I &&
                                                            S.length < 65536 &&
                                                            (S.head.comment +=
                                                                String.fromCharCode(
                                                                    I
                                                                )),
                                                        I && J < G;

                                                );
                                                if (
                                                    (512 & S.flags &&
                                                        (S.check = a(
                                                            S.check,
                                                            L,
                                                            J,
                                                            W
                                                        )),
                                                    (G -= J),
                                                    (W += J),
                                                    I)
                                                )
                                                    break t;
                                            } else
                                                S.head &&
                                                    (S.head.comment = null);
                                            S.mode = 9;
                                        case 9:
                                            if (512 & S.flags) {
                                                for (; M < 16; ) {
                                                    if (G === 0) break t;
                                                    G--,
                                                        (z += L[W++] << M),
                                                        (M += 8);
                                                }
                                                if (z !== (65535 & S.check)) {
                                                    (E.msg =
                                                        'header crc mismatch'),
                                                        (S.mode = 30);
                                                    break;
                                                }
                                                M = z = 0;
                                            }
                                            S.head &&
                                                ((S.head.hcrc =
                                                    (S.flags >> 9) & 1),
                                                (S.head.done = !0)),
                                                (E.adler = S.check = 0),
                                                (S.mode = 12);
                                            break;
                                        case 10:
                                            for (; M < 32; ) {
                                                if (G === 0) break t;
                                                G--,
                                                    (z += L[W++] << M),
                                                    (M += 8);
                                            }
                                            (E.adler = S.check = y(z)),
                                                (M = z = 0),
                                                (S.mode = 11);
                                        case 11:
                                            if (S.havedict === 0)
                                                return (
                                                    (E.next_out = X),
                                                    (E.avail_out = et),
                                                    (E.next_in = W),
                                                    (E.avail_in = G),
                                                    (S.hold = z),
                                                    (S.bits = M),
                                                    2
                                                );
                                            (E.adler = S.check = 1),
                                                (S.mode = 12);
                                        case 12:
                                            if (O === 5 || O === 6) break t;
                                        case 13:
                                            if (S.last) {
                                                (z >>>= 7 & M),
                                                    (M -= 7 & M),
                                                    (S.mode = 27);
                                                break;
                                            }
                                            for (; M < 3; ) {
                                                if (G === 0) break t;
                                                G--,
                                                    (z += L[W++] << M),
                                                    (M += 8);
                                            }
                                            switch (
                                                ((S.last = 1 & z),
                                                (M -= 1),
                                                3 & (z >>>= 1))
                                            ) {
                                                case 0:
                                                    S.mode = 14;
                                                    break;
                                                case 1:
                                                    if (
                                                        (R(S),
                                                        (S.mode = 20),
                                                        O !== 6)
                                                    )
                                                        break;
                                                    (z >>>= 2), (M -= 2);
                                                    break t;
                                                case 2:
                                                    S.mode = 17;
                                                    break;
                                                case 3:
                                                    (E.msg =
                                                        'invalid block type'),
                                                        (S.mode = 30);
                                            }
                                            (z >>>= 2), (M -= 2);
                                            break;
                                        case 14:
                                            for (
                                                z >>>= 7 & M, M -= 7 & M;
                                                M < 32;

                                            ) {
                                                if (G === 0) break t;
                                                G--,
                                                    (z += L[W++] << M),
                                                    (M += 8);
                                            }
                                            if (
                                                (65535 & z) !=
                                                ((z >>> 16) ^ 65535)
                                            ) {
                                                (E.msg =
                                                    'invalid stored block lengths'),
                                                    (S.mode = 30);
                                                break;
                                            }
                                            if (
                                                ((S.length = 65535 & z),
                                                (M = z = 0),
                                                (S.mode = 15),
                                                O === 6)
                                            )
                                                break t;
                                        case 15:
                                            S.mode = 16;
                                        case 16:
                                            if ((J = S.length)) {
                                                if (
                                                    (G < J && (J = G),
                                                    et < J && (J = et),
                                                    J === 0)
                                                )
                                                    break t;
                                                o.arraySet(q, L, W, J, X),
                                                    (G -= J),
                                                    (W += J),
                                                    (et -= J),
                                                    (X += J),
                                                    (S.length -= J);
                                                break;
                                            }
                                            S.mode = 12;
                                            break;
                                        case 17:
                                            for (; M < 14; ) {
                                                if (G === 0) break t;
                                                G--,
                                                    (z += L[W++] << M),
                                                    (M += 8);
                                            }
                                            if (
                                                ((S.nlen = 257 + (31 & z)),
                                                (z >>>= 5),
                                                (M -= 5),
                                                (S.ndist = 1 + (31 & z)),
                                                (z >>>= 5),
                                                (M -= 5),
                                                (S.ncode = 4 + (15 & z)),
                                                (z >>>= 4),
                                                (M -= 4),
                                                286 < S.nlen || 30 < S.ndist)
                                            ) {
                                                (E.msg =
                                                    'too many length or distance symbols'),
                                                    (S.mode = 30);
                                                break;
                                            }
                                            (S.have = 0), (S.mode = 18);
                                        case 18:
                                            for (; S.have < S.ncode; ) {
                                                for (; M < 3; ) {
                                                    if (G === 0) break t;
                                                    G--,
                                                        (z += L[W++] << M),
                                                        (M += 8);
                                                }
                                                (S.lens[at[S.have++]] = 7 & z),
                                                    (z >>>= 3),
                                                    (M -= 3);
                                            }
                                            for (; S.have < 19; )
                                                S.lens[at[S.have++]] = 0;
                                            if (
                                                ((S.lencode = S.lendyn),
                                                (S.lenbits = 7),
                                                (Q = { bits: S.lenbits }),
                                                (ot = c(
                                                    0,
                                                    S.lens,
                                                    0,
                                                    19,
                                                    S.lencode,
                                                    0,
                                                    S.work,
                                                    Q
                                                )),
                                                (S.lenbits = Q.bits),
                                                ot)
                                            ) {
                                                (E.msg =
                                                    'invalid code lengths set'),
                                                    (S.mode = 30);
                                                break;
                                            }
                                            (S.have = 0), (S.mode = 19);
                                        case 19:
                                            for (
                                                ;
                                                S.have < S.nlen + S.ndist;

                                            ) {
                                                for (
                                                    ;
                                                    (mt =
                                                        ((D =
                                                            S.lencode[
                                                                z &
                                                                    ((1 <<
                                                                        S.lenbits) -
                                                                        1)
                                                            ]) >>>
                                                            16) &
                                                        255),
                                                        (Nt = 65535 & D),
                                                        !((ft = D >>> 24) <= M);

                                                ) {
                                                    if (G === 0) break t;
                                                    G--,
                                                        (z += L[W++] << M),
                                                        (M += 8);
                                                }
                                                if (Nt < 16)
                                                    (z >>>= ft),
                                                        (M -= ft),
                                                        (S.lens[S.have++] = Nt);
                                                else {
                                                    if (Nt === 16) {
                                                        for (
                                                            F = ft + 2;
                                                            M < F;

                                                        ) {
                                                            if (G === 0)
                                                                break t;
                                                            G--,
                                                                (z +=
                                                                    L[W++] <<
                                                                    M),
                                                                (M += 8);
                                                        }
                                                        if (
                                                            ((z >>>= ft),
                                                            (M -= ft),
                                                            S.have === 0)
                                                        ) {
                                                            (E.msg =
                                                                'invalid bit length repeat'),
                                                                (S.mode = 30);
                                                            break;
                                                        }
                                                        (I =
                                                            S.lens[S.have - 1]),
                                                            (J = 3 + (3 & z)),
                                                            (z >>>= 2),
                                                            (M -= 2);
                                                    } else if (Nt === 17) {
                                                        for (
                                                            F = ft + 3;
                                                            M < F;

                                                        ) {
                                                            if (G === 0)
                                                                break t;
                                                            G--,
                                                                (z +=
                                                                    L[W++] <<
                                                                    M),
                                                                (M += 8);
                                                        }
                                                        (M -= ft),
                                                            (I = 0),
                                                            (J =
                                                                3 +
                                                                (7 &
                                                                    (z >>>=
                                                                        ft))),
                                                            (z >>>= 3),
                                                            (M -= 3);
                                                    } else {
                                                        for (
                                                            F = ft + 7;
                                                            M < F;

                                                        ) {
                                                            if (G === 0)
                                                                break t;
                                                            G--,
                                                                (z +=
                                                                    L[W++] <<
                                                                    M),
                                                                (M += 8);
                                                        }
                                                        (M -= ft),
                                                            (I = 0),
                                                            (J =
                                                                11 +
                                                                (127 &
                                                                    (z >>>=
                                                                        ft))),
                                                            (z >>>= 7),
                                                            (M -= 7);
                                                    }
                                                    if (
                                                        S.have + J >
                                                        S.nlen + S.ndist
                                                    ) {
                                                        (E.msg =
                                                            'invalid bit length repeat'),
                                                            (S.mode = 30);
                                                        break;
                                                    }
                                                    for (; J--; )
                                                        S.lens[S.have++] = I;
                                                }
                                            }
                                            if (S.mode === 30) break;
                                            if (S.lens[256] === 0) {
                                                (E.msg =
                                                    'invalid code -- missing end-of-block'),
                                                    (S.mode = 30);
                                                break;
                                            }
                                            if (
                                                ((S.lenbits = 9),
                                                (Q = { bits: S.lenbits }),
                                                (ot = c(
                                                    u,
                                                    S.lens,
                                                    0,
                                                    S.nlen,
                                                    S.lencode,
                                                    0,
                                                    S.work,
                                                    Q
                                                )),
                                                (S.lenbits = Q.bits),
                                                ot)
                                            ) {
                                                (E.msg =
                                                    'invalid literal/lengths set'),
                                                    (S.mode = 30);
                                                break;
                                            }
                                            if (
                                                ((S.distbits = 6),
                                                (S.distcode = S.distdyn),
                                                (Q = { bits: S.distbits }),
                                                (ot = c(
                                                    h,
                                                    S.lens,
                                                    S.nlen,
                                                    S.ndist,
                                                    S.distcode,
                                                    0,
                                                    S.work,
                                                    Q
                                                )),
                                                (S.distbits = Q.bits),
                                                ot)
                                            ) {
                                                (E.msg =
                                                    'invalid distances set'),
                                                    (S.mode = 30);
                                                break;
                                            }
                                            if (((S.mode = 20), O === 6))
                                                break t;
                                        case 20:
                                            S.mode = 21;
                                        case 21:
                                            if (6 <= G && 258 <= et) {
                                                (E.next_out = X),
                                                    (E.avail_out = et),
                                                    (E.next_in = W),
                                                    (E.avail_in = G),
                                                    (S.hold = z),
                                                    (S.bits = M),
                                                    l(E, nt),
                                                    (X = E.next_out),
                                                    (q = E.output),
                                                    (et = E.avail_out),
                                                    (W = E.next_in),
                                                    (L = E.input),
                                                    (G = E.avail_in),
                                                    (z = S.hold),
                                                    (M = S.bits),
                                                    S.mode === 12 &&
                                                        (S.back = -1);
                                                break;
                                            }
                                            for (
                                                S.back = 0;
                                                (mt =
                                                    ((D =
                                                        S.lencode[
                                                            z &
                                                                ((1 <<
                                                                    S.lenbits) -
                                                                    1)
                                                        ]) >>>
                                                        16) &
                                                    255),
                                                    (Nt = 65535 & D),
                                                    !((ft = D >>> 24) <= M);

                                            ) {
                                                if (G === 0) break t;
                                                G--,
                                                    (z += L[W++] << M),
                                                    (M += 8);
                                            }
                                            if (mt && !(240 & mt)) {
                                                for (
                                                    $t = ft, zt = mt, Vt = Nt;
                                                    (mt =
                                                        ((D =
                                                            S.lencode[
                                                                Vt +
                                                                    ((z &
                                                                        ((1 <<
                                                                            ($t +
                                                                                zt)) -
                                                                            1)) >>
                                                                        $t)
                                                            ]) >>>
                                                            16) &
                                                        255),
                                                        (Nt = 65535 & D),
                                                        !(
                                                            $t +
                                                                (ft =
                                                                    D >>> 24) <=
                                                            M
                                                        );

                                                ) {
                                                    if (G === 0) break t;
                                                    G--,
                                                        (z += L[W++] << M),
                                                        (M += 8);
                                                }
                                                (z >>>= $t),
                                                    (M -= $t),
                                                    (S.back += $t);
                                            }
                                            if (
                                                ((z >>>= ft),
                                                (M -= ft),
                                                (S.back += ft),
                                                (S.length = Nt),
                                                mt === 0)
                                            ) {
                                                S.mode = 26;
                                                break;
                                            }
                                            if (32 & mt) {
                                                (S.back = -1), (S.mode = 12);
                                                break;
                                            }
                                            if (64 & mt) {
                                                (E.msg =
                                                    'invalid literal/length code'),
                                                    (S.mode = 30);
                                                break;
                                            }
                                            (S.extra = 15 & mt), (S.mode = 22);
                                        case 22:
                                            if (S.extra) {
                                                for (F = S.extra; M < F; ) {
                                                    if (G === 0) break t;
                                                    G--,
                                                        (z += L[W++] << M),
                                                        (M += 8);
                                                }
                                                (S.length +=
                                                    z & ((1 << S.extra) - 1)),
                                                    (z >>>= S.extra),
                                                    (M -= S.extra),
                                                    (S.back += S.extra);
                                            }
                                            (S.was = S.length), (S.mode = 23);
                                        case 23:
                                            for (
                                                ;
                                                (mt =
                                                    ((D =
                                                        S.distcode[
                                                            z &
                                                                ((1 <<
                                                                    S.distbits) -
                                                                    1)
                                                        ]) >>>
                                                        16) &
                                                    255),
                                                    (Nt = 65535 & D),
                                                    !((ft = D >>> 24) <= M);

                                            ) {
                                                if (G === 0) break t;
                                                G--,
                                                    (z += L[W++] << M),
                                                    (M += 8);
                                            }
                                            if (!(240 & mt)) {
                                                for (
                                                    $t = ft, zt = mt, Vt = Nt;
                                                    (mt =
                                                        ((D =
                                                            S.distcode[
                                                                Vt +
                                                                    ((z &
                                                                        ((1 <<
                                                                            ($t +
                                                                                zt)) -
                                                                            1)) >>
                                                                        $t)
                                                            ]) >>>
                                                            16) &
                                                        255),
                                                        (Nt = 65535 & D),
                                                        !(
                                                            $t +
                                                                (ft =
                                                                    D >>> 24) <=
                                                            M
                                                        );

                                                ) {
                                                    if (G === 0) break t;
                                                    G--,
                                                        (z += L[W++] << M),
                                                        (M += 8);
                                                }
                                                (z >>>= $t),
                                                    (M -= $t),
                                                    (S.back += $t);
                                            }
                                            if (
                                                ((z >>>= ft),
                                                (M -= ft),
                                                (S.back += ft),
                                                64 & mt)
                                            ) {
                                                (E.msg =
                                                    'invalid distance code'),
                                                    (S.mode = 30);
                                                break;
                                            }
                                            (S.offset = Nt),
                                                (S.extra = 15 & mt),
                                                (S.mode = 24);
                                        case 24:
                                            if (S.extra) {
                                                for (F = S.extra; M < F; ) {
                                                    if (G === 0) break t;
                                                    G--,
                                                        (z += L[W++] << M),
                                                        (M += 8);
                                                }
                                                (S.offset +=
                                                    z & ((1 << S.extra) - 1)),
                                                    (z >>>= S.extra),
                                                    (M -= S.extra),
                                                    (S.back += S.extra);
                                            }
                                            if (S.offset > S.dmax) {
                                                (E.msg =
                                                    'invalid distance too far back'),
                                                    (S.mode = 30);
                                                break;
                                            }
                                            S.mode = 25;
                                        case 25:
                                            if (et === 0) break t;
                                            if (((J = nt - et), S.offset > J)) {
                                                if (
                                                    (J = S.offset - J) >
                                                        S.whave &&
                                                    S.sane
                                                ) {
                                                    (E.msg =
                                                        'invalid distance too far back'),
                                                        (S.mode = 30);
                                                    break;
                                                }
                                                (pt =
                                                    J > S.wnext
                                                        ? ((J -= S.wnext),
                                                          S.wsize - J)
                                                        : S.wnext - J),
                                                    J > S.length &&
                                                        (J = S.length),
                                                    (wt = S.window);
                                            } else
                                                (wt = q),
                                                    (pt = X - S.offset),
                                                    (J = S.length);
                                            for (
                                                et < J && (J = et),
                                                    et -= J,
                                                    S.length -= J;
                                                (q[X++] = wt[pt++]), --J;

                                            );
                                            S.length === 0 && (S.mode = 21);
                                            break;
                                        case 26:
                                            if (et === 0) break t;
                                            (q[X++] = S.length),
                                                et--,
                                                (S.mode = 21);
                                            break;
                                        case 27:
                                            if (S.wrap) {
                                                for (; M < 32; ) {
                                                    if (G === 0) break t;
                                                    G--,
                                                        (z |= L[W++] << M),
                                                        (M += 8);
                                                }
                                                if (
                                                    ((nt -= et),
                                                    (E.total_out += nt),
                                                    (S.total += nt),
                                                    nt &&
                                                        (E.adler = S.check =
                                                            S.flags
                                                                ? a(
                                                                      S.check,
                                                                      q,
                                                                      nt,
                                                                      X - nt
                                                                  )
                                                                : i(
                                                                      S.check,
                                                                      q,
                                                                      nt,
                                                                      X - nt
                                                                  )),
                                                    (nt = et),
                                                    (S.flags ? z : y(z)) !==
                                                        S.check)
                                                ) {
                                                    (E.msg =
                                                        'incorrect data check'),
                                                        (S.mode = 30);
                                                    break;
                                                }
                                                M = z = 0;
                                            }
                                            S.mode = 28;
                                        case 28:
                                            if (S.wrap && S.flags) {
                                                for (; M < 32; ) {
                                                    if (G === 0) break t;
                                                    G--,
                                                        (z += L[W++] << M),
                                                        (M += 8);
                                                }
                                                if (
                                                    z !==
                                                    (4294967295 & S.total)
                                                ) {
                                                    (E.msg =
                                                        'incorrect length check'),
                                                        (S.mode = 30);
                                                    break;
                                                }
                                                M = z = 0;
                                            }
                                            S.mode = 29;
                                        case 29:
                                            ot = 1;
                                            break t;
                                        case 30:
                                            ot = -3;
                                            break t;
                                        case 31:
                                            return -4;
                                        case 32:
                                        default:
                                            return p;
                                    }
                                return (
                                    (E.next_out = X),
                                    (E.avail_out = et),
                                    (E.next_in = W),
                                    (E.avail_in = G),
                                    (S.hold = z),
                                    (S.bits = M),
                                    (S.wsize ||
                                        (nt !== E.avail_out &&
                                            S.mode < 30 &&
                                            (S.mode < 27 || O !== 4))) &&
                                    P(E, E.output, E.next_out, nt - E.avail_out)
                                        ? ((S.mode = 31), -4)
                                        : ((st -= E.avail_in),
                                          (nt -= E.avail_out),
                                          (E.total_in += st),
                                          (E.total_out += nt),
                                          (S.total += nt),
                                          S.wrap &&
                                              nt &&
                                              (E.adler = S.check =
                                                  S.flags
                                                      ? a(
                                                            S.check,
                                                            q,
                                                            nt,
                                                            E.next_out - nt
                                                        )
                                                      : i(
                                                            S.check,
                                                            q,
                                                            nt,
                                                            E.next_out - nt
                                                        )),
                                          (E.data_type =
                                              S.bits +
                                              (S.last ? 64 : 0) +
                                              (S.mode === 12 ? 128 : 0) +
                                              (S.mode === 20 || S.mode === 15
                                                  ? 256
                                                  : 0)),
                                          ((st == 0 && nt === 0) || O === 4) &&
                                              ot === d &&
                                              (ot = -5),
                                          ot)
                                );
                            }),
                            (r.inflateEnd = function (E) {
                                if (!E || !E.state) return p;
                                var O = E.state;
                                return (
                                    O.window && (O.window = null),
                                    (E.state = null),
                                    d
                                );
                            }),
                            (r.inflateGetHeader = function (E, O) {
                                var S;
                                return E && E.state && 2 & (S = E.state).wrap
                                    ? (((S.head = O).done = !1), d)
                                    : p;
                            }),
                            (r.inflateSetDictionary = function (E, O) {
                                var S,
                                    L = O.length;
                                return E && E.state
                                    ? (S = E.state).wrap !== 0 && S.mode !== 11
                                        ? p
                                        : S.mode === 11 &&
                                          i(1, O, L, 0) !== S.check
                                        ? -3
                                        : P(E, O, L, L)
                                        ? ((S.mode = 31), -4)
                                        : ((S.havedict = 1), d)
                                    : p;
                            }),
                            (r.inflateInfo =
                                'pako inflate (from Nodeca project)');
                    },
                    {
                        '../utils/common': 41,
                        './adler32': 43,
                        './crc32': 45,
                        './inffast': 48,
                        './inftrees': 50,
                    },
                ],
                50: [
                    function (e, s, r) {
                        var o = e('../utils/common'),
                            i = [
                                3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23,
                                27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131,
                                163, 195, 227, 258, 0, 0,
                            ],
                            a = [
                                16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17,
                                18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20,
                                21, 21, 21, 21, 16, 72, 78,
                            ],
                            l = [
                                1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97,
                                129, 193, 257, 385, 513, 769, 1025, 1537, 2049,
                                3073, 4097, 6145, 8193, 12289, 16385, 24577, 0,
                                0,
                            ],
                            c = [
                                16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20,
                                21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26,
                                27, 27, 28, 28, 29, 29, 64, 64,
                            ];
                        s.exports = function (u, h, d, p, f, m, g, y) {
                            var b,
                                w,
                                x,
                                v,
                                C,
                                $,
                                T,
                                N,
                                R,
                                P = y.bits,
                                E = 0,
                                O = 0,
                                S = 0,
                                L = 0,
                                q = 0,
                                W = 0,
                                X = 0,
                                G = 0,
                                et = 0,
                                z = 0,
                                M = null,
                                st = 0,
                                nt = new o.Buf16(16),
                                J = new o.Buf16(16),
                                pt = null,
                                wt = 0;
                            for (E = 0; E <= 15; E++) nt[E] = 0;
                            for (O = 0; O < p; O++) nt[h[d + O]]++;
                            for (q = P, L = 15; 1 <= L && nt[L] === 0; L--);
                            if ((L < q && (q = L), L === 0))
                                return (
                                    (f[m++] = 20971520),
                                    (f[m++] = 20971520),
                                    (y.bits = 1),
                                    0
                                );
                            for (S = 1; S < L && nt[S] === 0; S++);
                            for (q < S && (q = S), E = G = 1; E <= 15; E++)
                                if (((G <<= 1), (G -= nt[E]) < 0)) return -1;
                            if (0 < G && (u === 0 || L !== 1)) return -1;
                            for (J[1] = 0, E = 1; E < 15; E++)
                                J[E + 1] = J[E] + nt[E];
                            for (O = 0; O < p; O++)
                                h[d + O] !== 0 && (g[J[h[d + O]]++] = O);
                            if (
                                (($ =
                                    u === 0
                                        ? ((M = pt = g), 19)
                                        : u === 1
                                        ? ((M = i),
                                          (st -= 257),
                                          (pt = a),
                                          (wt -= 257),
                                          256)
                                        : ((M = l), (pt = c), -1)),
                                (E = S),
                                (C = m),
                                (X = O = z = 0),
                                (x = -1),
                                (v = (et = 1 << (W = q)) - 1),
                                (u === 1 && 852 < et) || (u === 2 && 592 < et))
                            )
                                return 1;
                            for (;;) {
                                for (
                                    T = E - X,
                                        R =
                                            g[O] < $
                                                ? ((N = 0), g[O])
                                                : g[O] > $
                                                ? ((N = pt[wt + g[O]]),
                                                  M[st + g[O]])
                                                : ((N = 96), 0),
                                        b = 1 << (E - X),
                                        S = w = 1 << W;
                                    (f[C + (z >> X) + (w -= b)] =
                                        (T << 24) | (N << 16) | R | 0),
                                        w !== 0;

                                );
                                for (b = 1 << (E - 1); z & b; ) b >>= 1;
                                if (
                                    (b !== 0
                                        ? ((z &= b - 1), (z += b))
                                        : (z = 0),
                                    O++,
                                    --nt[E] == 0)
                                ) {
                                    if (E === L) break;
                                    E = h[d + g[O]];
                                }
                                if (q < E && (z & v) !== x) {
                                    for (
                                        X === 0 && (X = q),
                                            C += S,
                                            G = 1 << (W = E - X);
                                        W + X < L && !((G -= nt[W + X]) <= 0);

                                    )
                                        W++, (G <<= 1);
                                    if (
                                        ((et += 1 << W),
                                        (u === 1 && 852 < et) ||
                                            (u === 2 && 592 < et))
                                    )
                                        return 1;
                                    f[(x = z & v)] =
                                        (q << 24) | (W << 16) | (C - m) | 0;
                                }
                            }
                            return (
                                z !== 0 &&
                                    (f[C + z] =
                                        ((E - X) << 24) | (64 << 16) | 0),
                                (y.bits = q),
                                0
                            );
                        };
                    },
                    { '../utils/common': 41 },
                ],
                51: [
                    function (e, s, r) {
                        s.exports = {
                            2: 'need dictionary',
                            1: 'stream end',
                            0: '',
                            '-1': 'file error',
                            '-2': 'stream error',
                            '-3': 'data error',
                            '-4': 'insufficient memory',
                            '-5': 'buffer error',
                            '-6': 'incompatible version',
                        };
                    },
                    {},
                ],
                52: [
                    function (e, s, r) {
                        var o = e('../utils/common'),
                            i = 0,
                            a = 1;
                        function l(D) {
                            for (var K = D.length; 0 <= --K; ) D[K] = 0;
                        }
                        var c = 0,
                            u = 29,
                            h = 256,
                            d = h + 1 + u,
                            p = 30,
                            f = 19,
                            m = 2 * d + 1,
                            g = 15,
                            y = 16,
                            b = 7,
                            w = 256,
                            x = 16,
                            v = 17,
                            C = 18,
                            $ = [
                                0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
                                3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0,
                            ],
                            T = [
                                0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
                                7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13,
                                13,
                            ],
                            N = [
                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                2, 3, 7,
                            ],
                            R = [
                                16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3,
                                13, 2, 14, 1, 15,
                            ],
                            P = new Array(2 * (d + 2));
                        l(P);
                        var E = new Array(2 * p);
                        l(E);
                        var O = new Array(512);
                        l(O);
                        var S = new Array(256);
                        l(S);
                        var L = new Array(u);
                        l(L);
                        var q,
                            W,
                            X,
                            G = new Array(p);
                        function et(D, K, at, lt, Z) {
                            (this.static_tree = D),
                                (this.extra_bits = K),
                                (this.extra_base = at),
                                (this.elems = lt),
                                (this.max_length = Z),
                                (this.has_stree = D && D.length);
                        }
                        function z(D, K) {
                            (this.dyn_tree = D),
                                (this.max_code = 0),
                                (this.stat_desc = K);
                        }
                        function M(D) {
                            return D < 256 ? O[D] : O[256 + (D >>> 7)];
                        }
                        function st(D, K) {
                            (D.pending_buf[D.pending++] = 255 & K),
                                (D.pending_buf[D.pending++] = (K >>> 8) & 255);
                        }
                        function nt(D, K, at) {
                            D.bi_valid > y - at
                                ? ((D.bi_buf |= (K << D.bi_valid) & 65535),
                                  st(D, D.bi_buf),
                                  (D.bi_buf = K >> (y - D.bi_valid)),
                                  (D.bi_valid += at - y))
                                : ((D.bi_buf |= (K << D.bi_valid) & 65535),
                                  (D.bi_valid += at));
                        }
                        function J(D, K, at) {
                            nt(D, at[2 * K], at[2 * K + 1]);
                        }
                        function pt(D, K) {
                            for (
                                var at = 0;
                                (at |= 1 & D), (D >>>= 1), (at <<= 1), 0 < --K;

                            );
                            return at >>> 1;
                        }
                        function wt(D, K, at) {
                            var lt,
                                Z,
                                ht = new Array(g + 1),
                                xt = 0;
                            for (lt = 1; lt <= g; lt++)
                                ht[lt] = xt = (xt + at[lt - 1]) << 1;
                            for (Z = 0; Z <= K; Z++) {
                                var dt = D[2 * Z + 1];
                                dt !== 0 && (D[2 * Z] = pt(ht[dt]++, dt));
                            }
                        }
                        function ft(D) {
                            var K;
                            for (K = 0; K < d; K++) D.dyn_ltree[2 * K] = 0;
                            for (K = 0; K < p; K++) D.dyn_dtree[2 * K] = 0;
                            for (K = 0; K < f; K++) D.bl_tree[2 * K] = 0;
                            (D.dyn_ltree[2 * w] = 1),
                                (D.opt_len = D.static_len = 0),
                                (D.last_lit = D.matches = 0);
                        }
                        function mt(D) {
                            8 < D.bi_valid
                                ? st(D, D.bi_buf)
                                : 0 < D.bi_valid &&
                                  (D.pending_buf[D.pending++] = D.bi_buf),
                                (D.bi_buf = 0),
                                (D.bi_valid = 0);
                        }
                        function Nt(D, K, at, lt) {
                            var Z = 2 * K,
                                ht = 2 * at;
                            return (
                                D[Z] < D[ht] ||
                                (D[Z] === D[ht] && lt[K] <= lt[at])
                            );
                        }
                        function $t(D, K, at) {
                            for (
                                var lt = D.heap[at], Z = at << 1;
                                Z <= D.heap_len &&
                                (Z < D.heap_len &&
                                    Nt(K, D.heap[Z + 1], D.heap[Z], D.depth) &&
                                    Z++,
                                !Nt(K, lt, D.heap[Z], D.depth));

                            )
                                (D.heap[at] = D.heap[Z]), (at = Z), (Z <<= 1);
                            D.heap[at] = lt;
                        }
                        function zt(D, K, at) {
                            var lt,
                                Z,
                                ht,
                                xt,
                                dt = 0;
                            if (D.last_lit !== 0)
                                for (
                                    ;
                                    (lt =
                                        (D.pending_buf[D.d_buf + 2 * dt] << 8) |
                                        D.pending_buf[D.d_buf + 2 * dt + 1]),
                                        (Z = D.pending_buf[D.l_buf + dt]),
                                        dt++,
                                        lt === 0
                                            ? J(D, Z, K)
                                            : (J(D, (ht = S[Z]) + h + 1, K),
                                              (xt = $[ht]) !== 0 &&
                                                  nt(D, (Z -= L[ht]), xt),
                                              J(D, (ht = M(--lt)), at),
                                              (xt = T[ht]) !== 0 &&
                                                  nt(D, (lt -= G[ht]), xt)),
                                        dt < D.last_lit;

                                );
                            J(D, w, K);
                        }
                        function Vt(D, K) {
                            var at,
                                lt,
                                Z,
                                ht = K.dyn_tree,
                                xt = K.stat_desc.static_tree,
                                dt = K.stat_desc.has_stree,
                                Tt = K.stat_desc.elems,
                                qt = -1;
                            for (
                                D.heap_len = 0, D.heap_max = m, at = 0;
                                at < Tt;
                                at++
                            )
                                ht[2 * at] !== 0
                                    ? ((D.heap[++D.heap_len] = qt = at),
                                      (D.depth[at] = 0))
                                    : (ht[2 * at + 1] = 0);
                            for (; D.heap_len < 2; )
                                (ht[
                                    2 *
                                        (Z = D.heap[++D.heap_len] =
                                            qt < 2 ? ++qt : 0)
                                ] = 1),
                                    (D.depth[Z] = 0),
                                    D.opt_len--,
                                    dt && (D.static_len -= xt[2 * Z + 1]);
                            for (
                                K.max_code = qt, at = D.heap_len >> 1;
                                1 <= at;
                                at--
                            )
                                $t(D, ht, at);
                            for (
                                Z = Tt;
                                (at = D.heap[1]),
                                    (D.heap[1] = D.heap[D.heap_len--]),
                                    $t(D, ht, 1),
                                    (lt = D.heap[1]),
                                    (D.heap[--D.heap_max] = at),
                                    (D.heap[--D.heap_max] = lt),
                                    (ht[2 * Z] = ht[2 * at] + ht[2 * lt]),
                                    (D.depth[Z] =
                                        (D.depth[at] >= D.depth[lt]
                                            ? D.depth[at]
                                            : D.depth[lt]) + 1),
                                    (ht[2 * at + 1] = ht[2 * lt + 1] = Z),
                                    (D.heap[1] = Z++),
                                    $t(D, ht, 1),
                                    2 <= D.heap_len;

                            );
                            (D.heap[--D.heap_max] = D.heap[1]),
                                (function (Ot, ze) {
                                    var Fs,
                                        pn,
                                        Lr,
                                        oe,
                                        Ao,
                                        Ti,
                                        Ls = ze.dyn_tree,
                                        Dg = ze.max_code,
                                        SI = ze.stat_desc.static_tree,
                                        II = ze.stat_desc.has_stree,
                                        CI = ze.stat_desc.extra_bits,
                                        Og = ze.stat_desc.extra_base,
                                        Ei = ze.stat_desc.max_length,
                                        Il = 0;
                                    for (oe = 0; oe <= g; oe++)
                                        Ot.bl_count[oe] = 0;
                                    for (
                                        Ls[2 * Ot.heap[Ot.heap_max] + 1] = 0,
                                            Fs = Ot.heap_max + 1;
                                        Fs < m;
                                        Fs++
                                    )
                                        Ei <
                                            (oe =
                                                Ls[
                                                    2 *
                                                        Ls[
                                                            2 *
                                                                (pn =
                                                                    Ot.heap[
                                                                        Fs
                                                                    ]) +
                                                                1
                                                        ] +
                                                        1
                                                ] + 1) && ((oe = Ei), Il++),
                                            (Ls[2 * pn + 1] = oe),
                                            Dg < pn ||
                                                (Ot.bl_count[oe]++,
                                                (Ao = 0),
                                                Og <= pn && (Ao = CI[pn - Og]),
                                                (Ti = Ls[2 * pn]),
                                                (Ot.opt_len += Ti * (oe + Ao)),
                                                II &&
                                                    (Ot.static_len +=
                                                        Ti *
                                                        (SI[2 * pn + 1] + Ao)));
                                    if (Il !== 0) {
                                        do {
                                            for (
                                                oe = Ei - 1;
                                                Ot.bl_count[oe] === 0;

                                            )
                                                oe--;
                                            Ot.bl_count[oe]--,
                                                (Ot.bl_count[oe + 1] += 2),
                                                Ot.bl_count[Ei]--,
                                                (Il -= 2);
                                        } while (0 < Il);
                                        for (oe = Ei; oe !== 0; oe--)
                                            for (
                                                pn = Ot.bl_count[oe];
                                                pn !== 0;

                                            )
                                                Dg < (Lr = Ot.heap[--Fs]) ||
                                                    (Ls[2 * Lr + 1] !== oe &&
                                                        ((Ot.opt_len +=
                                                            (oe -
                                                                Ls[
                                                                    2 * Lr + 1
                                                                ]) *
                                                            Ls[2 * Lr]),
                                                        (Ls[2 * Lr + 1] = oe)),
                                                    pn--);
                                    }
                                })(D, K),
                                wt(ht, qt, D.bl_count);
                        }
                        function I(D, K, at) {
                            var lt,
                                Z,
                                ht = -1,
                                xt = K[1],
                                dt = 0,
                                Tt = 7,
                                qt = 4;
                            for (
                                xt === 0 && ((Tt = 138), (qt = 3)),
                                    K[2 * (at + 1) + 1] = 65535,
                                    lt = 0;
                                lt <= at;
                                lt++
                            )
                                (Z = xt),
                                    (xt = K[2 * (lt + 1) + 1]),
                                    (++dt < Tt && Z === xt) ||
                                        (dt < qt
                                            ? (D.bl_tree[2 * Z] += dt)
                                            : Z !== 0
                                            ? (Z !== ht && D.bl_tree[2 * Z]++,
                                              D.bl_tree[2 * x]++)
                                            : dt <= 10
                                            ? D.bl_tree[2 * v]++
                                            : D.bl_tree[2 * C]++,
                                        (ht = Z),
                                        (qt =
                                            (dt = 0) === xt
                                                ? ((Tt = 138), 3)
                                                : Z === xt
                                                ? ((Tt = 6), 3)
                                                : ((Tt = 7), 4)));
                        }
                        function ot(D, K, at) {
                            var lt,
                                Z,
                                ht = -1,
                                xt = K[1],
                                dt = 0,
                                Tt = 7,
                                qt = 4;
                            for (
                                xt === 0 && ((Tt = 138), (qt = 3)), lt = 0;
                                lt <= at;
                                lt++
                            )
                                if (
                                    ((Z = xt),
                                    (xt = K[2 * (lt + 1) + 1]),
                                    !(++dt < Tt && Z === xt))
                                ) {
                                    if (dt < qt)
                                        for (; J(D, Z, D.bl_tree), --dt != 0; );
                                    else
                                        Z !== 0
                                            ? (Z !== ht &&
                                                  (J(D, Z, D.bl_tree), dt--),
                                              J(D, x, D.bl_tree),
                                              nt(D, dt - 3, 2))
                                            : dt <= 10
                                            ? (J(D, v, D.bl_tree),
                                              nt(D, dt - 3, 3))
                                            : (J(D, C, D.bl_tree),
                                              nt(D, dt - 11, 7));
                                    (ht = Z),
                                        (qt =
                                            (dt = 0) === xt
                                                ? ((Tt = 138), 3)
                                                : Z === xt
                                                ? ((Tt = 6), 3)
                                                : ((Tt = 7), 4));
                                }
                        }
                        l(G);
                        var Q = !1;
                        function F(D, K, at, lt) {
                            nt(D, (c << 1) + (lt ? 1 : 0), 3),
                                (function (Z, ht, xt, dt) {
                                    mt(Z),
                                        dt && (st(Z, xt), st(Z, ~xt)),
                                        o.arraySet(
                                            Z.pending_buf,
                                            Z.window,
                                            ht,
                                            xt,
                                            Z.pending
                                        ),
                                        (Z.pending += xt);
                                })(D, K, at, !0);
                        }
                        (r._tr_init = function (D) {
                            Q ||
                                ((function () {
                                    var K,
                                        at,
                                        lt,
                                        Z,
                                        ht,
                                        xt = new Array(g + 1);
                                    for (Z = lt = 0; Z < u - 1; Z++)
                                        for (
                                            L[Z] = lt, K = 0;
                                            K < 1 << $[Z];
                                            K++
                                        )
                                            S[lt++] = Z;
                                    for (S[lt - 1] = Z, Z = ht = 0; Z < 16; Z++)
                                        for (
                                            G[Z] = ht, K = 0;
                                            K < 1 << T[Z];
                                            K++
                                        )
                                            O[ht++] = Z;
                                    for (ht >>= 7; Z < p; Z++)
                                        for (
                                            G[Z] = ht << 7, K = 0;
                                            K < 1 << (T[Z] - 7);
                                            K++
                                        )
                                            O[256 + ht++] = Z;
                                    for (at = 0; at <= g; at++) xt[at] = 0;
                                    for (K = 0; K <= 143; )
                                        (P[2 * K + 1] = 8), K++, xt[8]++;
                                    for (; K <= 255; )
                                        (P[2 * K + 1] = 9), K++, xt[9]++;
                                    for (; K <= 279; )
                                        (P[2 * K + 1] = 7), K++, xt[7]++;
                                    for (; K <= 287; )
                                        (P[2 * K + 1] = 8), K++, xt[8]++;
                                    for (wt(P, d + 1, xt), K = 0; K < p; K++)
                                        (E[2 * K + 1] = 5),
                                            (E[2 * K] = pt(K, 5));
                                    (q = new et(P, $, h + 1, d, g)),
                                        (W = new et(E, T, 0, p, g)),
                                        (X = new et(new Array(0), N, 0, f, b));
                                })(),
                                (Q = !0)),
                                (D.l_desc = new z(D.dyn_ltree, q)),
                                (D.d_desc = new z(D.dyn_dtree, W)),
                                (D.bl_desc = new z(D.bl_tree, X)),
                                (D.bi_buf = 0),
                                (D.bi_valid = 0),
                                ft(D);
                        }),
                            (r._tr_stored_block = F),
                            (r._tr_flush_block = function (D, K, at, lt) {
                                var Z,
                                    ht,
                                    xt = 0;
                                0 < D.level
                                    ? (D.strm.data_type === 2 &&
                                          (D.strm.data_type = (function (dt) {
                                              var Tt,
                                                  qt = 4093624447;
                                              for (
                                                  Tt = 0;
                                                  Tt <= 31;
                                                  Tt++, qt >>>= 1
                                              )
                                                  if (
                                                      1 & qt &&
                                                      dt.dyn_ltree[2 * Tt] !== 0
                                                  )
                                                      return i;
                                              if (
                                                  dt.dyn_ltree[18] !== 0 ||
                                                  dt.dyn_ltree[20] !== 0 ||
                                                  dt.dyn_ltree[26] !== 0
                                              )
                                                  return a;
                                              for (Tt = 32; Tt < h; Tt++)
                                                  if (
                                                      dt.dyn_ltree[2 * Tt] !== 0
                                                  )
                                                      return a;
                                              return i;
                                          })(D)),
                                      Vt(D, D.l_desc),
                                      Vt(D, D.d_desc),
                                      (xt = (function (dt) {
                                          var Tt;
                                          for (
                                              I(
                                                  dt,
                                                  dt.dyn_ltree,
                                                  dt.l_desc.max_code
                                              ),
                                                  I(
                                                      dt,
                                                      dt.dyn_dtree,
                                                      dt.d_desc.max_code
                                                  ),
                                                  Vt(dt, dt.bl_desc),
                                                  Tt = f - 1;
                                              3 <= Tt &&
                                              dt.bl_tree[2 * R[Tt] + 1] === 0;
                                              Tt--
                                          );
                                          return (
                                              (dt.opt_len +=
                                                  3 * (Tt + 1) + 5 + 5 + 4),
                                              Tt
                                          );
                                      })(D)),
                                      (Z = (D.opt_len + 3 + 7) >>> 3),
                                      (ht = (D.static_len + 3 + 7) >>> 3) <=
                                          Z && (Z = ht))
                                    : (Z = ht = at + 5),
                                    at + 4 <= Z && K !== -1
                                        ? F(D, K, at, lt)
                                        : D.strategy === 4 || ht === Z
                                        ? (nt(D, 2 + (lt ? 1 : 0), 3),
                                          zt(D, P, E))
                                        : (nt(D, 4 + (lt ? 1 : 0), 3),
                                          (function (dt, Tt, qt, Ot) {
                                              var ze;
                                              for (
                                                  nt(dt, Tt - 257, 5),
                                                      nt(dt, qt - 1, 5),
                                                      nt(dt, Ot - 4, 4),
                                                      ze = 0;
                                                  ze < Ot;
                                                  ze++
                                              )
                                                  nt(
                                                      dt,
                                                      dt.bl_tree[2 * R[ze] + 1],
                                                      3
                                                  );
                                              ot(dt, dt.dyn_ltree, Tt - 1),
                                                  ot(dt, dt.dyn_dtree, qt - 1);
                                          })(
                                              D,
                                              D.l_desc.max_code + 1,
                                              D.d_desc.max_code + 1,
                                              xt + 1
                                          ),
                                          zt(D, D.dyn_ltree, D.dyn_dtree)),
                                    ft(D),
                                    lt && mt(D);
                            }),
                            (r._tr_tally = function (D, K, at) {
                                return (
                                    (D.pending_buf[D.d_buf + 2 * D.last_lit] =
                                        (K >>> 8) & 255),
                                    (D.pending_buf[
                                        D.d_buf + 2 * D.last_lit + 1
                                    ] = 255 & K),
                                    (D.pending_buf[D.l_buf + D.last_lit] =
                                        255 & at),
                                    D.last_lit++,
                                    K === 0
                                        ? D.dyn_ltree[2 * at]++
                                        : (D.matches++,
                                          K--,
                                          D.dyn_ltree[2 * (S[at] + h + 1)]++,
                                          D.dyn_dtree[2 * M(K)]++),
                                    D.last_lit === D.lit_bufsize - 1
                                );
                            }),
                            (r._tr_align = function (D) {
                                nt(D, 2, 3),
                                    J(D, w, P),
                                    (function (K) {
                                        K.bi_valid === 16
                                            ? (st(K, K.bi_buf),
                                              (K.bi_buf = 0),
                                              (K.bi_valid = 0))
                                            : 8 <= K.bi_valid &&
                                              ((K.pending_buf[K.pending++] =
                                                  255 & K.bi_buf),
                                              (K.bi_buf >>= 8),
                                              (K.bi_valid -= 8));
                                    })(D);
                            });
                    },
                    { '../utils/common': 41 },
                ],
                53: [
                    function (e, s, r) {
                        s.exports = function () {
                            (this.input = null),
                                (this.next_in = 0),
                                (this.avail_in = 0),
                                (this.total_in = 0),
                                (this.output = null),
                                (this.next_out = 0),
                                (this.avail_out = 0),
                                (this.total_out = 0),
                                (this.msg = ''),
                                (this.state = null),
                                (this.data_type = 2),
                                (this.adler = 0);
                        };
                    },
                    {},
                ],
                54: [
                    function (e, s, r) {
                        (function (o) {
                            (function (i, a) {
                                if (!i.setImmediate) {
                                    var l,
                                        c,
                                        u,
                                        h,
                                        d = 1,
                                        p = {},
                                        f = !1,
                                        m = i.document,
                                        g =
                                            Object.getPrototypeOf &&
                                            Object.getPrototypeOf(i);
                                    (g = g && g.setTimeout ? g : i),
                                        (l =
                                            {}.toString.call(i.process) ===
                                            '[object process]'
                                                ? function (x) {
                                                      process.nextTick(
                                                          function () {
                                                              b(x);
                                                          }
                                                      );
                                                  }
                                                : (function () {
                                                      if (
                                                          i.postMessage &&
                                                          !i.importScripts
                                                      ) {
                                                          var x = !0,
                                                              v = i.onmessage;
                                                          return (
                                                              (i.onmessage =
                                                                  function () {
                                                                      x = !1;
                                                                  }),
                                                              i.postMessage(
                                                                  '',
                                                                  '*'
                                                              ),
                                                              (i.onmessage = v),
                                                              x
                                                          );
                                                      }
                                                  })()
                                                ? ((h =
                                                      'setImmediate$' +
                                                      Math.random() +
                                                      '$'),
                                                  i.addEventListener
                                                      ? i.addEventListener(
                                                            'message',
                                                            w,
                                                            !1
                                                        )
                                                      : i.attachEvent(
                                                            'onmessage',
                                                            w
                                                        ),
                                                  function (x) {
                                                      i.postMessage(h + x, '*');
                                                  })
                                                : i.MessageChannel
                                                ? (((u =
                                                      new MessageChannel()).port1.onmessage =
                                                      function (x) {
                                                          b(x.data);
                                                      }),
                                                  function (x) {
                                                      u.port2.postMessage(x);
                                                  })
                                                : m &&
                                                  'onreadystatechange' in
                                                      m.createElement('script')
                                                ? ((c = m.documentElement),
                                                  function (x) {
                                                      var v =
                                                          m.createElement(
                                                              'script'
                                                          );
                                                      (v.onreadystatechange =
                                                          function () {
                                                              b(x),
                                                                  (v.onreadystatechange =
                                                                      null),
                                                                  c.removeChild(
                                                                      v
                                                                  ),
                                                                  (v = null);
                                                          }),
                                                          c.appendChild(v);
                                                  })
                                                : function (x) {
                                                      setTimeout(b, 0, x);
                                                  }),
                                        (g.setImmediate = function (x) {
                                            typeof x != 'function' &&
                                                (x = new Function('' + x));
                                            for (
                                                var v = new Array(
                                                        arguments.length - 1
                                                    ),
                                                    C = 0;
                                                C < v.length;
                                                C++
                                            )
                                                v[C] = arguments[C + 1];
                                            var $ = { callback: x, args: v };
                                            return (p[d] = $), l(d), d++;
                                        }),
                                        (g.clearImmediate = y);
                                }
                                function y(x) {
                                    delete p[x];
                                }
                                function b(x) {
                                    if (f) setTimeout(b, 0, x);
                                    else {
                                        var v = p[x];
                                        if (v) {
                                            f = !0;
                                            try {
                                                (function (C) {
                                                    var $ = C.callback,
                                                        T = C.args;
                                                    switch (T.length) {
                                                        case 0:
                                                            $();
                                                            break;
                                                        case 1:
                                                            $(T[0]);
                                                            break;
                                                        case 2:
                                                            $(T[0], T[1]);
                                                            break;
                                                        case 3:
                                                            $(T[0], T[1], T[2]);
                                                            break;
                                                        default:
                                                            $.apply(a, T);
                                                    }
                                                })(v);
                                            } finally {
                                                y(x), (f = !1);
                                            }
                                        }
                                    }
                                }
                                function w(x) {
                                    x.source === i &&
                                        typeof x.data == 'string' &&
                                        x.data.indexOf(h) === 0 &&
                                        b(+x.data.slice(h.length));
                                }
                            })(
                                typeof self > 'u'
                                    ? o === void 0
                                        ? this
                                        : o
                                    : self
                            );
                        }).call(
                            this,
                            typeof tn < 'u'
                                ? tn
                                : typeof self < 'u'
                                ? self
                                : typeof window < 'u'
                                ? window
                                : {}
                        );
                    },
                    {},
                ],
            },
            {},
            [10]
        )(10);
    });
})(WS);
var Z7 = WS.exports;
const J7 = gf(Z7);
var US = { exports: {} };
(function (n, t) {
    (function (e, s) {
        s();
    })(tn, function () {
        function e(c, u) {
            return (
                typeof u > 'u'
                    ? (u = { autoBom: !1 })
                    : typeof u != 'object' &&
                      (console.warn(
                          'Deprecated: Expected third argument to be a object'
                      ),
                      (u = { autoBom: !u })),
                u.autoBom &&
                /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(
                    c.type
                )
                    ? new Blob(['\uFEFF', c], { type: c.type })
                    : c
            );
        }
        function s(c, u, h) {
            var d = new XMLHttpRequest();
            d.open('GET', c),
                (d.responseType = 'blob'),
                (d.onload = function () {
                    l(d.response, u, h);
                }),
                (d.onerror = function () {
                    console.error('could not download file');
                }),
                d.send();
        }
        function r(c) {
            var u = new XMLHttpRequest();
            u.open('HEAD', c, !1);
            try {
                u.send();
            } catch {}
            return 200 <= u.status && 299 >= u.status;
        }
        function o(c) {
            try {
                c.dispatchEvent(new MouseEvent('click'));
            } catch {
                var u = document.createEvent('MouseEvents');
                u.initMouseEvent(
                    'click',
                    !0,
                    !0,
                    window,
                    0,
                    0,
                    0,
                    80,
                    20,
                    !1,
                    !1,
                    !1,
                    !1,
                    0,
                    null
                ),
                    c.dispatchEvent(u);
            }
        }
        var i =
                typeof window == 'object' && window.window === window
                    ? window
                    : typeof self == 'object' && self.self === self
                    ? self
                    : typeof tn == 'object' && tn.global === tn
                    ? tn
                    : void 0,
            a =
                i.navigator &&
                /Macintosh/.test(navigator.userAgent) &&
                /AppleWebKit/.test(navigator.userAgent) &&
                !/Safari/.test(navigator.userAgent),
            l =
                i.saveAs ||
                (typeof window != 'object' || window !== i
                    ? function () {}
                    : 'download' in HTMLAnchorElement.prototype && !a
                    ? function (c, u, h) {
                          var d = i.URL || i.webkitURL,
                              p = document.createElement('a');
                          (u = u || c.name || 'download'),
                              (p.download = u),
                              (p.rel = 'noopener'),
                              typeof c == 'string'
                                  ? ((p.href = c),
                                    p.origin === location.origin
                                        ? o(p)
                                        : r(p.href)
                                        ? s(c, u, h)
                                        : o(p, (p.target = '_blank')))
                                  : ((p.href = d.createObjectURL(c)),
                                    setTimeout(function () {
                                        d.revokeObjectURL(p.href);
                                    }, 4e4),
                                    setTimeout(function () {
                                        o(p);
                                    }, 0));
                      }
                    : 'msSaveOrOpenBlob' in navigator
                    ? function (c, u, h) {
                          if (
                              ((u = u || c.name || 'download'),
                              typeof c != 'string')
                          )
                              navigator.msSaveOrOpenBlob(e(c, h), u);
                          else if (r(c)) s(c, u, h);
                          else {
                              var d = document.createElement('a');
                              (d.href = c),
                                  (d.target = '_blank'),
                                  setTimeout(function () {
                                      o(d);
                                  });
                          }
                      }
                    : function (c, u, h, d) {
                          if (
                              ((d = d || open('', '_blank')),
                              d &&
                                  (d.document.title =
                                      d.document.body.innerText =
                                          'downloading...'),
                              typeof c == 'string')
                          )
                              return s(c, u, h);
                          var p = c.type === 'application/octet-stream',
                              f =
                                  /constructor/i.test(i.HTMLElement) ||
                                  i.safari,
                              m = /CriOS\/[\d]+/.test(navigator.userAgent);
                          if ((m || (p && f) || a) && typeof FileReader < 'u') {
                              var g = new FileReader();
                              (g.onloadend = function () {
                                  var w = g.result;
                                  (w = m
                                      ? w
                                      : w.replace(
                                            /^data:[^;]*;/,
                                            'data:attachment/file;'
                                        )),
                                      d
                                          ? (d.location.href = w)
                                          : (location = w),
                                      (d = null);
                              }),
                                  g.readAsDataURL(c);
                          } else {
                              var y = i.URL || i.webkitURL,
                                  b = y.createObjectURL(c);
                              d ? (d.location = b) : (location.href = b),
                                  (d = null),
                                  setTimeout(function () {
                                      y.revokeObjectURL(b);
                                  }, 4e4);
                          }
                      });
        (i.saveAs = l.saveAs = l), (n.exports = l);
    });
})(US);
var Q7 = US.exports;
const Gs = Jt('#process-video'),
    t9 = Jt('#validation-video'),
    _c = Jt('#marquee'),
    ci = Jt('#marquee-line'),
    e9 = Jt('#marquee-validation'),
    n9 = Jt('#marquee-line-validation'),
    GS = Jt('#video-dimensions');
let qo = '',
    Th = !1,
    np = 0,
    sp = 0,
    se = { x: 0, y: 0, width: 462, height: 260 };
Gs.addEventListener('pointerdown', l9);
function s9() {
    return Gs;
}
function r9() {
    return t9;
}
function o9() {
    return Th;
}
function i9(n) {
    Th = n;
}
function a9() {
    kr(e9, se), kr(n9, se);
}
function l9(n) {
    if (Th) return;
    window.addEventListener('pointerup', jS),
        Gs.addEventListener('pointermove', qS),
        _c.classList.remove('hide'),
        ci.classList.remove('hide'),
        (np = n.offsetX),
        (sp = n.offsetY),
        Object.assign(se, { startX: np, startY: sp, width: 0, height: 0 }),
        kr(_c, se),
        kr(ci, se);
}
function Vl(n) {
    (se = { x: 0, y: 0, width: 462, height: 260 }),
        ql('white', '5, 5'),
        n &&
            Ts(
                'Seleção muito pequena, tente fazer um pouco maior.',
                4e3,
                '#ff0000'
            );
}
function HS() {
    const n = Gs.videoWidth / Gs.width;
    (qo = `
   x=${parseInt(se.x * n)}, 
   y=${parseInt(se.y * n)}, 
   largura=${parseInt(se.width * n)}, 
   altura=${parseInt(se.height * n)} 
   `),
        se.width == 462 &&
            (qo = `
     x=${parseInt(se.x * n)}, 
     y=${parseInt(se.y * n)}, 
     largura=${Gs.videoWidth}, 
     altura=${Gs.videoHeight}
     `),
        (GS.innerHTML = qo);
}
function jS(n) {
    window.removeEventListener('pointerup', jS),
        Gs.removeEventListener('pointermove', qS),
        se.width <= 10 ? Vl() : se.width < 50 && Vl(!0),
        se.height <= 10 ? Vl() : se.height < 50 && Vl(!0),
        kr(_c, se),
        kr(ci, se),
        n.target === Gs && se.width && se.height && HS();
}
function ql(n, t) {
    ci.style.setProperty('stroke', n),
        ci.style.setProperty('stroke-dasharray', t);
}
function c9() {
    ql('white', '5, 5'),
        se.width < 50 && ql('red', '0'),
        se.height < 50 && ql('red', '0');
}
function qS(n) {
    let t = n.offsetX,
        e = n.offsetY,
        s = np - t,
        r = sp - e;
    s < 0 && ((s *= -1), (t -= s)),
        r < 0 && ((r *= -1), (e -= r)),
        c9(),
        Object.assign(se, { x: t, y: e, width: s, height: r }),
        kr(_c, se),
        kr(ci, se),
        HS();
}
function kr(n, t) {
    const { x: e, y: s, width: r, height: o } = t;
    return (
        n.setAttributeNS(null, 'width', r),
        n.setAttributeNS(null, 'height', o),
        n.setAttributeNS(null, 'x', e),
        n.setAttributeNS(null, 'y', s),
        n
    );
}
function u9() {
    return se;
}
function h9() {
    return qo;
}
function d9(n, t) {
    Th || ((qo = `x=0, y=0, largura=${n}, altura=${t}`), (GS.innerHTML = qo));
}
const js = {
    getProcessMask: s9,
    getValidationMask: r9,
    getDisabledMarquee: o9,
    setDisabledMarquee: i9,
    getMarqueeRect: u9,
    replicateMask: a9,
    getCropDefinition: h9,
    setCropDefinition: d9,
};
async function p9() {
    wI(`${Y7()}
`),
        await Xr.save('localstorage://my-model');
    const t = await (
        await OF('localstorage://my-model')
    ).save(Bx(async (a) => a));
    let { weightData: e, ...s } = t;
    const r = s,
        o = { classNames: pe.classNames, crop: js.getMarqueeRect() },
        i = new J7();
    i.file('model.json', JSON.stringify(r)),
        i.file('model.weights.bin', e),
        i.file('log.txt', localStorage.getItem('tempLogFile')),
        i.file('parameters.json', JSON.stringify(o)),
        await i.generateAsync({ type: 'blob' }).then(function (a) {
            Q7.saveAs(a, 'my-model.zip'), Fr('Modelo Exportado');
        });
}
const KS = Jt('#export'),
    XS = Jt('#predict'),
    f9 = Jt('#accuracy-text'),
    na = Jt('#validation-video'),
    YS = Jt('#validation-video-file');
XS.addEventListener('click', X7);
KS.addEventListener('click', p9);
YS.addEventListener('change', (n) => vI(n, 'validation'));
na.addEventListener('pause', ZS);
function m9() {
    return na;
}
function g9(n) {
    XS.disabled = n;
}
function y9(n) {
    YS.disabled = n;
}
function ZS() {
    (pe.videoPlaying = !1),
        VS(!1),
        BS(!1),
        setStatusText('Validação concluída com sucesso!', 3e3);
}
function b9(n) {
    (na.src = n), (na.hidden = !1);
}
const x9 = (n) => (KS.disabled = n);
function w9(n) {
    f9.innerHTML = n;
}
function v9() {
    na.play();
}
const Rn = {
    configVideoValidation: b9,
    disableInputValidationVideoFile: y9,
    disablePredictionButton: g9,
    getValidationVideo: m9,
    onPauseValidationVideo: ZS,
    setAcuracyText: w9,
    disableExportButton: x9,
    setPredictStatus: BS,
    startValidationPlayVideo: v9,
};
function k9() {
    const n = Ws.getAdvancedParameters();
    Xr.add(Ry({ inputShape: [1024], units: 128, activation: 'relu' })),
        Xr.add(Ry({ units: pe.classNames.length, activation: 'softmax' })),
        Xr.summary();
    const t = Vr.adam(n.learningRate);
    Xr.compile({
        optimizer: t,
        loss:
            pe.classNames.length === 2
                ? 'binaryCrossentropy'
                : 'categoricalCrossentropy',
        metrics: ['accuracy'],
    });
}
async function S9() {
    Ws.setTrainingStatusStarted(),
        Ws.logImagesPerClass(),
        _n.toggleInputPreparationStatus(!0),
        Ws.disableTrainFields(!0),
        k9(),
        Rn.setPredictStatus(!1),
        _I(pe.trainingDataInputs, pe.trainingDataOutputs);
    const n = je(pe.trainingDataOutputs, 'int32'),
        t = Ku(n, pe.classNames.length),
        e = un(pe.trainingDataInputs),
        s = Ws.getAdvancedParameters();
    Fr(
        `Treinamento com ${s.epochs} Épocas, e com Tamanho de Lote de ${s.batchSize} unidades`
    );
    const r = await Xr.fit(e, t, {
        shuffle: !0,
        batchSize: s.batchSize,
        epochs: s.epochs,
        callbacks: { onEpochEnd: Ws.logProgress },
    });
    n.dispose(),
        t.dispose(),
        e.dispose(),
        Ws.setTrainingStatusDone(r),
        Rn.disableInputValidationVideoFile(!1),
        Rn.disableExportButton(!1);
}
function To(n) {
    (this._maxSize = n), this.clear();
}
To.prototype.clear = function () {
    (this._size = 0), (this._values = Object.create(null));
};
To.prototype.get = function (n) {
    return this._values[n];
};
To.prototype.set = function (n, t) {
    return (
        this._size >= this._maxSize && this.clear(),
        n in this._values || this._size++,
        (this._values[n] = t)
    );
};
var I9 = /[^.^\]^[]+|(?=\[\]|\.\.)/g,
    JS = /^\d+$/,
    C9 = /^\d/,
    $9 = /[~`!#$%\^&*+=\-\[\]\\';,/{}|\\":<>\?]/g,
    N9 = /^\s*(['"]?)(.*?)(\1)\s*$/,
    Cg = 512,
    kb = new To(Cg),
    Sb = new To(Cg),
    Ib = new To(Cg),
    Jr = {
        Cache: To,
        split: rp,
        normalizePath: Qh,
        setter: function (n) {
            var t = Qh(n);
            return (
                Sb.get(n) ||
                Sb.set(n, function (s, r) {
                    for (var o = 0, i = t.length, a = s; o < i - 1; ) {
                        var l = t[o];
                        if (
                            l === '__proto__' ||
                            l === 'constructor' ||
                            l === 'prototype'
                        )
                            return s;
                        a = a[t[o++]];
                    }
                    a[t[o]] = r;
                })
            );
        },
        getter: function (n, t) {
            var e = Qh(n);
            return (
                Ib.get(n) ||
                Ib.set(n, function (r) {
                    for (var o = 0, i = e.length; o < i; )
                        if (r != null || !t) r = r[e[o++]];
                        else return;
                    return r;
                })
            );
        },
        join: function (n) {
            return n.reduce(function (t, e) {
                return (
                    t +
                    ($g(e) || JS.test(e) ? '[' + e + ']' : (t ? '.' : '') + e)
                );
            }, '');
        },
        forEach: function (n, t, e) {
            T9(Array.isArray(n) ? n : rp(n), t, e);
        },
    };
function Qh(n) {
    return (
        kb.get(n) ||
        kb.set(
            n,
            rp(n).map(function (t) {
                return t.replace(N9, '$2');
            })
        )
    );
}
function rp(n) {
    return n.match(I9) || [''];
}
function T9(n, t, e) {
    var s = n.length,
        r,
        o,
        i,
        a;
    for (o = 0; o < s; o++)
        (r = n[o]),
            r &&
                (A9(r) && (r = '"' + r + '"'),
                (a = $g(r)),
                (i = !a && /^\d+$/.test(r)),
                t.call(e, r, a, i, o, n));
}
function $g(n) {
    return typeof n == 'string' && n && ["'", '"'].indexOf(n.charAt(0)) !== -1;
}
function E9(n) {
    return n.match(C9) && !n.match(JS);
}
function _9(n) {
    return $9.test(n);
}
function A9(n) {
    return !$g(n) && (E9(n) || _9(n));
}
const R9 =
        /[A-Z\xc0-\xd6\xd8-\xde]?[a-z\xdf-\xf6\xf8-\xff]+(?:['’](?:d|ll|m|re|s|t|ve))?(?=[\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]|[A-Z\xc0-\xd6\xd8-\xde]|$)|(?:[A-Z\xc0-\xd6\xd8-\xde]|[^\ud800-\udfff\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\d+\u2700-\u27bfa-z\xdf-\xf6\xf8-\xffA-Z\xc0-\xd6\xd8-\xde])+(?:['’](?:D|LL|M|RE|S|T|VE))?(?=[\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]|[A-Z\xc0-\xd6\xd8-\xde](?:[a-z\xdf-\xf6\xf8-\xff]|[^\ud800-\udfff\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\d+\u2700-\u27bfa-z\xdf-\xf6\xf8-\xffA-Z\xc0-\xd6\xd8-\xde])|$)|[A-Z\xc0-\xd6\xd8-\xde]?(?:[a-z\xdf-\xf6\xf8-\xff]|[^\ud800-\udfff\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\d+\u2700-\u27bfa-z\xdf-\xf6\xf8-\xffA-Z\xc0-\xd6\xd8-\xde])+(?:['’](?:d|ll|m|re|s|t|ve))?|[A-Z\xc0-\xd6\xd8-\xde]+(?:['’](?:D|LL|M|RE|S|T|VE))?|\d*(?:1ST|2ND|3RD|(?![123])\dTH)(?=\b|[a-z_])|\d*(?:1st|2nd|3rd|(?![123])\dth)(?=\b|[A-Z_])|\d+|(?:[\u2700-\u27bf]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff])[\ufe0e\ufe0f]?(?:[\u0300-\u036f\ufe20-\ufe2f\u20d0-\u20ff]|\ud83c[\udffb-\udfff])?(?:\u200d(?:[^\ud800-\udfff]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff])[\ufe0e\ufe0f]?(?:[\u0300-\u036f\ufe20-\ufe2f\u20d0-\u20ff]|\ud83c[\udffb-\udfff])?)*/g,
    Eh = (n) => n.match(R9) || [],
    _h = (n) => n[0].toUpperCase() + n.slice(1),
    Ng = (n, t) => Eh(n).join(t).toLowerCase(),
    QS = (n) =>
        Eh(n).reduce(
            (t, e) =>
                `${t}${
                    t
                        ? e[0].toUpperCase() + e.slice(1).toLowerCase()
                        : e.toLowerCase()
                }`,
            ''
        ),
    D9 = (n) => _h(QS(n)),
    O9 = (n) => Ng(n, '_'),
    F9 = (n) => Ng(n, '-'),
    L9 = (n) => _h(Ng(n, ' ')),
    P9 = (n) => Eh(n).map(_h).join(' ');
var td = {
        words: Eh,
        upperFirst: _h,
        camelCase: QS,
        pascalCase: D9,
        snakeCase: O9,
        kebabCase: F9,
        sentenceCase: L9,
        titleCase: P9,
    },
    Tg = { exports: {} };
Tg.exports = function (n) {
    return tI(z9(n), n);
};
Tg.exports.array = tI;
function tI(n, t) {
    var e = n.length,
        s = new Array(e),
        r = {},
        o = e,
        i = B9(t),
        a = M9(n);
    for (
        t.forEach(function (c) {
            if (!a.has(c[0]) || !a.has(c[1]))
                throw new Error(
                    'Unknown node. There is an unknown node in the supplied edges.'
                );
        });
        o--;

    )
        r[o] || l(n[o], o, new Set());
    return s;
    function l(c, u, h) {
        if (h.has(c)) {
            var d;
            try {
                d = ', node was:' + JSON.stringify(c);
            } catch {
                d = '';
            }
            throw new Error('Cyclic dependency' + d);
        }
        if (!a.has(c))
            throw new Error(
                'Found unknown node. Make sure to provided all involved nodes. Unknown node: ' +
                    JSON.stringify(c)
            );
        if (!r[u]) {
            r[u] = !0;
            var p = i.get(c) || new Set();
            if (((p = Array.from(p)), (u = p.length))) {
                h.add(c);
                do {
                    var f = p[--u];
                    l(f, a.get(f), h);
                } while (u);
                h.delete(c);
            }
            s[--e] = c;
        }
    }
}
function z9(n) {
    for (var t = new Set(), e = 0, s = n.length; e < s; e++) {
        var r = n[e];
        t.add(r[0]), t.add(r[1]);
    }
    return Array.from(t);
}
function B9(n) {
    for (var t = new Map(), e = 0, s = n.length; e < s; e++) {
        var r = n[e];
        t.has(r[0]) || t.set(r[0], new Set()),
            t.has(r[1]) || t.set(r[1], new Set()),
            t.get(r[0]).add(r[1]);
    }
    return t;
}
function M9(n) {
    for (var t = new Map(), e = 0, s = n.length; e < s; e++) t.set(n[e], e);
    return t;
}
var V9 = Tg.exports;
const W9 = gf(V9),
    U9 = Object.prototype.toString,
    G9 = Error.prototype.toString,
    H9 = RegExp.prototype.toString,
    j9 = typeof Symbol < 'u' ? Symbol.prototype.toString : () => '',
    q9 = /^Symbol\((.*)\)(.*)$/;
function K9(n) {
    return n != +n ? 'NaN' : n === 0 && 1 / n < 0 ? '-0' : '' + n;
}
function Cb(n, t = !1) {
    if (n == null || n === !0 || n === !1) return '' + n;
    const e = typeof n;
    if (e === 'number') return K9(n);
    if (e === 'string') return t ? `"${n}"` : n;
    if (e === 'function') return '[Function ' + (n.name || 'anonymous') + ']';
    if (e === 'symbol') return j9.call(n).replace(q9, 'Symbol($1)');
    const s = U9.call(n).slice(8, -1);
    return s === 'Date'
        ? isNaN(n.getTime())
            ? '' + n
            : n.toISOString(n)
        : s === 'Error' || n instanceof Error
        ? '[' + G9.call(n) + ']'
        : s === 'RegExp'
        ? H9.call(n)
        : null;
}
function hr(n, t) {
    let e = Cb(n, t);
    return e !== null
        ? e
        : JSON.stringify(
              n,
              function (s, r) {
                  let o = Cb(this[s], t);
                  return o !== null ? o : r;
              },
              2
          );
}
function eI(n) {
    return n == null ? [] : [].concat(n);
}
let nI,
    X9 = /\$\{\s*(\w+)\s*\}/g;
nI = Symbol.toStringTag;
class gn extends Error {
    static formatError(t, e) {
        const s = e.label || e.path || 'this';
        return (
            s !== e.path && (e = Object.assign({}, e, { path: s })),
            typeof t == 'string'
                ? t.replace(X9, (r, o) => hr(e[o]))
                : typeof t == 'function'
                ? t(e)
                : t
        );
    }
    static isError(t) {
        return t && t.name === 'ValidationError';
    }
    constructor(t, e, s, r, o) {
        super(),
            (this.value = void 0),
            (this.path = void 0),
            (this.type = void 0),
            (this.errors = void 0),
            (this.params = void 0),
            (this.inner = void 0),
            (this[nI] = 'Error'),
            (this.name = 'ValidationError'),
            (this.value = e),
            (this.path = s),
            (this.type = r),
            (this.errors = []),
            (this.inner = []),
            eI(t).forEach((i) => {
                if (gn.isError(i)) {
                    this.errors.push(...i.errors);
                    const a = i.inner.length ? i.inner : [i];
                    this.inner.push(...a);
                } else this.errors.push(i);
            }),
            (this.message =
                this.errors.length > 1
                    ? `${this.errors.length} errors occurred`
                    : this.errors[0]),
            !o && Error.captureStackTrace && Error.captureStackTrace(this, gn);
    }
}
let zs = {
        default: '${path} is invalid',
        required: '${path} is a required field',
        defined: '${path} must be defined',
        notNull: '${path} cannot be null',
        oneOf: '${path} must be one of the following values: ${values}',
        notOneOf: '${path} must not be one of the following values: ${values}',
        notType: ({ path: n, type: t, value: e, originalValue: s }) => {
            const r =
                s != null && s !== e
                    ? ` (cast from the value \`${hr(s, !0)}\`).`
                    : '.';
            return t !== 'mixed'
                ? `${n} must be a \`${t}\` type, but the final value was: \`${hr(
                      e,
                      !0
                  )}\`` + r
                : `${n} must match the configured type. The validated value was: \`${hr(
                      e,
                      !0
                  )}\`` + r;
        },
    },
    Y9 = {
        length: '${path} must be exactly ${length} characters',
        min: '${path} must be at least ${min} characters',
        max: '${path} must be at most ${max} characters',
        matches: '${path} must match the following: "${regex}"',
        email: '${path} must be a valid email',
        url: '${path} must be a valid URL',
        uuid: '${path} must be a valid UUID',
        trim: '${path} must be a trimmed string',
        lowercase: '${path} must be a lowercase string',
        uppercase: '${path} must be a upper case string',
    },
    er = {
        min: '${path} must be greater than or equal to ${min}',
        max: '${path} must be less than or equal to ${max}',
        lessThan: '${path} must be less than ${less}',
        moreThan: '${path} must be greater than ${more}',
        positive: '${path} must be a positive number',
        negative: '${path} must be a negative number',
        integer: '${path} must be an integer',
    },
    op = {
        min: '${path} field must be later than ${min}',
        max: '${path} field must be at earlier than ${max}',
    },
    Z9 = { isValue: '${path} field must be ${value}' },
    ip = { noUnknown: '${path} field has unspecified keys: ${unknown}' },
    J9 = {
        min: '${path} field must have at least ${min} items',
        max: '${path} field must have less than or equal to ${max} items',
        length: '${path} must have ${length} items',
    },
    Q9 = {
        notType: (n) => {
            const { path: t, value: e, spec: s } = n,
                r = s.types.length;
            if (Array.isArray(e)) {
                if (e.length < r)
                    return `${t} tuple value has too few items, expected a length of ${r} but got ${
                        e.length
                    } for value: \`${hr(e, !0)}\``;
                if (e.length > r)
                    return `${t} tuple value has too many items, expected a length of ${r} but got ${
                        e.length
                    } for value: \`${hr(e, !0)}\``;
            }
            return gn.formatError(zs.notType, n);
        },
    };
Object.assign(Object.create(null), {
    mixed: zs,
    string: Y9,
    number: er,
    date: op,
    object: ip,
    array: J9,
    boolean: Z9,
    tuple: Q9,
});
const Eg = (n) => n && n.__isYupSchema__;
class Ac {
    static fromOptions(t, e) {
        if (!e.then && !e.otherwise)
            throw new TypeError(
                'either `then:` or `otherwise:` is required for `when()` conditions'
            );
        let { is: s, then: r, otherwise: o } = e,
            i = typeof s == 'function' ? s : (...a) => a.every((l) => l === s);
        return new Ac(t, (a, l) => {
            var c;
            let u = i(...a) ? r : o;
            return (c = u == null ? void 0 : u(l)) != null ? c : l;
        });
    }
    constructor(t, e) {
        (this.fn = void 0), (this.refs = t), (this.refs = t), (this.fn = e);
    }
    resolve(t, e) {
        let s = this.refs.map((o) =>
                o.getValue(
                    e == null ? void 0 : e.value,
                    e == null ? void 0 : e.parent,
                    e == null ? void 0 : e.context
                )
            ),
            r = this.fn(s, t, e);
        if (r === void 0 || r === t) return t;
        if (!Eg(r))
            throw new TypeError('conditions must return a schema object');
        return r.resolve(e);
    }
}
const Wl = { context: '$', value: '.' };
class Eo {
    constructor(t, e = {}) {
        if (
            ((this.key = void 0),
            (this.isContext = void 0),
            (this.isValue = void 0),
            (this.isSibling = void 0),
            (this.path = void 0),
            (this.getter = void 0),
            (this.map = void 0),
            typeof t != 'string')
        )
            throw new TypeError('ref must be a string, got: ' + t);
        if (((this.key = t.trim()), t === ''))
            throw new TypeError('ref must be a non-empty string');
        (this.isContext = this.key[0] === Wl.context),
            (this.isValue = this.key[0] === Wl.value),
            (this.isSibling = !this.isContext && !this.isValue);
        let s = this.isContext ? Wl.context : this.isValue ? Wl.value : '';
        (this.path = this.key.slice(s.length)),
            (this.getter = this.path && Jr.getter(this.path, !0)),
            (this.map = e.map);
    }
    getValue(t, e, s) {
        let r = this.isContext ? s : this.isValue ? t : e;
        return (
            this.getter && (r = this.getter(r || {})),
            this.map && (r = this.map(r)),
            r
        );
    }
    cast(t, e) {
        return this.getValue(
            t,
            e == null ? void 0 : e.parent,
            e == null ? void 0 : e.context
        );
    }
    resolve() {
        return this;
    }
    describe() {
        return { type: 'ref', key: this.key };
    }
    toString() {
        return `Ref(${this.key})`;
    }
    static isRef(t) {
        return t && t.__isYupRef;
    }
}
Eo.prototype.__isYupRef = !0;
const Rc = (n) => n == null;
function Oo(n) {
    function t(
        { value: e, path: s = '', options: r, originalValue: o, schema: i },
        a,
        l
    ) {
        const { name: c, test: u, params: h, message: d, skipAbsent: p } = n;
        let {
            parent: f,
            context: m,
            abortEarly: g = i.spec.abortEarly,
            disableStackTrace: y = i.spec.disableStackTrace,
        } = r;
        function b(P) {
            return Eo.isRef(P) ? P.getValue(e, f, m) : P;
        }
        function w(P = {}) {
            var E;
            const O = Object.assign(
                {
                    value: e,
                    originalValue: o,
                    label: i.spec.label,
                    path: P.path || s,
                    spec: i.spec,
                },
                h,
                P.params
            );
            for (const L of Object.keys(O)) O[L] = b(O[L]);
            const S = new gn(
                gn.formatError(P.message || d, O),
                e,
                O.path,
                P.type || c,
                (E = P.disableStackTrace) != null ? E : y
            );
            return (S.params = O), S;
        }
        const x = g ? a : l;
        let v = {
            path: s,
            parent: f,
            type: c,
            from: r.from,
            createError: w,
            resolve: b,
            options: r,
            originalValue: o,
            schema: i,
        };
        const C = (P) => {
                gn.isError(P) ? x(P) : P ? l(null) : x(w());
            },
            $ = (P) => {
                gn.isError(P) ? x(P) : a(P);
            };
        if (p && Rc(e)) return C(!0);
        let N;
        try {
            var R;
            if (
                ((N = u.call(v, e, v)),
                typeof ((R = N) == null ? void 0 : R.then) == 'function')
            ) {
                if (r.sync)
                    throw new Error(
                        `Validation test of type: "${v.type}" returned a Promise during a synchronous validate. This test will finish after the validate call has returned`
                    );
                return Promise.resolve(N).then(C, $);
            }
        } catch (P) {
            $(P);
            return;
        }
        C(N);
    }
    return (t.OPTIONS = n), t;
}
function tY(n, t, e, s = e) {
    let r, o, i;
    return t
        ? (Jr.forEach(t, (a, l, c) => {
              let u = l ? a.slice(1, a.length - 1) : a;
              n = n.resolve({ context: s, parent: r, value: e });
              let h = n.type === 'tuple',
                  d = c ? parseInt(u, 10) : 0;
              if (n.innerType || h) {
                  if (h && !c)
                      throw new Error(
                          `Yup.reach cannot implicitly index into a tuple type. the path part "${i}" must contain an index to the tuple element, e.g. "${i}[0]"`
                      );
                  if (e && d >= e.length)
                      throw new Error(
                          `Yup.reach cannot resolve an array item at index: ${a}, in the path: ${t}. because there is no value at that index. `
                      );
                  (r = e),
                      (e = e && e[d]),
                      (n = h ? n.spec.types[d] : n.innerType);
              }
              if (!c) {
                  if (!n.fields || !n.fields[u])
                      throw new Error(
                          `The schema does not contain the path: ${t}. (failed at: ${i} which is a type: "${n.type}")`
                      );
                  (r = e), (e = e && e[u]), (n = n.fields[u]);
              }
              (o = u), (i = l ? '[' + a + ']' : '.' + a);
          }),
          { schema: n, parent: r, parentPath: o })
        : { parent: r, parentPath: t, schema: n };
}
class Dc extends Set {
    describe() {
        const t = [];
        for (const e of this.values()) t.push(Eo.isRef(e) ? e.describe() : e);
        return t;
    }
    resolveAll(t) {
        let e = [];
        for (const s of this.values()) e.push(t(s));
        return e;
    }
    clone() {
        return new Dc(this.values());
    }
    merge(t, e) {
        const s = this.clone();
        return t.forEach((r) => s.add(r)), e.forEach((r) => s.delete(r)), s;
    }
}
function Bo(n, t = new Map()) {
    if (Eg(n) || !n || typeof n != 'object') return n;
    if (t.has(n)) return t.get(n);
    let e;
    if (n instanceof Date) (e = new Date(n.getTime())), t.set(n, e);
    else if (n instanceof RegExp) (e = new RegExp(n)), t.set(n, e);
    else if (Array.isArray(n)) {
        (e = new Array(n.length)), t.set(n, e);
        for (let s = 0; s < n.length; s++) e[s] = Bo(n[s], t);
    } else if (n instanceof Map) {
        (e = new Map()), t.set(n, e);
        for (const [s, r] of n.entries()) e.set(s, Bo(r, t));
    } else if (n instanceof Set) {
        (e = new Set()), t.set(n, e);
        for (const s of n) e.add(Bo(s, t));
    } else if (n instanceof Object) {
        (e = {}), t.set(n, e);
        for (const [s, r] of Object.entries(n)) e[s] = Bo(r, t);
    } else throw Error(`Unable to clone ${n}`);
    return e;
}
class Rs {
    constructor(t) {
        (this.type = void 0),
            (this.deps = []),
            (this.tests = void 0),
            (this.transforms = void 0),
            (this.conditions = []),
            (this._mutate = void 0),
            (this.internalTests = {}),
            (this._whitelist = new Dc()),
            (this._blacklist = new Dc()),
            (this.exclusiveTests = Object.create(null)),
            (this._typeCheck = void 0),
            (this.spec = void 0),
            (this.tests = []),
            (this.transforms = []),
            this.withMutation(() => {
                this.typeError(zs.notType);
            }),
            (this.type = t.type),
            (this._typeCheck = t.check),
            (this.spec = Object.assign(
                {
                    strip: !1,
                    strict: !1,
                    abortEarly: !0,
                    recursive: !0,
                    disableStackTrace: !1,
                    nullable: !1,
                    optional: !0,
                    coerce: !0,
                },
                t == null ? void 0 : t.spec
            )),
            this.withMutation((e) => {
                e.nonNullable();
            });
    }
    get _type() {
        return this.type;
    }
    clone(t) {
        if (this._mutate) return t && Object.assign(this.spec, t), this;
        const e = Object.create(Object.getPrototypeOf(this));
        return (
            (e.type = this.type),
            (e._typeCheck = this._typeCheck),
            (e._whitelist = this._whitelist.clone()),
            (e._blacklist = this._blacklist.clone()),
            (e.internalTests = Object.assign({}, this.internalTests)),
            (e.exclusiveTests = Object.assign({}, this.exclusiveTests)),
            (e.deps = [...this.deps]),
            (e.conditions = [...this.conditions]),
            (e.tests = [...this.tests]),
            (e.transforms = [...this.transforms]),
            (e.spec = Bo(Object.assign({}, this.spec, t))),
            e
        );
    }
    label(t) {
        let e = this.clone();
        return (e.spec.label = t), e;
    }
    meta(...t) {
        if (t.length === 0) return this.spec.meta;
        let e = this.clone();
        return (e.spec.meta = Object.assign(e.spec.meta || {}, t[0])), e;
    }
    withMutation(t) {
        let e = this._mutate;
        this._mutate = !0;
        let s = t(this);
        return (this._mutate = e), s;
    }
    concat(t) {
        if (!t || t === this) return this;
        if (t.type !== this.type && this.type !== 'mixed')
            throw new TypeError(
                `You cannot \`concat()\` schema's of different types: ${this.type} and ${t.type}`
            );
        let e = this,
            s = t.clone();
        const r = Object.assign({}, e.spec, s.spec);
        return (
            (s.spec = r),
            (s.internalTests = Object.assign(
                {},
                e.internalTests,
                s.internalTests
            )),
            (s._whitelist = e._whitelist.merge(t._whitelist, t._blacklist)),
            (s._blacklist = e._blacklist.merge(t._blacklist, t._whitelist)),
            (s.tests = e.tests),
            (s.exclusiveTests = e.exclusiveTests),
            s.withMutation((o) => {
                t.tests.forEach((i) => {
                    o.test(i.OPTIONS);
                });
            }),
            (s.transforms = [...e.transforms, ...s.transforms]),
            s
        );
    }
    isType(t) {
        return t == null
            ? !!(
                  (this.spec.nullable && t === null) ||
                  (this.spec.optional && t === void 0)
              )
            : this._typeCheck(t);
    }
    resolve(t) {
        let e = this;
        if (e.conditions.length) {
            let s = e.conditions;
            (e = e.clone()),
                (e.conditions = []),
                (e = s.reduce((r, o) => o.resolve(r, t), e)),
                (e = e.resolve(t));
        }
        return e;
    }
    resolveOptions(t) {
        var e, s, r, o;
        return Object.assign({}, t, {
            from: t.from || [],
            strict: (e = t.strict) != null ? e : this.spec.strict,
            abortEarly: (s = t.abortEarly) != null ? s : this.spec.abortEarly,
            recursive: (r = t.recursive) != null ? r : this.spec.recursive,
            disableStackTrace:
                (o = t.disableStackTrace) != null
                    ? o
                    : this.spec.disableStackTrace,
        });
    }
    cast(t, e = {}) {
        let s = this.resolve(Object.assign({ value: t }, e)),
            r = e.assert === 'ignore-optionality',
            o = s._cast(t, e);
        if (e.assert !== !1 && !s.isType(o)) {
            if (r && Rc(o)) return o;
            let i = hr(t),
                a = hr(o);
            throw new TypeError(
                `The value of ${
                    e.path || 'field'
                } could not be cast to a value that satisfies the schema type: "${
                    s.type
                }". 

attempted value: ${i} 
` + (a !== i ? `result of cast: ${a}` : '')
            );
        }
        return o;
    }
    _cast(t, e) {
        let s =
            t === void 0
                ? t
                : this.transforms.reduce((r, o) => o.call(this, r, t, this), t);
        return s === void 0 && (s = this.getDefault(e)), s;
    }
    _validate(t, e = {}, s, r) {
        let { path: o, originalValue: i = t, strict: a = this.spec.strict } = e,
            l = t;
        a || (l = this._cast(l, Object.assign({ assert: !1 }, e)));
        let c = [];
        for (let u of Object.values(this.internalTests)) u && c.push(u);
        this.runTests(
            { path: o, value: l, originalValue: i, options: e, tests: c },
            s,
            (u) => {
                if (u.length) return r(u, l);
                this.runTests(
                    {
                        path: o,
                        value: l,
                        originalValue: i,
                        options: e,
                        tests: this.tests,
                    },
                    s,
                    r
                );
            }
        );
    }
    runTests(t, e, s) {
        let r = !1,
            { tests: o, value: i, originalValue: a, path: l, options: c } = t,
            u = (m) => {
                r || ((r = !0), e(m, i));
            },
            h = (m) => {
                r || ((r = !0), s(m, i));
            },
            d = o.length,
            p = [];
        if (!d) return h([]);
        let f = {
            value: i,
            originalValue: a,
            path: l,
            options: c,
            schema: this,
        };
        for (let m = 0; m < o.length; m++) {
            const g = o[m];
            g(f, u, function (b) {
                b && (Array.isArray(b) ? p.push(...b) : p.push(b)),
                    --d <= 0 && h(p);
            });
        }
    }
    asNestedTest({
        key: t,
        index: e,
        parent: s,
        parentPath: r,
        originalParent: o,
        options: i,
    }) {
        const a = t ?? e;
        if (a == null)
            throw TypeError(
                'Must include `key` or `index` for nested validations'
            );
        const l = typeof a == 'number';
        let c = s[a];
        const u = Object.assign({}, i, {
            strict: !0,
            parent: s,
            value: c,
            originalValue: o[a],
            key: void 0,
            [l ? 'index' : 'key']: a,
            path:
                l || a.includes('.')
                    ? `${r || ''}[${c ? a : `"${a}"`}]`
                    : (r ? `${r}.` : '') + t,
        });
        return (h, d, p) => this.resolve(u)._validate(c, u, d, p);
    }
    validate(t, e) {
        var s;
        let r = this.resolve(Object.assign({}, e, { value: t })),
            o =
                (s = e == null ? void 0 : e.disableStackTrace) != null
                    ? s
                    : r.spec.disableStackTrace;
        return new Promise((i, a) =>
            r._validate(
                t,
                e,
                (l, c) => {
                    gn.isError(l) && (l.value = c), a(l);
                },
                (l, c) => {
                    l.length ? a(new gn(l, c, void 0, void 0, o)) : i(c);
                }
            )
        );
    }
    validateSync(t, e) {
        var s;
        let r = this.resolve(Object.assign({}, e, { value: t })),
            o,
            i =
                (s = e == null ? void 0 : e.disableStackTrace) != null
                    ? s
                    : r.spec.disableStackTrace;
        return (
            r._validate(
                t,
                Object.assign({}, e, { sync: !0 }),
                (a, l) => {
                    throw (gn.isError(a) && (a.value = l), a);
                },
                (a, l) => {
                    if (a.length) throw new gn(a, t, void 0, void 0, i);
                    o = l;
                }
            ),
            o
        );
    }
    isValid(t, e) {
        return this.validate(t, e).then(
            () => !0,
            (s) => {
                if (gn.isError(s)) return !1;
                throw s;
            }
        );
    }
    isValidSync(t, e) {
        try {
            return this.validateSync(t, e), !0;
        } catch (s) {
            if (gn.isError(s)) return !1;
            throw s;
        }
    }
    _getDefault(t) {
        let e = this.spec.default;
        return e == null ? e : typeof e == 'function' ? e.call(this, t) : Bo(e);
    }
    getDefault(t) {
        return this.resolve(t || {})._getDefault(t);
    }
    default(t) {
        return arguments.length === 0
            ? this._getDefault()
            : this.clone({ default: t });
    }
    strict(t = !0) {
        return this.clone({ strict: t });
    }
    nullability(t, e) {
        const s = this.clone({ nullable: t });
        return (
            (s.internalTests.nullable = Oo({
                message: e,
                name: 'nullable',
                test(r) {
                    return r === null ? this.schema.spec.nullable : !0;
                },
            })),
            s
        );
    }
    optionality(t, e) {
        const s = this.clone({ optional: t });
        return (
            (s.internalTests.optionality = Oo({
                message: e,
                name: 'optionality',
                test(r) {
                    return r === void 0 ? this.schema.spec.optional : !0;
                },
            })),
            s
        );
    }
    optional() {
        return this.optionality(!0);
    }
    defined(t = zs.defined) {
        return this.optionality(!1, t);
    }
    nullable() {
        return this.nullability(!0);
    }
    nonNullable(t = zs.notNull) {
        return this.nullability(!1, t);
    }
    required(t = zs.required) {
        return this.clone().withMutation((e) => e.nonNullable(t).defined(t));
    }
    notRequired() {
        return this.clone().withMutation((t) => t.nullable().optional());
    }
    transform(t) {
        let e = this.clone();
        return e.transforms.push(t), e;
    }
    test(...t) {
        let e;
        if (
            (t.length === 1
                ? typeof t[0] == 'function'
                    ? (e = { test: t[0] })
                    : (e = t[0])
                : t.length === 2
                ? (e = { name: t[0], test: t[1] })
                : (e = { name: t[0], message: t[1], test: t[2] }),
            e.message === void 0 && (e.message = zs.default),
            typeof e.test != 'function')
        )
            throw new TypeError('`test` is a required parameters');
        let s = this.clone(),
            r = Oo(e),
            o = e.exclusive || (e.name && s.exclusiveTests[e.name] === !0);
        if (e.exclusive && !e.name)
            throw new TypeError(
                'Exclusive tests must provide a unique `name` identifying the test'
            );
        return (
            e.name && (s.exclusiveTests[e.name] = !!e.exclusive),
            (s.tests = s.tests.filter(
                (i) =>
                    !(
                        i.OPTIONS.name === e.name &&
                        (o || i.OPTIONS.test === r.OPTIONS.test)
                    )
            )),
            s.tests.push(r),
            s
        );
    }
    when(t, e) {
        !Array.isArray(t) && typeof t != 'string' && ((e = t), (t = '.'));
        let s = this.clone(),
            r = eI(t).map((o) => new Eo(o));
        return (
            r.forEach((o) => {
                o.isSibling && s.deps.push(o.key);
            }),
            s.conditions.push(
                typeof e == 'function' ? new Ac(r, e) : Ac.fromOptions(r, e)
            ),
            s
        );
    }
    typeError(t) {
        let e = this.clone();
        return (
            (e.internalTests.typeError = Oo({
                message: t,
                name: 'typeError',
                skipAbsent: !0,
                test(s) {
                    return this.schema._typeCheck(s)
                        ? !0
                        : this.createError({
                              params: { type: this.schema.type },
                          });
                },
            })),
            e
        );
    }
    oneOf(t, e = zs.oneOf) {
        let s = this.clone();
        return (
            t.forEach((r) => {
                s._whitelist.add(r), s._blacklist.delete(r);
            }),
            (s.internalTests.whiteList = Oo({
                message: e,
                name: 'oneOf',
                skipAbsent: !0,
                test(r) {
                    let o = this.schema._whitelist,
                        i = o.resolveAll(this.resolve);
                    return i.includes(r)
                        ? !0
                        : this.createError({
                              params: {
                                  values: Array.from(o).join(', '),
                                  resolved: i,
                              },
                          });
                },
            })),
            s
        );
    }
    notOneOf(t, e = zs.notOneOf) {
        let s = this.clone();
        return (
            t.forEach((r) => {
                s._blacklist.add(r), s._whitelist.delete(r);
            }),
            (s.internalTests.blacklist = Oo({
                message: e,
                name: 'notOneOf',
                test(r) {
                    let o = this.schema._blacklist,
                        i = o.resolveAll(this.resolve);
                    return i.includes(r)
                        ? this.createError({
                              params: {
                                  values: Array.from(o).join(', '),
                                  resolved: i,
                              },
                          })
                        : !0;
                },
            })),
            s
        );
    }
    strip(t = !0) {
        let e = this.clone();
        return (e.spec.strip = t), e;
    }
    describe(t) {
        const e = (t ? this.resolve(t) : this).clone(),
            { label: s, meta: r, optional: o, nullable: i } = e.spec;
        return {
            meta: r,
            label: s,
            optional: o,
            nullable: i,
            default: e.getDefault(t),
            type: e.type,
            oneOf: e._whitelist.describe(),
            notOneOf: e._blacklist.describe(),
            tests: e.tests
                .map((l) => ({
                    name: l.OPTIONS.name,
                    params: l.OPTIONS.params,
                }))
                .filter(
                    (l, c, u) => u.findIndex((h) => h.name === l.name) === c
                ),
        };
    }
}
Rs.prototype.__isYupSchema__ = !0;
for (const n of ['validate', 'validateSync'])
    Rs.prototype[`${n}At`] = function (t, e, s = {}) {
        const {
            parent: r,
            parentPath: o,
            schema: i,
        } = tY(this, t, e, s.context);
        return i[n](r && r[o], Object.assign({}, s, { parent: r, path: t }));
    };
for (const n of ['equals', 'is']) Rs.prototype[n] = Rs.prototype.oneOf;
for (const n of ['not', 'nope']) Rs.prototype[n] = Rs.prototype.notOneOf;
let eY = (n) => n != +n;
function Kl() {
    return new sI();
}
class sI extends Rs {
    constructor() {
        super({
            type: 'number',
            check(t) {
                return (
                    t instanceof Number && (t = t.valueOf()),
                    typeof t == 'number' && !eY(t)
                );
            },
        }),
            this.withMutation(() => {
                this.transform((t, e, s) => {
                    if (!s.spec.coerce) return t;
                    let r = t;
                    if (typeof r == 'string') {
                        if (((r = r.replace(/\s/g, '')), r === '')) return NaN;
                        r = +r;
                    }
                    return s.isType(r) || r === null ? r : parseFloat(r);
                });
            });
    }
    min(t, e = er.min) {
        return this.test({
            message: e,
            name: 'min',
            exclusive: !0,
            params: { min: t },
            skipAbsent: !0,
            test(s) {
                return s >= this.resolve(t);
            },
        });
    }
    max(t, e = er.max) {
        return this.test({
            message: e,
            name: 'max',
            exclusive: !0,
            params: { max: t },
            skipAbsent: !0,
            test(s) {
                return s <= this.resolve(t);
            },
        });
    }
    lessThan(t, e = er.lessThan) {
        return this.test({
            message: e,
            name: 'max',
            exclusive: !0,
            params: { less: t },
            skipAbsent: !0,
            test(s) {
                return s < this.resolve(t);
            },
        });
    }
    moreThan(t, e = er.moreThan) {
        return this.test({
            message: e,
            name: 'min',
            exclusive: !0,
            params: { more: t },
            skipAbsent: !0,
            test(s) {
                return s > this.resolve(t);
            },
        });
    }
    positive(t = er.positive) {
        return this.moreThan(0, t);
    }
    negative(t = er.negative) {
        return this.lessThan(0, t);
    }
    integer(t = er.integer) {
        return this.test({
            name: 'integer',
            message: t,
            skipAbsent: !0,
            test: (e) => Number.isInteger(e),
        });
    }
    truncate() {
        return this.transform((t) => (Rc(t) ? t : t | 0));
    }
    round(t) {
        var e;
        let s = ['ceil', 'floor', 'round', 'trunc'];
        if (
            ((t = ((e = t) == null ? void 0 : e.toLowerCase()) || 'round'),
            t === 'trunc')
        )
            return this.truncate();
        if (s.indexOf(t.toLowerCase()) === -1)
            throw new TypeError(
                'Only valid options for round() are: ' + s.join(', ')
            );
        return this.transform((r) => (Rc(r) ? r : Math[t](r)));
    }
}
Kl.prototype = sI.prototype;
const nY =
    /^(\d{4}|[+-]\d{6})(?:-?(\d{2})(?:-?(\d{2}))?)?(?:[ T]?(\d{2}):?(\d{2})(?::?(\d{2})(?:[,.](\d{1,}))?)?(?:(Z)|([+-])(\d{2})(?::?(\d{2}))?)?)?$/;
function Ps(n, t = 0) {
    return Number(n) || t;
}
function sY(n) {
    const t = nY.exec(n);
    if (!t) return Date.parse ? Date.parse(n) : Number.NaN;
    const e = {
        year: Ps(t[1]),
        month: Ps(t[2], 1) - 1,
        day: Ps(t[3], 1),
        hour: Ps(t[4]),
        minute: Ps(t[5]),
        second: Ps(t[6]),
        millisecond: t[7] ? Ps(t[7].substring(0, 3)) : 0,
        z: t[8] || void 0,
        plusMinus: t[9] || void 0,
        hourOffset: Ps(t[10]),
        minuteOffset: Ps(t[11]),
    };
    if (e.z === void 0 && e.plusMinus === void 0)
        return new Date(
            e.year,
            e.month,
            e.day,
            e.hour,
            e.minute,
            e.second,
            e.millisecond
        ).valueOf();
    let s = 0;
    return (
        e.z !== 'Z' &&
            e.plusMinus !== void 0 &&
            ((s = e.hourOffset * 60 + e.minuteOffset),
            e.plusMinus === '+' && (s = 0 - s)),
        Date.UTC(
            e.year,
            e.month,
            e.day,
            e.hour,
            e.minute + s,
            e.second,
            e.millisecond
        )
    );
}
let rY = new Date(''),
    oY = (n) => Object.prototype.toString.call(n) === '[object Date]';
class Ah extends Rs {
    constructor() {
        super({
            type: 'date',
            check(t) {
                return oY(t) && !isNaN(t.getTime());
            },
        }),
            this.withMutation(() => {
                this.transform((t, e, s) =>
                    !s.spec.coerce || s.isType(t) || t === null
                        ? t
                        : ((t = sY(t)),
                          isNaN(t) ? Ah.INVALID_DATE : new Date(t))
                );
            });
    }
    prepareParam(t, e) {
        let s;
        if (Eo.isRef(t)) s = t;
        else {
            let r = this.cast(t);
            if (!this._typeCheck(r))
                throw new TypeError(
                    `\`${e}\` must be a Date or a value that can be \`cast()\` to a Date`
                );
            s = r;
        }
        return s;
    }
    min(t, e = op.min) {
        let s = this.prepareParam(t, 'min');
        return this.test({
            message: e,
            name: 'min',
            exclusive: !0,
            params: { min: t },
            skipAbsent: !0,
            test(r) {
                return r >= this.resolve(s);
            },
        });
    }
    max(t, e = op.max) {
        let s = this.prepareParam(t, 'max');
        return this.test({
            message: e,
            name: 'max',
            exclusive: !0,
            params: { max: t },
            skipAbsent: !0,
            test(r) {
                return r <= this.resolve(s);
            },
        });
    }
}
Ah.INVALID_DATE = rY;
Ah.prototype;
function iY(n, t = []) {
    let e = [],
        s = new Set(),
        r = new Set(t.map(([i, a]) => `${i}-${a}`));
    function o(i, a) {
        let l = Jr.split(i)[0];
        s.add(l), r.has(`${a}-${l}`) || e.push([a, l]);
    }
    for (const i of Object.keys(n)) {
        let a = n[i];
        s.add(i),
            Eo.isRef(a) && a.isSibling
                ? o(a.path, i)
                : Eg(a) && 'deps' in a && a.deps.forEach((l) => o(l, i));
    }
    return W9.array(Array.from(s), e).reverse();
}
function $b(n, t) {
    let e = 1 / 0;
    return (
        n.some((s, r) => {
            var o;
            if ((o = t.path) != null && o.includes(s)) return (e = r), !0;
        }),
        e
    );
}
function rI(n) {
    return (t, e) => $b(n, t) - $b(n, e);
}
const aY = (n, t, e) => {
    if (typeof n != 'string') return n;
    let s = n;
    try {
        s = JSON.parse(n);
    } catch {}
    return e.isType(s) ? s : n;
};
function Xl(n) {
    if ('fields' in n) {
        const t = {};
        for (const [e, s] of Object.entries(n.fields)) t[e] = Xl(s);
        return n.setFields(t);
    }
    if (n.type === 'array') {
        const t = n.optional();
        return t.innerType && (t.innerType = Xl(t.innerType)), t;
    }
    return n.type === 'tuple'
        ? n.optional().clone({ types: n.spec.types.map(Xl) })
        : 'optional' in n
        ? n.optional()
        : n;
}
const lY = (n, t) => {
    const e = [...Jr.normalizePath(t)];
    if (e.length === 1) return e[0] in n;
    let s = e.pop(),
        r = Jr.getter(Jr.join(e), !0)(n);
    return !!(r && s in r);
};
let Nb = (n) => Object.prototype.toString.call(n) === '[object Object]';
function cY(n, t) {
    let e = Object.keys(n.fields);
    return Object.keys(t).filter((s) => e.indexOf(s) === -1);
}
const uY = rI([]);
function oI(n) {
    return new iI(n);
}
class iI extends Rs {
    constructor(t) {
        super({
            type: 'object',
            check(e) {
                return Nb(e) || typeof e == 'function';
            },
        }),
            (this.fields = Object.create(null)),
            (this._sortErrors = uY),
            (this._nodes = []),
            (this._excludedEdges = []),
            this.withMutation(() => {
                t && this.shape(t);
            });
    }
    _cast(t, e = {}) {
        var s;
        let r = super._cast(t, e);
        if (r === void 0) return this.getDefault(e);
        if (!this._typeCheck(r)) return r;
        let o = this.fields,
            i = (s = e.stripUnknown) != null ? s : this.spec.noUnknown,
            a = [].concat(
                this._nodes,
                Object.keys(r).filter((h) => !this._nodes.includes(h))
            ),
            l = {},
            c = Object.assign({}, e, {
                parent: l,
                __validating: e.__validating || !1,
            }),
            u = !1;
        for (const h of a) {
            let d = o[h],
                p = h in r;
            if (d) {
                let f,
                    m = r[h];
                (c.path = (e.path ? `${e.path}.` : '') + h),
                    (d = d.resolve({
                        value: m,
                        context: e.context,
                        parent: l,
                    }));
                let g = d instanceof Rs ? d.spec : void 0,
                    y = g == null ? void 0 : g.strict;
                if (g != null && g.strip) {
                    u = u || h in r;
                    continue;
                }
                (f = !e.__validating || !y ? d.cast(r[h], c) : r[h]),
                    f !== void 0 && (l[h] = f);
            } else p && !i && (l[h] = r[h]);
            (p !== h in l || l[h] !== r[h]) && (u = !0);
        }
        return u ? l : r;
    }
    _validate(t, e = {}, s, r) {
        let {
            from: o = [],
            originalValue: i = t,
            recursive: a = this.spec.recursive,
        } = e;
        (e.from = [{ schema: this, value: i }, ...o]),
            (e.__validating = !0),
            (e.originalValue = i),
            super._validate(t, e, s, (l, c) => {
                if (!a || !Nb(c)) {
                    r(l, c);
                    return;
                }
                i = i || c;
                let u = [];
                for (let h of this._nodes) {
                    let d = this.fields[h];
                    !d ||
                        Eo.isRef(d) ||
                        u.push(
                            d.asNestedTest({
                                options: e,
                                key: h,
                                parent: c,
                                parentPath: e.path,
                                originalParent: i,
                            })
                        );
                }
                this.runTests(
                    { tests: u, value: c, originalValue: i, options: e },
                    s,
                    (h) => {
                        r(h.sort(this._sortErrors).concat(l), c);
                    }
                );
            });
    }
    clone(t) {
        const e = super.clone(t);
        return (
            (e.fields = Object.assign({}, this.fields)),
            (e._nodes = this._nodes),
            (e._excludedEdges = this._excludedEdges),
            (e._sortErrors = this._sortErrors),
            e
        );
    }
    concat(t) {
        let e = super.concat(t),
            s = e.fields;
        for (let [r, o] of Object.entries(this.fields)) {
            const i = s[r];
            s[r] = i === void 0 ? o : i;
        }
        return e.withMutation((r) =>
            r.setFields(s, [...this._excludedEdges, ...t._excludedEdges])
        );
    }
    _getDefault(t) {
        if ('default' in this.spec) return super._getDefault(t);
        if (!this._nodes.length) return;
        let e = {};
        return (
            this._nodes.forEach((s) => {
                var r;
                const o = this.fields[s];
                let i = t;
                (r = i) != null &&
                    r.value &&
                    (i = Object.assign({}, i, {
                        parent: i.value,
                        value: i.value[s],
                    })),
                    (e[s] = o && 'getDefault' in o ? o.getDefault(i) : void 0);
            }),
            e
        );
    }
    setFields(t, e) {
        let s = this.clone();
        return (
            (s.fields = t),
            (s._nodes = iY(t, e)),
            (s._sortErrors = rI(Object.keys(t))),
            e && (s._excludedEdges = e),
            s
        );
    }
    shape(t, e = []) {
        return this.clone().withMutation((s) => {
            let r = s._excludedEdges;
            return (
                e.length &&
                    (Array.isArray(e[0]) || (e = [e]),
                    (r = [...s._excludedEdges, ...e])),
                s.setFields(Object.assign(s.fields, t), r)
            );
        });
    }
    partial() {
        const t = {};
        for (const [e, s] of Object.entries(this.fields))
            t[e] =
                'optional' in s && s.optional instanceof Function
                    ? s.optional()
                    : s;
        return this.setFields(t);
    }
    deepPartial() {
        return Xl(this);
    }
    pick(t) {
        const e = {};
        for (const s of t) this.fields[s] && (e[s] = this.fields[s]);
        return this.setFields(
            e,
            this._excludedEdges.filter(
                ([s, r]) => t.includes(s) && t.includes(r)
            )
        );
    }
    omit(t) {
        const e = [];
        for (const s of Object.keys(this.fields)) t.includes(s) || e.push(s);
        return this.pick(e);
    }
    from(t, e, s) {
        let r = Jr.getter(t, !0);
        return this.transform((o) => {
            if (!o) return o;
            let i = o;
            return (
                lY(o, t) &&
                    ((i = Object.assign({}, o)),
                    s || delete i[t],
                    (i[e] = r(o))),
                i
            );
        });
    }
    json() {
        return this.transform(aY);
    }
    noUnknown(t = !0, e = ip.noUnknown) {
        typeof t != 'boolean' && ((e = t), (t = !0));
        let s = this.test({
            name: 'noUnknown',
            exclusive: !0,
            message: e,
            test(r) {
                if (r == null) return !0;
                const o = cY(this.schema, r);
                return (
                    !t ||
                    o.length === 0 ||
                    this.createError({ params: { unknown: o.join(', ') } })
                );
            },
        });
        return (s.spec.noUnknown = t), s;
    }
    unknown(t = !0, e = ip.noUnknown) {
        return this.noUnknown(!t, e);
    }
    transformKeys(t) {
        return this.transform((e) => {
            if (!e) return e;
            const s = {};
            for (const r of Object.keys(e)) s[t(r)] = e[r];
            return s;
        });
    }
    camelCase() {
        return this.transformKeys(td.camelCase);
    }
    snakeCase() {
        return this.transformKeys(td.snakeCase);
    }
    constantCase() {
        return this.transformKeys((t) => td.snakeCase(t).toUpperCase());
    }
    describe(t) {
        const e = (t ? this.resolve(t) : this).clone(),
            s = super.describe(t);
        s.fields = {};
        for (const [o, i] of Object.entries(e.fields)) {
            var r;
            let a = t;
            (r = a) != null &&
                r.value &&
                (a = Object.assign({}, a, {
                    parent: a.value,
                    value: a.value[o],
                })),
                (s.fields[o] = i.describe(a));
        }
        return s;
    }
}
oI.prototype = iI.prototype;
const aI = Jt('#input-epochs'),
    lI = Jt('#input-learning-rate'),
    cI = Jt('#select-input-batch'),
    hY = Jt('#advanced-parameters-label'),
    dY = Jt('#advanced-parameters'),
    Rh = Jt('#train'),
    pY = Jt('#training-progress-bar');
Rh.addEventListener('click', S9);
hY.addEventListener('click', () => {
    dY.classList.toggle('advanced-active');
});
function fY(n) {
    (Rh.disabled = n), (aI.disabled = n), (lI.disabled = n), (cI.disabled = n);
}
function mY(n, t) {
    const e = uI().epochs,
        s = (n / (e - 1)) * 100;
    (pY.style.width = s + '%'),
        Fr(`Época: ${n}, Acurácia: ${t.acc}, Perda: ${t.loss}`),
        Ts(
            `Mantenha esta janela aberta e visível para processar o treinamento!
Época: ${n}, Acurácia: ${t.acc}, Perda: ${t.loss}`,
            0,
            to.WARNING
        );
}
function gY() {
    pe.examplesCount.forEach((n) => {
        Fr(`Classe: ${n.userClassName} - Capturas: ${n.count}`);
    });
}
function uI() {
    const n = oI().shape({
            epochs: Kl()
                .required('É necessário informar o número de epocas.')
                .integer('O número de epocas deve ser um número inteiro.')
                .min(1, 'O número mínimo de epocas é 1.')
                .max(9999, 'O número máximo de epocas é 9999.'),
            batchSize: Kl()
                .required('É necessário informar o tamanho do lote.')
                .oneOf([4, 16, 32, 64], 'O tamanho do lote não é válido.'),
            learningRate: Kl()
                .required('É necessário informar a taxa de aprendizado.')
                .min(1e-5, 'A taxa mínima de aprendizado é 0.00001.')
                .max(0.1, 'A taxa máxima de aprendizado é 0.1.'),
        }),
        t = {
            epochs: parseInt(aI.value),
            batchSize: parseInt(cI.value),
            learningRate: parseFloat(lI.value),
        };
    try {
        return (
            n.validateSync(t),
            Ts(
                'Treinamento iniciado! Mantenha esta janela aberta e visível!',
                0,
                to.WARNING
            ),
            t
        );
    } catch (e) {
        return (
            console.log(
                'Parâmetros avançados inválidos, usando valores padrão.'
            ),
            console.log(e.errors),
            Ts(
                'Parâmetros avançados inválidos, usando valores padrão.',
                0,
                to.ERROR
            ),
            { epochs: 10, batchSize: 4, learningRate: 0.001 }
        );
    }
}
function yY(n) {
    (Rh.textContent = 'Treinamento Concluído!'),
        Ts('Treinamento concluído com sucesso!', 5e3),
        Fr(
            `Treinamento concluído com sucesso! Acurácia: ${
                n.history.acc[n.params.epochs - 1]
            }, Perda: ${n.history.loss[n.params.epochs - 1]}`
        );
}
function bY() {
    Rh.textContent = 'Treinando...';
}
const Ws = {
    getAdvancedParameters: uI,
    disableTrainFields: fY,
    setTrainingStatusDone: yY,
    setTrainingStatusStarted: bY,
    logProgress: mY,
    logImagesPerClass: gY,
};
function hI() {
    const n = _n.getUserClassName().toUpperCase();
    _n.toggleInputPreparationStatus(!0),
        Ws.disableTrainFields(!0),
        _n.startProcessPlayVideo(),
        js.setDisabledMarquee(!0),
        Fr(`Recorte aplicado: ${js.getCropDefinition()}`),
        js.replicateMask(),
        _n.setVideoTooltip(!1),
        _n.createCardClass(n),
        pe.classNames.push(n),
        pe.examplesCount.push({ userClassName: n, count: 0 }),
        (pe.videoPlaying = !0),
        Ts(
            'Mantenha esta janela aberta e visível para processar o vídeo!',
            0,
            to.WARNING
        ),
        xY()
            .then(() => {
                Ts('Processamento Concluído com Sucesso!', 3e3, to.WARNING);
            })
            .catch((t) => {
                console.error('Error during data gathering:', t),
                    Ts('Erro no processamento do vídeo!', 3e3, to.ERROR);
            });
}
function xY() {
    return new Promise((n, t) => {
        function e() {
            if (pe.videoPlaying) {
                const s = _n.getProcessVideo(),
                    r = kI(s),
                    o = _n.getCardList();
                pe.trainingDataInputs.push(r),
                    pe.trainingDataOutputs.push(o.length - 1),
                    pe.examplesCount.at(-1).count++,
                    (o.at(-1).lastChild.innerHTML = `${
                        pe.examplesCount.at(-1).count
                    } capturas`),
                    window.requestAnimationFrame(e);
            } else n();
        }
        e();
    });
}
const Qr = Jt('#process-video'),
    _g = Jt('#process-video-file'),
    wY = Jt('#progress-bar'),
    vY = Jt('#card-classes'),
    _o = Jt('#class-name'),
    dI = Jt('#process-class'),
    Tb = Jt('#video-tooltip');
_o.addEventListener('input', Rg);
_o.addEventListener('keyup', (n) => {
    (n.key === 'Enter' || n.keyCode === 13) && hI();
});
dI.addEventListener('click', hI);
_g.addEventListener('change', (n) => vI(n, 'process'));
Qr.addEventListener('pause', gI);
const Ag = [];
function kY() {
    Qr.play();
}
function SY() {
    return Qr;
}
Qr.addEventListener('timeupdate', function () {
    let n = (Qr.currentTime / Qr.duration) * 100;
    wY.style.width = n + '%';
});
function IY(n) {
    _o.value = n;
}
function Dh(n) {
    (_o.disabled = n), (_g.disabled = n);
}
function pI(n) {
    if (n) {
        Tb.classList.remove('tooltip-hidden');
        return;
    }
    Tb.classList.add('tooltip-hidden');
}
function CY(n) {
    (Qr.src = n), js.getDisabledMarquee() || pI(!0);
}
function Yl(n) {
    dI.disabled = n;
}
function Rg() {
    if ((Dh(!1), Yl(!0), _o.value.length < 3)) {
        Yl(!0);
        return;
    }
    if (_g.files[0] == null) {
        Yl(!0);
        return;
    }
    fI(!1);
}
function fI(n) {
    Yl(n), Dh(n), n === !0 && (_o.value = '');
}
function mI() {
    Ag.length >= 2 && Ws.disableTrainFields(!1);
}
function $Y(n) {
    const t = K7('.card-class');
    t.forEach((e) => {
        e.classList.remove('highlight-class');
    }),
        t[n].classList.add('highlight-class');
}
function NY(n) {
    const t = document.createElement('div'),
        e = document.createElement('p'),
        s = document.createElement('p');
    t.setAttribute('class', 'card-class'),
        vY.appendChild(t),
        t.appendChild(e),
        t.appendChild(s),
        (e.innerHTML = n),
        Ag.push(t);
}
function gI() {
    (pe.videoPlaying = !1), Dh(!1), Rg(), mI();
}
function TY() {
    return _o.value;
}
function EY() {
    return Ag;
}
const _n = {
        getCardList: EY,
        checkCardListLength: mI,
        configProcessVideo: CY,
        createCardClass: NY,
        disableInputProcess: Dh,
        setVideoTooltip: pI,
        enableProcessButton: Rg,
        getUserClassName: TY,
        getProcessVideo: SY,
        onPausePreparationVideo: gI,
        startProcessPlayVideo: kY,
        toggleInputPreparationStatus: fI,
        highlightCard: $Y,
        setClassName: IY,
    },
    to = {
        WARNING: ['#000000', '#f5ae00'],
        SUCCESS: ['#ffffff', '#248642'],
        ERROR: ['#ffffff', '#8d3005'],
    },
    Zl = Jt('#status'),
    _Y = Jt('#status p'),
    ed = Jt('#log');
function AY(n) {
    setTimeout(() => {
        Zl.hidden = !0;
    }, n);
}
function Ts(n, t = 200, e = ['#ffffff', '#248642']) {
    (Zl.hidden = !1),
        (Zl.style.color = e[0]),
        (Zl.style.backgroundColor = e[1]),
        (_Y.innerText = n),
        t > 0 && AY(t);
}
function Fr(n) {
    const e = `[${new Date().toLocaleString()}] ${n}
`;
    wI(e), (ed.innerHTML += `<p>${e}</p>`), (ed.scrollTop = ed.scrollHeight);
}
function yI(n) {
    return n === 'process'
        ? (_n.enableProcessButton(), !0)
        : (Rn.disablePredictionButton(!1), !1);
}
let Xr = PF();
const bI = 224,
    xI = 224,
    pe = {
        mobilenet: void 0,
        videoPlaying: !1,
        trainingDataInputs: [],
        trainingDataOutputs: [],
        examplesCount: [],
        classNames: [],
    };
function RY(n) {
    localStorage.removeItem(n);
}
async function DY() {
    const n = '../graph_model/mobilenet';
    (pe.mobilenet = await TL(n, { fromTFHub: !0 })),
        Ts('Recursos carregados com sucesso!', 5e3),
        Y(function () {
            let t = pe.mobilenet.predict(Se([1, xI, bI, 3]));
            console.log(t.shape);
        });
}
function OY(n, t) {
    const e = new Promise((s) => {
        t.onloadedmetadata = () => {
            const r = { width: t.videoWidth, height: t.videoHeight },
                o = js.getProcessMask();
            (o.width = 462), (o.height = 260);
            const i = js.getValidationMask();
            (i.width = 462),
                (i.height = 260),
                t.play(),
                (t.onplay = function () {
                    o.hidden = !1;
                }),
                t.pause(),
                s({
                    duration: parseFloat(t.duration).toFixed(2),
                    dimension: r,
                });
        };
    });
    return (t.src = window.URL.createObjectURL(n)), e;
}
function wI(n) {
    let t = localStorage.getItem('tempLogFile'),
        e = n;
    t !== null && (e = t.toString() + e),
        localStorage.setItem('tempLogFile', e);
}
function FY(n) {
    return yI(n) ? _n.getProcessVideo() : Rn.getValidationVideo();
}
function LY(n) {
    return n === 'process' ? 'Processamento' : 'Validação';
}
function Eb(n, t) {
    const e = LY(n);
    Fr(`
  Video de ${e} Carregado:
   ${t.fileName} |
    Tamanho: ${t.size}Mb | 
    Dimensão: ${t.dimension.width} x ${t.dimension.height} | 
    Duração: ${t.duration} segundos. 
    `),
        js.setCropDefinition(t.dimension.width, t.dimension.height);
}
async function vI(n, t) {
    const e = n.target.files[0];
    if (e) {
        const s = FY(t);
        OY(e, s).then((o) => {
            o.fileName = e.name;
            const i = zY(o.fileName.split('.')[0]).substring(0, 23);
            _n.setClassName(i),
                (o.size = (e.size / (1024 * 1024)).toFixed(2)),
                yI(t)
                    ? (_n.configProcessVideo(s.src), Eb(t, o))
                    : (Rn.configVideoValidation(s.src), Eb(t, o));
        });
    }
}
function PY(n) {
    const t = document.createElement('canvas'),
        e = t.getContext('2d'),
        s = js.getMarqueeRect(),
        r = n.videoWidth / n.width,
        o = s.x * r,
        i = s.y * r,
        a = s.width * r,
        l = s.height * r;
    return (
        (t.width = a), (t.height = l), e.drawImage(n, o, i, a, l, 0, 0, a, l), t
    );
}
function kI(n) {
    return Y(function () {
        const t = PY(n),
            e = VA(t),
            r = as.resizeBilinear(e, [xI, bI], !0).div(255);
        return pe.mobilenet.predict(r.expandDims()).squeeze();
    });
}
function zY(n) {
    const t = {
        á: 'a',
        à: 'a',
        ã: 'a',
        â: 'a',
        ä: 'a',
        é: 'e',
        è: 'e',
        ê: 'e',
        ë: 'e',
        í: 'i',
        ì: 'i',
        î: 'i',
        ï: 'i',
        ó: 'o',
        ò: 'o',
        õ: 'o',
        ô: 'o',
        ö: 'o',
        ú: 'u',
        ù: 'u',
        û: 'u',
        ü: 'u',
        ç: 'c',
        Á: 'A',
        À: 'A',
        Ã: 'A',
        Â: 'A',
        Ä: 'A',
        É: 'E',
        È: 'E',
        Ê: 'E',
        Ë: 'E',
        Í: 'I',
        Ì: 'I',
        Î: 'I',
        Ï: 'I',
        Ó: 'O',
        Ò: 'O',
        Õ: 'O',
        Ô: 'O',
        Ö: 'O',
        Ú: 'U',
        Ù: 'U',
        Û: 'U',
        Ü: 'U',
        Ç: 'C',
    };
    for (let e in t) {
        let s = new RegExp(e, 'g');
        n = n.replace(s, t[e]);
    }
    return n.replace(/[^a-zA-Z0-9_]/g, '');
}
(function () {
    RY('tempLogFile'), DY();
})();
